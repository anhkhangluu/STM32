
Firmware_IO_inputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08007900  08007900  00007900  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014240  080079c0  080079c0  000079c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  0801bc00  0801bc00  0001bc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc40  0801cc40  00020328  2**0
                  CONTENTS
  4 .ARM          00000000  0801cc40  0801cc40  00020328  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801cc40  0801cc40  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc40  0801cc40  0001cc40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cc44  0801cc44  0001cc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ram_vector   000000c0  20000000  20000000  00030000  2**2
                  ALLOC
  9 .data         00000268  200000c0  0801cc48  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000012a0  20000328  0801ceb0  00020328  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200015c8  0801ceb0  000215c8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038cf0  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000086d2  00000000  00000000  00059040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000249ed  00000000  00000000  00061712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e08  00000000  00000000  00086100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003388  00000000  00000000  00087f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024aca  00000000  00000000  0008b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c288  00000000  00000000  000afd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b1fe3  00000000  00000000  000ebfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0019dfc5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d80  00000000  00000000  0019e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080079c0 <__do_global_dtors_aux>:
 80079c0:	b510      	push	{r4, lr}
 80079c2:	4c06      	ldr	r4, [pc, #24]	; (80079dc <__do_global_dtors_aux+0x1c>)
 80079c4:	7823      	ldrb	r3, [r4, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <__do_global_dtors_aux+0x1a>
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <__do_global_dtors_aux+0x20>)
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <__do_global_dtors_aux+0x16>
 80079d0:	4804      	ldr	r0, [pc, #16]	; (80079e4 <__do_global_dtors_aux+0x24>)
 80079d2:	e000      	b.n	80079d6 <__do_global_dtors_aux+0x16>
 80079d4:	bf00      	nop
 80079d6:	2301      	movs	r3, #1
 80079d8:	7023      	strb	r3, [r4, #0]
 80079da:	bd10      	pop	{r4, pc}
 80079dc:	20000328 	.word	0x20000328
 80079e0:	00000000 	.word	0x00000000
 80079e4:	0801bbe8 	.word	0x0801bbe8

080079e8 <frame_dummy>:
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <frame_dummy+0x14>)
 80079ea:	b510      	push	{r4, lr}
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <frame_dummy+0x10>
 80079f0:	4903      	ldr	r1, [pc, #12]	; (8007a00 <frame_dummy+0x18>)
 80079f2:	4804      	ldr	r0, [pc, #16]	; (8007a04 <frame_dummy+0x1c>)
 80079f4:	e000      	b.n	80079f8 <frame_dummy+0x10>
 80079f6:	bf00      	nop
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	00000000 	.word	0x00000000
 8007a00:	2000032c 	.word	0x2000032c
 8007a04:	0801bbe8 	.word	0x0801bbe8

08007a08 <strlen>:
 8007a08:	2300      	movs	r3, #0
 8007a0a:	5cc2      	ldrb	r2, [r0, r3]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	d1fb      	bne.n	8007a0a <strlen+0x2>
 8007a12:	1e58      	subs	r0, r3, #1
 8007a14:	4770      	bx	lr
	...

08007a18 <__gnu_thumb1_case_sqi>:
 8007a18:	b402      	push	{r1}
 8007a1a:	4671      	mov	r1, lr
 8007a1c:	0849      	lsrs	r1, r1, #1
 8007a1e:	0049      	lsls	r1, r1, #1
 8007a20:	5609      	ldrsb	r1, [r1, r0]
 8007a22:	0049      	lsls	r1, r1, #1
 8007a24:	448e      	add	lr, r1
 8007a26:	bc02      	pop	{r1}
 8007a28:	4770      	bx	lr
 8007a2a:	46c0      	nop			; (mov r8, r8)

08007a2c <__gnu_thumb1_case_uqi>:
 8007a2c:	b402      	push	{r1}
 8007a2e:	4671      	mov	r1, lr
 8007a30:	0849      	lsrs	r1, r1, #1
 8007a32:	0049      	lsls	r1, r1, #1
 8007a34:	5c09      	ldrb	r1, [r1, r0]
 8007a36:	0049      	lsls	r1, r1, #1
 8007a38:	448e      	add	lr, r1
 8007a3a:	bc02      	pop	{r1}
 8007a3c:	4770      	bx	lr
 8007a3e:	46c0      	nop			; (mov r8, r8)

08007a40 <__gnu_thumb1_case_shi>:
 8007a40:	b403      	push	{r0, r1}
 8007a42:	4671      	mov	r1, lr
 8007a44:	0849      	lsrs	r1, r1, #1
 8007a46:	0040      	lsls	r0, r0, #1
 8007a48:	0049      	lsls	r1, r1, #1
 8007a4a:	5e09      	ldrsh	r1, [r1, r0]
 8007a4c:	0049      	lsls	r1, r1, #1
 8007a4e:	448e      	add	lr, r1
 8007a50:	bc03      	pop	{r0, r1}
 8007a52:	4770      	bx	lr

08007a54 <__gnu_thumb1_case_uhi>:
 8007a54:	b403      	push	{r0, r1}
 8007a56:	4671      	mov	r1, lr
 8007a58:	0849      	lsrs	r1, r1, #1
 8007a5a:	0040      	lsls	r0, r0, #1
 8007a5c:	0049      	lsls	r1, r1, #1
 8007a5e:	5a09      	ldrh	r1, [r1, r0]
 8007a60:	0049      	lsls	r1, r1, #1
 8007a62:	448e      	add	lr, r1
 8007a64:	bc03      	pop	{r0, r1}
 8007a66:	4770      	bx	lr

08007a68 <__udivsi3>:
 8007a68:	2200      	movs	r2, #0
 8007a6a:	0843      	lsrs	r3, r0, #1
 8007a6c:	428b      	cmp	r3, r1
 8007a6e:	d374      	bcc.n	8007b5a <__udivsi3+0xf2>
 8007a70:	0903      	lsrs	r3, r0, #4
 8007a72:	428b      	cmp	r3, r1
 8007a74:	d35f      	bcc.n	8007b36 <__udivsi3+0xce>
 8007a76:	0a03      	lsrs	r3, r0, #8
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	d344      	bcc.n	8007b06 <__udivsi3+0x9e>
 8007a7c:	0b03      	lsrs	r3, r0, #12
 8007a7e:	428b      	cmp	r3, r1
 8007a80:	d328      	bcc.n	8007ad4 <__udivsi3+0x6c>
 8007a82:	0c03      	lsrs	r3, r0, #16
 8007a84:	428b      	cmp	r3, r1
 8007a86:	d30d      	bcc.n	8007aa4 <__udivsi3+0x3c>
 8007a88:	22ff      	movs	r2, #255	; 0xff
 8007a8a:	0209      	lsls	r1, r1, #8
 8007a8c:	ba12      	rev	r2, r2
 8007a8e:	0c03      	lsrs	r3, r0, #16
 8007a90:	428b      	cmp	r3, r1
 8007a92:	d302      	bcc.n	8007a9a <__udivsi3+0x32>
 8007a94:	1212      	asrs	r2, r2, #8
 8007a96:	0209      	lsls	r1, r1, #8
 8007a98:	d065      	beq.n	8007b66 <__udivsi3+0xfe>
 8007a9a:	0b03      	lsrs	r3, r0, #12
 8007a9c:	428b      	cmp	r3, r1
 8007a9e:	d319      	bcc.n	8007ad4 <__udivsi3+0x6c>
 8007aa0:	e000      	b.n	8007aa4 <__udivsi3+0x3c>
 8007aa2:	0a09      	lsrs	r1, r1, #8
 8007aa4:	0bc3      	lsrs	r3, r0, #15
 8007aa6:	428b      	cmp	r3, r1
 8007aa8:	d301      	bcc.n	8007aae <__udivsi3+0x46>
 8007aaa:	03cb      	lsls	r3, r1, #15
 8007aac:	1ac0      	subs	r0, r0, r3
 8007aae:	4152      	adcs	r2, r2
 8007ab0:	0b83      	lsrs	r3, r0, #14
 8007ab2:	428b      	cmp	r3, r1
 8007ab4:	d301      	bcc.n	8007aba <__udivsi3+0x52>
 8007ab6:	038b      	lsls	r3, r1, #14
 8007ab8:	1ac0      	subs	r0, r0, r3
 8007aba:	4152      	adcs	r2, r2
 8007abc:	0b43      	lsrs	r3, r0, #13
 8007abe:	428b      	cmp	r3, r1
 8007ac0:	d301      	bcc.n	8007ac6 <__udivsi3+0x5e>
 8007ac2:	034b      	lsls	r3, r1, #13
 8007ac4:	1ac0      	subs	r0, r0, r3
 8007ac6:	4152      	adcs	r2, r2
 8007ac8:	0b03      	lsrs	r3, r0, #12
 8007aca:	428b      	cmp	r3, r1
 8007acc:	d301      	bcc.n	8007ad2 <__udivsi3+0x6a>
 8007ace:	030b      	lsls	r3, r1, #12
 8007ad0:	1ac0      	subs	r0, r0, r3
 8007ad2:	4152      	adcs	r2, r2
 8007ad4:	0ac3      	lsrs	r3, r0, #11
 8007ad6:	428b      	cmp	r3, r1
 8007ad8:	d301      	bcc.n	8007ade <__udivsi3+0x76>
 8007ada:	02cb      	lsls	r3, r1, #11
 8007adc:	1ac0      	subs	r0, r0, r3
 8007ade:	4152      	adcs	r2, r2
 8007ae0:	0a83      	lsrs	r3, r0, #10
 8007ae2:	428b      	cmp	r3, r1
 8007ae4:	d301      	bcc.n	8007aea <__udivsi3+0x82>
 8007ae6:	028b      	lsls	r3, r1, #10
 8007ae8:	1ac0      	subs	r0, r0, r3
 8007aea:	4152      	adcs	r2, r2
 8007aec:	0a43      	lsrs	r3, r0, #9
 8007aee:	428b      	cmp	r3, r1
 8007af0:	d301      	bcc.n	8007af6 <__udivsi3+0x8e>
 8007af2:	024b      	lsls	r3, r1, #9
 8007af4:	1ac0      	subs	r0, r0, r3
 8007af6:	4152      	adcs	r2, r2
 8007af8:	0a03      	lsrs	r3, r0, #8
 8007afa:	428b      	cmp	r3, r1
 8007afc:	d301      	bcc.n	8007b02 <__udivsi3+0x9a>
 8007afe:	020b      	lsls	r3, r1, #8
 8007b00:	1ac0      	subs	r0, r0, r3
 8007b02:	4152      	adcs	r2, r2
 8007b04:	d2cd      	bcs.n	8007aa2 <__udivsi3+0x3a>
 8007b06:	09c3      	lsrs	r3, r0, #7
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	d301      	bcc.n	8007b10 <__udivsi3+0xa8>
 8007b0c:	01cb      	lsls	r3, r1, #7
 8007b0e:	1ac0      	subs	r0, r0, r3
 8007b10:	4152      	adcs	r2, r2
 8007b12:	0983      	lsrs	r3, r0, #6
 8007b14:	428b      	cmp	r3, r1
 8007b16:	d301      	bcc.n	8007b1c <__udivsi3+0xb4>
 8007b18:	018b      	lsls	r3, r1, #6
 8007b1a:	1ac0      	subs	r0, r0, r3
 8007b1c:	4152      	adcs	r2, r2
 8007b1e:	0943      	lsrs	r3, r0, #5
 8007b20:	428b      	cmp	r3, r1
 8007b22:	d301      	bcc.n	8007b28 <__udivsi3+0xc0>
 8007b24:	014b      	lsls	r3, r1, #5
 8007b26:	1ac0      	subs	r0, r0, r3
 8007b28:	4152      	adcs	r2, r2
 8007b2a:	0903      	lsrs	r3, r0, #4
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	d301      	bcc.n	8007b34 <__udivsi3+0xcc>
 8007b30:	010b      	lsls	r3, r1, #4
 8007b32:	1ac0      	subs	r0, r0, r3
 8007b34:	4152      	adcs	r2, r2
 8007b36:	08c3      	lsrs	r3, r0, #3
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	d301      	bcc.n	8007b40 <__udivsi3+0xd8>
 8007b3c:	00cb      	lsls	r3, r1, #3
 8007b3e:	1ac0      	subs	r0, r0, r3
 8007b40:	4152      	adcs	r2, r2
 8007b42:	0883      	lsrs	r3, r0, #2
 8007b44:	428b      	cmp	r3, r1
 8007b46:	d301      	bcc.n	8007b4c <__udivsi3+0xe4>
 8007b48:	008b      	lsls	r3, r1, #2
 8007b4a:	1ac0      	subs	r0, r0, r3
 8007b4c:	4152      	adcs	r2, r2
 8007b4e:	0843      	lsrs	r3, r0, #1
 8007b50:	428b      	cmp	r3, r1
 8007b52:	d301      	bcc.n	8007b58 <__udivsi3+0xf0>
 8007b54:	004b      	lsls	r3, r1, #1
 8007b56:	1ac0      	subs	r0, r0, r3
 8007b58:	4152      	adcs	r2, r2
 8007b5a:	1a41      	subs	r1, r0, r1
 8007b5c:	d200      	bcs.n	8007b60 <__udivsi3+0xf8>
 8007b5e:	4601      	mov	r1, r0
 8007b60:	4152      	adcs	r2, r2
 8007b62:	4610      	mov	r0, r2
 8007b64:	4770      	bx	lr
 8007b66:	e7ff      	b.n	8007b68 <__udivsi3+0x100>
 8007b68:	b501      	push	{r0, lr}
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f000 f8f0 	bl	8007d50 <__aeabi_idiv0>
 8007b70:	bd02      	pop	{r1, pc}
 8007b72:	46c0      	nop			; (mov r8, r8)

08007b74 <__aeabi_uidivmod>:
 8007b74:	2900      	cmp	r1, #0
 8007b76:	d0f7      	beq.n	8007b68 <__udivsi3+0x100>
 8007b78:	e776      	b.n	8007a68 <__udivsi3>
 8007b7a:	4770      	bx	lr

08007b7c <__divsi3>:
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	d47f      	bmi.n	8007c82 <__divsi3+0x106>
 8007b82:	2200      	movs	r2, #0
 8007b84:	0843      	lsrs	r3, r0, #1
 8007b86:	428b      	cmp	r3, r1
 8007b88:	d374      	bcc.n	8007c74 <__divsi3+0xf8>
 8007b8a:	0903      	lsrs	r3, r0, #4
 8007b8c:	428b      	cmp	r3, r1
 8007b8e:	d35f      	bcc.n	8007c50 <__divsi3+0xd4>
 8007b90:	0a03      	lsrs	r3, r0, #8
 8007b92:	428b      	cmp	r3, r1
 8007b94:	d344      	bcc.n	8007c20 <__divsi3+0xa4>
 8007b96:	0b03      	lsrs	r3, r0, #12
 8007b98:	428b      	cmp	r3, r1
 8007b9a:	d328      	bcc.n	8007bee <__divsi3+0x72>
 8007b9c:	0c03      	lsrs	r3, r0, #16
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	d30d      	bcc.n	8007bbe <__divsi3+0x42>
 8007ba2:	22ff      	movs	r2, #255	; 0xff
 8007ba4:	0209      	lsls	r1, r1, #8
 8007ba6:	ba12      	rev	r2, r2
 8007ba8:	0c03      	lsrs	r3, r0, #16
 8007baa:	428b      	cmp	r3, r1
 8007bac:	d302      	bcc.n	8007bb4 <__divsi3+0x38>
 8007bae:	1212      	asrs	r2, r2, #8
 8007bb0:	0209      	lsls	r1, r1, #8
 8007bb2:	d065      	beq.n	8007c80 <__divsi3+0x104>
 8007bb4:	0b03      	lsrs	r3, r0, #12
 8007bb6:	428b      	cmp	r3, r1
 8007bb8:	d319      	bcc.n	8007bee <__divsi3+0x72>
 8007bba:	e000      	b.n	8007bbe <__divsi3+0x42>
 8007bbc:	0a09      	lsrs	r1, r1, #8
 8007bbe:	0bc3      	lsrs	r3, r0, #15
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	d301      	bcc.n	8007bc8 <__divsi3+0x4c>
 8007bc4:	03cb      	lsls	r3, r1, #15
 8007bc6:	1ac0      	subs	r0, r0, r3
 8007bc8:	4152      	adcs	r2, r2
 8007bca:	0b83      	lsrs	r3, r0, #14
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	d301      	bcc.n	8007bd4 <__divsi3+0x58>
 8007bd0:	038b      	lsls	r3, r1, #14
 8007bd2:	1ac0      	subs	r0, r0, r3
 8007bd4:	4152      	adcs	r2, r2
 8007bd6:	0b43      	lsrs	r3, r0, #13
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	d301      	bcc.n	8007be0 <__divsi3+0x64>
 8007bdc:	034b      	lsls	r3, r1, #13
 8007bde:	1ac0      	subs	r0, r0, r3
 8007be0:	4152      	adcs	r2, r2
 8007be2:	0b03      	lsrs	r3, r0, #12
 8007be4:	428b      	cmp	r3, r1
 8007be6:	d301      	bcc.n	8007bec <__divsi3+0x70>
 8007be8:	030b      	lsls	r3, r1, #12
 8007bea:	1ac0      	subs	r0, r0, r3
 8007bec:	4152      	adcs	r2, r2
 8007bee:	0ac3      	lsrs	r3, r0, #11
 8007bf0:	428b      	cmp	r3, r1
 8007bf2:	d301      	bcc.n	8007bf8 <__divsi3+0x7c>
 8007bf4:	02cb      	lsls	r3, r1, #11
 8007bf6:	1ac0      	subs	r0, r0, r3
 8007bf8:	4152      	adcs	r2, r2
 8007bfa:	0a83      	lsrs	r3, r0, #10
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	d301      	bcc.n	8007c04 <__divsi3+0x88>
 8007c00:	028b      	lsls	r3, r1, #10
 8007c02:	1ac0      	subs	r0, r0, r3
 8007c04:	4152      	adcs	r2, r2
 8007c06:	0a43      	lsrs	r3, r0, #9
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	d301      	bcc.n	8007c10 <__divsi3+0x94>
 8007c0c:	024b      	lsls	r3, r1, #9
 8007c0e:	1ac0      	subs	r0, r0, r3
 8007c10:	4152      	adcs	r2, r2
 8007c12:	0a03      	lsrs	r3, r0, #8
 8007c14:	428b      	cmp	r3, r1
 8007c16:	d301      	bcc.n	8007c1c <__divsi3+0xa0>
 8007c18:	020b      	lsls	r3, r1, #8
 8007c1a:	1ac0      	subs	r0, r0, r3
 8007c1c:	4152      	adcs	r2, r2
 8007c1e:	d2cd      	bcs.n	8007bbc <__divsi3+0x40>
 8007c20:	09c3      	lsrs	r3, r0, #7
 8007c22:	428b      	cmp	r3, r1
 8007c24:	d301      	bcc.n	8007c2a <__divsi3+0xae>
 8007c26:	01cb      	lsls	r3, r1, #7
 8007c28:	1ac0      	subs	r0, r0, r3
 8007c2a:	4152      	adcs	r2, r2
 8007c2c:	0983      	lsrs	r3, r0, #6
 8007c2e:	428b      	cmp	r3, r1
 8007c30:	d301      	bcc.n	8007c36 <__divsi3+0xba>
 8007c32:	018b      	lsls	r3, r1, #6
 8007c34:	1ac0      	subs	r0, r0, r3
 8007c36:	4152      	adcs	r2, r2
 8007c38:	0943      	lsrs	r3, r0, #5
 8007c3a:	428b      	cmp	r3, r1
 8007c3c:	d301      	bcc.n	8007c42 <__divsi3+0xc6>
 8007c3e:	014b      	lsls	r3, r1, #5
 8007c40:	1ac0      	subs	r0, r0, r3
 8007c42:	4152      	adcs	r2, r2
 8007c44:	0903      	lsrs	r3, r0, #4
 8007c46:	428b      	cmp	r3, r1
 8007c48:	d301      	bcc.n	8007c4e <__divsi3+0xd2>
 8007c4a:	010b      	lsls	r3, r1, #4
 8007c4c:	1ac0      	subs	r0, r0, r3
 8007c4e:	4152      	adcs	r2, r2
 8007c50:	08c3      	lsrs	r3, r0, #3
 8007c52:	428b      	cmp	r3, r1
 8007c54:	d301      	bcc.n	8007c5a <__divsi3+0xde>
 8007c56:	00cb      	lsls	r3, r1, #3
 8007c58:	1ac0      	subs	r0, r0, r3
 8007c5a:	4152      	adcs	r2, r2
 8007c5c:	0883      	lsrs	r3, r0, #2
 8007c5e:	428b      	cmp	r3, r1
 8007c60:	d301      	bcc.n	8007c66 <__divsi3+0xea>
 8007c62:	008b      	lsls	r3, r1, #2
 8007c64:	1ac0      	subs	r0, r0, r3
 8007c66:	4152      	adcs	r2, r2
 8007c68:	0843      	lsrs	r3, r0, #1
 8007c6a:	428b      	cmp	r3, r1
 8007c6c:	d301      	bcc.n	8007c72 <__divsi3+0xf6>
 8007c6e:	004b      	lsls	r3, r1, #1
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	4152      	adcs	r2, r2
 8007c74:	1a41      	subs	r1, r0, r1
 8007c76:	d200      	bcs.n	8007c7a <__divsi3+0xfe>
 8007c78:	4601      	mov	r1, r0
 8007c7a:	4152      	adcs	r2, r2
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4770      	bx	lr
 8007c80:	e05d      	b.n	8007d3e <__divsi3+0x1c2>
 8007c82:	0fca      	lsrs	r2, r1, #31
 8007c84:	d000      	beq.n	8007c88 <__divsi3+0x10c>
 8007c86:	4249      	negs	r1, r1
 8007c88:	1003      	asrs	r3, r0, #32
 8007c8a:	d300      	bcc.n	8007c8e <__divsi3+0x112>
 8007c8c:	4240      	negs	r0, r0
 8007c8e:	4053      	eors	r3, r2
 8007c90:	2200      	movs	r2, #0
 8007c92:	469c      	mov	ip, r3
 8007c94:	0903      	lsrs	r3, r0, #4
 8007c96:	428b      	cmp	r3, r1
 8007c98:	d32d      	bcc.n	8007cf6 <__divsi3+0x17a>
 8007c9a:	0a03      	lsrs	r3, r0, #8
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	d312      	bcc.n	8007cc6 <__divsi3+0x14a>
 8007ca0:	22fc      	movs	r2, #252	; 0xfc
 8007ca2:	0189      	lsls	r1, r1, #6
 8007ca4:	ba12      	rev	r2, r2
 8007ca6:	0a03      	lsrs	r3, r0, #8
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	d30c      	bcc.n	8007cc6 <__divsi3+0x14a>
 8007cac:	0189      	lsls	r1, r1, #6
 8007cae:	1192      	asrs	r2, r2, #6
 8007cb0:	428b      	cmp	r3, r1
 8007cb2:	d308      	bcc.n	8007cc6 <__divsi3+0x14a>
 8007cb4:	0189      	lsls	r1, r1, #6
 8007cb6:	1192      	asrs	r2, r2, #6
 8007cb8:	428b      	cmp	r3, r1
 8007cba:	d304      	bcc.n	8007cc6 <__divsi3+0x14a>
 8007cbc:	0189      	lsls	r1, r1, #6
 8007cbe:	d03a      	beq.n	8007d36 <__divsi3+0x1ba>
 8007cc0:	1192      	asrs	r2, r2, #6
 8007cc2:	e000      	b.n	8007cc6 <__divsi3+0x14a>
 8007cc4:	0989      	lsrs	r1, r1, #6
 8007cc6:	09c3      	lsrs	r3, r0, #7
 8007cc8:	428b      	cmp	r3, r1
 8007cca:	d301      	bcc.n	8007cd0 <__divsi3+0x154>
 8007ccc:	01cb      	lsls	r3, r1, #7
 8007cce:	1ac0      	subs	r0, r0, r3
 8007cd0:	4152      	adcs	r2, r2
 8007cd2:	0983      	lsrs	r3, r0, #6
 8007cd4:	428b      	cmp	r3, r1
 8007cd6:	d301      	bcc.n	8007cdc <__divsi3+0x160>
 8007cd8:	018b      	lsls	r3, r1, #6
 8007cda:	1ac0      	subs	r0, r0, r3
 8007cdc:	4152      	adcs	r2, r2
 8007cde:	0943      	lsrs	r3, r0, #5
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	d301      	bcc.n	8007ce8 <__divsi3+0x16c>
 8007ce4:	014b      	lsls	r3, r1, #5
 8007ce6:	1ac0      	subs	r0, r0, r3
 8007ce8:	4152      	adcs	r2, r2
 8007cea:	0903      	lsrs	r3, r0, #4
 8007cec:	428b      	cmp	r3, r1
 8007cee:	d301      	bcc.n	8007cf4 <__divsi3+0x178>
 8007cf0:	010b      	lsls	r3, r1, #4
 8007cf2:	1ac0      	subs	r0, r0, r3
 8007cf4:	4152      	adcs	r2, r2
 8007cf6:	08c3      	lsrs	r3, r0, #3
 8007cf8:	428b      	cmp	r3, r1
 8007cfa:	d301      	bcc.n	8007d00 <__divsi3+0x184>
 8007cfc:	00cb      	lsls	r3, r1, #3
 8007cfe:	1ac0      	subs	r0, r0, r3
 8007d00:	4152      	adcs	r2, r2
 8007d02:	0883      	lsrs	r3, r0, #2
 8007d04:	428b      	cmp	r3, r1
 8007d06:	d301      	bcc.n	8007d0c <__divsi3+0x190>
 8007d08:	008b      	lsls	r3, r1, #2
 8007d0a:	1ac0      	subs	r0, r0, r3
 8007d0c:	4152      	adcs	r2, r2
 8007d0e:	d2d9      	bcs.n	8007cc4 <__divsi3+0x148>
 8007d10:	0843      	lsrs	r3, r0, #1
 8007d12:	428b      	cmp	r3, r1
 8007d14:	d301      	bcc.n	8007d1a <__divsi3+0x19e>
 8007d16:	004b      	lsls	r3, r1, #1
 8007d18:	1ac0      	subs	r0, r0, r3
 8007d1a:	4152      	adcs	r2, r2
 8007d1c:	1a41      	subs	r1, r0, r1
 8007d1e:	d200      	bcs.n	8007d22 <__divsi3+0x1a6>
 8007d20:	4601      	mov	r1, r0
 8007d22:	4663      	mov	r3, ip
 8007d24:	4152      	adcs	r2, r2
 8007d26:	105b      	asrs	r3, r3, #1
 8007d28:	4610      	mov	r0, r2
 8007d2a:	d301      	bcc.n	8007d30 <__divsi3+0x1b4>
 8007d2c:	4240      	negs	r0, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d500      	bpl.n	8007d34 <__divsi3+0x1b8>
 8007d32:	4249      	negs	r1, r1
 8007d34:	4770      	bx	lr
 8007d36:	4663      	mov	r3, ip
 8007d38:	105b      	asrs	r3, r3, #1
 8007d3a:	d300      	bcc.n	8007d3e <__divsi3+0x1c2>
 8007d3c:	4240      	negs	r0, r0
 8007d3e:	b501      	push	{r0, lr}
 8007d40:	2000      	movs	r0, #0
 8007d42:	f000 f805 	bl	8007d50 <__aeabi_idiv0>
 8007d46:	bd02      	pop	{r1, pc}

08007d48 <__aeabi_idivmod>:
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	d0f8      	beq.n	8007d3e <__divsi3+0x1c2>
 8007d4c:	e716      	b.n	8007b7c <__divsi3>
 8007d4e:	4770      	bx	lr

08007d50 <__aeabi_idiv0>:
 8007d50:	4770      	bx	lr
 8007d52:	46c0      	nop			; (mov r8, r8)

08007d54 <__aeabi_llsr>:
 8007d54:	40d0      	lsrs	r0, r2
 8007d56:	000b      	movs	r3, r1
 8007d58:	40d1      	lsrs	r1, r2
 8007d5a:	469c      	mov	ip, r3
 8007d5c:	3a20      	subs	r2, #32
 8007d5e:	40d3      	lsrs	r3, r2
 8007d60:	4318      	orrs	r0, r3
 8007d62:	4252      	negs	r2, r2
 8007d64:	4663      	mov	r3, ip
 8007d66:	4093      	lsls	r3, r2
 8007d68:	4318      	orrs	r0, r3
 8007d6a:	4770      	bx	lr

08007d6c <__aeabi_cdrcmple>:
 8007d6c:	4684      	mov	ip, r0
 8007d6e:	0010      	movs	r0, r2
 8007d70:	4662      	mov	r2, ip
 8007d72:	468c      	mov	ip, r1
 8007d74:	0019      	movs	r1, r3
 8007d76:	4663      	mov	r3, ip
 8007d78:	e000      	b.n	8007d7c <__aeabi_cdcmpeq>
 8007d7a:	46c0      	nop			; (mov r8, r8)

08007d7c <__aeabi_cdcmpeq>:
 8007d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7e:	f001 fd33 	bl	80097e8 <__ledf2>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d401      	bmi.n	8007d8a <__aeabi_cdcmpeq+0xe>
 8007d86:	2100      	movs	r1, #0
 8007d88:	42c8      	cmn	r0, r1
 8007d8a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08007d8c <__aeabi_dcmpeq>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	f001 fc83 	bl	8009698 <__eqdf2>
 8007d92:	4240      	negs	r0, r0
 8007d94:	3001      	adds	r0, #1
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <__aeabi_dcmplt>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	f001 fd25 	bl	80097e8 <__ledf2>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	db01      	blt.n	8007da6 <__aeabi_dcmplt+0xe>
 8007da2:	2000      	movs	r0, #0
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	2001      	movs	r0, #1
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	46c0      	nop			; (mov r8, r8)

08007dac <__aeabi_dcmple>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	f001 fd1b 	bl	80097e8 <__ledf2>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	dd01      	ble.n	8007dba <__aeabi_dcmple+0xe>
 8007db6:	2000      	movs	r0, #0
 8007db8:	bd10      	pop	{r4, pc}
 8007dba:	2001      	movs	r0, #1
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	46c0      	nop			; (mov r8, r8)

08007dc0 <__aeabi_dcmpgt>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	f001 fcab 	bl	800971c <__gedf2>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	dc01      	bgt.n	8007dce <__aeabi_dcmpgt+0xe>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	2001      	movs	r0, #1
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	46c0      	nop			; (mov r8, r8)

08007dd4 <__aeabi_dcmpge>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	f001 fca1 	bl	800971c <__gedf2>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	da01      	bge.n	8007de2 <__aeabi_dcmpge+0xe>
 8007dde:	2000      	movs	r0, #0
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	2001      	movs	r0, #1
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	46c0      	nop			; (mov r8, r8)

08007de8 <__aeabi_f2uiz>:
 8007de8:	219e      	movs	r1, #158	; 0x9e
 8007dea:	b510      	push	{r4, lr}
 8007dec:	05c9      	lsls	r1, r1, #23
 8007dee:	1c04      	adds	r4, r0, #0
 8007df0:	f002 fd06 	bl	800a800 <__aeabi_fcmpge>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d103      	bne.n	8007e00 <__aeabi_f2uiz+0x18>
 8007df8:	1c20      	adds	r0, r4, #0
 8007dfa:	f000 fdad 	bl	8008958 <__aeabi_f2iz>
 8007dfe:	bd10      	pop	{r4, pc}
 8007e00:	219e      	movs	r1, #158	; 0x9e
 8007e02:	1c20      	adds	r0, r4, #0
 8007e04:	05c9      	lsls	r1, r1, #23
 8007e06:	f000 fbe3 	bl	80085d0 <__aeabi_fsub>
 8007e0a:	f000 fda5 	bl	8008958 <__aeabi_f2iz>
 8007e0e:	2380      	movs	r3, #128	; 0x80
 8007e10:	061b      	lsls	r3, r3, #24
 8007e12:	469c      	mov	ip, r3
 8007e14:	4460      	add	r0, ip
 8007e16:	e7f2      	b.n	8007dfe <__aeabi_f2uiz+0x16>

08007e18 <__aeabi_fadd>:
 8007e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1a:	46c6      	mov	lr, r8
 8007e1c:	0243      	lsls	r3, r0, #9
 8007e1e:	0a5b      	lsrs	r3, r3, #9
 8007e20:	024e      	lsls	r6, r1, #9
 8007e22:	0045      	lsls	r5, r0, #1
 8007e24:	004f      	lsls	r7, r1, #1
 8007e26:	00da      	lsls	r2, r3, #3
 8007e28:	0fc4      	lsrs	r4, r0, #31
 8007e2a:	469c      	mov	ip, r3
 8007e2c:	0a70      	lsrs	r0, r6, #9
 8007e2e:	4690      	mov	r8, r2
 8007e30:	b500      	push	{lr}
 8007e32:	0e2d      	lsrs	r5, r5, #24
 8007e34:	0e3f      	lsrs	r7, r7, #24
 8007e36:	0fc9      	lsrs	r1, r1, #31
 8007e38:	09b6      	lsrs	r6, r6, #6
 8007e3a:	428c      	cmp	r4, r1
 8007e3c:	d04b      	beq.n	8007ed6 <__aeabi_fadd+0xbe>
 8007e3e:	1bea      	subs	r2, r5, r7
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	dd36      	ble.n	8007eb2 <__aeabi_fadd+0x9a>
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	d061      	beq.n	8007f0c <__aeabi_fadd+0xf4>
 8007e48:	2dff      	cmp	r5, #255	; 0xff
 8007e4a:	d100      	bne.n	8007e4e <__aeabi_fadd+0x36>
 8007e4c:	e0ad      	b.n	8007faa <__aeabi_fadd+0x192>
 8007e4e:	2380      	movs	r3, #128	; 0x80
 8007e50:	04db      	lsls	r3, r3, #19
 8007e52:	431e      	orrs	r6, r3
 8007e54:	2a1b      	cmp	r2, #27
 8007e56:	dc00      	bgt.n	8007e5a <__aeabi_fadd+0x42>
 8007e58:	e0d3      	b.n	8008002 <__aeabi_fadd+0x1ea>
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	4643      	mov	r3, r8
 8007e5e:	1a18      	subs	r0, r3, r0
 8007e60:	0143      	lsls	r3, r0, #5
 8007e62:	d400      	bmi.n	8007e66 <__aeabi_fadd+0x4e>
 8007e64:	e08c      	b.n	8007f80 <__aeabi_fadd+0x168>
 8007e66:	0180      	lsls	r0, r0, #6
 8007e68:	0987      	lsrs	r7, r0, #6
 8007e6a:	0038      	movs	r0, r7
 8007e6c:	f002 fcd2 	bl	800a814 <__clzsi2>
 8007e70:	3805      	subs	r0, #5
 8007e72:	4087      	lsls	r7, r0
 8007e74:	4285      	cmp	r5, r0
 8007e76:	dc00      	bgt.n	8007e7a <__aeabi_fadd+0x62>
 8007e78:	e0b6      	b.n	8007fe8 <__aeabi_fadd+0x1d0>
 8007e7a:	1a2d      	subs	r5, r5, r0
 8007e7c:	48b3      	ldr	r0, [pc, #716]	; (800814c <__aeabi_fadd+0x334>)
 8007e7e:	4038      	ands	r0, r7
 8007e80:	0743      	lsls	r3, r0, #29
 8007e82:	d004      	beq.n	8007e8e <__aeabi_fadd+0x76>
 8007e84:	230f      	movs	r3, #15
 8007e86:	4003      	ands	r3, r0
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d000      	beq.n	8007e8e <__aeabi_fadd+0x76>
 8007e8c:	3004      	adds	r0, #4
 8007e8e:	0143      	lsls	r3, r0, #5
 8007e90:	d400      	bmi.n	8007e94 <__aeabi_fadd+0x7c>
 8007e92:	e078      	b.n	8007f86 <__aeabi_fadd+0x16e>
 8007e94:	1c6a      	adds	r2, r5, #1
 8007e96:	2dfe      	cmp	r5, #254	; 0xfe
 8007e98:	d065      	beq.n	8007f66 <__aeabi_fadd+0x14e>
 8007e9a:	0180      	lsls	r0, r0, #6
 8007e9c:	0a43      	lsrs	r3, r0, #9
 8007e9e:	469c      	mov	ip, r3
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	4663      	mov	r3, ip
 8007ea4:	05d0      	lsls	r0, r2, #23
 8007ea6:	4318      	orrs	r0, r3
 8007ea8:	07e4      	lsls	r4, r4, #31
 8007eaa:	4320      	orrs	r0, r4
 8007eac:	bc80      	pop	{r7}
 8007eae:	46b8      	mov	r8, r7
 8007eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb2:	2a00      	cmp	r2, #0
 8007eb4:	d035      	beq.n	8007f22 <__aeabi_fadd+0x10a>
 8007eb6:	1b7a      	subs	r2, r7, r5
 8007eb8:	2d00      	cmp	r5, #0
 8007eba:	d000      	beq.n	8007ebe <__aeabi_fadd+0xa6>
 8007ebc:	e0af      	b.n	800801e <__aeabi_fadd+0x206>
 8007ebe:	4643      	mov	r3, r8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d100      	bne.n	8007ec6 <__aeabi_fadd+0xae>
 8007ec4:	e0a7      	b.n	8008016 <__aeabi_fadd+0x1fe>
 8007ec6:	1e53      	subs	r3, r2, #1
 8007ec8:	2a01      	cmp	r2, #1
 8007eca:	d100      	bne.n	8007ece <__aeabi_fadd+0xb6>
 8007ecc:	e12f      	b.n	800812e <__aeabi_fadd+0x316>
 8007ece:	2aff      	cmp	r2, #255	; 0xff
 8007ed0:	d069      	beq.n	8007fa6 <__aeabi_fadd+0x18e>
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	e0aa      	b.n	800802c <__aeabi_fadd+0x214>
 8007ed6:	1be9      	subs	r1, r5, r7
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	dd70      	ble.n	8007fbe <__aeabi_fadd+0x1a6>
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	d037      	beq.n	8007f50 <__aeabi_fadd+0x138>
 8007ee0:	2dff      	cmp	r5, #255	; 0xff
 8007ee2:	d062      	beq.n	8007faa <__aeabi_fadd+0x192>
 8007ee4:	2380      	movs	r3, #128	; 0x80
 8007ee6:	04db      	lsls	r3, r3, #19
 8007ee8:	431e      	orrs	r6, r3
 8007eea:	291b      	cmp	r1, #27
 8007eec:	dc00      	bgt.n	8007ef0 <__aeabi_fadd+0xd8>
 8007eee:	e0b0      	b.n	8008052 <__aeabi_fadd+0x23a>
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	4440      	add	r0, r8
 8007ef4:	0143      	lsls	r3, r0, #5
 8007ef6:	d543      	bpl.n	8007f80 <__aeabi_fadd+0x168>
 8007ef8:	3501      	adds	r5, #1
 8007efa:	2dff      	cmp	r5, #255	; 0xff
 8007efc:	d033      	beq.n	8007f66 <__aeabi_fadd+0x14e>
 8007efe:	2301      	movs	r3, #1
 8007f00:	4a93      	ldr	r2, [pc, #588]	; (8008150 <__aeabi_fadd+0x338>)
 8007f02:	4003      	ands	r3, r0
 8007f04:	0840      	lsrs	r0, r0, #1
 8007f06:	4010      	ands	r0, r2
 8007f08:	4318      	orrs	r0, r3
 8007f0a:	e7b9      	b.n	8007e80 <__aeabi_fadd+0x68>
 8007f0c:	2e00      	cmp	r6, #0
 8007f0e:	d100      	bne.n	8007f12 <__aeabi_fadd+0xfa>
 8007f10:	e083      	b.n	800801a <__aeabi_fadd+0x202>
 8007f12:	1e51      	subs	r1, r2, #1
 8007f14:	2a01      	cmp	r2, #1
 8007f16:	d100      	bne.n	8007f1a <__aeabi_fadd+0x102>
 8007f18:	e0d8      	b.n	80080cc <__aeabi_fadd+0x2b4>
 8007f1a:	2aff      	cmp	r2, #255	; 0xff
 8007f1c:	d045      	beq.n	8007faa <__aeabi_fadd+0x192>
 8007f1e:	000a      	movs	r2, r1
 8007f20:	e798      	b.n	8007e54 <__aeabi_fadd+0x3c>
 8007f22:	27fe      	movs	r7, #254	; 0xfe
 8007f24:	1c6a      	adds	r2, r5, #1
 8007f26:	4217      	tst	r7, r2
 8007f28:	d000      	beq.n	8007f2c <__aeabi_fadd+0x114>
 8007f2a:	e086      	b.n	800803a <__aeabi_fadd+0x222>
 8007f2c:	2d00      	cmp	r5, #0
 8007f2e:	d000      	beq.n	8007f32 <__aeabi_fadd+0x11a>
 8007f30:	e0b7      	b.n	80080a2 <__aeabi_fadd+0x28a>
 8007f32:	4643      	mov	r3, r8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d100      	bne.n	8007f3a <__aeabi_fadd+0x122>
 8007f38:	e0f3      	b.n	8008122 <__aeabi_fadd+0x30a>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2e00      	cmp	r6, #0
 8007f3e:	d0b0      	beq.n	8007ea2 <__aeabi_fadd+0x8a>
 8007f40:	1b98      	subs	r0, r3, r6
 8007f42:	0143      	lsls	r3, r0, #5
 8007f44:	d400      	bmi.n	8007f48 <__aeabi_fadd+0x130>
 8007f46:	e0fa      	b.n	800813e <__aeabi_fadd+0x326>
 8007f48:	4643      	mov	r3, r8
 8007f4a:	000c      	movs	r4, r1
 8007f4c:	1af0      	subs	r0, r6, r3
 8007f4e:	e797      	b.n	8007e80 <__aeabi_fadd+0x68>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	d100      	bne.n	8007f56 <__aeabi_fadd+0x13e>
 8007f54:	e0c8      	b.n	80080e8 <__aeabi_fadd+0x2d0>
 8007f56:	1e4a      	subs	r2, r1, #1
 8007f58:	2901      	cmp	r1, #1
 8007f5a:	d100      	bne.n	8007f5e <__aeabi_fadd+0x146>
 8007f5c:	e0ae      	b.n	80080bc <__aeabi_fadd+0x2a4>
 8007f5e:	29ff      	cmp	r1, #255	; 0xff
 8007f60:	d023      	beq.n	8007faa <__aeabi_fadd+0x192>
 8007f62:	0011      	movs	r1, r2
 8007f64:	e7c1      	b.n	8007eea <__aeabi_fadd+0xd2>
 8007f66:	2300      	movs	r3, #0
 8007f68:	22ff      	movs	r2, #255	; 0xff
 8007f6a:	469c      	mov	ip, r3
 8007f6c:	e799      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 8007f6e:	21fe      	movs	r1, #254	; 0xfe
 8007f70:	1c6a      	adds	r2, r5, #1
 8007f72:	4211      	tst	r1, r2
 8007f74:	d077      	beq.n	8008066 <__aeabi_fadd+0x24e>
 8007f76:	2aff      	cmp	r2, #255	; 0xff
 8007f78:	d0f5      	beq.n	8007f66 <__aeabi_fadd+0x14e>
 8007f7a:	0015      	movs	r5, r2
 8007f7c:	4446      	add	r6, r8
 8007f7e:	0870      	lsrs	r0, r6, #1
 8007f80:	0743      	lsls	r3, r0, #29
 8007f82:	d000      	beq.n	8007f86 <__aeabi_fadd+0x16e>
 8007f84:	e77e      	b.n	8007e84 <__aeabi_fadd+0x6c>
 8007f86:	08c3      	lsrs	r3, r0, #3
 8007f88:	2dff      	cmp	r5, #255	; 0xff
 8007f8a:	d00e      	beq.n	8007faa <__aeabi_fadd+0x192>
 8007f8c:	025b      	lsls	r3, r3, #9
 8007f8e:	0a5b      	lsrs	r3, r3, #9
 8007f90:	469c      	mov	ip, r3
 8007f92:	b2ea      	uxtb	r2, r5
 8007f94:	e785      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 8007f96:	2e00      	cmp	r6, #0
 8007f98:	d007      	beq.n	8007faa <__aeabi_fadd+0x192>
 8007f9a:	2280      	movs	r2, #128	; 0x80
 8007f9c:	03d2      	lsls	r2, r2, #15
 8007f9e:	4213      	tst	r3, r2
 8007fa0:	d003      	beq.n	8007faa <__aeabi_fadd+0x192>
 8007fa2:	4210      	tst	r0, r2
 8007fa4:	d101      	bne.n	8007faa <__aeabi_fadd+0x192>
 8007fa6:	000c      	movs	r4, r1
 8007fa8:	0003      	movs	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0db      	beq.n	8007f66 <__aeabi_fadd+0x14e>
 8007fae:	2080      	movs	r0, #128	; 0x80
 8007fb0:	03c0      	lsls	r0, r0, #15
 8007fb2:	4318      	orrs	r0, r3
 8007fb4:	0240      	lsls	r0, r0, #9
 8007fb6:	0a43      	lsrs	r3, r0, #9
 8007fb8:	469c      	mov	ip, r3
 8007fba:	22ff      	movs	r2, #255	; 0xff
 8007fbc:	e771      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	d0d5      	beq.n	8007f6e <__aeabi_fadd+0x156>
 8007fc2:	1b7a      	subs	r2, r7, r5
 8007fc4:	2d00      	cmp	r5, #0
 8007fc6:	d160      	bne.n	800808a <__aeabi_fadd+0x272>
 8007fc8:	4643      	mov	r3, r8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d024      	beq.n	8008018 <__aeabi_fadd+0x200>
 8007fce:	1e53      	subs	r3, r2, #1
 8007fd0:	2a01      	cmp	r2, #1
 8007fd2:	d073      	beq.n	80080bc <__aeabi_fadd+0x2a4>
 8007fd4:	2aff      	cmp	r2, #255	; 0xff
 8007fd6:	d0e7      	beq.n	8007fa8 <__aeabi_fadd+0x190>
 8007fd8:	001a      	movs	r2, r3
 8007fda:	2a1b      	cmp	r2, #27
 8007fdc:	dc00      	bgt.n	8007fe0 <__aeabi_fadd+0x1c8>
 8007fde:	e085      	b.n	80080ec <__aeabi_fadd+0x2d4>
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	003d      	movs	r5, r7
 8007fe4:	1980      	adds	r0, r0, r6
 8007fe6:	e785      	b.n	8007ef4 <__aeabi_fadd+0xdc>
 8007fe8:	2320      	movs	r3, #32
 8007fea:	003a      	movs	r2, r7
 8007fec:	1b45      	subs	r5, r0, r5
 8007fee:	0038      	movs	r0, r7
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	40ea      	lsrs	r2, r5
 8007ff4:	1b5d      	subs	r5, r3, r5
 8007ff6:	40a8      	lsls	r0, r5
 8007ff8:	1e43      	subs	r3, r0, #1
 8007ffa:	4198      	sbcs	r0, r3
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	4310      	orrs	r0, r2
 8008000:	e73e      	b.n	8007e80 <__aeabi_fadd+0x68>
 8008002:	2320      	movs	r3, #32
 8008004:	0030      	movs	r0, r6
 8008006:	1a9b      	subs	r3, r3, r2
 8008008:	0031      	movs	r1, r6
 800800a:	4098      	lsls	r0, r3
 800800c:	40d1      	lsrs	r1, r2
 800800e:	1e43      	subs	r3, r0, #1
 8008010:	4198      	sbcs	r0, r3
 8008012:	4308      	orrs	r0, r1
 8008014:	e722      	b.n	8007e5c <__aeabi_fadd+0x44>
 8008016:	000c      	movs	r4, r1
 8008018:	0003      	movs	r3, r0
 800801a:	0015      	movs	r5, r2
 800801c:	e7b4      	b.n	8007f88 <__aeabi_fadd+0x170>
 800801e:	2fff      	cmp	r7, #255	; 0xff
 8008020:	d0c1      	beq.n	8007fa6 <__aeabi_fadd+0x18e>
 8008022:	2380      	movs	r3, #128	; 0x80
 8008024:	4640      	mov	r0, r8
 8008026:	04db      	lsls	r3, r3, #19
 8008028:	4318      	orrs	r0, r3
 800802a:	4680      	mov	r8, r0
 800802c:	2a1b      	cmp	r2, #27
 800802e:	dd51      	ble.n	80080d4 <__aeabi_fadd+0x2bc>
 8008030:	2001      	movs	r0, #1
 8008032:	000c      	movs	r4, r1
 8008034:	003d      	movs	r5, r7
 8008036:	1a30      	subs	r0, r6, r0
 8008038:	e712      	b.n	8007e60 <__aeabi_fadd+0x48>
 800803a:	4643      	mov	r3, r8
 800803c:	1b9f      	subs	r7, r3, r6
 800803e:	017b      	lsls	r3, r7, #5
 8008040:	d42b      	bmi.n	800809a <__aeabi_fadd+0x282>
 8008042:	2f00      	cmp	r7, #0
 8008044:	d000      	beq.n	8008048 <__aeabi_fadd+0x230>
 8008046:	e710      	b.n	8007e6a <__aeabi_fadd+0x52>
 8008048:	2300      	movs	r3, #0
 800804a:	2400      	movs	r4, #0
 800804c:	2200      	movs	r2, #0
 800804e:	469c      	mov	ip, r3
 8008050:	e727      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 8008052:	2320      	movs	r3, #32
 8008054:	0032      	movs	r2, r6
 8008056:	0030      	movs	r0, r6
 8008058:	40ca      	lsrs	r2, r1
 800805a:	1a59      	subs	r1, r3, r1
 800805c:	4088      	lsls	r0, r1
 800805e:	1e43      	subs	r3, r0, #1
 8008060:	4198      	sbcs	r0, r3
 8008062:	4310      	orrs	r0, r2
 8008064:	e745      	b.n	8007ef2 <__aeabi_fadd+0xda>
 8008066:	2d00      	cmp	r5, #0
 8008068:	d14a      	bne.n	8008100 <__aeabi_fadd+0x2e8>
 800806a:	4643      	mov	r3, r8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d063      	beq.n	8008138 <__aeabi_fadd+0x320>
 8008070:	2200      	movs	r2, #0
 8008072:	2e00      	cmp	r6, #0
 8008074:	d100      	bne.n	8008078 <__aeabi_fadd+0x260>
 8008076:	e714      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 8008078:	0030      	movs	r0, r6
 800807a:	4440      	add	r0, r8
 800807c:	0143      	lsls	r3, r0, #5
 800807e:	d400      	bmi.n	8008082 <__aeabi_fadd+0x26a>
 8008080:	e77e      	b.n	8007f80 <__aeabi_fadd+0x168>
 8008082:	4b32      	ldr	r3, [pc, #200]	; (800814c <__aeabi_fadd+0x334>)
 8008084:	3501      	adds	r5, #1
 8008086:	4018      	ands	r0, r3
 8008088:	e77a      	b.n	8007f80 <__aeabi_fadd+0x168>
 800808a:	2fff      	cmp	r7, #255	; 0xff
 800808c:	d08c      	beq.n	8007fa8 <__aeabi_fadd+0x190>
 800808e:	2380      	movs	r3, #128	; 0x80
 8008090:	4641      	mov	r1, r8
 8008092:	04db      	lsls	r3, r3, #19
 8008094:	4319      	orrs	r1, r3
 8008096:	4688      	mov	r8, r1
 8008098:	e79f      	b.n	8007fda <__aeabi_fadd+0x1c2>
 800809a:	4643      	mov	r3, r8
 800809c:	000c      	movs	r4, r1
 800809e:	1af7      	subs	r7, r6, r3
 80080a0:	e6e3      	b.n	8007e6a <__aeabi_fadd+0x52>
 80080a2:	4642      	mov	r2, r8
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d000      	beq.n	80080aa <__aeabi_fadd+0x292>
 80080a8:	e775      	b.n	8007f96 <__aeabi_fadd+0x17e>
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	d000      	beq.n	80080b0 <__aeabi_fadd+0x298>
 80080ae:	e77a      	b.n	8007fa6 <__aeabi_fadd+0x18e>
 80080b0:	2380      	movs	r3, #128	; 0x80
 80080b2:	03db      	lsls	r3, r3, #15
 80080b4:	2400      	movs	r4, #0
 80080b6:	469c      	mov	ip, r3
 80080b8:	22ff      	movs	r2, #255	; 0xff
 80080ba:	e6f2      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 80080bc:	0030      	movs	r0, r6
 80080be:	4440      	add	r0, r8
 80080c0:	2501      	movs	r5, #1
 80080c2:	0143      	lsls	r3, r0, #5
 80080c4:	d400      	bmi.n	80080c8 <__aeabi_fadd+0x2b0>
 80080c6:	e75b      	b.n	8007f80 <__aeabi_fadd+0x168>
 80080c8:	2502      	movs	r5, #2
 80080ca:	e718      	b.n	8007efe <__aeabi_fadd+0xe6>
 80080cc:	4643      	mov	r3, r8
 80080ce:	2501      	movs	r5, #1
 80080d0:	1b98      	subs	r0, r3, r6
 80080d2:	e6c5      	b.n	8007e60 <__aeabi_fadd+0x48>
 80080d4:	2320      	movs	r3, #32
 80080d6:	4644      	mov	r4, r8
 80080d8:	4640      	mov	r0, r8
 80080da:	40d4      	lsrs	r4, r2
 80080dc:	1a9a      	subs	r2, r3, r2
 80080de:	4090      	lsls	r0, r2
 80080e0:	1e43      	subs	r3, r0, #1
 80080e2:	4198      	sbcs	r0, r3
 80080e4:	4320      	orrs	r0, r4
 80080e6:	e7a4      	b.n	8008032 <__aeabi_fadd+0x21a>
 80080e8:	000d      	movs	r5, r1
 80080ea:	e74d      	b.n	8007f88 <__aeabi_fadd+0x170>
 80080ec:	2320      	movs	r3, #32
 80080ee:	4641      	mov	r1, r8
 80080f0:	4640      	mov	r0, r8
 80080f2:	40d1      	lsrs	r1, r2
 80080f4:	1a9a      	subs	r2, r3, r2
 80080f6:	4090      	lsls	r0, r2
 80080f8:	1e43      	subs	r3, r0, #1
 80080fa:	4198      	sbcs	r0, r3
 80080fc:	4308      	orrs	r0, r1
 80080fe:	e770      	b.n	8007fe2 <__aeabi_fadd+0x1ca>
 8008100:	4642      	mov	r2, r8
 8008102:	2a00      	cmp	r2, #0
 8008104:	d100      	bne.n	8008108 <__aeabi_fadd+0x2f0>
 8008106:	e74f      	b.n	8007fa8 <__aeabi_fadd+0x190>
 8008108:	2e00      	cmp	r6, #0
 800810a:	d100      	bne.n	800810e <__aeabi_fadd+0x2f6>
 800810c:	e74d      	b.n	8007faa <__aeabi_fadd+0x192>
 800810e:	2280      	movs	r2, #128	; 0x80
 8008110:	03d2      	lsls	r2, r2, #15
 8008112:	4213      	tst	r3, r2
 8008114:	d100      	bne.n	8008118 <__aeabi_fadd+0x300>
 8008116:	e748      	b.n	8007faa <__aeabi_fadd+0x192>
 8008118:	4210      	tst	r0, r2
 800811a:	d000      	beq.n	800811e <__aeabi_fadd+0x306>
 800811c:	e745      	b.n	8007faa <__aeabi_fadd+0x192>
 800811e:	0003      	movs	r3, r0
 8008120:	e743      	b.n	8007faa <__aeabi_fadd+0x192>
 8008122:	2e00      	cmp	r6, #0
 8008124:	d090      	beq.n	8008048 <__aeabi_fadd+0x230>
 8008126:	000c      	movs	r4, r1
 8008128:	4684      	mov	ip, r0
 800812a:	2200      	movs	r2, #0
 800812c:	e6b9      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 800812e:	4643      	mov	r3, r8
 8008130:	000c      	movs	r4, r1
 8008132:	1af0      	subs	r0, r6, r3
 8008134:	3501      	adds	r5, #1
 8008136:	e693      	b.n	8007e60 <__aeabi_fadd+0x48>
 8008138:	4684      	mov	ip, r0
 800813a:	2200      	movs	r2, #0
 800813c:	e6b1      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 800813e:	2800      	cmp	r0, #0
 8008140:	d000      	beq.n	8008144 <__aeabi_fadd+0x32c>
 8008142:	e71d      	b.n	8007f80 <__aeabi_fadd+0x168>
 8008144:	2300      	movs	r3, #0
 8008146:	2400      	movs	r4, #0
 8008148:	469c      	mov	ip, r3
 800814a:	e6aa      	b.n	8007ea2 <__aeabi_fadd+0x8a>
 800814c:	fbffffff 	.word	0xfbffffff
 8008150:	7dffffff 	.word	0x7dffffff

08008154 <__aeabi_fdiv>:
 8008154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008156:	464f      	mov	r7, r9
 8008158:	4646      	mov	r6, r8
 800815a:	46d6      	mov	lr, sl
 800815c:	0245      	lsls	r5, r0, #9
 800815e:	b5c0      	push	{r6, r7, lr}
 8008160:	0047      	lsls	r7, r0, #1
 8008162:	1c0c      	adds	r4, r1, #0
 8008164:	0a6d      	lsrs	r5, r5, #9
 8008166:	0e3f      	lsrs	r7, r7, #24
 8008168:	0fc6      	lsrs	r6, r0, #31
 800816a:	2f00      	cmp	r7, #0
 800816c:	d100      	bne.n	8008170 <__aeabi_fdiv+0x1c>
 800816e:	e070      	b.n	8008252 <__aeabi_fdiv+0xfe>
 8008170:	2fff      	cmp	r7, #255	; 0xff
 8008172:	d100      	bne.n	8008176 <__aeabi_fdiv+0x22>
 8008174:	e075      	b.n	8008262 <__aeabi_fdiv+0x10e>
 8008176:	00eb      	lsls	r3, r5, #3
 8008178:	2580      	movs	r5, #128	; 0x80
 800817a:	04ed      	lsls	r5, r5, #19
 800817c:	431d      	orrs	r5, r3
 800817e:	2300      	movs	r3, #0
 8008180:	4699      	mov	r9, r3
 8008182:	469a      	mov	sl, r3
 8008184:	3f7f      	subs	r7, #127	; 0x7f
 8008186:	0260      	lsls	r0, r4, #9
 8008188:	0a43      	lsrs	r3, r0, #9
 800818a:	4698      	mov	r8, r3
 800818c:	0063      	lsls	r3, r4, #1
 800818e:	0e1b      	lsrs	r3, r3, #24
 8008190:	0fe4      	lsrs	r4, r4, #31
 8008192:	2b00      	cmp	r3, #0
 8008194:	d04e      	beq.n	8008234 <__aeabi_fdiv+0xe0>
 8008196:	2bff      	cmp	r3, #255	; 0xff
 8008198:	d046      	beq.n	8008228 <__aeabi_fdiv+0xd4>
 800819a:	4642      	mov	r2, r8
 800819c:	00d0      	lsls	r0, r2, #3
 800819e:	2280      	movs	r2, #128	; 0x80
 80081a0:	04d2      	lsls	r2, r2, #19
 80081a2:	4302      	orrs	r2, r0
 80081a4:	4690      	mov	r8, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	3b7f      	subs	r3, #127	; 0x7f
 80081aa:	0031      	movs	r1, r6
 80081ac:	1aff      	subs	r7, r7, r3
 80081ae:	464b      	mov	r3, r9
 80081b0:	4061      	eors	r1, r4
 80081b2:	b2c9      	uxtb	r1, r1
 80081b4:	4313      	orrs	r3, r2
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d900      	bls.n	80081bc <__aeabi_fdiv+0x68>
 80081ba:	e0b5      	b.n	8008328 <__aeabi_fdiv+0x1d4>
 80081bc:	486e      	ldr	r0, [pc, #440]	; (8008378 <__aeabi_fdiv+0x224>)
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	58c3      	ldr	r3, [r0, r3]
 80081c2:	469f      	mov	pc, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	4698      	mov	r8, r3
 80081c8:	0026      	movs	r6, r4
 80081ca:	4645      	mov	r5, r8
 80081cc:	4692      	mov	sl, r2
 80081ce:	4653      	mov	r3, sl
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d100      	bne.n	80081d6 <__aeabi_fdiv+0x82>
 80081d4:	e089      	b.n	80082ea <__aeabi_fdiv+0x196>
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d100      	bne.n	80081dc <__aeabi_fdiv+0x88>
 80081da:	e09e      	b.n	800831a <__aeabi_fdiv+0x1c6>
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d018      	beq.n	8008212 <__aeabi_fdiv+0xbe>
 80081e0:	003b      	movs	r3, r7
 80081e2:	337f      	adds	r3, #127	; 0x7f
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd69      	ble.n	80082bc <__aeabi_fdiv+0x168>
 80081e8:	076a      	lsls	r2, r5, #29
 80081ea:	d004      	beq.n	80081f6 <__aeabi_fdiv+0xa2>
 80081ec:	220f      	movs	r2, #15
 80081ee:	402a      	ands	r2, r5
 80081f0:	2a04      	cmp	r2, #4
 80081f2:	d000      	beq.n	80081f6 <__aeabi_fdiv+0xa2>
 80081f4:	3504      	adds	r5, #4
 80081f6:	012a      	lsls	r2, r5, #4
 80081f8:	d503      	bpl.n	8008202 <__aeabi_fdiv+0xae>
 80081fa:	4b60      	ldr	r3, [pc, #384]	; (800837c <__aeabi_fdiv+0x228>)
 80081fc:	401d      	ands	r5, r3
 80081fe:	003b      	movs	r3, r7
 8008200:	3380      	adds	r3, #128	; 0x80
 8008202:	2bfe      	cmp	r3, #254	; 0xfe
 8008204:	dd00      	ble.n	8008208 <__aeabi_fdiv+0xb4>
 8008206:	e070      	b.n	80082ea <__aeabi_fdiv+0x196>
 8008208:	01ad      	lsls	r5, r5, #6
 800820a:	0a6d      	lsrs	r5, r5, #9
 800820c:	b2d8      	uxtb	r0, r3
 800820e:	e002      	b.n	8008216 <__aeabi_fdiv+0xc2>
 8008210:	000e      	movs	r6, r1
 8008212:	2000      	movs	r0, #0
 8008214:	2500      	movs	r5, #0
 8008216:	05c0      	lsls	r0, r0, #23
 8008218:	4328      	orrs	r0, r5
 800821a:	07f6      	lsls	r6, r6, #31
 800821c:	4330      	orrs	r0, r6
 800821e:	bce0      	pop	{r5, r6, r7}
 8008220:	46ba      	mov	sl, r7
 8008222:	46b1      	mov	r9, r6
 8008224:	46a8      	mov	r8, r5
 8008226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008228:	4643      	mov	r3, r8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d13f      	bne.n	80082ae <__aeabi_fdiv+0x15a>
 800822e:	2202      	movs	r2, #2
 8008230:	3fff      	subs	r7, #255	; 0xff
 8008232:	e003      	b.n	800823c <__aeabi_fdiv+0xe8>
 8008234:	4643      	mov	r3, r8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d12d      	bne.n	8008296 <__aeabi_fdiv+0x142>
 800823a:	2201      	movs	r2, #1
 800823c:	0031      	movs	r1, r6
 800823e:	464b      	mov	r3, r9
 8008240:	4061      	eors	r1, r4
 8008242:	b2c9      	uxtb	r1, r1
 8008244:	4313      	orrs	r3, r2
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d834      	bhi.n	80082b4 <__aeabi_fdiv+0x160>
 800824a:	484d      	ldr	r0, [pc, #308]	; (8008380 <__aeabi_fdiv+0x22c>)
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	58c3      	ldr	r3, [r0, r3]
 8008250:	469f      	mov	pc, r3
 8008252:	2d00      	cmp	r5, #0
 8008254:	d113      	bne.n	800827e <__aeabi_fdiv+0x12a>
 8008256:	2304      	movs	r3, #4
 8008258:	4699      	mov	r9, r3
 800825a:	3b03      	subs	r3, #3
 800825c:	2700      	movs	r7, #0
 800825e:	469a      	mov	sl, r3
 8008260:	e791      	b.n	8008186 <__aeabi_fdiv+0x32>
 8008262:	2d00      	cmp	r5, #0
 8008264:	d105      	bne.n	8008272 <__aeabi_fdiv+0x11e>
 8008266:	2308      	movs	r3, #8
 8008268:	4699      	mov	r9, r3
 800826a:	3b06      	subs	r3, #6
 800826c:	27ff      	movs	r7, #255	; 0xff
 800826e:	469a      	mov	sl, r3
 8008270:	e789      	b.n	8008186 <__aeabi_fdiv+0x32>
 8008272:	230c      	movs	r3, #12
 8008274:	4699      	mov	r9, r3
 8008276:	3b09      	subs	r3, #9
 8008278:	27ff      	movs	r7, #255	; 0xff
 800827a:	469a      	mov	sl, r3
 800827c:	e783      	b.n	8008186 <__aeabi_fdiv+0x32>
 800827e:	0028      	movs	r0, r5
 8008280:	f002 fac8 	bl	800a814 <__clzsi2>
 8008284:	2776      	movs	r7, #118	; 0x76
 8008286:	1f43      	subs	r3, r0, #5
 8008288:	409d      	lsls	r5, r3
 800828a:	2300      	movs	r3, #0
 800828c:	427f      	negs	r7, r7
 800828e:	4699      	mov	r9, r3
 8008290:	469a      	mov	sl, r3
 8008292:	1a3f      	subs	r7, r7, r0
 8008294:	e777      	b.n	8008186 <__aeabi_fdiv+0x32>
 8008296:	4640      	mov	r0, r8
 8008298:	f002 fabc 	bl	800a814 <__clzsi2>
 800829c:	4642      	mov	r2, r8
 800829e:	1f43      	subs	r3, r0, #5
 80082a0:	409a      	lsls	r2, r3
 80082a2:	2376      	movs	r3, #118	; 0x76
 80082a4:	425b      	negs	r3, r3
 80082a6:	4690      	mov	r8, r2
 80082a8:	1a1b      	subs	r3, r3, r0
 80082aa:	2200      	movs	r2, #0
 80082ac:	e77d      	b.n	80081aa <__aeabi_fdiv+0x56>
 80082ae:	23ff      	movs	r3, #255	; 0xff
 80082b0:	2203      	movs	r2, #3
 80082b2:	e77a      	b.n	80081aa <__aeabi_fdiv+0x56>
 80082b4:	000e      	movs	r6, r1
 80082b6:	20ff      	movs	r0, #255	; 0xff
 80082b8:	2500      	movs	r5, #0
 80082ba:	e7ac      	b.n	8008216 <__aeabi_fdiv+0xc2>
 80082bc:	2001      	movs	r0, #1
 80082be:	1ac0      	subs	r0, r0, r3
 80082c0:	281b      	cmp	r0, #27
 80082c2:	dca6      	bgt.n	8008212 <__aeabi_fdiv+0xbe>
 80082c4:	379e      	adds	r7, #158	; 0x9e
 80082c6:	002a      	movs	r2, r5
 80082c8:	40bd      	lsls	r5, r7
 80082ca:	40c2      	lsrs	r2, r0
 80082cc:	1e6b      	subs	r3, r5, #1
 80082ce:	419d      	sbcs	r5, r3
 80082d0:	4315      	orrs	r5, r2
 80082d2:	076b      	lsls	r3, r5, #29
 80082d4:	d004      	beq.n	80082e0 <__aeabi_fdiv+0x18c>
 80082d6:	230f      	movs	r3, #15
 80082d8:	402b      	ands	r3, r5
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d000      	beq.n	80082e0 <__aeabi_fdiv+0x18c>
 80082de:	3504      	adds	r5, #4
 80082e0:	016b      	lsls	r3, r5, #5
 80082e2:	d544      	bpl.n	800836e <__aeabi_fdiv+0x21a>
 80082e4:	2001      	movs	r0, #1
 80082e6:	2500      	movs	r5, #0
 80082e8:	e795      	b.n	8008216 <__aeabi_fdiv+0xc2>
 80082ea:	20ff      	movs	r0, #255	; 0xff
 80082ec:	2500      	movs	r5, #0
 80082ee:	e792      	b.n	8008216 <__aeabi_fdiv+0xc2>
 80082f0:	2580      	movs	r5, #128	; 0x80
 80082f2:	2600      	movs	r6, #0
 80082f4:	20ff      	movs	r0, #255	; 0xff
 80082f6:	03ed      	lsls	r5, r5, #15
 80082f8:	e78d      	b.n	8008216 <__aeabi_fdiv+0xc2>
 80082fa:	2300      	movs	r3, #0
 80082fc:	4698      	mov	r8, r3
 80082fe:	2080      	movs	r0, #128	; 0x80
 8008300:	03c0      	lsls	r0, r0, #15
 8008302:	4205      	tst	r5, r0
 8008304:	d009      	beq.n	800831a <__aeabi_fdiv+0x1c6>
 8008306:	4643      	mov	r3, r8
 8008308:	4203      	tst	r3, r0
 800830a:	d106      	bne.n	800831a <__aeabi_fdiv+0x1c6>
 800830c:	4645      	mov	r5, r8
 800830e:	4305      	orrs	r5, r0
 8008310:	026d      	lsls	r5, r5, #9
 8008312:	0026      	movs	r6, r4
 8008314:	20ff      	movs	r0, #255	; 0xff
 8008316:	0a6d      	lsrs	r5, r5, #9
 8008318:	e77d      	b.n	8008216 <__aeabi_fdiv+0xc2>
 800831a:	2080      	movs	r0, #128	; 0x80
 800831c:	03c0      	lsls	r0, r0, #15
 800831e:	4305      	orrs	r5, r0
 8008320:	026d      	lsls	r5, r5, #9
 8008322:	20ff      	movs	r0, #255	; 0xff
 8008324:	0a6d      	lsrs	r5, r5, #9
 8008326:	e776      	b.n	8008216 <__aeabi_fdiv+0xc2>
 8008328:	4642      	mov	r2, r8
 800832a:	016b      	lsls	r3, r5, #5
 800832c:	0150      	lsls	r0, r2, #5
 800832e:	4283      	cmp	r3, r0
 8008330:	d219      	bcs.n	8008366 <__aeabi_fdiv+0x212>
 8008332:	221b      	movs	r2, #27
 8008334:	2500      	movs	r5, #0
 8008336:	3f01      	subs	r7, #1
 8008338:	2601      	movs	r6, #1
 800833a:	001c      	movs	r4, r3
 800833c:	006d      	lsls	r5, r5, #1
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	2c00      	cmp	r4, #0
 8008342:	db01      	blt.n	8008348 <__aeabi_fdiv+0x1f4>
 8008344:	4298      	cmp	r0, r3
 8008346:	d801      	bhi.n	800834c <__aeabi_fdiv+0x1f8>
 8008348:	1a1b      	subs	r3, r3, r0
 800834a:	4335      	orrs	r5, r6
 800834c:	3a01      	subs	r2, #1
 800834e:	2a00      	cmp	r2, #0
 8008350:	d1f3      	bne.n	800833a <__aeabi_fdiv+0x1e6>
 8008352:	1e5a      	subs	r2, r3, #1
 8008354:	4193      	sbcs	r3, r2
 8008356:	431d      	orrs	r5, r3
 8008358:	003b      	movs	r3, r7
 800835a:	337f      	adds	r3, #127	; 0x7f
 800835c:	000e      	movs	r6, r1
 800835e:	2b00      	cmp	r3, #0
 8008360:	dd00      	ble.n	8008364 <__aeabi_fdiv+0x210>
 8008362:	e741      	b.n	80081e8 <__aeabi_fdiv+0x94>
 8008364:	e7aa      	b.n	80082bc <__aeabi_fdiv+0x168>
 8008366:	221a      	movs	r2, #26
 8008368:	2501      	movs	r5, #1
 800836a:	1a1b      	subs	r3, r3, r0
 800836c:	e7e4      	b.n	8008338 <__aeabi_fdiv+0x1e4>
 800836e:	01ad      	lsls	r5, r5, #6
 8008370:	2000      	movs	r0, #0
 8008372:	0a6d      	lsrs	r5, r5, #9
 8008374:	e74f      	b.n	8008216 <__aeabi_fdiv+0xc2>
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	0801bc10 	.word	0x0801bc10
 800837c:	f7ffffff 	.word	0xf7ffffff
 8008380:	0801bc50 	.word	0x0801bc50

08008384 <__aeabi_fmul>:
 8008384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008386:	464f      	mov	r7, r9
 8008388:	4646      	mov	r6, r8
 800838a:	46d6      	mov	lr, sl
 800838c:	0244      	lsls	r4, r0, #9
 800838e:	0045      	lsls	r5, r0, #1
 8008390:	b5c0      	push	{r6, r7, lr}
 8008392:	0a64      	lsrs	r4, r4, #9
 8008394:	1c0f      	adds	r7, r1, #0
 8008396:	0e2d      	lsrs	r5, r5, #24
 8008398:	0fc6      	lsrs	r6, r0, #31
 800839a:	2d00      	cmp	r5, #0
 800839c:	d100      	bne.n	80083a0 <__aeabi_fmul+0x1c>
 800839e:	e08d      	b.n	80084bc <__aeabi_fmul+0x138>
 80083a0:	2dff      	cmp	r5, #255	; 0xff
 80083a2:	d100      	bne.n	80083a6 <__aeabi_fmul+0x22>
 80083a4:	e092      	b.n	80084cc <__aeabi_fmul+0x148>
 80083a6:	2300      	movs	r3, #0
 80083a8:	2080      	movs	r0, #128	; 0x80
 80083aa:	4699      	mov	r9, r3
 80083ac:	469a      	mov	sl, r3
 80083ae:	00e4      	lsls	r4, r4, #3
 80083b0:	04c0      	lsls	r0, r0, #19
 80083b2:	4304      	orrs	r4, r0
 80083b4:	3d7f      	subs	r5, #127	; 0x7f
 80083b6:	0278      	lsls	r0, r7, #9
 80083b8:	0a43      	lsrs	r3, r0, #9
 80083ba:	4698      	mov	r8, r3
 80083bc:	007b      	lsls	r3, r7, #1
 80083be:	0e1b      	lsrs	r3, r3, #24
 80083c0:	0fff      	lsrs	r7, r7, #31
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d100      	bne.n	80083c8 <__aeabi_fmul+0x44>
 80083c6:	e070      	b.n	80084aa <__aeabi_fmul+0x126>
 80083c8:	2bff      	cmp	r3, #255	; 0xff
 80083ca:	d100      	bne.n	80083ce <__aeabi_fmul+0x4a>
 80083cc:	e086      	b.n	80084dc <__aeabi_fmul+0x158>
 80083ce:	4642      	mov	r2, r8
 80083d0:	00d0      	lsls	r0, r2, #3
 80083d2:	2280      	movs	r2, #128	; 0x80
 80083d4:	3b7f      	subs	r3, #127	; 0x7f
 80083d6:	18ed      	adds	r5, r5, r3
 80083d8:	2300      	movs	r3, #0
 80083da:	04d2      	lsls	r2, r2, #19
 80083dc:	4302      	orrs	r2, r0
 80083de:	4690      	mov	r8, r2
 80083e0:	469c      	mov	ip, r3
 80083e2:	0031      	movs	r1, r6
 80083e4:	464b      	mov	r3, r9
 80083e6:	4079      	eors	r1, r7
 80083e8:	1c68      	adds	r0, r5, #1
 80083ea:	2b0f      	cmp	r3, #15
 80083ec:	d81c      	bhi.n	8008428 <__aeabi_fmul+0xa4>
 80083ee:	4a76      	ldr	r2, [pc, #472]	; (80085c8 <__aeabi_fmul+0x244>)
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	58d3      	ldr	r3, [r2, r3]
 80083f4:	469f      	mov	pc, r3
 80083f6:	0039      	movs	r1, r7
 80083f8:	4644      	mov	r4, r8
 80083fa:	46e2      	mov	sl, ip
 80083fc:	4653      	mov	r3, sl
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d00f      	beq.n	8008422 <__aeabi_fmul+0x9e>
 8008402:	2b03      	cmp	r3, #3
 8008404:	d100      	bne.n	8008408 <__aeabi_fmul+0x84>
 8008406:	e0d7      	b.n	80085b8 <__aeabi_fmul+0x234>
 8008408:	2b01      	cmp	r3, #1
 800840a:	d137      	bne.n	800847c <__aeabi_fmul+0xf8>
 800840c:	2000      	movs	r0, #0
 800840e:	2400      	movs	r4, #0
 8008410:	05c0      	lsls	r0, r0, #23
 8008412:	4320      	orrs	r0, r4
 8008414:	07c9      	lsls	r1, r1, #31
 8008416:	4308      	orrs	r0, r1
 8008418:	bce0      	pop	{r5, r6, r7}
 800841a:	46ba      	mov	sl, r7
 800841c:	46b1      	mov	r9, r6
 800841e:	46a8      	mov	r8, r5
 8008420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008422:	20ff      	movs	r0, #255	; 0xff
 8008424:	2400      	movs	r4, #0
 8008426:	e7f3      	b.n	8008410 <__aeabi_fmul+0x8c>
 8008428:	0c26      	lsrs	r6, r4, #16
 800842a:	0424      	lsls	r4, r4, #16
 800842c:	0c22      	lsrs	r2, r4, #16
 800842e:	4644      	mov	r4, r8
 8008430:	0424      	lsls	r4, r4, #16
 8008432:	0c24      	lsrs	r4, r4, #16
 8008434:	4643      	mov	r3, r8
 8008436:	0027      	movs	r7, r4
 8008438:	0c1b      	lsrs	r3, r3, #16
 800843a:	4357      	muls	r7, r2
 800843c:	4374      	muls	r4, r6
 800843e:	435a      	muls	r2, r3
 8008440:	435e      	muls	r6, r3
 8008442:	1912      	adds	r2, r2, r4
 8008444:	0c3b      	lsrs	r3, r7, #16
 8008446:	189b      	adds	r3, r3, r2
 8008448:	429c      	cmp	r4, r3
 800844a:	d903      	bls.n	8008454 <__aeabi_fmul+0xd0>
 800844c:	2280      	movs	r2, #128	; 0x80
 800844e:	0252      	lsls	r2, r2, #9
 8008450:	4694      	mov	ip, r2
 8008452:	4466      	add	r6, ip
 8008454:	043f      	lsls	r7, r7, #16
 8008456:	041a      	lsls	r2, r3, #16
 8008458:	0c3f      	lsrs	r7, r7, #16
 800845a:	19d2      	adds	r2, r2, r7
 800845c:	0194      	lsls	r4, r2, #6
 800845e:	1e67      	subs	r7, r4, #1
 8008460:	41bc      	sbcs	r4, r7
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	0e92      	lsrs	r2, r2, #26
 8008466:	199b      	adds	r3, r3, r6
 8008468:	4314      	orrs	r4, r2
 800846a:	019b      	lsls	r3, r3, #6
 800846c:	431c      	orrs	r4, r3
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	d400      	bmi.n	8008474 <__aeabi_fmul+0xf0>
 8008472:	e09b      	b.n	80085ac <__aeabi_fmul+0x228>
 8008474:	2301      	movs	r3, #1
 8008476:	0862      	lsrs	r2, r4, #1
 8008478:	401c      	ands	r4, r3
 800847a:	4314      	orrs	r4, r2
 800847c:	0002      	movs	r2, r0
 800847e:	327f      	adds	r2, #127	; 0x7f
 8008480:	2a00      	cmp	r2, #0
 8008482:	dd64      	ble.n	800854e <__aeabi_fmul+0x1ca>
 8008484:	0763      	lsls	r3, r4, #29
 8008486:	d004      	beq.n	8008492 <__aeabi_fmul+0x10e>
 8008488:	230f      	movs	r3, #15
 800848a:	4023      	ands	r3, r4
 800848c:	2b04      	cmp	r3, #4
 800848e:	d000      	beq.n	8008492 <__aeabi_fmul+0x10e>
 8008490:	3404      	adds	r4, #4
 8008492:	0123      	lsls	r3, r4, #4
 8008494:	d503      	bpl.n	800849e <__aeabi_fmul+0x11a>
 8008496:	0002      	movs	r2, r0
 8008498:	4b4c      	ldr	r3, [pc, #304]	; (80085cc <__aeabi_fmul+0x248>)
 800849a:	3280      	adds	r2, #128	; 0x80
 800849c:	401c      	ands	r4, r3
 800849e:	2afe      	cmp	r2, #254	; 0xfe
 80084a0:	dcbf      	bgt.n	8008422 <__aeabi_fmul+0x9e>
 80084a2:	01a4      	lsls	r4, r4, #6
 80084a4:	0a64      	lsrs	r4, r4, #9
 80084a6:	b2d0      	uxtb	r0, r2
 80084a8:	e7b2      	b.n	8008410 <__aeabi_fmul+0x8c>
 80084aa:	4643      	mov	r3, r8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d13d      	bne.n	800852c <__aeabi_fmul+0x1a8>
 80084b0:	464a      	mov	r2, r9
 80084b2:	3301      	adds	r3, #1
 80084b4:	431a      	orrs	r2, r3
 80084b6:	4691      	mov	r9, r2
 80084b8:	469c      	mov	ip, r3
 80084ba:	e792      	b.n	80083e2 <__aeabi_fmul+0x5e>
 80084bc:	2c00      	cmp	r4, #0
 80084be:	d129      	bne.n	8008514 <__aeabi_fmul+0x190>
 80084c0:	2304      	movs	r3, #4
 80084c2:	4699      	mov	r9, r3
 80084c4:	3b03      	subs	r3, #3
 80084c6:	2500      	movs	r5, #0
 80084c8:	469a      	mov	sl, r3
 80084ca:	e774      	b.n	80083b6 <__aeabi_fmul+0x32>
 80084cc:	2c00      	cmp	r4, #0
 80084ce:	d11b      	bne.n	8008508 <__aeabi_fmul+0x184>
 80084d0:	2308      	movs	r3, #8
 80084d2:	4699      	mov	r9, r3
 80084d4:	3b06      	subs	r3, #6
 80084d6:	25ff      	movs	r5, #255	; 0xff
 80084d8:	469a      	mov	sl, r3
 80084da:	e76c      	b.n	80083b6 <__aeabi_fmul+0x32>
 80084dc:	4643      	mov	r3, r8
 80084de:	35ff      	adds	r5, #255	; 0xff
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10b      	bne.n	80084fc <__aeabi_fmul+0x178>
 80084e4:	2302      	movs	r3, #2
 80084e6:	464a      	mov	r2, r9
 80084e8:	431a      	orrs	r2, r3
 80084ea:	4691      	mov	r9, r2
 80084ec:	469c      	mov	ip, r3
 80084ee:	e778      	b.n	80083e2 <__aeabi_fmul+0x5e>
 80084f0:	4653      	mov	r3, sl
 80084f2:	0031      	movs	r1, r6
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d000      	beq.n	80084fa <__aeabi_fmul+0x176>
 80084f8:	e783      	b.n	8008402 <__aeabi_fmul+0x7e>
 80084fa:	e792      	b.n	8008422 <__aeabi_fmul+0x9e>
 80084fc:	2303      	movs	r3, #3
 80084fe:	464a      	mov	r2, r9
 8008500:	431a      	orrs	r2, r3
 8008502:	4691      	mov	r9, r2
 8008504:	469c      	mov	ip, r3
 8008506:	e76c      	b.n	80083e2 <__aeabi_fmul+0x5e>
 8008508:	230c      	movs	r3, #12
 800850a:	4699      	mov	r9, r3
 800850c:	3b09      	subs	r3, #9
 800850e:	25ff      	movs	r5, #255	; 0xff
 8008510:	469a      	mov	sl, r3
 8008512:	e750      	b.n	80083b6 <__aeabi_fmul+0x32>
 8008514:	0020      	movs	r0, r4
 8008516:	f002 f97d 	bl	800a814 <__clzsi2>
 800851a:	2576      	movs	r5, #118	; 0x76
 800851c:	1f43      	subs	r3, r0, #5
 800851e:	409c      	lsls	r4, r3
 8008520:	2300      	movs	r3, #0
 8008522:	426d      	negs	r5, r5
 8008524:	4699      	mov	r9, r3
 8008526:	469a      	mov	sl, r3
 8008528:	1a2d      	subs	r5, r5, r0
 800852a:	e744      	b.n	80083b6 <__aeabi_fmul+0x32>
 800852c:	4640      	mov	r0, r8
 800852e:	f002 f971 	bl	800a814 <__clzsi2>
 8008532:	4642      	mov	r2, r8
 8008534:	1f43      	subs	r3, r0, #5
 8008536:	409a      	lsls	r2, r3
 8008538:	2300      	movs	r3, #0
 800853a:	1a2d      	subs	r5, r5, r0
 800853c:	4690      	mov	r8, r2
 800853e:	469c      	mov	ip, r3
 8008540:	3d76      	subs	r5, #118	; 0x76
 8008542:	e74e      	b.n	80083e2 <__aeabi_fmul+0x5e>
 8008544:	2480      	movs	r4, #128	; 0x80
 8008546:	2100      	movs	r1, #0
 8008548:	20ff      	movs	r0, #255	; 0xff
 800854a:	03e4      	lsls	r4, r4, #15
 800854c:	e760      	b.n	8008410 <__aeabi_fmul+0x8c>
 800854e:	2301      	movs	r3, #1
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	2b1b      	cmp	r3, #27
 8008554:	dd00      	ble.n	8008558 <__aeabi_fmul+0x1d4>
 8008556:	e759      	b.n	800840c <__aeabi_fmul+0x88>
 8008558:	0022      	movs	r2, r4
 800855a:	309e      	adds	r0, #158	; 0x9e
 800855c:	40da      	lsrs	r2, r3
 800855e:	4084      	lsls	r4, r0
 8008560:	0013      	movs	r3, r2
 8008562:	1e62      	subs	r2, r4, #1
 8008564:	4194      	sbcs	r4, r2
 8008566:	431c      	orrs	r4, r3
 8008568:	0763      	lsls	r3, r4, #29
 800856a:	d004      	beq.n	8008576 <__aeabi_fmul+0x1f2>
 800856c:	230f      	movs	r3, #15
 800856e:	4023      	ands	r3, r4
 8008570:	2b04      	cmp	r3, #4
 8008572:	d000      	beq.n	8008576 <__aeabi_fmul+0x1f2>
 8008574:	3404      	adds	r4, #4
 8008576:	0163      	lsls	r3, r4, #5
 8008578:	d51a      	bpl.n	80085b0 <__aeabi_fmul+0x22c>
 800857a:	2001      	movs	r0, #1
 800857c:	2400      	movs	r4, #0
 800857e:	e747      	b.n	8008410 <__aeabi_fmul+0x8c>
 8008580:	2080      	movs	r0, #128	; 0x80
 8008582:	03c0      	lsls	r0, r0, #15
 8008584:	4204      	tst	r4, r0
 8008586:	d009      	beq.n	800859c <__aeabi_fmul+0x218>
 8008588:	4643      	mov	r3, r8
 800858a:	4203      	tst	r3, r0
 800858c:	d106      	bne.n	800859c <__aeabi_fmul+0x218>
 800858e:	4644      	mov	r4, r8
 8008590:	4304      	orrs	r4, r0
 8008592:	0264      	lsls	r4, r4, #9
 8008594:	0039      	movs	r1, r7
 8008596:	20ff      	movs	r0, #255	; 0xff
 8008598:	0a64      	lsrs	r4, r4, #9
 800859a:	e739      	b.n	8008410 <__aeabi_fmul+0x8c>
 800859c:	2080      	movs	r0, #128	; 0x80
 800859e:	03c0      	lsls	r0, r0, #15
 80085a0:	4304      	orrs	r4, r0
 80085a2:	0264      	lsls	r4, r4, #9
 80085a4:	0031      	movs	r1, r6
 80085a6:	20ff      	movs	r0, #255	; 0xff
 80085a8:	0a64      	lsrs	r4, r4, #9
 80085aa:	e731      	b.n	8008410 <__aeabi_fmul+0x8c>
 80085ac:	0028      	movs	r0, r5
 80085ae:	e765      	b.n	800847c <__aeabi_fmul+0xf8>
 80085b0:	01a4      	lsls	r4, r4, #6
 80085b2:	2000      	movs	r0, #0
 80085b4:	0a64      	lsrs	r4, r4, #9
 80085b6:	e72b      	b.n	8008410 <__aeabi_fmul+0x8c>
 80085b8:	2080      	movs	r0, #128	; 0x80
 80085ba:	03c0      	lsls	r0, r0, #15
 80085bc:	4304      	orrs	r4, r0
 80085be:	0264      	lsls	r4, r4, #9
 80085c0:	20ff      	movs	r0, #255	; 0xff
 80085c2:	0a64      	lsrs	r4, r4, #9
 80085c4:	e724      	b.n	8008410 <__aeabi_fmul+0x8c>
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	0801bc90 	.word	0x0801bc90
 80085cc:	f7ffffff 	.word	0xf7ffffff

080085d0 <__aeabi_fsub>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	46ce      	mov	lr, r9
 80085d4:	4647      	mov	r7, r8
 80085d6:	0243      	lsls	r3, r0, #9
 80085d8:	0a5b      	lsrs	r3, r3, #9
 80085da:	024e      	lsls	r6, r1, #9
 80085dc:	00da      	lsls	r2, r3, #3
 80085de:	4694      	mov	ip, r2
 80085e0:	0a72      	lsrs	r2, r6, #9
 80085e2:	4691      	mov	r9, r2
 80085e4:	0045      	lsls	r5, r0, #1
 80085e6:	004a      	lsls	r2, r1, #1
 80085e8:	b580      	push	{r7, lr}
 80085ea:	0e2d      	lsrs	r5, r5, #24
 80085ec:	001f      	movs	r7, r3
 80085ee:	0fc4      	lsrs	r4, r0, #31
 80085f0:	0e12      	lsrs	r2, r2, #24
 80085f2:	0fc9      	lsrs	r1, r1, #31
 80085f4:	09b6      	lsrs	r6, r6, #6
 80085f6:	2aff      	cmp	r2, #255	; 0xff
 80085f8:	d05b      	beq.n	80086b2 <__aeabi_fsub+0xe2>
 80085fa:	2001      	movs	r0, #1
 80085fc:	4041      	eors	r1, r0
 80085fe:	428c      	cmp	r4, r1
 8008600:	d039      	beq.n	8008676 <__aeabi_fsub+0xa6>
 8008602:	1aa8      	subs	r0, r5, r2
 8008604:	2800      	cmp	r0, #0
 8008606:	dd5a      	ble.n	80086be <__aeabi_fsub+0xee>
 8008608:	2a00      	cmp	r2, #0
 800860a:	d06a      	beq.n	80086e2 <__aeabi_fsub+0x112>
 800860c:	2dff      	cmp	r5, #255	; 0xff
 800860e:	d100      	bne.n	8008612 <__aeabi_fsub+0x42>
 8008610:	e0d9      	b.n	80087c6 <__aeabi_fsub+0x1f6>
 8008612:	2280      	movs	r2, #128	; 0x80
 8008614:	04d2      	lsls	r2, r2, #19
 8008616:	4316      	orrs	r6, r2
 8008618:	281b      	cmp	r0, #27
 800861a:	dc00      	bgt.n	800861e <__aeabi_fsub+0x4e>
 800861c:	e0e9      	b.n	80087f2 <__aeabi_fsub+0x222>
 800861e:	2001      	movs	r0, #1
 8008620:	4663      	mov	r3, ip
 8008622:	1a18      	subs	r0, r3, r0
 8008624:	0143      	lsls	r3, r0, #5
 8008626:	d400      	bmi.n	800862a <__aeabi_fsub+0x5a>
 8008628:	e0b4      	b.n	8008794 <__aeabi_fsub+0x1c4>
 800862a:	0180      	lsls	r0, r0, #6
 800862c:	0987      	lsrs	r7, r0, #6
 800862e:	0038      	movs	r0, r7
 8008630:	f002 f8f0 	bl	800a814 <__clzsi2>
 8008634:	3805      	subs	r0, #5
 8008636:	4087      	lsls	r7, r0
 8008638:	4285      	cmp	r5, r0
 800863a:	dc00      	bgt.n	800863e <__aeabi_fsub+0x6e>
 800863c:	e0cc      	b.n	80087d8 <__aeabi_fsub+0x208>
 800863e:	1a2d      	subs	r5, r5, r0
 8008640:	48b5      	ldr	r0, [pc, #724]	; (8008918 <__aeabi_fsub+0x348>)
 8008642:	4038      	ands	r0, r7
 8008644:	0743      	lsls	r3, r0, #29
 8008646:	d004      	beq.n	8008652 <__aeabi_fsub+0x82>
 8008648:	230f      	movs	r3, #15
 800864a:	4003      	ands	r3, r0
 800864c:	2b04      	cmp	r3, #4
 800864e:	d000      	beq.n	8008652 <__aeabi_fsub+0x82>
 8008650:	3004      	adds	r0, #4
 8008652:	0143      	lsls	r3, r0, #5
 8008654:	d400      	bmi.n	8008658 <__aeabi_fsub+0x88>
 8008656:	e0a0      	b.n	800879a <__aeabi_fsub+0x1ca>
 8008658:	1c6a      	adds	r2, r5, #1
 800865a:	2dfe      	cmp	r5, #254	; 0xfe
 800865c:	d100      	bne.n	8008660 <__aeabi_fsub+0x90>
 800865e:	e08d      	b.n	800877c <__aeabi_fsub+0x1ac>
 8008660:	0180      	lsls	r0, r0, #6
 8008662:	0a47      	lsrs	r7, r0, #9
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	05d0      	lsls	r0, r2, #23
 8008668:	4338      	orrs	r0, r7
 800866a:	07e4      	lsls	r4, r4, #31
 800866c:	4320      	orrs	r0, r4
 800866e:	bcc0      	pop	{r6, r7}
 8008670:	46b9      	mov	r9, r7
 8008672:	46b0      	mov	r8, r6
 8008674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008676:	1aa8      	subs	r0, r5, r2
 8008678:	4680      	mov	r8, r0
 800867a:	2800      	cmp	r0, #0
 800867c:	dd45      	ble.n	800870a <__aeabi_fsub+0x13a>
 800867e:	2a00      	cmp	r2, #0
 8008680:	d070      	beq.n	8008764 <__aeabi_fsub+0x194>
 8008682:	2dff      	cmp	r5, #255	; 0xff
 8008684:	d100      	bne.n	8008688 <__aeabi_fsub+0xb8>
 8008686:	e09e      	b.n	80087c6 <__aeabi_fsub+0x1f6>
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	04db      	lsls	r3, r3, #19
 800868c:	431e      	orrs	r6, r3
 800868e:	4643      	mov	r3, r8
 8008690:	2b1b      	cmp	r3, #27
 8008692:	dc00      	bgt.n	8008696 <__aeabi_fsub+0xc6>
 8008694:	e0d2      	b.n	800883c <__aeabi_fsub+0x26c>
 8008696:	2001      	movs	r0, #1
 8008698:	4460      	add	r0, ip
 800869a:	0143      	lsls	r3, r0, #5
 800869c:	d57a      	bpl.n	8008794 <__aeabi_fsub+0x1c4>
 800869e:	3501      	adds	r5, #1
 80086a0:	2dff      	cmp	r5, #255	; 0xff
 80086a2:	d06b      	beq.n	800877c <__aeabi_fsub+0x1ac>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4a9d      	ldr	r2, [pc, #628]	; (800891c <__aeabi_fsub+0x34c>)
 80086a8:	4003      	ands	r3, r0
 80086aa:	0840      	lsrs	r0, r0, #1
 80086ac:	4010      	ands	r0, r2
 80086ae:	4318      	orrs	r0, r3
 80086b0:	e7c8      	b.n	8008644 <__aeabi_fsub+0x74>
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	d020      	beq.n	80086f8 <__aeabi_fsub+0x128>
 80086b6:	428c      	cmp	r4, r1
 80086b8:	d023      	beq.n	8008702 <__aeabi_fsub+0x132>
 80086ba:	0028      	movs	r0, r5
 80086bc:	38ff      	subs	r0, #255	; 0xff
 80086be:	2800      	cmp	r0, #0
 80086c0:	d039      	beq.n	8008736 <__aeabi_fsub+0x166>
 80086c2:	1b57      	subs	r7, r2, r5
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d000      	beq.n	80086ca <__aeabi_fsub+0xfa>
 80086c8:	e09d      	b.n	8008806 <__aeabi_fsub+0x236>
 80086ca:	4663      	mov	r3, ip
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d100      	bne.n	80086d2 <__aeabi_fsub+0x102>
 80086d0:	e0db      	b.n	800888a <__aeabi_fsub+0x2ba>
 80086d2:	1e7b      	subs	r3, r7, #1
 80086d4:	2f01      	cmp	r7, #1
 80086d6:	d100      	bne.n	80086da <__aeabi_fsub+0x10a>
 80086d8:	e10d      	b.n	80088f6 <__aeabi_fsub+0x326>
 80086da:	2fff      	cmp	r7, #255	; 0xff
 80086dc:	d071      	beq.n	80087c2 <__aeabi_fsub+0x1f2>
 80086de:	001f      	movs	r7, r3
 80086e0:	e098      	b.n	8008814 <__aeabi_fsub+0x244>
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	d100      	bne.n	80086e8 <__aeabi_fsub+0x118>
 80086e6:	e0a7      	b.n	8008838 <__aeabi_fsub+0x268>
 80086e8:	1e42      	subs	r2, r0, #1
 80086ea:	2801      	cmp	r0, #1
 80086ec:	d100      	bne.n	80086f0 <__aeabi_fsub+0x120>
 80086ee:	e0e6      	b.n	80088be <__aeabi_fsub+0x2ee>
 80086f0:	28ff      	cmp	r0, #255	; 0xff
 80086f2:	d068      	beq.n	80087c6 <__aeabi_fsub+0x1f6>
 80086f4:	0010      	movs	r0, r2
 80086f6:	e78f      	b.n	8008618 <__aeabi_fsub+0x48>
 80086f8:	2001      	movs	r0, #1
 80086fa:	4041      	eors	r1, r0
 80086fc:	42a1      	cmp	r1, r4
 80086fe:	d000      	beq.n	8008702 <__aeabi_fsub+0x132>
 8008700:	e77f      	b.n	8008602 <__aeabi_fsub+0x32>
 8008702:	20ff      	movs	r0, #255	; 0xff
 8008704:	4240      	negs	r0, r0
 8008706:	4680      	mov	r8, r0
 8008708:	44a8      	add	r8, r5
 800870a:	4640      	mov	r0, r8
 800870c:	2800      	cmp	r0, #0
 800870e:	d038      	beq.n	8008782 <__aeabi_fsub+0x1b2>
 8008710:	1b51      	subs	r1, r2, r5
 8008712:	2d00      	cmp	r5, #0
 8008714:	d100      	bne.n	8008718 <__aeabi_fsub+0x148>
 8008716:	e0ae      	b.n	8008876 <__aeabi_fsub+0x2a6>
 8008718:	2aff      	cmp	r2, #255	; 0xff
 800871a:	d100      	bne.n	800871e <__aeabi_fsub+0x14e>
 800871c:	e0df      	b.n	80088de <__aeabi_fsub+0x30e>
 800871e:	2380      	movs	r3, #128	; 0x80
 8008720:	4660      	mov	r0, ip
 8008722:	04db      	lsls	r3, r3, #19
 8008724:	4318      	orrs	r0, r3
 8008726:	4684      	mov	ip, r0
 8008728:	291b      	cmp	r1, #27
 800872a:	dc00      	bgt.n	800872e <__aeabi_fsub+0x15e>
 800872c:	e0d9      	b.n	80088e2 <__aeabi_fsub+0x312>
 800872e:	2001      	movs	r0, #1
 8008730:	0015      	movs	r5, r2
 8008732:	1980      	adds	r0, r0, r6
 8008734:	e7b1      	b.n	800869a <__aeabi_fsub+0xca>
 8008736:	20fe      	movs	r0, #254	; 0xfe
 8008738:	1c6a      	adds	r2, r5, #1
 800873a:	4210      	tst	r0, r2
 800873c:	d171      	bne.n	8008822 <__aeabi_fsub+0x252>
 800873e:	2d00      	cmp	r5, #0
 8008740:	d000      	beq.n	8008744 <__aeabi_fsub+0x174>
 8008742:	e0a6      	b.n	8008892 <__aeabi_fsub+0x2c2>
 8008744:	4663      	mov	r3, ip
 8008746:	2b00      	cmp	r3, #0
 8008748:	d100      	bne.n	800874c <__aeabi_fsub+0x17c>
 800874a:	e0d9      	b.n	8008900 <__aeabi_fsub+0x330>
 800874c:	2200      	movs	r2, #0
 800874e:	2e00      	cmp	r6, #0
 8008750:	d100      	bne.n	8008754 <__aeabi_fsub+0x184>
 8008752:	e788      	b.n	8008666 <__aeabi_fsub+0x96>
 8008754:	1b98      	subs	r0, r3, r6
 8008756:	0143      	lsls	r3, r0, #5
 8008758:	d400      	bmi.n	800875c <__aeabi_fsub+0x18c>
 800875a:	e0e1      	b.n	8008920 <__aeabi_fsub+0x350>
 800875c:	4663      	mov	r3, ip
 800875e:	000c      	movs	r4, r1
 8008760:	1af0      	subs	r0, r6, r3
 8008762:	e76f      	b.n	8008644 <__aeabi_fsub+0x74>
 8008764:	2e00      	cmp	r6, #0
 8008766:	d100      	bne.n	800876a <__aeabi_fsub+0x19a>
 8008768:	e0b7      	b.n	80088da <__aeabi_fsub+0x30a>
 800876a:	0002      	movs	r2, r0
 800876c:	3a01      	subs	r2, #1
 800876e:	2801      	cmp	r0, #1
 8008770:	d100      	bne.n	8008774 <__aeabi_fsub+0x1a4>
 8008772:	e09c      	b.n	80088ae <__aeabi_fsub+0x2de>
 8008774:	28ff      	cmp	r0, #255	; 0xff
 8008776:	d026      	beq.n	80087c6 <__aeabi_fsub+0x1f6>
 8008778:	4690      	mov	r8, r2
 800877a:	e788      	b.n	800868e <__aeabi_fsub+0xbe>
 800877c:	22ff      	movs	r2, #255	; 0xff
 800877e:	2700      	movs	r7, #0
 8008780:	e771      	b.n	8008666 <__aeabi_fsub+0x96>
 8008782:	20fe      	movs	r0, #254	; 0xfe
 8008784:	1c6a      	adds	r2, r5, #1
 8008786:	4210      	tst	r0, r2
 8008788:	d064      	beq.n	8008854 <__aeabi_fsub+0x284>
 800878a:	2aff      	cmp	r2, #255	; 0xff
 800878c:	d0f6      	beq.n	800877c <__aeabi_fsub+0x1ac>
 800878e:	0015      	movs	r5, r2
 8008790:	4466      	add	r6, ip
 8008792:	0870      	lsrs	r0, r6, #1
 8008794:	0743      	lsls	r3, r0, #29
 8008796:	d000      	beq.n	800879a <__aeabi_fsub+0x1ca>
 8008798:	e756      	b.n	8008648 <__aeabi_fsub+0x78>
 800879a:	08c3      	lsrs	r3, r0, #3
 800879c:	2dff      	cmp	r5, #255	; 0xff
 800879e:	d012      	beq.n	80087c6 <__aeabi_fsub+0x1f6>
 80087a0:	025b      	lsls	r3, r3, #9
 80087a2:	0a5f      	lsrs	r7, r3, #9
 80087a4:	b2ea      	uxtb	r2, r5
 80087a6:	e75e      	b.n	8008666 <__aeabi_fsub+0x96>
 80087a8:	4662      	mov	r2, ip
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d100      	bne.n	80087b0 <__aeabi_fsub+0x1e0>
 80087ae:	e096      	b.n	80088de <__aeabi_fsub+0x30e>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	d008      	beq.n	80087c6 <__aeabi_fsub+0x1f6>
 80087b4:	2280      	movs	r2, #128	; 0x80
 80087b6:	03d2      	lsls	r2, r2, #15
 80087b8:	4213      	tst	r3, r2
 80087ba:	d004      	beq.n	80087c6 <__aeabi_fsub+0x1f6>
 80087bc:	4648      	mov	r0, r9
 80087be:	4210      	tst	r0, r2
 80087c0:	d101      	bne.n	80087c6 <__aeabi_fsub+0x1f6>
 80087c2:	000c      	movs	r4, r1
 80087c4:	464b      	mov	r3, r9
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0d8      	beq.n	800877c <__aeabi_fsub+0x1ac>
 80087ca:	2780      	movs	r7, #128	; 0x80
 80087cc:	03ff      	lsls	r7, r7, #15
 80087ce:	431f      	orrs	r7, r3
 80087d0:	027f      	lsls	r7, r7, #9
 80087d2:	22ff      	movs	r2, #255	; 0xff
 80087d4:	0a7f      	lsrs	r7, r7, #9
 80087d6:	e746      	b.n	8008666 <__aeabi_fsub+0x96>
 80087d8:	2320      	movs	r3, #32
 80087da:	003a      	movs	r2, r7
 80087dc:	1b45      	subs	r5, r0, r5
 80087de:	0038      	movs	r0, r7
 80087e0:	3501      	adds	r5, #1
 80087e2:	40ea      	lsrs	r2, r5
 80087e4:	1b5d      	subs	r5, r3, r5
 80087e6:	40a8      	lsls	r0, r5
 80087e8:	1e43      	subs	r3, r0, #1
 80087ea:	4198      	sbcs	r0, r3
 80087ec:	2500      	movs	r5, #0
 80087ee:	4310      	orrs	r0, r2
 80087f0:	e728      	b.n	8008644 <__aeabi_fsub+0x74>
 80087f2:	2320      	movs	r3, #32
 80087f4:	1a1b      	subs	r3, r3, r0
 80087f6:	0032      	movs	r2, r6
 80087f8:	409e      	lsls	r6, r3
 80087fa:	40c2      	lsrs	r2, r0
 80087fc:	0030      	movs	r0, r6
 80087fe:	1e43      	subs	r3, r0, #1
 8008800:	4198      	sbcs	r0, r3
 8008802:	4310      	orrs	r0, r2
 8008804:	e70c      	b.n	8008620 <__aeabi_fsub+0x50>
 8008806:	2aff      	cmp	r2, #255	; 0xff
 8008808:	d0db      	beq.n	80087c2 <__aeabi_fsub+0x1f2>
 800880a:	2380      	movs	r3, #128	; 0x80
 800880c:	4660      	mov	r0, ip
 800880e:	04db      	lsls	r3, r3, #19
 8008810:	4318      	orrs	r0, r3
 8008812:	4684      	mov	ip, r0
 8008814:	2f1b      	cmp	r7, #27
 8008816:	dd56      	ble.n	80088c6 <__aeabi_fsub+0x2f6>
 8008818:	2001      	movs	r0, #1
 800881a:	000c      	movs	r4, r1
 800881c:	0015      	movs	r5, r2
 800881e:	1a30      	subs	r0, r6, r0
 8008820:	e700      	b.n	8008624 <__aeabi_fsub+0x54>
 8008822:	4663      	mov	r3, ip
 8008824:	1b9f      	subs	r7, r3, r6
 8008826:	017b      	lsls	r3, r7, #5
 8008828:	d43d      	bmi.n	80088a6 <__aeabi_fsub+0x2d6>
 800882a:	2f00      	cmp	r7, #0
 800882c:	d000      	beq.n	8008830 <__aeabi_fsub+0x260>
 800882e:	e6fe      	b.n	800862e <__aeabi_fsub+0x5e>
 8008830:	2400      	movs	r4, #0
 8008832:	2200      	movs	r2, #0
 8008834:	2700      	movs	r7, #0
 8008836:	e716      	b.n	8008666 <__aeabi_fsub+0x96>
 8008838:	0005      	movs	r5, r0
 800883a:	e7af      	b.n	800879c <__aeabi_fsub+0x1cc>
 800883c:	0032      	movs	r2, r6
 800883e:	4643      	mov	r3, r8
 8008840:	4641      	mov	r1, r8
 8008842:	40da      	lsrs	r2, r3
 8008844:	2320      	movs	r3, #32
 8008846:	1a5b      	subs	r3, r3, r1
 8008848:	409e      	lsls	r6, r3
 800884a:	0030      	movs	r0, r6
 800884c:	1e43      	subs	r3, r0, #1
 800884e:	4198      	sbcs	r0, r3
 8008850:	4310      	orrs	r0, r2
 8008852:	e721      	b.n	8008698 <__aeabi_fsub+0xc8>
 8008854:	2d00      	cmp	r5, #0
 8008856:	d1a7      	bne.n	80087a8 <__aeabi_fsub+0x1d8>
 8008858:	4663      	mov	r3, ip
 800885a:	2b00      	cmp	r3, #0
 800885c:	d059      	beq.n	8008912 <__aeabi_fsub+0x342>
 800885e:	2200      	movs	r2, #0
 8008860:	2e00      	cmp	r6, #0
 8008862:	d100      	bne.n	8008866 <__aeabi_fsub+0x296>
 8008864:	e6ff      	b.n	8008666 <__aeabi_fsub+0x96>
 8008866:	0030      	movs	r0, r6
 8008868:	4460      	add	r0, ip
 800886a:	0143      	lsls	r3, r0, #5
 800886c:	d592      	bpl.n	8008794 <__aeabi_fsub+0x1c4>
 800886e:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <__aeabi_fsub+0x348>)
 8008870:	3501      	adds	r5, #1
 8008872:	4018      	ands	r0, r3
 8008874:	e78e      	b.n	8008794 <__aeabi_fsub+0x1c4>
 8008876:	4663      	mov	r3, ip
 8008878:	2b00      	cmp	r3, #0
 800887a:	d047      	beq.n	800890c <__aeabi_fsub+0x33c>
 800887c:	1e4b      	subs	r3, r1, #1
 800887e:	2901      	cmp	r1, #1
 8008880:	d015      	beq.n	80088ae <__aeabi_fsub+0x2de>
 8008882:	29ff      	cmp	r1, #255	; 0xff
 8008884:	d02b      	beq.n	80088de <__aeabi_fsub+0x30e>
 8008886:	0019      	movs	r1, r3
 8008888:	e74e      	b.n	8008728 <__aeabi_fsub+0x158>
 800888a:	000c      	movs	r4, r1
 800888c:	464b      	mov	r3, r9
 800888e:	003d      	movs	r5, r7
 8008890:	e784      	b.n	800879c <__aeabi_fsub+0x1cc>
 8008892:	4662      	mov	r2, ip
 8008894:	2a00      	cmp	r2, #0
 8008896:	d18b      	bne.n	80087b0 <__aeabi_fsub+0x1e0>
 8008898:	2e00      	cmp	r6, #0
 800889a:	d192      	bne.n	80087c2 <__aeabi_fsub+0x1f2>
 800889c:	2780      	movs	r7, #128	; 0x80
 800889e:	2400      	movs	r4, #0
 80088a0:	22ff      	movs	r2, #255	; 0xff
 80088a2:	03ff      	lsls	r7, r7, #15
 80088a4:	e6df      	b.n	8008666 <__aeabi_fsub+0x96>
 80088a6:	4663      	mov	r3, ip
 80088a8:	000c      	movs	r4, r1
 80088aa:	1af7      	subs	r7, r6, r3
 80088ac:	e6bf      	b.n	800862e <__aeabi_fsub+0x5e>
 80088ae:	0030      	movs	r0, r6
 80088b0:	4460      	add	r0, ip
 80088b2:	2501      	movs	r5, #1
 80088b4:	0143      	lsls	r3, r0, #5
 80088b6:	d400      	bmi.n	80088ba <__aeabi_fsub+0x2ea>
 80088b8:	e76c      	b.n	8008794 <__aeabi_fsub+0x1c4>
 80088ba:	2502      	movs	r5, #2
 80088bc:	e6f2      	b.n	80086a4 <__aeabi_fsub+0xd4>
 80088be:	4663      	mov	r3, ip
 80088c0:	2501      	movs	r5, #1
 80088c2:	1b98      	subs	r0, r3, r6
 80088c4:	e6ae      	b.n	8008624 <__aeabi_fsub+0x54>
 80088c6:	2320      	movs	r3, #32
 80088c8:	4664      	mov	r4, ip
 80088ca:	4660      	mov	r0, ip
 80088cc:	40fc      	lsrs	r4, r7
 80088ce:	1bdf      	subs	r7, r3, r7
 80088d0:	40b8      	lsls	r0, r7
 80088d2:	1e43      	subs	r3, r0, #1
 80088d4:	4198      	sbcs	r0, r3
 80088d6:	4320      	orrs	r0, r4
 80088d8:	e79f      	b.n	800881a <__aeabi_fsub+0x24a>
 80088da:	0005      	movs	r5, r0
 80088dc:	e75e      	b.n	800879c <__aeabi_fsub+0x1cc>
 80088de:	464b      	mov	r3, r9
 80088e0:	e771      	b.n	80087c6 <__aeabi_fsub+0x1f6>
 80088e2:	2320      	movs	r3, #32
 80088e4:	4665      	mov	r5, ip
 80088e6:	4660      	mov	r0, ip
 80088e8:	40cd      	lsrs	r5, r1
 80088ea:	1a59      	subs	r1, r3, r1
 80088ec:	4088      	lsls	r0, r1
 80088ee:	1e43      	subs	r3, r0, #1
 80088f0:	4198      	sbcs	r0, r3
 80088f2:	4328      	orrs	r0, r5
 80088f4:	e71c      	b.n	8008730 <__aeabi_fsub+0x160>
 80088f6:	4663      	mov	r3, ip
 80088f8:	000c      	movs	r4, r1
 80088fa:	2501      	movs	r5, #1
 80088fc:	1af0      	subs	r0, r6, r3
 80088fe:	e691      	b.n	8008624 <__aeabi_fsub+0x54>
 8008900:	2e00      	cmp	r6, #0
 8008902:	d095      	beq.n	8008830 <__aeabi_fsub+0x260>
 8008904:	000c      	movs	r4, r1
 8008906:	464f      	mov	r7, r9
 8008908:	2200      	movs	r2, #0
 800890a:	e6ac      	b.n	8008666 <__aeabi_fsub+0x96>
 800890c:	464b      	mov	r3, r9
 800890e:	000d      	movs	r5, r1
 8008910:	e744      	b.n	800879c <__aeabi_fsub+0x1cc>
 8008912:	464f      	mov	r7, r9
 8008914:	2200      	movs	r2, #0
 8008916:	e6a6      	b.n	8008666 <__aeabi_fsub+0x96>
 8008918:	fbffffff 	.word	0xfbffffff
 800891c:	7dffffff 	.word	0x7dffffff
 8008920:	2800      	cmp	r0, #0
 8008922:	d000      	beq.n	8008926 <__aeabi_fsub+0x356>
 8008924:	e736      	b.n	8008794 <__aeabi_fsub+0x1c4>
 8008926:	2400      	movs	r4, #0
 8008928:	2700      	movs	r7, #0
 800892a:	e69c      	b.n	8008666 <__aeabi_fsub+0x96>

0800892c <__aeabi_fcmpun>:
 800892c:	0243      	lsls	r3, r0, #9
 800892e:	024a      	lsls	r2, r1, #9
 8008930:	0040      	lsls	r0, r0, #1
 8008932:	0049      	lsls	r1, r1, #1
 8008934:	0a5b      	lsrs	r3, r3, #9
 8008936:	0a52      	lsrs	r2, r2, #9
 8008938:	0e09      	lsrs	r1, r1, #24
 800893a:	0e00      	lsrs	r0, r0, #24
 800893c:	28ff      	cmp	r0, #255	; 0xff
 800893e:	d006      	beq.n	800894e <__aeabi_fcmpun+0x22>
 8008940:	2000      	movs	r0, #0
 8008942:	29ff      	cmp	r1, #255	; 0xff
 8008944:	d102      	bne.n	800894c <__aeabi_fcmpun+0x20>
 8008946:	1e53      	subs	r3, r2, #1
 8008948:	419a      	sbcs	r2, r3
 800894a:	0010      	movs	r0, r2
 800894c:	4770      	bx	lr
 800894e:	38fe      	subs	r0, #254	; 0xfe
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1fb      	bne.n	800894c <__aeabi_fcmpun+0x20>
 8008954:	e7f4      	b.n	8008940 <__aeabi_fcmpun+0x14>
 8008956:	46c0      	nop			; (mov r8, r8)

08008958 <__aeabi_f2iz>:
 8008958:	0241      	lsls	r1, r0, #9
 800895a:	0042      	lsls	r2, r0, #1
 800895c:	0fc3      	lsrs	r3, r0, #31
 800895e:	0a49      	lsrs	r1, r1, #9
 8008960:	2000      	movs	r0, #0
 8008962:	0e12      	lsrs	r2, r2, #24
 8008964:	2a7e      	cmp	r2, #126	; 0x7e
 8008966:	dd03      	ble.n	8008970 <__aeabi_f2iz+0x18>
 8008968:	2a9d      	cmp	r2, #157	; 0x9d
 800896a:	dd02      	ble.n	8008972 <__aeabi_f2iz+0x1a>
 800896c:	4a09      	ldr	r2, [pc, #36]	; (8008994 <__aeabi_f2iz+0x3c>)
 800896e:	1898      	adds	r0, r3, r2
 8008970:	4770      	bx	lr
 8008972:	2080      	movs	r0, #128	; 0x80
 8008974:	0400      	lsls	r0, r0, #16
 8008976:	4301      	orrs	r1, r0
 8008978:	2a95      	cmp	r2, #149	; 0x95
 800897a:	dc07      	bgt.n	800898c <__aeabi_f2iz+0x34>
 800897c:	2096      	movs	r0, #150	; 0x96
 800897e:	1a82      	subs	r2, r0, r2
 8008980:	40d1      	lsrs	r1, r2
 8008982:	4248      	negs	r0, r1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1f3      	bne.n	8008970 <__aeabi_f2iz+0x18>
 8008988:	0008      	movs	r0, r1
 800898a:	e7f1      	b.n	8008970 <__aeabi_f2iz+0x18>
 800898c:	3a96      	subs	r2, #150	; 0x96
 800898e:	4091      	lsls	r1, r2
 8008990:	e7f7      	b.n	8008982 <__aeabi_f2iz+0x2a>
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	7fffffff 	.word	0x7fffffff

08008998 <__aeabi_i2f>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	2800      	cmp	r0, #0
 800899c:	d013      	beq.n	80089c6 <__aeabi_i2f+0x2e>
 800899e:	17c3      	asrs	r3, r0, #31
 80089a0:	18c6      	adds	r6, r0, r3
 80089a2:	405e      	eors	r6, r3
 80089a4:	0fc4      	lsrs	r4, r0, #31
 80089a6:	0030      	movs	r0, r6
 80089a8:	f001 ff34 	bl	800a814 <__clzsi2>
 80089ac:	239e      	movs	r3, #158	; 0x9e
 80089ae:	0005      	movs	r5, r0
 80089b0:	1a1b      	subs	r3, r3, r0
 80089b2:	2b96      	cmp	r3, #150	; 0x96
 80089b4:	dc0f      	bgt.n	80089d6 <__aeabi_i2f+0x3e>
 80089b6:	2808      	cmp	r0, #8
 80089b8:	dd01      	ble.n	80089be <__aeabi_i2f+0x26>
 80089ba:	3d08      	subs	r5, #8
 80089bc:	40ae      	lsls	r6, r5
 80089be:	0276      	lsls	r6, r6, #9
 80089c0:	0a76      	lsrs	r6, r6, #9
 80089c2:	b2d8      	uxtb	r0, r3
 80089c4:	e002      	b.n	80089cc <__aeabi_i2f+0x34>
 80089c6:	2400      	movs	r4, #0
 80089c8:	2000      	movs	r0, #0
 80089ca:	2600      	movs	r6, #0
 80089cc:	05c0      	lsls	r0, r0, #23
 80089ce:	4330      	orrs	r0, r6
 80089d0:	07e4      	lsls	r4, r4, #31
 80089d2:	4320      	orrs	r0, r4
 80089d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d6:	2b99      	cmp	r3, #153	; 0x99
 80089d8:	dd0c      	ble.n	80089f4 <__aeabi_i2f+0x5c>
 80089da:	2205      	movs	r2, #5
 80089dc:	0031      	movs	r1, r6
 80089de:	1a12      	subs	r2, r2, r0
 80089e0:	40d1      	lsrs	r1, r2
 80089e2:	000a      	movs	r2, r1
 80089e4:	0001      	movs	r1, r0
 80089e6:	0030      	movs	r0, r6
 80089e8:	311b      	adds	r1, #27
 80089ea:	4088      	lsls	r0, r1
 80089ec:	1e41      	subs	r1, r0, #1
 80089ee:	4188      	sbcs	r0, r1
 80089f0:	4302      	orrs	r2, r0
 80089f2:	0016      	movs	r6, r2
 80089f4:	2d05      	cmp	r5, #5
 80089f6:	dc12      	bgt.n	8008a1e <__aeabi_i2f+0x86>
 80089f8:	0031      	movs	r1, r6
 80089fa:	4f0d      	ldr	r7, [pc, #52]	; (8008a30 <__aeabi_i2f+0x98>)
 80089fc:	4039      	ands	r1, r7
 80089fe:	0772      	lsls	r2, r6, #29
 8008a00:	d009      	beq.n	8008a16 <__aeabi_i2f+0x7e>
 8008a02:	200f      	movs	r0, #15
 8008a04:	4030      	ands	r0, r6
 8008a06:	2804      	cmp	r0, #4
 8008a08:	d005      	beq.n	8008a16 <__aeabi_i2f+0x7e>
 8008a0a:	3104      	adds	r1, #4
 8008a0c:	014a      	lsls	r2, r1, #5
 8008a0e:	d502      	bpl.n	8008a16 <__aeabi_i2f+0x7e>
 8008a10:	239f      	movs	r3, #159	; 0x9f
 8008a12:	4039      	ands	r1, r7
 8008a14:	1b5b      	subs	r3, r3, r5
 8008a16:	0189      	lsls	r1, r1, #6
 8008a18:	0a4e      	lsrs	r6, r1, #9
 8008a1a:	b2d8      	uxtb	r0, r3
 8008a1c:	e7d6      	b.n	80089cc <__aeabi_i2f+0x34>
 8008a1e:	1f6a      	subs	r2, r5, #5
 8008a20:	4096      	lsls	r6, r2
 8008a22:	0031      	movs	r1, r6
 8008a24:	4f02      	ldr	r7, [pc, #8]	; (8008a30 <__aeabi_i2f+0x98>)
 8008a26:	4039      	ands	r1, r7
 8008a28:	0772      	lsls	r2, r6, #29
 8008a2a:	d0f4      	beq.n	8008a16 <__aeabi_i2f+0x7e>
 8008a2c:	e7e9      	b.n	8008a02 <__aeabi_i2f+0x6a>
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	fbffffff 	.word	0xfbffffff

08008a34 <__aeabi_dadd>:
 8008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a36:	464f      	mov	r7, r9
 8008a38:	4646      	mov	r6, r8
 8008a3a:	46d6      	mov	lr, sl
 8008a3c:	000d      	movs	r5, r1
 8008a3e:	0004      	movs	r4, r0
 8008a40:	b5c0      	push	{r6, r7, lr}
 8008a42:	001f      	movs	r7, r3
 8008a44:	0011      	movs	r1, r2
 8008a46:	0328      	lsls	r0, r5, #12
 8008a48:	0f62      	lsrs	r2, r4, #29
 8008a4a:	0a40      	lsrs	r0, r0, #9
 8008a4c:	4310      	orrs	r0, r2
 8008a4e:	007a      	lsls	r2, r7, #1
 8008a50:	0d52      	lsrs	r2, r2, #21
 8008a52:	00e3      	lsls	r3, r4, #3
 8008a54:	033c      	lsls	r4, r7, #12
 8008a56:	4691      	mov	r9, r2
 8008a58:	0a64      	lsrs	r4, r4, #9
 8008a5a:	0ffa      	lsrs	r2, r7, #31
 8008a5c:	0f4f      	lsrs	r7, r1, #29
 8008a5e:	006e      	lsls	r6, r5, #1
 8008a60:	4327      	orrs	r7, r4
 8008a62:	4692      	mov	sl, r2
 8008a64:	46b8      	mov	r8, r7
 8008a66:	0d76      	lsrs	r6, r6, #21
 8008a68:	0fed      	lsrs	r5, r5, #31
 8008a6a:	00c9      	lsls	r1, r1, #3
 8008a6c:	4295      	cmp	r5, r2
 8008a6e:	d100      	bne.n	8008a72 <__aeabi_dadd+0x3e>
 8008a70:	e099      	b.n	8008ba6 <__aeabi_dadd+0x172>
 8008a72:	464c      	mov	r4, r9
 8008a74:	1b34      	subs	r4, r6, r4
 8008a76:	46a4      	mov	ip, r4
 8008a78:	2c00      	cmp	r4, #0
 8008a7a:	dc00      	bgt.n	8008a7e <__aeabi_dadd+0x4a>
 8008a7c:	e07c      	b.n	8008b78 <__aeabi_dadd+0x144>
 8008a7e:	464a      	mov	r2, r9
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d100      	bne.n	8008a86 <__aeabi_dadd+0x52>
 8008a84:	e0b8      	b.n	8008bf8 <__aeabi_dadd+0x1c4>
 8008a86:	4ac5      	ldr	r2, [pc, #788]	; (8008d9c <__aeabi_dadd+0x368>)
 8008a88:	4296      	cmp	r6, r2
 8008a8a:	d100      	bne.n	8008a8e <__aeabi_dadd+0x5a>
 8008a8c:	e11c      	b.n	8008cc8 <__aeabi_dadd+0x294>
 8008a8e:	2280      	movs	r2, #128	; 0x80
 8008a90:	003c      	movs	r4, r7
 8008a92:	0412      	lsls	r2, r2, #16
 8008a94:	4314      	orrs	r4, r2
 8008a96:	46a0      	mov	r8, r4
 8008a98:	4662      	mov	r2, ip
 8008a9a:	2a38      	cmp	r2, #56	; 0x38
 8008a9c:	dd00      	ble.n	8008aa0 <__aeabi_dadd+0x6c>
 8008a9e:	e161      	b.n	8008d64 <__aeabi_dadd+0x330>
 8008aa0:	2a1f      	cmp	r2, #31
 8008aa2:	dd00      	ble.n	8008aa6 <__aeabi_dadd+0x72>
 8008aa4:	e1cc      	b.n	8008e40 <__aeabi_dadd+0x40c>
 8008aa6:	4664      	mov	r4, ip
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	1b12      	subs	r2, r2, r4
 8008aac:	4644      	mov	r4, r8
 8008aae:	4094      	lsls	r4, r2
 8008ab0:	000f      	movs	r7, r1
 8008ab2:	46a1      	mov	r9, r4
 8008ab4:	4664      	mov	r4, ip
 8008ab6:	4091      	lsls	r1, r2
 8008ab8:	40e7      	lsrs	r7, r4
 8008aba:	464c      	mov	r4, r9
 8008abc:	1e4a      	subs	r2, r1, #1
 8008abe:	4191      	sbcs	r1, r2
 8008ac0:	433c      	orrs	r4, r7
 8008ac2:	4642      	mov	r2, r8
 8008ac4:	4321      	orrs	r1, r4
 8008ac6:	4664      	mov	r4, ip
 8008ac8:	40e2      	lsrs	r2, r4
 8008aca:	1a80      	subs	r0, r0, r2
 8008acc:	1a5c      	subs	r4, r3, r1
 8008ace:	42a3      	cmp	r3, r4
 8008ad0:	419b      	sbcs	r3, r3
 8008ad2:	425f      	negs	r7, r3
 8008ad4:	1bc7      	subs	r7, r0, r7
 8008ad6:	023b      	lsls	r3, r7, #8
 8008ad8:	d400      	bmi.n	8008adc <__aeabi_dadd+0xa8>
 8008ada:	e0d0      	b.n	8008c7e <__aeabi_dadd+0x24a>
 8008adc:	027f      	lsls	r7, r7, #9
 8008ade:	0a7f      	lsrs	r7, r7, #9
 8008ae0:	2f00      	cmp	r7, #0
 8008ae2:	d100      	bne.n	8008ae6 <__aeabi_dadd+0xb2>
 8008ae4:	e0ff      	b.n	8008ce6 <__aeabi_dadd+0x2b2>
 8008ae6:	0038      	movs	r0, r7
 8008ae8:	f001 fe94 	bl	800a814 <__clzsi2>
 8008aec:	0001      	movs	r1, r0
 8008aee:	3908      	subs	r1, #8
 8008af0:	2320      	movs	r3, #32
 8008af2:	0022      	movs	r2, r4
 8008af4:	1a5b      	subs	r3, r3, r1
 8008af6:	408f      	lsls	r7, r1
 8008af8:	40da      	lsrs	r2, r3
 8008afa:	408c      	lsls	r4, r1
 8008afc:	4317      	orrs	r7, r2
 8008afe:	42b1      	cmp	r1, r6
 8008b00:	da00      	bge.n	8008b04 <__aeabi_dadd+0xd0>
 8008b02:	e0ff      	b.n	8008d04 <__aeabi_dadd+0x2d0>
 8008b04:	1b89      	subs	r1, r1, r6
 8008b06:	1c4b      	adds	r3, r1, #1
 8008b08:	2b1f      	cmp	r3, #31
 8008b0a:	dd00      	ble.n	8008b0e <__aeabi_dadd+0xda>
 8008b0c:	e0a8      	b.n	8008c60 <__aeabi_dadd+0x22c>
 8008b0e:	2220      	movs	r2, #32
 8008b10:	0039      	movs	r1, r7
 8008b12:	1ad2      	subs	r2, r2, r3
 8008b14:	0020      	movs	r0, r4
 8008b16:	4094      	lsls	r4, r2
 8008b18:	4091      	lsls	r1, r2
 8008b1a:	40d8      	lsrs	r0, r3
 8008b1c:	1e62      	subs	r2, r4, #1
 8008b1e:	4194      	sbcs	r4, r2
 8008b20:	40df      	lsrs	r7, r3
 8008b22:	2600      	movs	r6, #0
 8008b24:	4301      	orrs	r1, r0
 8008b26:	430c      	orrs	r4, r1
 8008b28:	0763      	lsls	r3, r4, #29
 8008b2a:	d009      	beq.n	8008b40 <__aeabi_dadd+0x10c>
 8008b2c:	230f      	movs	r3, #15
 8008b2e:	4023      	ands	r3, r4
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d005      	beq.n	8008b40 <__aeabi_dadd+0x10c>
 8008b34:	1d23      	adds	r3, r4, #4
 8008b36:	42a3      	cmp	r3, r4
 8008b38:	41a4      	sbcs	r4, r4
 8008b3a:	4264      	negs	r4, r4
 8008b3c:	193f      	adds	r7, r7, r4
 8008b3e:	001c      	movs	r4, r3
 8008b40:	023b      	lsls	r3, r7, #8
 8008b42:	d400      	bmi.n	8008b46 <__aeabi_dadd+0x112>
 8008b44:	e09e      	b.n	8008c84 <__aeabi_dadd+0x250>
 8008b46:	4b95      	ldr	r3, [pc, #596]	; (8008d9c <__aeabi_dadd+0x368>)
 8008b48:	3601      	adds	r6, #1
 8008b4a:	429e      	cmp	r6, r3
 8008b4c:	d100      	bne.n	8008b50 <__aeabi_dadd+0x11c>
 8008b4e:	e0b7      	b.n	8008cc0 <__aeabi_dadd+0x28c>
 8008b50:	4a93      	ldr	r2, [pc, #588]	; (8008da0 <__aeabi_dadd+0x36c>)
 8008b52:	08e4      	lsrs	r4, r4, #3
 8008b54:	4017      	ands	r7, r2
 8008b56:	077b      	lsls	r3, r7, #29
 8008b58:	0571      	lsls	r1, r6, #21
 8008b5a:	027f      	lsls	r7, r7, #9
 8008b5c:	4323      	orrs	r3, r4
 8008b5e:	0b3f      	lsrs	r7, r7, #12
 8008b60:	0d4a      	lsrs	r2, r1, #21
 8008b62:	0512      	lsls	r2, r2, #20
 8008b64:	433a      	orrs	r2, r7
 8008b66:	07ed      	lsls	r5, r5, #31
 8008b68:	432a      	orrs	r2, r5
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	0011      	movs	r1, r2
 8008b6e:	bce0      	pop	{r5, r6, r7}
 8008b70:	46ba      	mov	sl, r7
 8008b72:	46b1      	mov	r9, r6
 8008b74:	46a8      	mov	r8, r5
 8008b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b78:	2c00      	cmp	r4, #0
 8008b7a:	d04b      	beq.n	8008c14 <__aeabi_dadd+0x1e0>
 8008b7c:	464c      	mov	r4, r9
 8008b7e:	1ba4      	subs	r4, r4, r6
 8008b80:	46a4      	mov	ip, r4
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	d000      	beq.n	8008b88 <__aeabi_dadd+0x154>
 8008b86:	e123      	b.n	8008dd0 <__aeabi_dadd+0x39c>
 8008b88:	0004      	movs	r4, r0
 8008b8a:	431c      	orrs	r4, r3
 8008b8c:	d100      	bne.n	8008b90 <__aeabi_dadd+0x15c>
 8008b8e:	e1af      	b.n	8008ef0 <__aeabi_dadd+0x4bc>
 8008b90:	4662      	mov	r2, ip
 8008b92:	1e54      	subs	r4, r2, #1
 8008b94:	2a01      	cmp	r2, #1
 8008b96:	d100      	bne.n	8008b9a <__aeabi_dadd+0x166>
 8008b98:	e215      	b.n	8008fc6 <__aeabi_dadd+0x592>
 8008b9a:	4d80      	ldr	r5, [pc, #512]	; (8008d9c <__aeabi_dadd+0x368>)
 8008b9c:	45ac      	cmp	ip, r5
 8008b9e:	d100      	bne.n	8008ba2 <__aeabi_dadd+0x16e>
 8008ba0:	e1c8      	b.n	8008f34 <__aeabi_dadd+0x500>
 8008ba2:	46a4      	mov	ip, r4
 8008ba4:	e11b      	b.n	8008dde <__aeabi_dadd+0x3aa>
 8008ba6:	464a      	mov	r2, r9
 8008ba8:	1ab2      	subs	r2, r6, r2
 8008baa:	4694      	mov	ip, r2
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	dc00      	bgt.n	8008bb2 <__aeabi_dadd+0x17e>
 8008bb0:	e0ac      	b.n	8008d0c <__aeabi_dadd+0x2d8>
 8008bb2:	464a      	mov	r2, r9
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	d043      	beq.n	8008c40 <__aeabi_dadd+0x20c>
 8008bb8:	4a78      	ldr	r2, [pc, #480]	; (8008d9c <__aeabi_dadd+0x368>)
 8008bba:	4296      	cmp	r6, r2
 8008bbc:	d100      	bne.n	8008bc0 <__aeabi_dadd+0x18c>
 8008bbe:	e1af      	b.n	8008f20 <__aeabi_dadd+0x4ec>
 8008bc0:	2280      	movs	r2, #128	; 0x80
 8008bc2:	003c      	movs	r4, r7
 8008bc4:	0412      	lsls	r2, r2, #16
 8008bc6:	4314      	orrs	r4, r2
 8008bc8:	46a0      	mov	r8, r4
 8008bca:	4662      	mov	r2, ip
 8008bcc:	2a38      	cmp	r2, #56	; 0x38
 8008bce:	dc67      	bgt.n	8008ca0 <__aeabi_dadd+0x26c>
 8008bd0:	2a1f      	cmp	r2, #31
 8008bd2:	dc00      	bgt.n	8008bd6 <__aeabi_dadd+0x1a2>
 8008bd4:	e15f      	b.n	8008e96 <__aeabi_dadd+0x462>
 8008bd6:	4647      	mov	r7, r8
 8008bd8:	3a20      	subs	r2, #32
 8008bda:	40d7      	lsrs	r7, r2
 8008bdc:	4662      	mov	r2, ip
 8008bde:	2a20      	cmp	r2, #32
 8008be0:	d005      	beq.n	8008bee <__aeabi_dadd+0x1ba>
 8008be2:	4664      	mov	r4, ip
 8008be4:	2240      	movs	r2, #64	; 0x40
 8008be6:	1b12      	subs	r2, r2, r4
 8008be8:	4644      	mov	r4, r8
 8008bea:	4094      	lsls	r4, r2
 8008bec:	4321      	orrs	r1, r4
 8008bee:	1e4a      	subs	r2, r1, #1
 8008bf0:	4191      	sbcs	r1, r2
 8008bf2:	000c      	movs	r4, r1
 8008bf4:	433c      	orrs	r4, r7
 8008bf6:	e057      	b.n	8008ca8 <__aeabi_dadd+0x274>
 8008bf8:	003a      	movs	r2, r7
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	d100      	bne.n	8008c00 <__aeabi_dadd+0x1cc>
 8008bfe:	e105      	b.n	8008e0c <__aeabi_dadd+0x3d8>
 8008c00:	0022      	movs	r2, r4
 8008c02:	3a01      	subs	r2, #1
 8008c04:	2c01      	cmp	r4, #1
 8008c06:	d100      	bne.n	8008c0a <__aeabi_dadd+0x1d6>
 8008c08:	e182      	b.n	8008f10 <__aeabi_dadd+0x4dc>
 8008c0a:	4c64      	ldr	r4, [pc, #400]	; (8008d9c <__aeabi_dadd+0x368>)
 8008c0c:	45a4      	cmp	ip, r4
 8008c0e:	d05b      	beq.n	8008cc8 <__aeabi_dadd+0x294>
 8008c10:	4694      	mov	ip, r2
 8008c12:	e741      	b.n	8008a98 <__aeabi_dadd+0x64>
 8008c14:	4c63      	ldr	r4, [pc, #396]	; (8008da4 <__aeabi_dadd+0x370>)
 8008c16:	1c77      	adds	r7, r6, #1
 8008c18:	4227      	tst	r7, r4
 8008c1a:	d000      	beq.n	8008c1e <__aeabi_dadd+0x1ea>
 8008c1c:	e0c4      	b.n	8008da8 <__aeabi_dadd+0x374>
 8008c1e:	0004      	movs	r4, r0
 8008c20:	431c      	orrs	r4, r3
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	d000      	beq.n	8008c28 <__aeabi_dadd+0x1f4>
 8008c26:	e169      	b.n	8008efc <__aeabi_dadd+0x4c8>
 8008c28:	2c00      	cmp	r4, #0
 8008c2a:	d100      	bne.n	8008c2e <__aeabi_dadd+0x1fa>
 8008c2c:	e1bf      	b.n	8008fae <__aeabi_dadd+0x57a>
 8008c2e:	4644      	mov	r4, r8
 8008c30:	430c      	orrs	r4, r1
 8008c32:	d000      	beq.n	8008c36 <__aeabi_dadd+0x202>
 8008c34:	e1d0      	b.n	8008fd8 <__aeabi_dadd+0x5a4>
 8008c36:	0742      	lsls	r2, r0, #29
 8008c38:	08db      	lsrs	r3, r3, #3
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	08c0      	lsrs	r0, r0, #3
 8008c3e:	e029      	b.n	8008c94 <__aeabi_dadd+0x260>
 8008c40:	003a      	movs	r2, r7
 8008c42:	430a      	orrs	r2, r1
 8008c44:	d100      	bne.n	8008c48 <__aeabi_dadd+0x214>
 8008c46:	e170      	b.n	8008f2a <__aeabi_dadd+0x4f6>
 8008c48:	4662      	mov	r2, ip
 8008c4a:	4664      	mov	r4, ip
 8008c4c:	3a01      	subs	r2, #1
 8008c4e:	2c01      	cmp	r4, #1
 8008c50:	d100      	bne.n	8008c54 <__aeabi_dadd+0x220>
 8008c52:	e0e0      	b.n	8008e16 <__aeabi_dadd+0x3e2>
 8008c54:	4c51      	ldr	r4, [pc, #324]	; (8008d9c <__aeabi_dadd+0x368>)
 8008c56:	45a4      	cmp	ip, r4
 8008c58:	d100      	bne.n	8008c5c <__aeabi_dadd+0x228>
 8008c5a:	e161      	b.n	8008f20 <__aeabi_dadd+0x4ec>
 8008c5c:	4694      	mov	ip, r2
 8008c5e:	e7b4      	b.n	8008bca <__aeabi_dadd+0x196>
 8008c60:	003a      	movs	r2, r7
 8008c62:	391f      	subs	r1, #31
 8008c64:	40ca      	lsrs	r2, r1
 8008c66:	0011      	movs	r1, r2
 8008c68:	2b20      	cmp	r3, #32
 8008c6a:	d003      	beq.n	8008c74 <__aeabi_dadd+0x240>
 8008c6c:	2240      	movs	r2, #64	; 0x40
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	409f      	lsls	r7, r3
 8008c72:	433c      	orrs	r4, r7
 8008c74:	1e63      	subs	r3, r4, #1
 8008c76:	419c      	sbcs	r4, r3
 8008c78:	2700      	movs	r7, #0
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	430c      	orrs	r4, r1
 8008c7e:	0763      	lsls	r3, r4, #29
 8008c80:	d000      	beq.n	8008c84 <__aeabi_dadd+0x250>
 8008c82:	e753      	b.n	8008b2c <__aeabi_dadd+0xf8>
 8008c84:	46b4      	mov	ip, r6
 8008c86:	08e4      	lsrs	r4, r4, #3
 8008c88:	077b      	lsls	r3, r7, #29
 8008c8a:	4323      	orrs	r3, r4
 8008c8c:	08f8      	lsrs	r0, r7, #3
 8008c8e:	4a43      	ldr	r2, [pc, #268]	; (8008d9c <__aeabi_dadd+0x368>)
 8008c90:	4594      	cmp	ip, r2
 8008c92:	d01d      	beq.n	8008cd0 <__aeabi_dadd+0x29c>
 8008c94:	4662      	mov	r2, ip
 8008c96:	0307      	lsls	r7, r0, #12
 8008c98:	0552      	lsls	r2, r2, #21
 8008c9a:	0b3f      	lsrs	r7, r7, #12
 8008c9c:	0d52      	lsrs	r2, r2, #21
 8008c9e:	e760      	b.n	8008b62 <__aeabi_dadd+0x12e>
 8008ca0:	4644      	mov	r4, r8
 8008ca2:	430c      	orrs	r4, r1
 8008ca4:	1e62      	subs	r2, r4, #1
 8008ca6:	4194      	sbcs	r4, r2
 8008ca8:	18e4      	adds	r4, r4, r3
 8008caa:	429c      	cmp	r4, r3
 8008cac:	419b      	sbcs	r3, r3
 8008cae:	425f      	negs	r7, r3
 8008cb0:	183f      	adds	r7, r7, r0
 8008cb2:	023b      	lsls	r3, r7, #8
 8008cb4:	d5e3      	bpl.n	8008c7e <__aeabi_dadd+0x24a>
 8008cb6:	4b39      	ldr	r3, [pc, #228]	; (8008d9c <__aeabi_dadd+0x368>)
 8008cb8:	3601      	adds	r6, #1
 8008cba:	429e      	cmp	r6, r3
 8008cbc:	d000      	beq.n	8008cc0 <__aeabi_dadd+0x28c>
 8008cbe:	e0b5      	b.n	8008e2c <__aeabi_dadd+0x3f8>
 8008cc0:	0032      	movs	r2, r6
 8008cc2:	2700      	movs	r7, #0
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e74c      	b.n	8008b62 <__aeabi_dadd+0x12e>
 8008cc8:	0742      	lsls	r2, r0, #29
 8008cca:	08db      	lsrs	r3, r3, #3
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	08c0      	lsrs	r0, r0, #3
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	4302      	orrs	r2, r0
 8008cd4:	d100      	bne.n	8008cd8 <__aeabi_dadd+0x2a4>
 8008cd6:	e1e1      	b.n	800909c <__aeabi_dadd+0x668>
 8008cd8:	2780      	movs	r7, #128	; 0x80
 8008cda:	033f      	lsls	r7, r7, #12
 8008cdc:	4307      	orrs	r7, r0
 8008cde:	033f      	lsls	r7, r7, #12
 8008ce0:	4a2e      	ldr	r2, [pc, #184]	; (8008d9c <__aeabi_dadd+0x368>)
 8008ce2:	0b3f      	lsrs	r7, r7, #12
 8008ce4:	e73d      	b.n	8008b62 <__aeabi_dadd+0x12e>
 8008ce6:	0020      	movs	r0, r4
 8008ce8:	f001 fd94 	bl	800a814 <__clzsi2>
 8008cec:	0001      	movs	r1, r0
 8008cee:	3118      	adds	r1, #24
 8008cf0:	291f      	cmp	r1, #31
 8008cf2:	dc00      	bgt.n	8008cf6 <__aeabi_dadd+0x2c2>
 8008cf4:	e6fc      	b.n	8008af0 <__aeabi_dadd+0xbc>
 8008cf6:	3808      	subs	r0, #8
 8008cf8:	4084      	lsls	r4, r0
 8008cfa:	0027      	movs	r7, r4
 8008cfc:	2400      	movs	r4, #0
 8008cfe:	42b1      	cmp	r1, r6
 8008d00:	db00      	blt.n	8008d04 <__aeabi_dadd+0x2d0>
 8008d02:	e6ff      	b.n	8008b04 <__aeabi_dadd+0xd0>
 8008d04:	4a26      	ldr	r2, [pc, #152]	; (8008da0 <__aeabi_dadd+0x36c>)
 8008d06:	1a76      	subs	r6, r6, r1
 8008d08:	4017      	ands	r7, r2
 8008d0a:	e70d      	b.n	8008b28 <__aeabi_dadd+0xf4>
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	d02f      	beq.n	8008d70 <__aeabi_dadd+0x33c>
 8008d10:	464a      	mov	r2, r9
 8008d12:	1b92      	subs	r2, r2, r6
 8008d14:	4694      	mov	ip, r2
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	d100      	bne.n	8008d1c <__aeabi_dadd+0x2e8>
 8008d1a:	e0ad      	b.n	8008e78 <__aeabi_dadd+0x444>
 8008d1c:	4a1f      	ldr	r2, [pc, #124]	; (8008d9c <__aeabi_dadd+0x368>)
 8008d1e:	4591      	cmp	r9, r2
 8008d20:	d100      	bne.n	8008d24 <__aeabi_dadd+0x2f0>
 8008d22:	e10f      	b.n	8008f44 <__aeabi_dadd+0x510>
 8008d24:	2280      	movs	r2, #128	; 0x80
 8008d26:	0412      	lsls	r2, r2, #16
 8008d28:	4310      	orrs	r0, r2
 8008d2a:	4662      	mov	r2, ip
 8008d2c:	2a38      	cmp	r2, #56	; 0x38
 8008d2e:	dd00      	ble.n	8008d32 <__aeabi_dadd+0x2fe>
 8008d30:	e10f      	b.n	8008f52 <__aeabi_dadd+0x51e>
 8008d32:	2a1f      	cmp	r2, #31
 8008d34:	dd00      	ble.n	8008d38 <__aeabi_dadd+0x304>
 8008d36:	e180      	b.n	800903a <__aeabi_dadd+0x606>
 8008d38:	4664      	mov	r4, ip
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	001e      	movs	r6, r3
 8008d3e:	1b12      	subs	r2, r2, r4
 8008d40:	4667      	mov	r7, ip
 8008d42:	0004      	movs	r4, r0
 8008d44:	4093      	lsls	r3, r2
 8008d46:	4094      	lsls	r4, r2
 8008d48:	40fe      	lsrs	r6, r7
 8008d4a:	1e5a      	subs	r2, r3, #1
 8008d4c:	4193      	sbcs	r3, r2
 8008d4e:	40f8      	lsrs	r0, r7
 8008d50:	4334      	orrs	r4, r6
 8008d52:	431c      	orrs	r4, r3
 8008d54:	4480      	add	r8, r0
 8008d56:	1864      	adds	r4, r4, r1
 8008d58:	428c      	cmp	r4, r1
 8008d5a:	41bf      	sbcs	r7, r7
 8008d5c:	427f      	negs	r7, r7
 8008d5e:	464e      	mov	r6, r9
 8008d60:	4447      	add	r7, r8
 8008d62:	e7a6      	b.n	8008cb2 <__aeabi_dadd+0x27e>
 8008d64:	4642      	mov	r2, r8
 8008d66:	430a      	orrs	r2, r1
 8008d68:	0011      	movs	r1, r2
 8008d6a:	1e4a      	subs	r2, r1, #1
 8008d6c:	4191      	sbcs	r1, r2
 8008d6e:	e6ad      	b.n	8008acc <__aeabi_dadd+0x98>
 8008d70:	4c0c      	ldr	r4, [pc, #48]	; (8008da4 <__aeabi_dadd+0x370>)
 8008d72:	1c72      	adds	r2, r6, #1
 8008d74:	4222      	tst	r2, r4
 8008d76:	d000      	beq.n	8008d7a <__aeabi_dadd+0x346>
 8008d78:	e0a1      	b.n	8008ebe <__aeabi_dadd+0x48a>
 8008d7a:	0002      	movs	r2, r0
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	2e00      	cmp	r6, #0
 8008d80:	d000      	beq.n	8008d84 <__aeabi_dadd+0x350>
 8008d82:	e0fa      	b.n	8008f7a <__aeabi_dadd+0x546>
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	d100      	bne.n	8008d8a <__aeabi_dadd+0x356>
 8008d88:	e145      	b.n	8009016 <__aeabi_dadd+0x5e2>
 8008d8a:	003a      	movs	r2, r7
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	d000      	beq.n	8008d92 <__aeabi_dadd+0x35e>
 8008d90:	e146      	b.n	8009020 <__aeabi_dadd+0x5ec>
 8008d92:	0742      	lsls	r2, r0, #29
 8008d94:	08db      	lsrs	r3, r3, #3
 8008d96:	4313      	orrs	r3, r2
 8008d98:	08c0      	lsrs	r0, r0, #3
 8008d9a:	e77b      	b.n	8008c94 <__aeabi_dadd+0x260>
 8008d9c:	000007ff 	.word	0x000007ff
 8008da0:	ff7fffff 	.word	0xff7fffff
 8008da4:	000007fe 	.word	0x000007fe
 8008da8:	4647      	mov	r7, r8
 8008daa:	1a5c      	subs	r4, r3, r1
 8008dac:	1bc2      	subs	r2, r0, r7
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	41bf      	sbcs	r7, r7
 8008db2:	427f      	negs	r7, r7
 8008db4:	46b9      	mov	r9, r7
 8008db6:	0017      	movs	r7, r2
 8008db8:	464a      	mov	r2, r9
 8008dba:	1abf      	subs	r7, r7, r2
 8008dbc:	023a      	lsls	r2, r7, #8
 8008dbe:	d500      	bpl.n	8008dc2 <__aeabi_dadd+0x38e>
 8008dc0:	e08d      	b.n	8008ede <__aeabi_dadd+0x4aa>
 8008dc2:	0023      	movs	r3, r4
 8008dc4:	433b      	orrs	r3, r7
 8008dc6:	d000      	beq.n	8008dca <__aeabi_dadd+0x396>
 8008dc8:	e68a      	b.n	8008ae0 <__aeabi_dadd+0xac>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	2500      	movs	r5, #0
 8008dce:	e761      	b.n	8008c94 <__aeabi_dadd+0x260>
 8008dd0:	4cb4      	ldr	r4, [pc, #720]	; (80090a4 <__aeabi_dadd+0x670>)
 8008dd2:	45a1      	cmp	r9, r4
 8008dd4:	d100      	bne.n	8008dd8 <__aeabi_dadd+0x3a4>
 8008dd6:	e0ad      	b.n	8008f34 <__aeabi_dadd+0x500>
 8008dd8:	2480      	movs	r4, #128	; 0x80
 8008dda:	0424      	lsls	r4, r4, #16
 8008ddc:	4320      	orrs	r0, r4
 8008dde:	4664      	mov	r4, ip
 8008de0:	2c38      	cmp	r4, #56	; 0x38
 8008de2:	dc3d      	bgt.n	8008e60 <__aeabi_dadd+0x42c>
 8008de4:	4662      	mov	r2, ip
 8008de6:	2c1f      	cmp	r4, #31
 8008de8:	dd00      	ble.n	8008dec <__aeabi_dadd+0x3b8>
 8008dea:	e0b7      	b.n	8008f5c <__aeabi_dadd+0x528>
 8008dec:	2520      	movs	r5, #32
 8008dee:	001e      	movs	r6, r3
 8008df0:	1b2d      	subs	r5, r5, r4
 8008df2:	0004      	movs	r4, r0
 8008df4:	40ab      	lsls	r3, r5
 8008df6:	40ac      	lsls	r4, r5
 8008df8:	40d6      	lsrs	r6, r2
 8008dfa:	40d0      	lsrs	r0, r2
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	1e5d      	subs	r5, r3, #1
 8008e00:	41ab      	sbcs	r3, r5
 8008e02:	4334      	orrs	r4, r6
 8008e04:	1a12      	subs	r2, r2, r0
 8008e06:	4690      	mov	r8, r2
 8008e08:	4323      	orrs	r3, r4
 8008e0a:	e02c      	b.n	8008e66 <__aeabi_dadd+0x432>
 8008e0c:	0742      	lsls	r2, r0, #29
 8008e0e:	08db      	lsrs	r3, r3, #3
 8008e10:	4313      	orrs	r3, r2
 8008e12:	08c0      	lsrs	r0, r0, #3
 8008e14:	e73b      	b.n	8008c8e <__aeabi_dadd+0x25a>
 8008e16:	185c      	adds	r4, r3, r1
 8008e18:	429c      	cmp	r4, r3
 8008e1a:	419b      	sbcs	r3, r3
 8008e1c:	4440      	add	r0, r8
 8008e1e:	425b      	negs	r3, r3
 8008e20:	18c7      	adds	r7, r0, r3
 8008e22:	2601      	movs	r6, #1
 8008e24:	023b      	lsls	r3, r7, #8
 8008e26:	d400      	bmi.n	8008e2a <__aeabi_dadd+0x3f6>
 8008e28:	e729      	b.n	8008c7e <__aeabi_dadd+0x24a>
 8008e2a:	2602      	movs	r6, #2
 8008e2c:	4a9e      	ldr	r2, [pc, #632]	; (80090a8 <__aeabi_dadd+0x674>)
 8008e2e:	0863      	lsrs	r3, r4, #1
 8008e30:	4017      	ands	r7, r2
 8008e32:	2201      	movs	r2, #1
 8008e34:	4014      	ands	r4, r2
 8008e36:	431c      	orrs	r4, r3
 8008e38:	07fb      	lsls	r3, r7, #31
 8008e3a:	431c      	orrs	r4, r3
 8008e3c:	087f      	lsrs	r7, r7, #1
 8008e3e:	e673      	b.n	8008b28 <__aeabi_dadd+0xf4>
 8008e40:	4644      	mov	r4, r8
 8008e42:	3a20      	subs	r2, #32
 8008e44:	40d4      	lsrs	r4, r2
 8008e46:	4662      	mov	r2, ip
 8008e48:	2a20      	cmp	r2, #32
 8008e4a:	d005      	beq.n	8008e58 <__aeabi_dadd+0x424>
 8008e4c:	4667      	mov	r7, ip
 8008e4e:	2240      	movs	r2, #64	; 0x40
 8008e50:	1bd2      	subs	r2, r2, r7
 8008e52:	4647      	mov	r7, r8
 8008e54:	4097      	lsls	r7, r2
 8008e56:	4339      	orrs	r1, r7
 8008e58:	1e4a      	subs	r2, r1, #1
 8008e5a:	4191      	sbcs	r1, r2
 8008e5c:	4321      	orrs	r1, r4
 8008e5e:	e635      	b.n	8008acc <__aeabi_dadd+0x98>
 8008e60:	4303      	orrs	r3, r0
 8008e62:	1e58      	subs	r0, r3, #1
 8008e64:	4183      	sbcs	r3, r0
 8008e66:	1acc      	subs	r4, r1, r3
 8008e68:	42a1      	cmp	r1, r4
 8008e6a:	41bf      	sbcs	r7, r7
 8008e6c:	4643      	mov	r3, r8
 8008e6e:	427f      	negs	r7, r7
 8008e70:	4655      	mov	r5, sl
 8008e72:	464e      	mov	r6, r9
 8008e74:	1bdf      	subs	r7, r3, r7
 8008e76:	e62e      	b.n	8008ad6 <__aeabi_dadd+0xa2>
 8008e78:	0002      	movs	r2, r0
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	d100      	bne.n	8008e80 <__aeabi_dadd+0x44c>
 8008e7e:	e0bd      	b.n	8008ffc <__aeabi_dadd+0x5c8>
 8008e80:	4662      	mov	r2, ip
 8008e82:	4664      	mov	r4, ip
 8008e84:	3a01      	subs	r2, #1
 8008e86:	2c01      	cmp	r4, #1
 8008e88:	d100      	bne.n	8008e8c <__aeabi_dadd+0x458>
 8008e8a:	e0e5      	b.n	8009058 <__aeabi_dadd+0x624>
 8008e8c:	4c85      	ldr	r4, [pc, #532]	; (80090a4 <__aeabi_dadd+0x670>)
 8008e8e:	45a4      	cmp	ip, r4
 8008e90:	d058      	beq.n	8008f44 <__aeabi_dadd+0x510>
 8008e92:	4694      	mov	ip, r2
 8008e94:	e749      	b.n	8008d2a <__aeabi_dadd+0x2f6>
 8008e96:	4664      	mov	r4, ip
 8008e98:	2220      	movs	r2, #32
 8008e9a:	1b12      	subs	r2, r2, r4
 8008e9c:	4644      	mov	r4, r8
 8008e9e:	4094      	lsls	r4, r2
 8008ea0:	000f      	movs	r7, r1
 8008ea2:	46a1      	mov	r9, r4
 8008ea4:	4664      	mov	r4, ip
 8008ea6:	4091      	lsls	r1, r2
 8008ea8:	40e7      	lsrs	r7, r4
 8008eaa:	464c      	mov	r4, r9
 8008eac:	1e4a      	subs	r2, r1, #1
 8008eae:	4191      	sbcs	r1, r2
 8008eb0:	433c      	orrs	r4, r7
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	430c      	orrs	r4, r1
 8008eb6:	4661      	mov	r1, ip
 8008eb8:	40ca      	lsrs	r2, r1
 8008eba:	1880      	adds	r0, r0, r2
 8008ebc:	e6f4      	b.n	8008ca8 <__aeabi_dadd+0x274>
 8008ebe:	4c79      	ldr	r4, [pc, #484]	; (80090a4 <__aeabi_dadd+0x670>)
 8008ec0:	42a2      	cmp	r2, r4
 8008ec2:	d100      	bne.n	8008ec6 <__aeabi_dadd+0x492>
 8008ec4:	e6fd      	b.n	8008cc2 <__aeabi_dadd+0x28e>
 8008ec6:	1859      	adds	r1, r3, r1
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	419b      	sbcs	r3, r3
 8008ecc:	4440      	add	r0, r8
 8008ece:	425f      	negs	r7, r3
 8008ed0:	19c7      	adds	r7, r0, r7
 8008ed2:	07fc      	lsls	r4, r7, #31
 8008ed4:	0849      	lsrs	r1, r1, #1
 8008ed6:	0016      	movs	r6, r2
 8008ed8:	430c      	orrs	r4, r1
 8008eda:	087f      	lsrs	r7, r7, #1
 8008edc:	e6cf      	b.n	8008c7e <__aeabi_dadd+0x24a>
 8008ede:	1acc      	subs	r4, r1, r3
 8008ee0:	42a1      	cmp	r1, r4
 8008ee2:	41bf      	sbcs	r7, r7
 8008ee4:	4643      	mov	r3, r8
 8008ee6:	427f      	negs	r7, r7
 8008ee8:	1a18      	subs	r0, r3, r0
 8008eea:	4655      	mov	r5, sl
 8008eec:	1bc7      	subs	r7, r0, r7
 8008eee:	e5f7      	b.n	8008ae0 <__aeabi_dadd+0xac>
 8008ef0:	08c9      	lsrs	r1, r1, #3
 8008ef2:	077b      	lsls	r3, r7, #29
 8008ef4:	4655      	mov	r5, sl
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	08f8      	lsrs	r0, r7, #3
 8008efa:	e6c8      	b.n	8008c8e <__aeabi_dadd+0x25a>
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	d000      	beq.n	8008f02 <__aeabi_dadd+0x4ce>
 8008f00:	e081      	b.n	8009006 <__aeabi_dadd+0x5d2>
 8008f02:	4643      	mov	r3, r8
 8008f04:	430b      	orrs	r3, r1
 8008f06:	d115      	bne.n	8008f34 <__aeabi_dadd+0x500>
 8008f08:	2080      	movs	r0, #128	; 0x80
 8008f0a:	2500      	movs	r5, #0
 8008f0c:	0300      	lsls	r0, r0, #12
 8008f0e:	e6e3      	b.n	8008cd8 <__aeabi_dadd+0x2a4>
 8008f10:	1a5c      	subs	r4, r3, r1
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	419b      	sbcs	r3, r3
 8008f16:	1bc7      	subs	r7, r0, r7
 8008f18:	425b      	negs	r3, r3
 8008f1a:	2601      	movs	r6, #1
 8008f1c:	1aff      	subs	r7, r7, r3
 8008f1e:	e5da      	b.n	8008ad6 <__aeabi_dadd+0xa2>
 8008f20:	0742      	lsls	r2, r0, #29
 8008f22:	08db      	lsrs	r3, r3, #3
 8008f24:	4313      	orrs	r3, r2
 8008f26:	08c0      	lsrs	r0, r0, #3
 8008f28:	e6d2      	b.n	8008cd0 <__aeabi_dadd+0x29c>
 8008f2a:	0742      	lsls	r2, r0, #29
 8008f2c:	08db      	lsrs	r3, r3, #3
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	08c0      	lsrs	r0, r0, #3
 8008f32:	e6ac      	b.n	8008c8e <__aeabi_dadd+0x25a>
 8008f34:	4643      	mov	r3, r8
 8008f36:	4642      	mov	r2, r8
 8008f38:	08c9      	lsrs	r1, r1, #3
 8008f3a:	075b      	lsls	r3, r3, #29
 8008f3c:	4655      	mov	r5, sl
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	08d0      	lsrs	r0, r2, #3
 8008f42:	e6c5      	b.n	8008cd0 <__aeabi_dadd+0x29c>
 8008f44:	4643      	mov	r3, r8
 8008f46:	4642      	mov	r2, r8
 8008f48:	075b      	lsls	r3, r3, #29
 8008f4a:	08c9      	lsrs	r1, r1, #3
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	08d0      	lsrs	r0, r2, #3
 8008f50:	e6be      	b.n	8008cd0 <__aeabi_dadd+0x29c>
 8008f52:	4303      	orrs	r3, r0
 8008f54:	001c      	movs	r4, r3
 8008f56:	1e63      	subs	r3, r4, #1
 8008f58:	419c      	sbcs	r4, r3
 8008f5a:	e6fc      	b.n	8008d56 <__aeabi_dadd+0x322>
 8008f5c:	0002      	movs	r2, r0
 8008f5e:	3c20      	subs	r4, #32
 8008f60:	40e2      	lsrs	r2, r4
 8008f62:	0014      	movs	r4, r2
 8008f64:	4662      	mov	r2, ip
 8008f66:	2a20      	cmp	r2, #32
 8008f68:	d003      	beq.n	8008f72 <__aeabi_dadd+0x53e>
 8008f6a:	2540      	movs	r5, #64	; 0x40
 8008f6c:	1aad      	subs	r5, r5, r2
 8008f6e:	40a8      	lsls	r0, r5
 8008f70:	4303      	orrs	r3, r0
 8008f72:	1e58      	subs	r0, r3, #1
 8008f74:	4183      	sbcs	r3, r0
 8008f76:	4323      	orrs	r3, r4
 8008f78:	e775      	b.n	8008e66 <__aeabi_dadd+0x432>
 8008f7a:	2a00      	cmp	r2, #0
 8008f7c:	d0e2      	beq.n	8008f44 <__aeabi_dadd+0x510>
 8008f7e:	003a      	movs	r2, r7
 8008f80:	430a      	orrs	r2, r1
 8008f82:	d0cd      	beq.n	8008f20 <__aeabi_dadd+0x4ec>
 8008f84:	0742      	lsls	r2, r0, #29
 8008f86:	08db      	lsrs	r3, r3, #3
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	2280      	movs	r2, #128	; 0x80
 8008f8c:	08c0      	lsrs	r0, r0, #3
 8008f8e:	0312      	lsls	r2, r2, #12
 8008f90:	4210      	tst	r0, r2
 8008f92:	d006      	beq.n	8008fa2 <__aeabi_dadd+0x56e>
 8008f94:	08fc      	lsrs	r4, r7, #3
 8008f96:	4214      	tst	r4, r2
 8008f98:	d103      	bne.n	8008fa2 <__aeabi_dadd+0x56e>
 8008f9a:	0020      	movs	r0, r4
 8008f9c:	08cb      	lsrs	r3, r1, #3
 8008f9e:	077a      	lsls	r2, r7, #29
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	0f5a      	lsrs	r2, r3, #29
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	0752      	lsls	r2, r2, #29
 8008fa8:	08db      	lsrs	r3, r3, #3
 8008faa:	4313      	orrs	r3, r2
 8008fac:	e690      	b.n	8008cd0 <__aeabi_dadd+0x29c>
 8008fae:	4643      	mov	r3, r8
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	d100      	bne.n	8008fb6 <__aeabi_dadd+0x582>
 8008fb4:	e709      	b.n	8008dca <__aeabi_dadd+0x396>
 8008fb6:	4643      	mov	r3, r8
 8008fb8:	4642      	mov	r2, r8
 8008fba:	08c9      	lsrs	r1, r1, #3
 8008fbc:	075b      	lsls	r3, r3, #29
 8008fbe:	4655      	mov	r5, sl
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	08d0      	lsrs	r0, r2, #3
 8008fc4:	e666      	b.n	8008c94 <__aeabi_dadd+0x260>
 8008fc6:	1acc      	subs	r4, r1, r3
 8008fc8:	42a1      	cmp	r1, r4
 8008fca:	4189      	sbcs	r1, r1
 8008fcc:	1a3f      	subs	r7, r7, r0
 8008fce:	4249      	negs	r1, r1
 8008fd0:	4655      	mov	r5, sl
 8008fd2:	2601      	movs	r6, #1
 8008fd4:	1a7f      	subs	r7, r7, r1
 8008fd6:	e57e      	b.n	8008ad6 <__aeabi_dadd+0xa2>
 8008fd8:	4642      	mov	r2, r8
 8008fda:	1a5c      	subs	r4, r3, r1
 8008fdc:	1a87      	subs	r7, r0, r2
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	4192      	sbcs	r2, r2
 8008fe2:	4252      	negs	r2, r2
 8008fe4:	1abf      	subs	r7, r7, r2
 8008fe6:	023a      	lsls	r2, r7, #8
 8008fe8:	d53d      	bpl.n	8009066 <__aeabi_dadd+0x632>
 8008fea:	1acc      	subs	r4, r1, r3
 8008fec:	42a1      	cmp	r1, r4
 8008fee:	4189      	sbcs	r1, r1
 8008ff0:	4643      	mov	r3, r8
 8008ff2:	4249      	negs	r1, r1
 8008ff4:	1a1f      	subs	r7, r3, r0
 8008ff6:	4655      	mov	r5, sl
 8008ff8:	1a7f      	subs	r7, r7, r1
 8008ffa:	e595      	b.n	8008b28 <__aeabi_dadd+0xf4>
 8008ffc:	077b      	lsls	r3, r7, #29
 8008ffe:	08c9      	lsrs	r1, r1, #3
 8009000:	430b      	orrs	r3, r1
 8009002:	08f8      	lsrs	r0, r7, #3
 8009004:	e643      	b.n	8008c8e <__aeabi_dadd+0x25a>
 8009006:	4644      	mov	r4, r8
 8009008:	08db      	lsrs	r3, r3, #3
 800900a:	430c      	orrs	r4, r1
 800900c:	d130      	bne.n	8009070 <__aeabi_dadd+0x63c>
 800900e:	0742      	lsls	r2, r0, #29
 8009010:	4313      	orrs	r3, r2
 8009012:	08c0      	lsrs	r0, r0, #3
 8009014:	e65c      	b.n	8008cd0 <__aeabi_dadd+0x29c>
 8009016:	077b      	lsls	r3, r7, #29
 8009018:	08c9      	lsrs	r1, r1, #3
 800901a:	430b      	orrs	r3, r1
 800901c:	08f8      	lsrs	r0, r7, #3
 800901e:	e639      	b.n	8008c94 <__aeabi_dadd+0x260>
 8009020:	185c      	adds	r4, r3, r1
 8009022:	429c      	cmp	r4, r3
 8009024:	419b      	sbcs	r3, r3
 8009026:	4440      	add	r0, r8
 8009028:	425b      	negs	r3, r3
 800902a:	18c7      	adds	r7, r0, r3
 800902c:	023b      	lsls	r3, r7, #8
 800902e:	d400      	bmi.n	8009032 <__aeabi_dadd+0x5fe>
 8009030:	e625      	b.n	8008c7e <__aeabi_dadd+0x24a>
 8009032:	4b1d      	ldr	r3, [pc, #116]	; (80090a8 <__aeabi_dadd+0x674>)
 8009034:	2601      	movs	r6, #1
 8009036:	401f      	ands	r7, r3
 8009038:	e621      	b.n	8008c7e <__aeabi_dadd+0x24a>
 800903a:	0004      	movs	r4, r0
 800903c:	3a20      	subs	r2, #32
 800903e:	40d4      	lsrs	r4, r2
 8009040:	4662      	mov	r2, ip
 8009042:	2a20      	cmp	r2, #32
 8009044:	d004      	beq.n	8009050 <__aeabi_dadd+0x61c>
 8009046:	2240      	movs	r2, #64	; 0x40
 8009048:	4666      	mov	r6, ip
 800904a:	1b92      	subs	r2, r2, r6
 800904c:	4090      	lsls	r0, r2
 800904e:	4303      	orrs	r3, r0
 8009050:	1e5a      	subs	r2, r3, #1
 8009052:	4193      	sbcs	r3, r2
 8009054:	431c      	orrs	r4, r3
 8009056:	e67e      	b.n	8008d56 <__aeabi_dadd+0x322>
 8009058:	185c      	adds	r4, r3, r1
 800905a:	428c      	cmp	r4, r1
 800905c:	4189      	sbcs	r1, r1
 800905e:	4440      	add	r0, r8
 8009060:	4249      	negs	r1, r1
 8009062:	1847      	adds	r7, r0, r1
 8009064:	e6dd      	b.n	8008e22 <__aeabi_dadd+0x3ee>
 8009066:	0023      	movs	r3, r4
 8009068:	433b      	orrs	r3, r7
 800906a:	d100      	bne.n	800906e <__aeabi_dadd+0x63a>
 800906c:	e6ad      	b.n	8008dca <__aeabi_dadd+0x396>
 800906e:	e606      	b.n	8008c7e <__aeabi_dadd+0x24a>
 8009070:	0744      	lsls	r4, r0, #29
 8009072:	4323      	orrs	r3, r4
 8009074:	2480      	movs	r4, #128	; 0x80
 8009076:	08c0      	lsrs	r0, r0, #3
 8009078:	0324      	lsls	r4, r4, #12
 800907a:	4220      	tst	r0, r4
 800907c:	d008      	beq.n	8009090 <__aeabi_dadd+0x65c>
 800907e:	4642      	mov	r2, r8
 8009080:	08d6      	lsrs	r6, r2, #3
 8009082:	4226      	tst	r6, r4
 8009084:	d104      	bne.n	8009090 <__aeabi_dadd+0x65c>
 8009086:	4655      	mov	r5, sl
 8009088:	0030      	movs	r0, r6
 800908a:	08cb      	lsrs	r3, r1, #3
 800908c:	0751      	lsls	r1, r2, #29
 800908e:	430b      	orrs	r3, r1
 8009090:	0f5a      	lsrs	r2, r3, #29
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	08db      	lsrs	r3, r3, #3
 8009096:	0752      	lsls	r2, r2, #29
 8009098:	4313      	orrs	r3, r2
 800909a:	e619      	b.n	8008cd0 <__aeabi_dadd+0x29c>
 800909c:	2300      	movs	r3, #0
 800909e:	4a01      	ldr	r2, [pc, #4]	; (80090a4 <__aeabi_dadd+0x670>)
 80090a0:	001f      	movs	r7, r3
 80090a2:	e55e      	b.n	8008b62 <__aeabi_dadd+0x12e>
 80090a4:	000007ff 	.word	0x000007ff
 80090a8:	ff7fffff 	.word	0xff7fffff

080090ac <__aeabi_ddiv>:
 80090ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ae:	4657      	mov	r7, sl
 80090b0:	464e      	mov	r6, r9
 80090b2:	4645      	mov	r5, r8
 80090b4:	46de      	mov	lr, fp
 80090b6:	b5e0      	push	{r5, r6, r7, lr}
 80090b8:	4681      	mov	r9, r0
 80090ba:	0005      	movs	r5, r0
 80090bc:	030c      	lsls	r4, r1, #12
 80090be:	0048      	lsls	r0, r1, #1
 80090c0:	4692      	mov	sl, r2
 80090c2:	001f      	movs	r7, r3
 80090c4:	b085      	sub	sp, #20
 80090c6:	0b24      	lsrs	r4, r4, #12
 80090c8:	0d40      	lsrs	r0, r0, #21
 80090ca:	0fce      	lsrs	r6, r1, #31
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d100      	bne.n	80090d2 <__aeabi_ddiv+0x26>
 80090d0:	e156      	b.n	8009380 <__aeabi_ddiv+0x2d4>
 80090d2:	4bd4      	ldr	r3, [pc, #848]	; (8009424 <__aeabi_ddiv+0x378>)
 80090d4:	4298      	cmp	r0, r3
 80090d6:	d100      	bne.n	80090da <__aeabi_ddiv+0x2e>
 80090d8:	e172      	b.n	80093c0 <__aeabi_ddiv+0x314>
 80090da:	0f6b      	lsrs	r3, r5, #29
 80090dc:	00e4      	lsls	r4, r4, #3
 80090de:	431c      	orrs	r4, r3
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	4323      	orrs	r3, r4
 80090e6:	4698      	mov	r8, r3
 80090e8:	4bcf      	ldr	r3, [pc, #828]	; (8009428 <__aeabi_ddiv+0x37c>)
 80090ea:	00ed      	lsls	r5, r5, #3
 80090ec:	469b      	mov	fp, r3
 80090ee:	2300      	movs	r3, #0
 80090f0:	4699      	mov	r9, r3
 80090f2:	4483      	add	fp, r0
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	033c      	lsls	r4, r7, #12
 80090f8:	007b      	lsls	r3, r7, #1
 80090fa:	4650      	mov	r0, sl
 80090fc:	0b24      	lsrs	r4, r4, #12
 80090fe:	0d5b      	lsrs	r3, r3, #21
 8009100:	0fff      	lsrs	r7, r7, #31
 8009102:	2b00      	cmp	r3, #0
 8009104:	d100      	bne.n	8009108 <__aeabi_ddiv+0x5c>
 8009106:	e11f      	b.n	8009348 <__aeabi_ddiv+0x29c>
 8009108:	4ac6      	ldr	r2, [pc, #792]	; (8009424 <__aeabi_ddiv+0x378>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d100      	bne.n	8009110 <__aeabi_ddiv+0x64>
 800910e:	e162      	b.n	80093d6 <__aeabi_ddiv+0x32a>
 8009110:	49c5      	ldr	r1, [pc, #788]	; (8009428 <__aeabi_ddiv+0x37c>)
 8009112:	0f42      	lsrs	r2, r0, #29
 8009114:	468c      	mov	ip, r1
 8009116:	00e4      	lsls	r4, r4, #3
 8009118:	4659      	mov	r1, fp
 800911a:	4314      	orrs	r4, r2
 800911c:	2280      	movs	r2, #128	; 0x80
 800911e:	4463      	add	r3, ip
 8009120:	0412      	lsls	r2, r2, #16
 8009122:	1acb      	subs	r3, r1, r3
 8009124:	4314      	orrs	r4, r2
 8009126:	469b      	mov	fp, r3
 8009128:	00c2      	lsls	r2, r0, #3
 800912a:	2000      	movs	r0, #0
 800912c:	0033      	movs	r3, r6
 800912e:	407b      	eors	r3, r7
 8009130:	469a      	mov	sl, r3
 8009132:	464b      	mov	r3, r9
 8009134:	2b0f      	cmp	r3, #15
 8009136:	d827      	bhi.n	8009188 <__aeabi_ddiv+0xdc>
 8009138:	49bc      	ldr	r1, [pc, #752]	; (800942c <__aeabi_ddiv+0x380>)
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	58cb      	ldr	r3, [r1, r3]
 800913e:	469f      	mov	pc, r3
 8009140:	46b2      	mov	sl, r6
 8009142:	9b00      	ldr	r3, [sp, #0]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d016      	beq.n	8009176 <__aeabi_ddiv+0xca>
 8009148:	2b03      	cmp	r3, #3
 800914a:	d100      	bne.n	800914e <__aeabi_ddiv+0xa2>
 800914c:	e28e      	b.n	800966c <__aeabi_ddiv+0x5c0>
 800914e:	2b01      	cmp	r3, #1
 8009150:	d000      	beq.n	8009154 <__aeabi_ddiv+0xa8>
 8009152:	e0d9      	b.n	8009308 <__aeabi_ddiv+0x25c>
 8009154:	2300      	movs	r3, #0
 8009156:	2400      	movs	r4, #0
 8009158:	2500      	movs	r5, #0
 800915a:	4652      	mov	r2, sl
 800915c:	051b      	lsls	r3, r3, #20
 800915e:	4323      	orrs	r3, r4
 8009160:	07d2      	lsls	r2, r2, #31
 8009162:	4313      	orrs	r3, r2
 8009164:	0028      	movs	r0, r5
 8009166:	0019      	movs	r1, r3
 8009168:	b005      	add	sp, #20
 800916a:	bcf0      	pop	{r4, r5, r6, r7}
 800916c:	46bb      	mov	fp, r7
 800916e:	46b2      	mov	sl, r6
 8009170:	46a9      	mov	r9, r5
 8009172:	46a0      	mov	r8, r4
 8009174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009176:	2400      	movs	r4, #0
 8009178:	2500      	movs	r5, #0
 800917a:	4baa      	ldr	r3, [pc, #680]	; (8009424 <__aeabi_ddiv+0x378>)
 800917c:	e7ed      	b.n	800915a <__aeabi_ddiv+0xae>
 800917e:	46ba      	mov	sl, r7
 8009180:	46a0      	mov	r8, r4
 8009182:	0015      	movs	r5, r2
 8009184:	9000      	str	r0, [sp, #0]
 8009186:	e7dc      	b.n	8009142 <__aeabi_ddiv+0x96>
 8009188:	4544      	cmp	r4, r8
 800918a:	d200      	bcs.n	800918e <__aeabi_ddiv+0xe2>
 800918c:	e1c7      	b.n	800951e <__aeabi_ddiv+0x472>
 800918e:	d100      	bne.n	8009192 <__aeabi_ddiv+0xe6>
 8009190:	e1c2      	b.n	8009518 <__aeabi_ddiv+0x46c>
 8009192:	2301      	movs	r3, #1
 8009194:	425b      	negs	r3, r3
 8009196:	469c      	mov	ip, r3
 8009198:	002e      	movs	r6, r5
 800919a:	4640      	mov	r0, r8
 800919c:	2500      	movs	r5, #0
 800919e:	44e3      	add	fp, ip
 80091a0:	0223      	lsls	r3, r4, #8
 80091a2:	0e14      	lsrs	r4, r2, #24
 80091a4:	431c      	orrs	r4, r3
 80091a6:	0c1b      	lsrs	r3, r3, #16
 80091a8:	4699      	mov	r9, r3
 80091aa:	0423      	lsls	r3, r4, #16
 80091ac:	0c1f      	lsrs	r7, r3, #16
 80091ae:	0212      	lsls	r2, r2, #8
 80091b0:	4649      	mov	r1, r9
 80091b2:	9200      	str	r2, [sp, #0]
 80091b4:	9701      	str	r7, [sp, #4]
 80091b6:	f7fe fcdd 	bl	8007b74 <__aeabi_uidivmod>
 80091ba:	0002      	movs	r2, r0
 80091bc:	437a      	muls	r2, r7
 80091be:	040b      	lsls	r3, r1, #16
 80091c0:	0c31      	lsrs	r1, r6, #16
 80091c2:	4680      	mov	r8, r0
 80091c4:	4319      	orrs	r1, r3
 80091c6:	428a      	cmp	r2, r1
 80091c8:	d907      	bls.n	80091da <__aeabi_ddiv+0x12e>
 80091ca:	2301      	movs	r3, #1
 80091cc:	425b      	negs	r3, r3
 80091ce:	469c      	mov	ip, r3
 80091d0:	1909      	adds	r1, r1, r4
 80091d2:	44e0      	add	r8, ip
 80091d4:	428c      	cmp	r4, r1
 80091d6:	d800      	bhi.n	80091da <__aeabi_ddiv+0x12e>
 80091d8:	e207      	b.n	80095ea <__aeabi_ddiv+0x53e>
 80091da:	1a88      	subs	r0, r1, r2
 80091dc:	4649      	mov	r1, r9
 80091de:	f7fe fcc9 	bl	8007b74 <__aeabi_uidivmod>
 80091e2:	0409      	lsls	r1, r1, #16
 80091e4:	468c      	mov	ip, r1
 80091e6:	0431      	lsls	r1, r6, #16
 80091e8:	4666      	mov	r6, ip
 80091ea:	9a01      	ldr	r2, [sp, #4]
 80091ec:	0c09      	lsrs	r1, r1, #16
 80091ee:	4342      	muls	r2, r0
 80091f0:	0003      	movs	r3, r0
 80091f2:	4331      	orrs	r1, r6
 80091f4:	428a      	cmp	r2, r1
 80091f6:	d904      	bls.n	8009202 <__aeabi_ddiv+0x156>
 80091f8:	1909      	adds	r1, r1, r4
 80091fa:	3b01      	subs	r3, #1
 80091fc:	428c      	cmp	r4, r1
 80091fe:	d800      	bhi.n	8009202 <__aeabi_ddiv+0x156>
 8009200:	e1ed      	b.n	80095de <__aeabi_ddiv+0x532>
 8009202:	1a88      	subs	r0, r1, r2
 8009204:	4642      	mov	r2, r8
 8009206:	0412      	lsls	r2, r2, #16
 8009208:	431a      	orrs	r2, r3
 800920a:	4690      	mov	r8, r2
 800920c:	4641      	mov	r1, r8
 800920e:	9b00      	ldr	r3, [sp, #0]
 8009210:	040e      	lsls	r6, r1, #16
 8009212:	0c1b      	lsrs	r3, r3, #16
 8009214:	001f      	movs	r7, r3
 8009216:	9302      	str	r3, [sp, #8]
 8009218:	9b00      	ldr	r3, [sp, #0]
 800921a:	0c36      	lsrs	r6, r6, #16
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	0c19      	lsrs	r1, r3, #16
 8009220:	000b      	movs	r3, r1
 8009222:	4373      	muls	r3, r6
 8009224:	0c12      	lsrs	r2, r2, #16
 8009226:	437e      	muls	r6, r7
 8009228:	9103      	str	r1, [sp, #12]
 800922a:	4351      	muls	r1, r2
 800922c:	437a      	muls	r2, r7
 800922e:	0c1f      	lsrs	r7, r3, #16
 8009230:	46bc      	mov	ip, r7
 8009232:	1876      	adds	r6, r6, r1
 8009234:	4466      	add	r6, ip
 8009236:	42b1      	cmp	r1, r6
 8009238:	d903      	bls.n	8009242 <__aeabi_ddiv+0x196>
 800923a:	2180      	movs	r1, #128	; 0x80
 800923c:	0249      	lsls	r1, r1, #9
 800923e:	468c      	mov	ip, r1
 8009240:	4462      	add	r2, ip
 8009242:	0c31      	lsrs	r1, r6, #16
 8009244:	188a      	adds	r2, r1, r2
 8009246:	0431      	lsls	r1, r6, #16
 8009248:	041e      	lsls	r6, r3, #16
 800924a:	0c36      	lsrs	r6, r6, #16
 800924c:	198e      	adds	r6, r1, r6
 800924e:	4290      	cmp	r0, r2
 8009250:	d302      	bcc.n	8009258 <__aeabi_ddiv+0x1ac>
 8009252:	d112      	bne.n	800927a <__aeabi_ddiv+0x1ce>
 8009254:	42b5      	cmp	r5, r6
 8009256:	d210      	bcs.n	800927a <__aeabi_ddiv+0x1ce>
 8009258:	4643      	mov	r3, r8
 800925a:	1e59      	subs	r1, r3, #1
 800925c:	9b00      	ldr	r3, [sp, #0]
 800925e:	469c      	mov	ip, r3
 8009260:	4465      	add	r5, ip
 8009262:	001f      	movs	r7, r3
 8009264:	429d      	cmp	r5, r3
 8009266:	419b      	sbcs	r3, r3
 8009268:	425b      	negs	r3, r3
 800926a:	191b      	adds	r3, r3, r4
 800926c:	18c0      	adds	r0, r0, r3
 800926e:	4284      	cmp	r4, r0
 8009270:	d200      	bcs.n	8009274 <__aeabi_ddiv+0x1c8>
 8009272:	e1a0      	b.n	80095b6 <__aeabi_ddiv+0x50a>
 8009274:	d100      	bne.n	8009278 <__aeabi_ddiv+0x1cc>
 8009276:	e19b      	b.n	80095b0 <__aeabi_ddiv+0x504>
 8009278:	4688      	mov	r8, r1
 800927a:	1bae      	subs	r6, r5, r6
 800927c:	42b5      	cmp	r5, r6
 800927e:	41ad      	sbcs	r5, r5
 8009280:	1a80      	subs	r0, r0, r2
 8009282:	426d      	negs	r5, r5
 8009284:	1b40      	subs	r0, r0, r5
 8009286:	4284      	cmp	r4, r0
 8009288:	d100      	bne.n	800928c <__aeabi_ddiv+0x1e0>
 800928a:	e1d5      	b.n	8009638 <__aeabi_ddiv+0x58c>
 800928c:	4649      	mov	r1, r9
 800928e:	f7fe fc71 	bl	8007b74 <__aeabi_uidivmod>
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	040b      	lsls	r3, r1, #16
 8009296:	4342      	muls	r2, r0
 8009298:	0c31      	lsrs	r1, r6, #16
 800929a:	0005      	movs	r5, r0
 800929c:	4319      	orrs	r1, r3
 800929e:	428a      	cmp	r2, r1
 80092a0:	d900      	bls.n	80092a4 <__aeabi_ddiv+0x1f8>
 80092a2:	e16c      	b.n	800957e <__aeabi_ddiv+0x4d2>
 80092a4:	1a88      	subs	r0, r1, r2
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7fe fc64 	bl	8007b74 <__aeabi_uidivmod>
 80092ac:	9a01      	ldr	r2, [sp, #4]
 80092ae:	0436      	lsls	r6, r6, #16
 80092b0:	4342      	muls	r2, r0
 80092b2:	0409      	lsls	r1, r1, #16
 80092b4:	0c36      	lsrs	r6, r6, #16
 80092b6:	0003      	movs	r3, r0
 80092b8:	430e      	orrs	r6, r1
 80092ba:	42b2      	cmp	r2, r6
 80092bc:	d900      	bls.n	80092c0 <__aeabi_ddiv+0x214>
 80092be:	e153      	b.n	8009568 <__aeabi_ddiv+0x4bc>
 80092c0:	9803      	ldr	r0, [sp, #12]
 80092c2:	1ab6      	subs	r6, r6, r2
 80092c4:	0002      	movs	r2, r0
 80092c6:	042d      	lsls	r5, r5, #16
 80092c8:	431d      	orrs	r5, r3
 80092ca:	9f02      	ldr	r7, [sp, #8]
 80092cc:	042b      	lsls	r3, r5, #16
 80092ce:	0c1b      	lsrs	r3, r3, #16
 80092d0:	435a      	muls	r2, r3
 80092d2:	437b      	muls	r3, r7
 80092d4:	469c      	mov	ip, r3
 80092d6:	0c29      	lsrs	r1, r5, #16
 80092d8:	4348      	muls	r0, r1
 80092da:	0c13      	lsrs	r3, r2, #16
 80092dc:	4484      	add	ip, r0
 80092de:	4463      	add	r3, ip
 80092e0:	4379      	muls	r1, r7
 80092e2:	4298      	cmp	r0, r3
 80092e4:	d903      	bls.n	80092ee <__aeabi_ddiv+0x242>
 80092e6:	2080      	movs	r0, #128	; 0x80
 80092e8:	0240      	lsls	r0, r0, #9
 80092ea:	4684      	mov	ip, r0
 80092ec:	4461      	add	r1, ip
 80092ee:	0c18      	lsrs	r0, r3, #16
 80092f0:	0412      	lsls	r2, r2, #16
 80092f2:	041b      	lsls	r3, r3, #16
 80092f4:	0c12      	lsrs	r2, r2, #16
 80092f6:	1841      	adds	r1, r0, r1
 80092f8:	189b      	adds	r3, r3, r2
 80092fa:	428e      	cmp	r6, r1
 80092fc:	d200      	bcs.n	8009300 <__aeabi_ddiv+0x254>
 80092fe:	e0ff      	b.n	8009500 <__aeabi_ddiv+0x454>
 8009300:	d100      	bne.n	8009304 <__aeabi_ddiv+0x258>
 8009302:	e0fa      	b.n	80094fa <__aeabi_ddiv+0x44e>
 8009304:	2301      	movs	r3, #1
 8009306:	431d      	orrs	r5, r3
 8009308:	4a49      	ldr	r2, [pc, #292]	; (8009430 <__aeabi_ddiv+0x384>)
 800930a:	445a      	add	r2, fp
 800930c:	2a00      	cmp	r2, #0
 800930e:	dc00      	bgt.n	8009312 <__aeabi_ddiv+0x266>
 8009310:	e0aa      	b.n	8009468 <__aeabi_ddiv+0x3bc>
 8009312:	076b      	lsls	r3, r5, #29
 8009314:	d000      	beq.n	8009318 <__aeabi_ddiv+0x26c>
 8009316:	e13d      	b.n	8009594 <__aeabi_ddiv+0x4e8>
 8009318:	08ed      	lsrs	r5, r5, #3
 800931a:	4643      	mov	r3, r8
 800931c:	01db      	lsls	r3, r3, #7
 800931e:	d506      	bpl.n	800932e <__aeabi_ddiv+0x282>
 8009320:	4642      	mov	r2, r8
 8009322:	4b44      	ldr	r3, [pc, #272]	; (8009434 <__aeabi_ddiv+0x388>)
 8009324:	401a      	ands	r2, r3
 8009326:	4690      	mov	r8, r2
 8009328:	2280      	movs	r2, #128	; 0x80
 800932a:	00d2      	lsls	r2, r2, #3
 800932c:	445a      	add	r2, fp
 800932e:	4b42      	ldr	r3, [pc, #264]	; (8009438 <__aeabi_ddiv+0x38c>)
 8009330:	429a      	cmp	r2, r3
 8009332:	dd00      	ble.n	8009336 <__aeabi_ddiv+0x28a>
 8009334:	e71f      	b.n	8009176 <__aeabi_ddiv+0xca>
 8009336:	4643      	mov	r3, r8
 8009338:	075b      	lsls	r3, r3, #29
 800933a:	431d      	orrs	r5, r3
 800933c:	4643      	mov	r3, r8
 800933e:	0552      	lsls	r2, r2, #21
 8009340:	025c      	lsls	r4, r3, #9
 8009342:	0b24      	lsrs	r4, r4, #12
 8009344:	0d53      	lsrs	r3, r2, #21
 8009346:	e708      	b.n	800915a <__aeabi_ddiv+0xae>
 8009348:	4652      	mov	r2, sl
 800934a:	4322      	orrs	r2, r4
 800934c:	d100      	bne.n	8009350 <__aeabi_ddiv+0x2a4>
 800934e:	e07b      	b.n	8009448 <__aeabi_ddiv+0x39c>
 8009350:	2c00      	cmp	r4, #0
 8009352:	d100      	bne.n	8009356 <__aeabi_ddiv+0x2aa>
 8009354:	e0fa      	b.n	800954c <__aeabi_ddiv+0x4a0>
 8009356:	0020      	movs	r0, r4
 8009358:	f001 fa5c 	bl	800a814 <__clzsi2>
 800935c:	0002      	movs	r2, r0
 800935e:	3a0b      	subs	r2, #11
 8009360:	231d      	movs	r3, #29
 8009362:	0001      	movs	r1, r0
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	4652      	mov	r2, sl
 8009368:	3908      	subs	r1, #8
 800936a:	40da      	lsrs	r2, r3
 800936c:	408c      	lsls	r4, r1
 800936e:	4314      	orrs	r4, r2
 8009370:	4652      	mov	r2, sl
 8009372:	408a      	lsls	r2, r1
 8009374:	4b31      	ldr	r3, [pc, #196]	; (800943c <__aeabi_ddiv+0x390>)
 8009376:	4458      	add	r0, fp
 8009378:	469b      	mov	fp, r3
 800937a:	4483      	add	fp, r0
 800937c:	2000      	movs	r0, #0
 800937e:	e6d5      	b.n	800912c <__aeabi_ddiv+0x80>
 8009380:	464b      	mov	r3, r9
 8009382:	4323      	orrs	r3, r4
 8009384:	4698      	mov	r8, r3
 8009386:	d044      	beq.n	8009412 <__aeabi_ddiv+0x366>
 8009388:	2c00      	cmp	r4, #0
 800938a:	d100      	bne.n	800938e <__aeabi_ddiv+0x2e2>
 800938c:	e0ce      	b.n	800952c <__aeabi_ddiv+0x480>
 800938e:	0020      	movs	r0, r4
 8009390:	f001 fa40 	bl	800a814 <__clzsi2>
 8009394:	0001      	movs	r1, r0
 8009396:	0002      	movs	r2, r0
 8009398:	390b      	subs	r1, #11
 800939a:	231d      	movs	r3, #29
 800939c:	1a5b      	subs	r3, r3, r1
 800939e:	4649      	mov	r1, r9
 80093a0:	0010      	movs	r0, r2
 80093a2:	40d9      	lsrs	r1, r3
 80093a4:	3808      	subs	r0, #8
 80093a6:	4084      	lsls	r4, r0
 80093a8:	000b      	movs	r3, r1
 80093aa:	464d      	mov	r5, r9
 80093ac:	4323      	orrs	r3, r4
 80093ae:	4698      	mov	r8, r3
 80093b0:	4085      	lsls	r5, r0
 80093b2:	4823      	ldr	r0, [pc, #140]	; (8009440 <__aeabi_ddiv+0x394>)
 80093b4:	1a83      	subs	r3, r0, r2
 80093b6:	469b      	mov	fp, r3
 80093b8:	2300      	movs	r3, #0
 80093ba:	4699      	mov	r9, r3
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	e69a      	b.n	80090f6 <__aeabi_ddiv+0x4a>
 80093c0:	464b      	mov	r3, r9
 80093c2:	4323      	orrs	r3, r4
 80093c4:	4698      	mov	r8, r3
 80093c6:	d11d      	bne.n	8009404 <__aeabi_ddiv+0x358>
 80093c8:	2308      	movs	r3, #8
 80093ca:	4699      	mov	r9, r3
 80093cc:	3b06      	subs	r3, #6
 80093ce:	2500      	movs	r5, #0
 80093d0:	4683      	mov	fp, r0
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	e68f      	b.n	80090f6 <__aeabi_ddiv+0x4a>
 80093d6:	4652      	mov	r2, sl
 80093d8:	4322      	orrs	r2, r4
 80093da:	d109      	bne.n	80093f0 <__aeabi_ddiv+0x344>
 80093dc:	2302      	movs	r3, #2
 80093de:	4649      	mov	r1, r9
 80093e0:	4319      	orrs	r1, r3
 80093e2:	4b18      	ldr	r3, [pc, #96]	; (8009444 <__aeabi_ddiv+0x398>)
 80093e4:	4689      	mov	r9, r1
 80093e6:	469c      	mov	ip, r3
 80093e8:	2400      	movs	r4, #0
 80093ea:	2002      	movs	r0, #2
 80093ec:	44e3      	add	fp, ip
 80093ee:	e69d      	b.n	800912c <__aeabi_ddiv+0x80>
 80093f0:	2303      	movs	r3, #3
 80093f2:	464a      	mov	r2, r9
 80093f4:	431a      	orrs	r2, r3
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <__aeabi_ddiv+0x398>)
 80093f8:	4691      	mov	r9, r2
 80093fa:	469c      	mov	ip, r3
 80093fc:	4652      	mov	r2, sl
 80093fe:	2003      	movs	r0, #3
 8009400:	44e3      	add	fp, ip
 8009402:	e693      	b.n	800912c <__aeabi_ddiv+0x80>
 8009404:	230c      	movs	r3, #12
 8009406:	4699      	mov	r9, r3
 8009408:	3b09      	subs	r3, #9
 800940a:	46a0      	mov	r8, r4
 800940c:	4683      	mov	fp, r0
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	e671      	b.n	80090f6 <__aeabi_ddiv+0x4a>
 8009412:	2304      	movs	r3, #4
 8009414:	4699      	mov	r9, r3
 8009416:	2300      	movs	r3, #0
 8009418:	469b      	mov	fp, r3
 800941a:	3301      	adds	r3, #1
 800941c:	2500      	movs	r5, #0
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	e669      	b.n	80090f6 <__aeabi_ddiv+0x4a>
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	000007ff 	.word	0x000007ff
 8009428:	fffffc01 	.word	0xfffffc01
 800942c:	0801bcd0 	.word	0x0801bcd0
 8009430:	000003ff 	.word	0x000003ff
 8009434:	feffffff 	.word	0xfeffffff
 8009438:	000007fe 	.word	0x000007fe
 800943c:	000003f3 	.word	0x000003f3
 8009440:	fffffc0d 	.word	0xfffffc0d
 8009444:	fffff801 	.word	0xfffff801
 8009448:	4649      	mov	r1, r9
 800944a:	2301      	movs	r3, #1
 800944c:	4319      	orrs	r1, r3
 800944e:	4689      	mov	r9, r1
 8009450:	2400      	movs	r4, #0
 8009452:	2001      	movs	r0, #1
 8009454:	e66a      	b.n	800912c <__aeabi_ddiv+0x80>
 8009456:	2300      	movs	r3, #0
 8009458:	2480      	movs	r4, #128	; 0x80
 800945a:	469a      	mov	sl, r3
 800945c:	2500      	movs	r5, #0
 800945e:	4b8a      	ldr	r3, [pc, #552]	; (8009688 <__aeabi_ddiv+0x5dc>)
 8009460:	0324      	lsls	r4, r4, #12
 8009462:	e67a      	b.n	800915a <__aeabi_ddiv+0xae>
 8009464:	2501      	movs	r5, #1
 8009466:	426d      	negs	r5, r5
 8009468:	2301      	movs	r3, #1
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	2b38      	cmp	r3, #56	; 0x38
 800946e:	dd00      	ble.n	8009472 <__aeabi_ddiv+0x3c6>
 8009470:	e670      	b.n	8009154 <__aeabi_ddiv+0xa8>
 8009472:	2b1f      	cmp	r3, #31
 8009474:	dc00      	bgt.n	8009478 <__aeabi_ddiv+0x3cc>
 8009476:	e0bf      	b.n	80095f8 <__aeabi_ddiv+0x54c>
 8009478:	211f      	movs	r1, #31
 800947a:	4249      	negs	r1, r1
 800947c:	1a8a      	subs	r2, r1, r2
 800947e:	4641      	mov	r1, r8
 8009480:	40d1      	lsrs	r1, r2
 8009482:	000a      	movs	r2, r1
 8009484:	2b20      	cmp	r3, #32
 8009486:	d004      	beq.n	8009492 <__aeabi_ddiv+0x3e6>
 8009488:	4641      	mov	r1, r8
 800948a:	4b80      	ldr	r3, [pc, #512]	; (800968c <__aeabi_ddiv+0x5e0>)
 800948c:	445b      	add	r3, fp
 800948e:	4099      	lsls	r1, r3
 8009490:	430d      	orrs	r5, r1
 8009492:	1e6b      	subs	r3, r5, #1
 8009494:	419d      	sbcs	r5, r3
 8009496:	2307      	movs	r3, #7
 8009498:	432a      	orrs	r2, r5
 800949a:	001d      	movs	r5, r3
 800949c:	2400      	movs	r4, #0
 800949e:	4015      	ands	r5, r2
 80094a0:	4213      	tst	r3, r2
 80094a2:	d100      	bne.n	80094a6 <__aeabi_ddiv+0x3fa>
 80094a4:	e0d4      	b.n	8009650 <__aeabi_ddiv+0x5a4>
 80094a6:	210f      	movs	r1, #15
 80094a8:	2300      	movs	r3, #0
 80094aa:	4011      	ands	r1, r2
 80094ac:	2904      	cmp	r1, #4
 80094ae:	d100      	bne.n	80094b2 <__aeabi_ddiv+0x406>
 80094b0:	e0cb      	b.n	800964a <__aeabi_ddiv+0x59e>
 80094b2:	1d11      	adds	r1, r2, #4
 80094b4:	4291      	cmp	r1, r2
 80094b6:	4192      	sbcs	r2, r2
 80094b8:	4252      	negs	r2, r2
 80094ba:	189b      	adds	r3, r3, r2
 80094bc:	000a      	movs	r2, r1
 80094be:	0219      	lsls	r1, r3, #8
 80094c0:	d400      	bmi.n	80094c4 <__aeabi_ddiv+0x418>
 80094c2:	e0c2      	b.n	800964a <__aeabi_ddiv+0x59e>
 80094c4:	2301      	movs	r3, #1
 80094c6:	2400      	movs	r4, #0
 80094c8:	2500      	movs	r5, #0
 80094ca:	e646      	b.n	800915a <__aeabi_ddiv+0xae>
 80094cc:	2380      	movs	r3, #128	; 0x80
 80094ce:	4641      	mov	r1, r8
 80094d0:	031b      	lsls	r3, r3, #12
 80094d2:	4219      	tst	r1, r3
 80094d4:	d008      	beq.n	80094e8 <__aeabi_ddiv+0x43c>
 80094d6:	421c      	tst	r4, r3
 80094d8:	d106      	bne.n	80094e8 <__aeabi_ddiv+0x43c>
 80094da:	431c      	orrs	r4, r3
 80094dc:	0324      	lsls	r4, r4, #12
 80094de:	46ba      	mov	sl, r7
 80094e0:	0015      	movs	r5, r2
 80094e2:	4b69      	ldr	r3, [pc, #420]	; (8009688 <__aeabi_ddiv+0x5dc>)
 80094e4:	0b24      	lsrs	r4, r4, #12
 80094e6:	e638      	b.n	800915a <__aeabi_ddiv+0xae>
 80094e8:	2480      	movs	r4, #128	; 0x80
 80094ea:	4643      	mov	r3, r8
 80094ec:	0324      	lsls	r4, r4, #12
 80094ee:	431c      	orrs	r4, r3
 80094f0:	0324      	lsls	r4, r4, #12
 80094f2:	46b2      	mov	sl, r6
 80094f4:	4b64      	ldr	r3, [pc, #400]	; (8009688 <__aeabi_ddiv+0x5dc>)
 80094f6:	0b24      	lsrs	r4, r4, #12
 80094f8:	e62f      	b.n	800915a <__aeabi_ddiv+0xae>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d100      	bne.n	8009500 <__aeabi_ddiv+0x454>
 80094fe:	e703      	b.n	8009308 <__aeabi_ddiv+0x25c>
 8009500:	19a6      	adds	r6, r4, r6
 8009502:	1e68      	subs	r0, r5, #1
 8009504:	42a6      	cmp	r6, r4
 8009506:	d200      	bcs.n	800950a <__aeabi_ddiv+0x45e>
 8009508:	e08d      	b.n	8009626 <__aeabi_ddiv+0x57a>
 800950a:	428e      	cmp	r6, r1
 800950c:	d200      	bcs.n	8009510 <__aeabi_ddiv+0x464>
 800950e:	e0a3      	b.n	8009658 <__aeabi_ddiv+0x5ac>
 8009510:	d100      	bne.n	8009514 <__aeabi_ddiv+0x468>
 8009512:	e0b3      	b.n	800967c <__aeabi_ddiv+0x5d0>
 8009514:	0005      	movs	r5, r0
 8009516:	e6f5      	b.n	8009304 <__aeabi_ddiv+0x258>
 8009518:	42aa      	cmp	r2, r5
 800951a:	d900      	bls.n	800951e <__aeabi_ddiv+0x472>
 800951c:	e639      	b.n	8009192 <__aeabi_ddiv+0xe6>
 800951e:	4643      	mov	r3, r8
 8009520:	07de      	lsls	r6, r3, #31
 8009522:	0858      	lsrs	r0, r3, #1
 8009524:	086b      	lsrs	r3, r5, #1
 8009526:	431e      	orrs	r6, r3
 8009528:	07ed      	lsls	r5, r5, #31
 800952a:	e639      	b.n	80091a0 <__aeabi_ddiv+0xf4>
 800952c:	4648      	mov	r0, r9
 800952e:	f001 f971 	bl	800a814 <__clzsi2>
 8009532:	0001      	movs	r1, r0
 8009534:	0002      	movs	r2, r0
 8009536:	3115      	adds	r1, #21
 8009538:	3220      	adds	r2, #32
 800953a:	291c      	cmp	r1, #28
 800953c:	dc00      	bgt.n	8009540 <__aeabi_ddiv+0x494>
 800953e:	e72c      	b.n	800939a <__aeabi_ddiv+0x2ee>
 8009540:	464b      	mov	r3, r9
 8009542:	3808      	subs	r0, #8
 8009544:	4083      	lsls	r3, r0
 8009546:	2500      	movs	r5, #0
 8009548:	4698      	mov	r8, r3
 800954a:	e732      	b.n	80093b2 <__aeabi_ddiv+0x306>
 800954c:	f001 f962 	bl	800a814 <__clzsi2>
 8009550:	0003      	movs	r3, r0
 8009552:	001a      	movs	r2, r3
 8009554:	3215      	adds	r2, #21
 8009556:	3020      	adds	r0, #32
 8009558:	2a1c      	cmp	r2, #28
 800955a:	dc00      	bgt.n	800955e <__aeabi_ddiv+0x4b2>
 800955c:	e700      	b.n	8009360 <__aeabi_ddiv+0x2b4>
 800955e:	4654      	mov	r4, sl
 8009560:	3b08      	subs	r3, #8
 8009562:	2200      	movs	r2, #0
 8009564:	409c      	lsls	r4, r3
 8009566:	e705      	b.n	8009374 <__aeabi_ddiv+0x2c8>
 8009568:	1936      	adds	r6, r6, r4
 800956a:	3b01      	subs	r3, #1
 800956c:	42b4      	cmp	r4, r6
 800956e:	d900      	bls.n	8009572 <__aeabi_ddiv+0x4c6>
 8009570:	e6a6      	b.n	80092c0 <__aeabi_ddiv+0x214>
 8009572:	42b2      	cmp	r2, r6
 8009574:	d800      	bhi.n	8009578 <__aeabi_ddiv+0x4cc>
 8009576:	e6a3      	b.n	80092c0 <__aeabi_ddiv+0x214>
 8009578:	1e83      	subs	r3, r0, #2
 800957a:	1936      	adds	r6, r6, r4
 800957c:	e6a0      	b.n	80092c0 <__aeabi_ddiv+0x214>
 800957e:	1909      	adds	r1, r1, r4
 8009580:	3d01      	subs	r5, #1
 8009582:	428c      	cmp	r4, r1
 8009584:	d900      	bls.n	8009588 <__aeabi_ddiv+0x4dc>
 8009586:	e68d      	b.n	80092a4 <__aeabi_ddiv+0x1f8>
 8009588:	428a      	cmp	r2, r1
 800958a:	d800      	bhi.n	800958e <__aeabi_ddiv+0x4e2>
 800958c:	e68a      	b.n	80092a4 <__aeabi_ddiv+0x1f8>
 800958e:	1e85      	subs	r5, r0, #2
 8009590:	1909      	adds	r1, r1, r4
 8009592:	e687      	b.n	80092a4 <__aeabi_ddiv+0x1f8>
 8009594:	230f      	movs	r3, #15
 8009596:	402b      	ands	r3, r5
 8009598:	2b04      	cmp	r3, #4
 800959a:	d100      	bne.n	800959e <__aeabi_ddiv+0x4f2>
 800959c:	e6bc      	b.n	8009318 <__aeabi_ddiv+0x26c>
 800959e:	2305      	movs	r3, #5
 80095a0:	425b      	negs	r3, r3
 80095a2:	42ab      	cmp	r3, r5
 80095a4:	419b      	sbcs	r3, r3
 80095a6:	3504      	adds	r5, #4
 80095a8:	425b      	negs	r3, r3
 80095aa:	08ed      	lsrs	r5, r5, #3
 80095ac:	4498      	add	r8, r3
 80095ae:	e6b4      	b.n	800931a <__aeabi_ddiv+0x26e>
 80095b0:	42af      	cmp	r7, r5
 80095b2:	d900      	bls.n	80095b6 <__aeabi_ddiv+0x50a>
 80095b4:	e660      	b.n	8009278 <__aeabi_ddiv+0x1cc>
 80095b6:	4282      	cmp	r2, r0
 80095b8:	d804      	bhi.n	80095c4 <__aeabi_ddiv+0x518>
 80095ba:	d000      	beq.n	80095be <__aeabi_ddiv+0x512>
 80095bc:	e65c      	b.n	8009278 <__aeabi_ddiv+0x1cc>
 80095be:	42ae      	cmp	r6, r5
 80095c0:	d800      	bhi.n	80095c4 <__aeabi_ddiv+0x518>
 80095c2:	e659      	b.n	8009278 <__aeabi_ddiv+0x1cc>
 80095c4:	2302      	movs	r3, #2
 80095c6:	425b      	negs	r3, r3
 80095c8:	469c      	mov	ip, r3
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	44e0      	add	r8, ip
 80095ce:	469c      	mov	ip, r3
 80095d0:	4465      	add	r5, ip
 80095d2:	429d      	cmp	r5, r3
 80095d4:	419b      	sbcs	r3, r3
 80095d6:	425b      	negs	r3, r3
 80095d8:	191b      	adds	r3, r3, r4
 80095da:	18c0      	adds	r0, r0, r3
 80095dc:	e64d      	b.n	800927a <__aeabi_ddiv+0x1ce>
 80095de:	428a      	cmp	r2, r1
 80095e0:	d800      	bhi.n	80095e4 <__aeabi_ddiv+0x538>
 80095e2:	e60e      	b.n	8009202 <__aeabi_ddiv+0x156>
 80095e4:	1e83      	subs	r3, r0, #2
 80095e6:	1909      	adds	r1, r1, r4
 80095e8:	e60b      	b.n	8009202 <__aeabi_ddiv+0x156>
 80095ea:	428a      	cmp	r2, r1
 80095ec:	d800      	bhi.n	80095f0 <__aeabi_ddiv+0x544>
 80095ee:	e5f4      	b.n	80091da <__aeabi_ddiv+0x12e>
 80095f0:	1e83      	subs	r3, r0, #2
 80095f2:	4698      	mov	r8, r3
 80095f4:	1909      	adds	r1, r1, r4
 80095f6:	e5f0      	b.n	80091da <__aeabi_ddiv+0x12e>
 80095f8:	4925      	ldr	r1, [pc, #148]	; (8009690 <__aeabi_ddiv+0x5e4>)
 80095fa:	0028      	movs	r0, r5
 80095fc:	4459      	add	r1, fp
 80095fe:	408d      	lsls	r5, r1
 8009600:	4642      	mov	r2, r8
 8009602:	408a      	lsls	r2, r1
 8009604:	1e69      	subs	r1, r5, #1
 8009606:	418d      	sbcs	r5, r1
 8009608:	4641      	mov	r1, r8
 800960a:	40d8      	lsrs	r0, r3
 800960c:	40d9      	lsrs	r1, r3
 800960e:	4302      	orrs	r2, r0
 8009610:	432a      	orrs	r2, r5
 8009612:	000b      	movs	r3, r1
 8009614:	0751      	lsls	r1, r2, #29
 8009616:	d100      	bne.n	800961a <__aeabi_ddiv+0x56e>
 8009618:	e751      	b.n	80094be <__aeabi_ddiv+0x412>
 800961a:	210f      	movs	r1, #15
 800961c:	4011      	ands	r1, r2
 800961e:	2904      	cmp	r1, #4
 8009620:	d000      	beq.n	8009624 <__aeabi_ddiv+0x578>
 8009622:	e746      	b.n	80094b2 <__aeabi_ddiv+0x406>
 8009624:	e74b      	b.n	80094be <__aeabi_ddiv+0x412>
 8009626:	0005      	movs	r5, r0
 8009628:	428e      	cmp	r6, r1
 800962a:	d000      	beq.n	800962e <__aeabi_ddiv+0x582>
 800962c:	e66a      	b.n	8009304 <__aeabi_ddiv+0x258>
 800962e:	9a00      	ldr	r2, [sp, #0]
 8009630:	4293      	cmp	r3, r2
 8009632:	d000      	beq.n	8009636 <__aeabi_ddiv+0x58a>
 8009634:	e666      	b.n	8009304 <__aeabi_ddiv+0x258>
 8009636:	e667      	b.n	8009308 <__aeabi_ddiv+0x25c>
 8009638:	4a16      	ldr	r2, [pc, #88]	; (8009694 <__aeabi_ddiv+0x5e8>)
 800963a:	445a      	add	r2, fp
 800963c:	2a00      	cmp	r2, #0
 800963e:	dc00      	bgt.n	8009642 <__aeabi_ddiv+0x596>
 8009640:	e710      	b.n	8009464 <__aeabi_ddiv+0x3b8>
 8009642:	2301      	movs	r3, #1
 8009644:	2500      	movs	r5, #0
 8009646:	4498      	add	r8, r3
 8009648:	e667      	b.n	800931a <__aeabi_ddiv+0x26e>
 800964a:	075d      	lsls	r5, r3, #29
 800964c:	025b      	lsls	r3, r3, #9
 800964e:	0b1c      	lsrs	r4, r3, #12
 8009650:	08d2      	lsrs	r2, r2, #3
 8009652:	2300      	movs	r3, #0
 8009654:	4315      	orrs	r5, r2
 8009656:	e580      	b.n	800915a <__aeabi_ddiv+0xae>
 8009658:	9800      	ldr	r0, [sp, #0]
 800965a:	3d02      	subs	r5, #2
 800965c:	0042      	lsls	r2, r0, #1
 800965e:	4282      	cmp	r2, r0
 8009660:	41bf      	sbcs	r7, r7
 8009662:	427f      	negs	r7, r7
 8009664:	193c      	adds	r4, r7, r4
 8009666:	1936      	adds	r6, r6, r4
 8009668:	9200      	str	r2, [sp, #0]
 800966a:	e7dd      	b.n	8009628 <__aeabi_ddiv+0x57c>
 800966c:	2480      	movs	r4, #128	; 0x80
 800966e:	4643      	mov	r3, r8
 8009670:	0324      	lsls	r4, r4, #12
 8009672:	431c      	orrs	r4, r3
 8009674:	0324      	lsls	r4, r4, #12
 8009676:	4b04      	ldr	r3, [pc, #16]	; (8009688 <__aeabi_ddiv+0x5dc>)
 8009678:	0b24      	lsrs	r4, r4, #12
 800967a:	e56e      	b.n	800915a <__aeabi_ddiv+0xae>
 800967c:	9a00      	ldr	r2, [sp, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d3ea      	bcc.n	8009658 <__aeabi_ddiv+0x5ac>
 8009682:	0005      	movs	r5, r0
 8009684:	e7d3      	b.n	800962e <__aeabi_ddiv+0x582>
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	000007ff 	.word	0x000007ff
 800968c:	0000043e 	.word	0x0000043e
 8009690:	0000041e 	.word	0x0000041e
 8009694:	000003ff 	.word	0x000003ff

08009698 <__eqdf2>:
 8009698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800969a:	464e      	mov	r6, r9
 800969c:	4645      	mov	r5, r8
 800969e:	46de      	mov	lr, fp
 80096a0:	4657      	mov	r7, sl
 80096a2:	4690      	mov	r8, r2
 80096a4:	b5e0      	push	{r5, r6, r7, lr}
 80096a6:	0017      	movs	r7, r2
 80096a8:	031a      	lsls	r2, r3, #12
 80096aa:	0b12      	lsrs	r2, r2, #12
 80096ac:	0005      	movs	r5, r0
 80096ae:	4684      	mov	ip, r0
 80096b0:	4819      	ldr	r0, [pc, #100]	; (8009718 <__eqdf2+0x80>)
 80096b2:	030e      	lsls	r6, r1, #12
 80096b4:	004c      	lsls	r4, r1, #1
 80096b6:	4691      	mov	r9, r2
 80096b8:	005a      	lsls	r2, r3, #1
 80096ba:	0fdb      	lsrs	r3, r3, #31
 80096bc:	469b      	mov	fp, r3
 80096be:	0b36      	lsrs	r6, r6, #12
 80096c0:	0d64      	lsrs	r4, r4, #21
 80096c2:	0fc9      	lsrs	r1, r1, #31
 80096c4:	0d52      	lsrs	r2, r2, #21
 80096c6:	4284      	cmp	r4, r0
 80096c8:	d019      	beq.n	80096fe <__eqdf2+0x66>
 80096ca:	4282      	cmp	r2, r0
 80096cc:	d010      	beq.n	80096f0 <__eqdf2+0x58>
 80096ce:	2001      	movs	r0, #1
 80096d0:	4294      	cmp	r4, r2
 80096d2:	d10e      	bne.n	80096f2 <__eqdf2+0x5a>
 80096d4:	454e      	cmp	r6, r9
 80096d6:	d10c      	bne.n	80096f2 <__eqdf2+0x5a>
 80096d8:	2001      	movs	r0, #1
 80096da:	45c4      	cmp	ip, r8
 80096dc:	d109      	bne.n	80096f2 <__eqdf2+0x5a>
 80096de:	4559      	cmp	r1, fp
 80096e0:	d017      	beq.n	8009712 <__eqdf2+0x7a>
 80096e2:	2c00      	cmp	r4, #0
 80096e4:	d105      	bne.n	80096f2 <__eqdf2+0x5a>
 80096e6:	0030      	movs	r0, r6
 80096e8:	4328      	orrs	r0, r5
 80096ea:	1e43      	subs	r3, r0, #1
 80096ec:	4198      	sbcs	r0, r3
 80096ee:	e000      	b.n	80096f2 <__eqdf2+0x5a>
 80096f0:	2001      	movs	r0, #1
 80096f2:	bcf0      	pop	{r4, r5, r6, r7}
 80096f4:	46bb      	mov	fp, r7
 80096f6:	46b2      	mov	sl, r6
 80096f8:	46a9      	mov	r9, r5
 80096fa:	46a0      	mov	r8, r4
 80096fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fe:	0033      	movs	r3, r6
 8009700:	2001      	movs	r0, #1
 8009702:	432b      	orrs	r3, r5
 8009704:	d1f5      	bne.n	80096f2 <__eqdf2+0x5a>
 8009706:	42a2      	cmp	r2, r4
 8009708:	d1f3      	bne.n	80096f2 <__eqdf2+0x5a>
 800970a:	464b      	mov	r3, r9
 800970c:	433b      	orrs	r3, r7
 800970e:	d1f0      	bne.n	80096f2 <__eqdf2+0x5a>
 8009710:	e7e2      	b.n	80096d8 <__eqdf2+0x40>
 8009712:	2000      	movs	r0, #0
 8009714:	e7ed      	b.n	80096f2 <__eqdf2+0x5a>
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	000007ff 	.word	0x000007ff

0800971c <__gedf2>:
 800971c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800971e:	4647      	mov	r7, r8
 8009720:	46ce      	mov	lr, r9
 8009722:	0004      	movs	r4, r0
 8009724:	0018      	movs	r0, r3
 8009726:	0016      	movs	r6, r2
 8009728:	031b      	lsls	r3, r3, #12
 800972a:	0b1b      	lsrs	r3, r3, #12
 800972c:	4d2d      	ldr	r5, [pc, #180]	; (80097e4 <__gedf2+0xc8>)
 800972e:	004a      	lsls	r2, r1, #1
 8009730:	4699      	mov	r9, r3
 8009732:	b580      	push	{r7, lr}
 8009734:	0043      	lsls	r3, r0, #1
 8009736:	030f      	lsls	r7, r1, #12
 8009738:	46a4      	mov	ip, r4
 800973a:	46b0      	mov	r8, r6
 800973c:	0b3f      	lsrs	r7, r7, #12
 800973e:	0d52      	lsrs	r2, r2, #21
 8009740:	0fc9      	lsrs	r1, r1, #31
 8009742:	0d5b      	lsrs	r3, r3, #21
 8009744:	0fc0      	lsrs	r0, r0, #31
 8009746:	42aa      	cmp	r2, r5
 8009748:	d021      	beq.n	800978e <__gedf2+0x72>
 800974a:	42ab      	cmp	r3, r5
 800974c:	d013      	beq.n	8009776 <__gedf2+0x5a>
 800974e:	2a00      	cmp	r2, #0
 8009750:	d122      	bne.n	8009798 <__gedf2+0x7c>
 8009752:	433c      	orrs	r4, r7
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <__gedf2+0x42>
 8009758:	464d      	mov	r5, r9
 800975a:	432e      	orrs	r6, r5
 800975c:	d022      	beq.n	80097a4 <__gedf2+0x88>
 800975e:	2c00      	cmp	r4, #0
 8009760:	d010      	beq.n	8009784 <__gedf2+0x68>
 8009762:	4281      	cmp	r1, r0
 8009764:	d022      	beq.n	80097ac <__gedf2+0x90>
 8009766:	2002      	movs	r0, #2
 8009768:	3901      	subs	r1, #1
 800976a:	4008      	ands	r0, r1
 800976c:	3801      	subs	r0, #1
 800976e:	bcc0      	pop	{r6, r7}
 8009770:	46b9      	mov	r9, r7
 8009772:	46b0      	mov	r8, r6
 8009774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009776:	464d      	mov	r5, r9
 8009778:	432e      	orrs	r6, r5
 800977a:	d129      	bne.n	80097d0 <__gedf2+0xb4>
 800977c:	2a00      	cmp	r2, #0
 800977e:	d1f0      	bne.n	8009762 <__gedf2+0x46>
 8009780:	433c      	orrs	r4, r7
 8009782:	d1ee      	bne.n	8009762 <__gedf2+0x46>
 8009784:	2800      	cmp	r0, #0
 8009786:	d1f2      	bne.n	800976e <__gedf2+0x52>
 8009788:	2001      	movs	r0, #1
 800978a:	4240      	negs	r0, r0
 800978c:	e7ef      	b.n	800976e <__gedf2+0x52>
 800978e:	003d      	movs	r5, r7
 8009790:	4325      	orrs	r5, r4
 8009792:	d11d      	bne.n	80097d0 <__gedf2+0xb4>
 8009794:	4293      	cmp	r3, r2
 8009796:	d0ee      	beq.n	8009776 <__gedf2+0x5a>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e2      	bne.n	8009762 <__gedf2+0x46>
 800979c:	464c      	mov	r4, r9
 800979e:	4326      	orrs	r6, r4
 80097a0:	d1df      	bne.n	8009762 <__gedf2+0x46>
 80097a2:	e7e0      	b.n	8009766 <__gedf2+0x4a>
 80097a4:	2000      	movs	r0, #0
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	d0e1      	beq.n	800976e <__gedf2+0x52>
 80097aa:	e7dc      	b.n	8009766 <__gedf2+0x4a>
 80097ac:	429a      	cmp	r2, r3
 80097ae:	dc0a      	bgt.n	80097c6 <__gedf2+0xaa>
 80097b0:	dbe8      	blt.n	8009784 <__gedf2+0x68>
 80097b2:	454f      	cmp	r7, r9
 80097b4:	d8d7      	bhi.n	8009766 <__gedf2+0x4a>
 80097b6:	d00e      	beq.n	80097d6 <__gedf2+0xba>
 80097b8:	2000      	movs	r0, #0
 80097ba:	454f      	cmp	r7, r9
 80097bc:	d2d7      	bcs.n	800976e <__gedf2+0x52>
 80097be:	2900      	cmp	r1, #0
 80097c0:	d0e2      	beq.n	8009788 <__gedf2+0x6c>
 80097c2:	0008      	movs	r0, r1
 80097c4:	e7d3      	b.n	800976e <__gedf2+0x52>
 80097c6:	4243      	negs	r3, r0
 80097c8:	4158      	adcs	r0, r3
 80097ca:	0040      	lsls	r0, r0, #1
 80097cc:	3801      	subs	r0, #1
 80097ce:	e7ce      	b.n	800976e <__gedf2+0x52>
 80097d0:	2002      	movs	r0, #2
 80097d2:	4240      	negs	r0, r0
 80097d4:	e7cb      	b.n	800976e <__gedf2+0x52>
 80097d6:	45c4      	cmp	ip, r8
 80097d8:	d8c5      	bhi.n	8009766 <__gedf2+0x4a>
 80097da:	2000      	movs	r0, #0
 80097dc:	45c4      	cmp	ip, r8
 80097de:	d2c6      	bcs.n	800976e <__gedf2+0x52>
 80097e0:	e7ed      	b.n	80097be <__gedf2+0xa2>
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	000007ff 	.word	0x000007ff

080097e8 <__ledf2>:
 80097e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ea:	4647      	mov	r7, r8
 80097ec:	46ce      	mov	lr, r9
 80097ee:	0004      	movs	r4, r0
 80097f0:	0018      	movs	r0, r3
 80097f2:	0016      	movs	r6, r2
 80097f4:	031b      	lsls	r3, r3, #12
 80097f6:	0b1b      	lsrs	r3, r3, #12
 80097f8:	4d2c      	ldr	r5, [pc, #176]	; (80098ac <__ledf2+0xc4>)
 80097fa:	004a      	lsls	r2, r1, #1
 80097fc:	4699      	mov	r9, r3
 80097fe:	b580      	push	{r7, lr}
 8009800:	0043      	lsls	r3, r0, #1
 8009802:	030f      	lsls	r7, r1, #12
 8009804:	46a4      	mov	ip, r4
 8009806:	46b0      	mov	r8, r6
 8009808:	0b3f      	lsrs	r7, r7, #12
 800980a:	0d52      	lsrs	r2, r2, #21
 800980c:	0fc9      	lsrs	r1, r1, #31
 800980e:	0d5b      	lsrs	r3, r3, #21
 8009810:	0fc0      	lsrs	r0, r0, #31
 8009812:	42aa      	cmp	r2, r5
 8009814:	d00d      	beq.n	8009832 <__ledf2+0x4a>
 8009816:	42ab      	cmp	r3, r5
 8009818:	d010      	beq.n	800983c <__ledf2+0x54>
 800981a:	2a00      	cmp	r2, #0
 800981c:	d127      	bne.n	800986e <__ledf2+0x86>
 800981e:	433c      	orrs	r4, r7
 8009820:	2b00      	cmp	r3, #0
 8009822:	d111      	bne.n	8009848 <__ledf2+0x60>
 8009824:	464d      	mov	r5, r9
 8009826:	432e      	orrs	r6, r5
 8009828:	d10e      	bne.n	8009848 <__ledf2+0x60>
 800982a:	2000      	movs	r0, #0
 800982c:	2c00      	cmp	r4, #0
 800982e:	d015      	beq.n	800985c <__ledf2+0x74>
 8009830:	e00e      	b.n	8009850 <__ledf2+0x68>
 8009832:	003d      	movs	r5, r7
 8009834:	4325      	orrs	r5, r4
 8009836:	d110      	bne.n	800985a <__ledf2+0x72>
 8009838:	4293      	cmp	r3, r2
 800983a:	d118      	bne.n	800986e <__ledf2+0x86>
 800983c:	464d      	mov	r5, r9
 800983e:	432e      	orrs	r6, r5
 8009840:	d10b      	bne.n	800985a <__ledf2+0x72>
 8009842:	2a00      	cmp	r2, #0
 8009844:	d102      	bne.n	800984c <__ledf2+0x64>
 8009846:	433c      	orrs	r4, r7
 8009848:	2c00      	cmp	r4, #0
 800984a:	d00b      	beq.n	8009864 <__ledf2+0x7c>
 800984c:	4281      	cmp	r1, r0
 800984e:	d014      	beq.n	800987a <__ledf2+0x92>
 8009850:	2002      	movs	r0, #2
 8009852:	3901      	subs	r1, #1
 8009854:	4008      	ands	r0, r1
 8009856:	3801      	subs	r0, #1
 8009858:	e000      	b.n	800985c <__ledf2+0x74>
 800985a:	2002      	movs	r0, #2
 800985c:	bcc0      	pop	{r6, r7}
 800985e:	46b9      	mov	r9, r7
 8009860:	46b0      	mov	r8, r6
 8009862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009864:	2800      	cmp	r0, #0
 8009866:	d1f9      	bne.n	800985c <__ledf2+0x74>
 8009868:	2001      	movs	r0, #1
 800986a:	4240      	negs	r0, r0
 800986c:	e7f6      	b.n	800985c <__ledf2+0x74>
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1ec      	bne.n	800984c <__ledf2+0x64>
 8009872:	464c      	mov	r4, r9
 8009874:	4326      	orrs	r6, r4
 8009876:	d1e9      	bne.n	800984c <__ledf2+0x64>
 8009878:	e7ea      	b.n	8009850 <__ledf2+0x68>
 800987a:	429a      	cmp	r2, r3
 800987c:	dd04      	ble.n	8009888 <__ledf2+0xa0>
 800987e:	4243      	negs	r3, r0
 8009880:	4158      	adcs	r0, r3
 8009882:	0040      	lsls	r0, r0, #1
 8009884:	3801      	subs	r0, #1
 8009886:	e7e9      	b.n	800985c <__ledf2+0x74>
 8009888:	429a      	cmp	r2, r3
 800988a:	dbeb      	blt.n	8009864 <__ledf2+0x7c>
 800988c:	454f      	cmp	r7, r9
 800988e:	d8df      	bhi.n	8009850 <__ledf2+0x68>
 8009890:	d006      	beq.n	80098a0 <__ledf2+0xb8>
 8009892:	2000      	movs	r0, #0
 8009894:	454f      	cmp	r7, r9
 8009896:	d2e1      	bcs.n	800985c <__ledf2+0x74>
 8009898:	2900      	cmp	r1, #0
 800989a:	d0e5      	beq.n	8009868 <__ledf2+0x80>
 800989c:	0008      	movs	r0, r1
 800989e:	e7dd      	b.n	800985c <__ledf2+0x74>
 80098a0:	45c4      	cmp	ip, r8
 80098a2:	d8d5      	bhi.n	8009850 <__ledf2+0x68>
 80098a4:	2000      	movs	r0, #0
 80098a6:	45c4      	cmp	ip, r8
 80098a8:	d2d8      	bcs.n	800985c <__ledf2+0x74>
 80098aa:	e7f5      	b.n	8009898 <__ledf2+0xb0>
 80098ac:	000007ff 	.word	0x000007ff

080098b0 <__aeabi_dmul>:
 80098b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b2:	4657      	mov	r7, sl
 80098b4:	464e      	mov	r6, r9
 80098b6:	4645      	mov	r5, r8
 80098b8:	46de      	mov	lr, fp
 80098ba:	b5e0      	push	{r5, r6, r7, lr}
 80098bc:	4698      	mov	r8, r3
 80098be:	030c      	lsls	r4, r1, #12
 80098c0:	004b      	lsls	r3, r1, #1
 80098c2:	0006      	movs	r6, r0
 80098c4:	4692      	mov	sl, r2
 80098c6:	b087      	sub	sp, #28
 80098c8:	0b24      	lsrs	r4, r4, #12
 80098ca:	0d5b      	lsrs	r3, r3, #21
 80098cc:	0fcf      	lsrs	r7, r1, #31
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d100      	bne.n	80098d4 <__aeabi_dmul+0x24>
 80098d2:	e15c      	b.n	8009b8e <__aeabi_dmul+0x2de>
 80098d4:	4ad9      	ldr	r2, [pc, #868]	; (8009c3c <__aeabi_dmul+0x38c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d100      	bne.n	80098dc <__aeabi_dmul+0x2c>
 80098da:	e175      	b.n	8009bc8 <__aeabi_dmul+0x318>
 80098dc:	0f42      	lsrs	r2, r0, #29
 80098de:	00e4      	lsls	r4, r4, #3
 80098e0:	4314      	orrs	r4, r2
 80098e2:	2280      	movs	r2, #128	; 0x80
 80098e4:	0412      	lsls	r2, r2, #16
 80098e6:	4314      	orrs	r4, r2
 80098e8:	4ad5      	ldr	r2, [pc, #852]	; (8009c40 <__aeabi_dmul+0x390>)
 80098ea:	00c5      	lsls	r5, r0, #3
 80098ec:	4694      	mov	ip, r2
 80098ee:	4463      	add	r3, ip
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	2300      	movs	r3, #0
 80098f4:	4699      	mov	r9, r3
 80098f6:	469b      	mov	fp, r3
 80098f8:	4643      	mov	r3, r8
 80098fa:	4642      	mov	r2, r8
 80098fc:	031e      	lsls	r6, r3, #12
 80098fe:	0fd2      	lsrs	r2, r2, #31
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4650      	mov	r0, sl
 8009904:	4690      	mov	r8, r2
 8009906:	0b36      	lsrs	r6, r6, #12
 8009908:	0d5b      	lsrs	r3, r3, #21
 800990a:	d100      	bne.n	800990e <__aeabi_dmul+0x5e>
 800990c:	e120      	b.n	8009b50 <__aeabi_dmul+0x2a0>
 800990e:	4acb      	ldr	r2, [pc, #812]	; (8009c3c <__aeabi_dmul+0x38c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d100      	bne.n	8009916 <__aeabi_dmul+0x66>
 8009914:	e162      	b.n	8009bdc <__aeabi_dmul+0x32c>
 8009916:	49ca      	ldr	r1, [pc, #808]	; (8009c40 <__aeabi_dmul+0x390>)
 8009918:	0f42      	lsrs	r2, r0, #29
 800991a:	468c      	mov	ip, r1
 800991c:	9900      	ldr	r1, [sp, #0]
 800991e:	4463      	add	r3, ip
 8009920:	00f6      	lsls	r6, r6, #3
 8009922:	468c      	mov	ip, r1
 8009924:	4316      	orrs	r6, r2
 8009926:	2280      	movs	r2, #128	; 0x80
 8009928:	449c      	add	ip, r3
 800992a:	0412      	lsls	r2, r2, #16
 800992c:	4663      	mov	r3, ip
 800992e:	4316      	orrs	r6, r2
 8009930:	00c2      	lsls	r2, r0, #3
 8009932:	2000      	movs	r0, #0
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	9900      	ldr	r1, [sp, #0]
 8009938:	4643      	mov	r3, r8
 800993a:	3101      	adds	r1, #1
 800993c:	468c      	mov	ip, r1
 800993e:	4649      	mov	r1, r9
 8009940:	407b      	eors	r3, r7
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	290f      	cmp	r1, #15
 8009946:	d826      	bhi.n	8009996 <__aeabi_dmul+0xe6>
 8009948:	4bbe      	ldr	r3, [pc, #760]	; (8009c44 <__aeabi_dmul+0x394>)
 800994a:	0089      	lsls	r1, r1, #2
 800994c:	5859      	ldr	r1, [r3, r1]
 800994e:	468f      	mov	pc, r1
 8009950:	4643      	mov	r3, r8
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	0034      	movs	r4, r6
 8009956:	0015      	movs	r5, r2
 8009958:	4683      	mov	fp, r0
 800995a:	465b      	mov	r3, fp
 800995c:	2b02      	cmp	r3, #2
 800995e:	d016      	beq.n	800998e <__aeabi_dmul+0xde>
 8009960:	2b03      	cmp	r3, #3
 8009962:	d100      	bne.n	8009966 <__aeabi_dmul+0xb6>
 8009964:	e203      	b.n	8009d6e <__aeabi_dmul+0x4be>
 8009966:	2b01      	cmp	r3, #1
 8009968:	d000      	beq.n	800996c <__aeabi_dmul+0xbc>
 800996a:	e0cd      	b.n	8009b08 <__aeabi_dmul+0x258>
 800996c:	2200      	movs	r2, #0
 800996e:	2400      	movs	r4, #0
 8009970:	2500      	movs	r5, #0
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	0512      	lsls	r2, r2, #20
 8009976:	4322      	orrs	r2, r4
 8009978:	07db      	lsls	r3, r3, #31
 800997a:	431a      	orrs	r2, r3
 800997c:	0028      	movs	r0, r5
 800997e:	0011      	movs	r1, r2
 8009980:	b007      	add	sp, #28
 8009982:	bcf0      	pop	{r4, r5, r6, r7}
 8009984:	46bb      	mov	fp, r7
 8009986:	46b2      	mov	sl, r6
 8009988:	46a9      	mov	r9, r5
 800998a:	46a0      	mov	r8, r4
 800998c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998e:	2400      	movs	r4, #0
 8009990:	2500      	movs	r5, #0
 8009992:	4aaa      	ldr	r2, [pc, #680]	; (8009c3c <__aeabi_dmul+0x38c>)
 8009994:	e7ed      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009996:	0c28      	lsrs	r0, r5, #16
 8009998:	042d      	lsls	r5, r5, #16
 800999a:	0c2d      	lsrs	r5, r5, #16
 800999c:	002b      	movs	r3, r5
 800999e:	0c11      	lsrs	r1, r2, #16
 80099a0:	0412      	lsls	r2, r2, #16
 80099a2:	0c12      	lsrs	r2, r2, #16
 80099a4:	4353      	muls	r3, r2
 80099a6:	4698      	mov	r8, r3
 80099a8:	0013      	movs	r3, r2
 80099aa:	002f      	movs	r7, r5
 80099ac:	4343      	muls	r3, r0
 80099ae:	4699      	mov	r9, r3
 80099b0:	434f      	muls	r7, r1
 80099b2:	444f      	add	r7, r9
 80099b4:	46bb      	mov	fp, r7
 80099b6:	4647      	mov	r7, r8
 80099b8:	000b      	movs	r3, r1
 80099ba:	0c3f      	lsrs	r7, r7, #16
 80099bc:	46ba      	mov	sl, r7
 80099be:	4343      	muls	r3, r0
 80099c0:	44da      	add	sl, fp
 80099c2:	9302      	str	r3, [sp, #8]
 80099c4:	45d1      	cmp	r9, sl
 80099c6:	d904      	bls.n	80099d2 <__aeabi_dmul+0x122>
 80099c8:	2780      	movs	r7, #128	; 0x80
 80099ca:	027f      	lsls	r7, r7, #9
 80099cc:	46b9      	mov	r9, r7
 80099ce:	444b      	add	r3, r9
 80099d0:	9302      	str	r3, [sp, #8]
 80099d2:	4653      	mov	r3, sl
 80099d4:	0c1b      	lsrs	r3, r3, #16
 80099d6:	469b      	mov	fp, r3
 80099d8:	4653      	mov	r3, sl
 80099da:	041f      	lsls	r7, r3, #16
 80099dc:	4643      	mov	r3, r8
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	4698      	mov	r8, r3
 80099e4:	003b      	movs	r3, r7
 80099e6:	4443      	add	r3, r8
 80099e8:	9304      	str	r3, [sp, #16]
 80099ea:	0c33      	lsrs	r3, r6, #16
 80099ec:	0436      	lsls	r6, r6, #16
 80099ee:	0c36      	lsrs	r6, r6, #16
 80099f0:	4698      	mov	r8, r3
 80099f2:	0033      	movs	r3, r6
 80099f4:	4343      	muls	r3, r0
 80099f6:	4699      	mov	r9, r3
 80099f8:	4643      	mov	r3, r8
 80099fa:	4343      	muls	r3, r0
 80099fc:	002f      	movs	r7, r5
 80099fe:	469a      	mov	sl, r3
 8009a00:	4643      	mov	r3, r8
 8009a02:	4377      	muls	r7, r6
 8009a04:	435d      	muls	r5, r3
 8009a06:	0c38      	lsrs	r0, r7, #16
 8009a08:	444d      	add	r5, r9
 8009a0a:	1945      	adds	r5, r0, r5
 8009a0c:	45a9      	cmp	r9, r5
 8009a0e:	d903      	bls.n	8009a18 <__aeabi_dmul+0x168>
 8009a10:	2380      	movs	r3, #128	; 0x80
 8009a12:	025b      	lsls	r3, r3, #9
 8009a14:	4699      	mov	r9, r3
 8009a16:	44ca      	add	sl, r9
 8009a18:	043f      	lsls	r7, r7, #16
 8009a1a:	0c28      	lsrs	r0, r5, #16
 8009a1c:	0c3f      	lsrs	r7, r7, #16
 8009a1e:	042d      	lsls	r5, r5, #16
 8009a20:	19ed      	adds	r5, r5, r7
 8009a22:	0c27      	lsrs	r7, r4, #16
 8009a24:	0424      	lsls	r4, r4, #16
 8009a26:	0c24      	lsrs	r4, r4, #16
 8009a28:	0003      	movs	r3, r0
 8009a2a:	0020      	movs	r0, r4
 8009a2c:	4350      	muls	r0, r2
 8009a2e:	437a      	muls	r2, r7
 8009a30:	4691      	mov	r9, r2
 8009a32:	003a      	movs	r2, r7
 8009a34:	4453      	add	r3, sl
 8009a36:	9305      	str	r3, [sp, #20]
 8009a38:	0c03      	lsrs	r3, r0, #16
 8009a3a:	469a      	mov	sl, r3
 8009a3c:	434a      	muls	r2, r1
 8009a3e:	4361      	muls	r1, r4
 8009a40:	4449      	add	r1, r9
 8009a42:	4451      	add	r1, sl
 8009a44:	44ab      	add	fp, r5
 8009a46:	4589      	cmp	r9, r1
 8009a48:	d903      	bls.n	8009a52 <__aeabi_dmul+0x1a2>
 8009a4a:	2380      	movs	r3, #128	; 0x80
 8009a4c:	025b      	lsls	r3, r3, #9
 8009a4e:	4699      	mov	r9, r3
 8009a50:	444a      	add	r2, r9
 8009a52:	0400      	lsls	r0, r0, #16
 8009a54:	0c0b      	lsrs	r3, r1, #16
 8009a56:	0c00      	lsrs	r0, r0, #16
 8009a58:	0409      	lsls	r1, r1, #16
 8009a5a:	1809      	adds	r1, r1, r0
 8009a5c:	0020      	movs	r0, r4
 8009a5e:	4699      	mov	r9, r3
 8009a60:	4643      	mov	r3, r8
 8009a62:	4370      	muls	r0, r6
 8009a64:	435c      	muls	r4, r3
 8009a66:	437e      	muls	r6, r7
 8009a68:	435f      	muls	r7, r3
 8009a6a:	0c03      	lsrs	r3, r0, #16
 8009a6c:	4698      	mov	r8, r3
 8009a6e:	19a4      	adds	r4, r4, r6
 8009a70:	4444      	add	r4, r8
 8009a72:	444a      	add	r2, r9
 8009a74:	9703      	str	r7, [sp, #12]
 8009a76:	42a6      	cmp	r6, r4
 8009a78:	d904      	bls.n	8009a84 <__aeabi_dmul+0x1d4>
 8009a7a:	2380      	movs	r3, #128	; 0x80
 8009a7c:	025b      	lsls	r3, r3, #9
 8009a7e:	4698      	mov	r8, r3
 8009a80:	4447      	add	r7, r8
 8009a82:	9703      	str	r7, [sp, #12]
 8009a84:	0423      	lsls	r3, r4, #16
 8009a86:	9e02      	ldr	r6, [sp, #8]
 8009a88:	469a      	mov	sl, r3
 8009a8a:	9b05      	ldr	r3, [sp, #20]
 8009a8c:	445e      	add	r6, fp
 8009a8e:	4698      	mov	r8, r3
 8009a90:	42ae      	cmp	r6, r5
 8009a92:	41ad      	sbcs	r5, r5
 8009a94:	1876      	adds	r6, r6, r1
 8009a96:	428e      	cmp	r6, r1
 8009a98:	4189      	sbcs	r1, r1
 8009a9a:	0400      	lsls	r0, r0, #16
 8009a9c:	0c00      	lsrs	r0, r0, #16
 8009a9e:	4450      	add	r0, sl
 8009aa0:	4440      	add	r0, r8
 8009aa2:	426d      	negs	r5, r5
 8009aa4:	1947      	adds	r7, r0, r5
 8009aa6:	46b8      	mov	r8, r7
 8009aa8:	4693      	mov	fp, r2
 8009aaa:	4249      	negs	r1, r1
 8009aac:	4689      	mov	r9, r1
 8009aae:	44c3      	add	fp, r8
 8009ab0:	44d9      	add	r9, fp
 8009ab2:	4298      	cmp	r0, r3
 8009ab4:	4180      	sbcs	r0, r0
 8009ab6:	45a8      	cmp	r8, r5
 8009ab8:	41ad      	sbcs	r5, r5
 8009aba:	4593      	cmp	fp, r2
 8009abc:	4192      	sbcs	r2, r2
 8009abe:	4589      	cmp	r9, r1
 8009ac0:	4189      	sbcs	r1, r1
 8009ac2:	426d      	negs	r5, r5
 8009ac4:	4240      	negs	r0, r0
 8009ac6:	4328      	orrs	r0, r5
 8009ac8:	0c24      	lsrs	r4, r4, #16
 8009aca:	4252      	negs	r2, r2
 8009acc:	4249      	negs	r1, r1
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	1900      	adds	r0, r0, r4
 8009ad4:	1880      	adds	r0, r0, r2
 8009ad6:	18c7      	adds	r7, r0, r3
 8009ad8:	464b      	mov	r3, r9
 8009ada:	0ddc      	lsrs	r4, r3, #23
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	0275      	lsls	r5, r6, #9
 8009ae0:	431d      	orrs	r5, r3
 8009ae2:	1e6a      	subs	r2, r5, #1
 8009ae4:	4195      	sbcs	r5, r2
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	0df6      	lsrs	r6, r6, #23
 8009aea:	027f      	lsls	r7, r7, #9
 8009aec:	4335      	orrs	r5, r6
 8009aee:	025a      	lsls	r2, r3, #9
 8009af0:	433c      	orrs	r4, r7
 8009af2:	4315      	orrs	r5, r2
 8009af4:	01fb      	lsls	r3, r7, #7
 8009af6:	d400      	bmi.n	8009afa <__aeabi_dmul+0x24a>
 8009af8:	e11c      	b.n	8009d34 <__aeabi_dmul+0x484>
 8009afa:	2101      	movs	r1, #1
 8009afc:	086a      	lsrs	r2, r5, #1
 8009afe:	400d      	ands	r5, r1
 8009b00:	4315      	orrs	r5, r2
 8009b02:	07e2      	lsls	r2, r4, #31
 8009b04:	4315      	orrs	r5, r2
 8009b06:	0864      	lsrs	r4, r4, #1
 8009b08:	494f      	ldr	r1, [pc, #316]	; (8009c48 <__aeabi_dmul+0x398>)
 8009b0a:	4461      	add	r1, ip
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	dc00      	bgt.n	8009b12 <__aeabi_dmul+0x262>
 8009b10:	e0b0      	b.n	8009c74 <__aeabi_dmul+0x3c4>
 8009b12:	076b      	lsls	r3, r5, #29
 8009b14:	d009      	beq.n	8009b2a <__aeabi_dmul+0x27a>
 8009b16:	220f      	movs	r2, #15
 8009b18:	402a      	ands	r2, r5
 8009b1a:	2a04      	cmp	r2, #4
 8009b1c:	d005      	beq.n	8009b2a <__aeabi_dmul+0x27a>
 8009b1e:	1d2a      	adds	r2, r5, #4
 8009b20:	42aa      	cmp	r2, r5
 8009b22:	41ad      	sbcs	r5, r5
 8009b24:	426d      	negs	r5, r5
 8009b26:	1964      	adds	r4, r4, r5
 8009b28:	0015      	movs	r5, r2
 8009b2a:	01e3      	lsls	r3, r4, #7
 8009b2c:	d504      	bpl.n	8009b38 <__aeabi_dmul+0x288>
 8009b2e:	2180      	movs	r1, #128	; 0x80
 8009b30:	4a46      	ldr	r2, [pc, #280]	; (8009c4c <__aeabi_dmul+0x39c>)
 8009b32:	00c9      	lsls	r1, r1, #3
 8009b34:	4014      	ands	r4, r2
 8009b36:	4461      	add	r1, ip
 8009b38:	4a45      	ldr	r2, [pc, #276]	; (8009c50 <__aeabi_dmul+0x3a0>)
 8009b3a:	4291      	cmp	r1, r2
 8009b3c:	dd00      	ble.n	8009b40 <__aeabi_dmul+0x290>
 8009b3e:	e726      	b.n	800998e <__aeabi_dmul+0xde>
 8009b40:	0762      	lsls	r2, r4, #29
 8009b42:	08ed      	lsrs	r5, r5, #3
 8009b44:	0264      	lsls	r4, r4, #9
 8009b46:	0549      	lsls	r1, r1, #21
 8009b48:	4315      	orrs	r5, r2
 8009b4a:	0b24      	lsrs	r4, r4, #12
 8009b4c:	0d4a      	lsrs	r2, r1, #21
 8009b4e:	e710      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009b50:	4652      	mov	r2, sl
 8009b52:	4332      	orrs	r2, r6
 8009b54:	d100      	bne.n	8009b58 <__aeabi_dmul+0x2a8>
 8009b56:	e07f      	b.n	8009c58 <__aeabi_dmul+0x3a8>
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	d100      	bne.n	8009b5e <__aeabi_dmul+0x2ae>
 8009b5c:	e0dc      	b.n	8009d18 <__aeabi_dmul+0x468>
 8009b5e:	0030      	movs	r0, r6
 8009b60:	f000 fe58 	bl	800a814 <__clzsi2>
 8009b64:	0002      	movs	r2, r0
 8009b66:	3a0b      	subs	r2, #11
 8009b68:	231d      	movs	r3, #29
 8009b6a:	0001      	movs	r1, r0
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	4652      	mov	r2, sl
 8009b70:	3908      	subs	r1, #8
 8009b72:	40da      	lsrs	r2, r3
 8009b74:	408e      	lsls	r6, r1
 8009b76:	4316      	orrs	r6, r2
 8009b78:	4652      	mov	r2, sl
 8009b7a:	408a      	lsls	r2, r1
 8009b7c:	9b00      	ldr	r3, [sp, #0]
 8009b7e:	4935      	ldr	r1, [pc, #212]	; (8009c54 <__aeabi_dmul+0x3a4>)
 8009b80:	1a18      	subs	r0, r3, r0
 8009b82:	0003      	movs	r3, r0
 8009b84:	468c      	mov	ip, r1
 8009b86:	4463      	add	r3, ip
 8009b88:	2000      	movs	r0, #0
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	e6d3      	b.n	8009936 <__aeabi_dmul+0x86>
 8009b8e:	0025      	movs	r5, r4
 8009b90:	4305      	orrs	r5, r0
 8009b92:	d04a      	beq.n	8009c2a <__aeabi_dmul+0x37a>
 8009b94:	2c00      	cmp	r4, #0
 8009b96:	d100      	bne.n	8009b9a <__aeabi_dmul+0x2ea>
 8009b98:	e0b0      	b.n	8009cfc <__aeabi_dmul+0x44c>
 8009b9a:	0020      	movs	r0, r4
 8009b9c:	f000 fe3a 	bl	800a814 <__clzsi2>
 8009ba0:	0001      	movs	r1, r0
 8009ba2:	0002      	movs	r2, r0
 8009ba4:	390b      	subs	r1, #11
 8009ba6:	231d      	movs	r3, #29
 8009ba8:	0010      	movs	r0, r2
 8009baa:	1a5b      	subs	r3, r3, r1
 8009bac:	0031      	movs	r1, r6
 8009bae:	0035      	movs	r5, r6
 8009bb0:	3808      	subs	r0, #8
 8009bb2:	4084      	lsls	r4, r0
 8009bb4:	40d9      	lsrs	r1, r3
 8009bb6:	4085      	lsls	r5, r0
 8009bb8:	430c      	orrs	r4, r1
 8009bba:	4826      	ldr	r0, [pc, #152]	; (8009c54 <__aeabi_dmul+0x3a4>)
 8009bbc:	1a83      	subs	r3, r0, r2
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4699      	mov	r9, r3
 8009bc4:	469b      	mov	fp, r3
 8009bc6:	e697      	b.n	80098f8 <__aeabi_dmul+0x48>
 8009bc8:	0005      	movs	r5, r0
 8009bca:	4325      	orrs	r5, r4
 8009bcc:	d126      	bne.n	8009c1c <__aeabi_dmul+0x36c>
 8009bce:	2208      	movs	r2, #8
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	2400      	movs	r4, #0
 8009bd6:	4691      	mov	r9, r2
 8009bd8:	469b      	mov	fp, r3
 8009bda:	e68d      	b.n	80098f8 <__aeabi_dmul+0x48>
 8009bdc:	4652      	mov	r2, sl
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	4332      	orrs	r2, r6
 8009be2:	d110      	bne.n	8009c06 <__aeabi_dmul+0x356>
 8009be4:	4915      	ldr	r1, [pc, #84]	; (8009c3c <__aeabi_dmul+0x38c>)
 8009be6:	2600      	movs	r6, #0
 8009be8:	468c      	mov	ip, r1
 8009bea:	4463      	add	r3, ip
 8009bec:	4649      	mov	r1, r9
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	4319      	orrs	r1, r3
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	2002      	movs	r0, #2
 8009bf8:	e69d      	b.n	8009936 <__aeabi_dmul+0x86>
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	9701      	str	r7, [sp, #4]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d000      	beq.n	8009c04 <__aeabi_dmul+0x354>
 8009c02:	e6ad      	b.n	8009960 <__aeabi_dmul+0xb0>
 8009c04:	e6c3      	b.n	800998e <__aeabi_dmul+0xde>
 8009c06:	4a0d      	ldr	r2, [pc, #52]	; (8009c3c <__aeabi_dmul+0x38c>)
 8009c08:	2003      	movs	r0, #3
 8009c0a:	4694      	mov	ip, r2
 8009c0c:	4463      	add	r3, ip
 8009c0e:	464a      	mov	r2, r9
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	2303      	movs	r3, #3
 8009c14:	431a      	orrs	r2, r3
 8009c16:	4691      	mov	r9, r2
 8009c18:	4652      	mov	r2, sl
 8009c1a:	e68c      	b.n	8009936 <__aeabi_dmul+0x86>
 8009c1c:	220c      	movs	r2, #12
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	2303      	movs	r3, #3
 8009c22:	0005      	movs	r5, r0
 8009c24:	4691      	mov	r9, r2
 8009c26:	469b      	mov	fp, r3
 8009c28:	e666      	b.n	80098f8 <__aeabi_dmul+0x48>
 8009c2a:	2304      	movs	r3, #4
 8009c2c:	4699      	mov	r9, r3
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	2400      	movs	r4, #0
 8009c36:	469b      	mov	fp, r3
 8009c38:	e65e      	b.n	80098f8 <__aeabi_dmul+0x48>
 8009c3a:	46c0      	nop			; (mov r8, r8)
 8009c3c:	000007ff 	.word	0x000007ff
 8009c40:	fffffc01 	.word	0xfffffc01
 8009c44:	0801bd10 	.word	0x0801bd10
 8009c48:	000003ff 	.word	0x000003ff
 8009c4c:	feffffff 	.word	0xfeffffff
 8009c50:	000007fe 	.word	0x000007fe
 8009c54:	fffffc0d 	.word	0xfffffc0d
 8009c58:	4649      	mov	r1, r9
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	4319      	orrs	r1, r3
 8009c5e:	4689      	mov	r9, r1
 8009c60:	2600      	movs	r6, #0
 8009c62:	2001      	movs	r0, #1
 8009c64:	e667      	b.n	8009936 <__aeabi_dmul+0x86>
 8009c66:	2300      	movs	r3, #0
 8009c68:	2480      	movs	r4, #128	; 0x80
 8009c6a:	2500      	movs	r5, #0
 8009c6c:	4a43      	ldr	r2, [pc, #268]	; (8009d7c <__aeabi_dmul+0x4cc>)
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	0324      	lsls	r4, r4, #12
 8009c72:	e67e      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009c74:	2001      	movs	r0, #1
 8009c76:	1a40      	subs	r0, r0, r1
 8009c78:	2838      	cmp	r0, #56	; 0x38
 8009c7a:	dd00      	ble.n	8009c7e <__aeabi_dmul+0x3ce>
 8009c7c:	e676      	b.n	800996c <__aeabi_dmul+0xbc>
 8009c7e:	281f      	cmp	r0, #31
 8009c80:	dd5b      	ble.n	8009d3a <__aeabi_dmul+0x48a>
 8009c82:	221f      	movs	r2, #31
 8009c84:	0023      	movs	r3, r4
 8009c86:	4252      	negs	r2, r2
 8009c88:	1a51      	subs	r1, r2, r1
 8009c8a:	40cb      	lsrs	r3, r1
 8009c8c:	0019      	movs	r1, r3
 8009c8e:	2820      	cmp	r0, #32
 8009c90:	d003      	beq.n	8009c9a <__aeabi_dmul+0x3ea>
 8009c92:	4a3b      	ldr	r2, [pc, #236]	; (8009d80 <__aeabi_dmul+0x4d0>)
 8009c94:	4462      	add	r2, ip
 8009c96:	4094      	lsls	r4, r2
 8009c98:	4325      	orrs	r5, r4
 8009c9a:	1e6a      	subs	r2, r5, #1
 8009c9c:	4195      	sbcs	r5, r2
 8009c9e:	002a      	movs	r2, r5
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	2107      	movs	r1, #7
 8009ca4:	000d      	movs	r5, r1
 8009ca6:	2400      	movs	r4, #0
 8009ca8:	4015      	ands	r5, r2
 8009caa:	4211      	tst	r1, r2
 8009cac:	d05b      	beq.n	8009d66 <__aeabi_dmul+0x4b6>
 8009cae:	210f      	movs	r1, #15
 8009cb0:	2400      	movs	r4, #0
 8009cb2:	4011      	ands	r1, r2
 8009cb4:	2904      	cmp	r1, #4
 8009cb6:	d053      	beq.n	8009d60 <__aeabi_dmul+0x4b0>
 8009cb8:	1d11      	adds	r1, r2, #4
 8009cba:	4291      	cmp	r1, r2
 8009cbc:	4192      	sbcs	r2, r2
 8009cbe:	4252      	negs	r2, r2
 8009cc0:	18a4      	adds	r4, r4, r2
 8009cc2:	000a      	movs	r2, r1
 8009cc4:	0223      	lsls	r3, r4, #8
 8009cc6:	d54b      	bpl.n	8009d60 <__aeabi_dmul+0x4b0>
 8009cc8:	2201      	movs	r2, #1
 8009cca:	2400      	movs	r4, #0
 8009ccc:	2500      	movs	r5, #0
 8009cce:	e650      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009cd0:	2380      	movs	r3, #128	; 0x80
 8009cd2:	031b      	lsls	r3, r3, #12
 8009cd4:	421c      	tst	r4, r3
 8009cd6:	d009      	beq.n	8009cec <__aeabi_dmul+0x43c>
 8009cd8:	421e      	tst	r6, r3
 8009cda:	d107      	bne.n	8009cec <__aeabi_dmul+0x43c>
 8009cdc:	4333      	orrs	r3, r6
 8009cde:	031c      	lsls	r4, r3, #12
 8009ce0:	4643      	mov	r3, r8
 8009ce2:	0015      	movs	r5, r2
 8009ce4:	0b24      	lsrs	r4, r4, #12
 8009ce6:	4a25      	ldr	r2, [pc, #148]	; (8009d7c <__aeabi_dmul+0x4cc>)
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	e642      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009cec:	2280      	movs	r2, #128	; 0x80
 8009cee:	0312      	lsls	r2, r2, #12
 8009cf0:	4314      	orrs	r4, r2
 8009cf2:	0324      	lsls	r4, r4, #12
 8009cf4:	4a21      	ldr	r2, [pc, #132]	; (8009d7c <__aeabi_dmul+0x4cc>)
 8009cf6:	0b24      	lsrs	r4, r4, #12
 8009cf8:	9701      	str	r7, [sp, #4]
 8009cfa:	e63a      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009cfc:	f000 fd8a 	bl	800a814 <__clzsi2>
 8009d00:	0001      	movs	r1, r0
 8009d02:	0002      	movs	r2, r0
 8009d04:	3115      	adds	r1, #21
 8009d06:	3220      	adds	r2, #32
 8009d08:	291c      	cmp	r1, #28
 8009d0a:	dc00      	bgt.n	8009d0e <__aeabi_dmul+0x45e>
 8009d0c:	e74b      	b.n	8009ba6 <__aeabi_dmul+0x2f6>
 8009d0e:	0034      	movs	r4, r6
 8009d10:	3808      	subs	r0, #8
 8009d12:	2500      	movs	r5, #0
 8009d14:	4084      	lsls	r4, r0
 8009d16:	e750      	b.n	8009bba <__aeabi_dmul+0x30a>
 8009d18:	f000 fd7c 	bl	800a814 <__clzsi2>
 8009d1c:	0003      	movs	r3, r0
 8009d1e:	001a      	movs	r2, r3
 8009d20:	3215      	adds	r2, #21
 8009d22:	3020      	adds	r0, #32
 8009d24:	2a1c      	cmp	r2, #28
 8009d26:	dc00      	bgt.n	8009d2a <__aeabi_dmul+0x47a>
 8009d28:	e71e      	b.n	8009b68 <__aeabi_dmul+0x2b8>
 8009d2a:	4656      	mov	r6, sl
 8009d2c:	3b08      	subs	r3, #8
 8009d2e:	2200      	movs	r2, #0
 8009d30:	409e      	lsls	r6, r3
 8009d32:	e723      	b.n	8009b7c <__aeabi_dmul+0x2cc>
 8009d34:	9b00      	ldr	r3, [sp, #0]
 8009d36:	469c      	mov	ip, r3
 8009d38:	e6e6      	b.n	8009b08 <__aeabi_dmul+0x258>
 8009d3a:	4912      	ldr	r1, [pc, #72]	; (8009d84 <__aeabi_dmul+0x4d4>)
 8009d3c:	0022      	movs	r2, r4
 8009d3e:	4461      	add	r1, ip
 8009d40:	002e      	movs	r6, r5
 8009d42:	408d      	lsls	r5, r1
 8009d44:	408a      	lsls	r2, r1
 8009d46:	40c6      	lsrs	r6, r0
 8009d48:	1e69      	subs	r1, r5, #1
 8009d4a:	418d      	sbcs	r5, r1
 8009d4c:	4332      	orrs	r2, r6
 8009d4e:	432a      	orrs	r2, r5
 8009d50:	40c4      	lsrs	r4, r0
 8009d52:	0753      	lsls	r3, r2, #29
 8009d54:	d0b6      	beq.n	8009cc4 <__aeabi_dmul+0x414>
 8009d56:	210f      	movs	r1, #15
 8009d58:	4011      	ands	r1, r2
 8009d5a:	2904      	cmp	r1, #4
 8009d5c:	d1ac      	bne.n	8009cb8 <__aeabi_dmul+0x408>
 8009d5e:	e7b1      	b.n	8009cc4 <__aeabi_dmul+0x414>
 8009d60:	0765      	lsls	r5, r4, #29
 8009d62:	0264      	lsls	r4, r4, #9
 8009d64:	0b24      	lsrs	r4, r4, #12
 8009d66:	08d2      	lsrs	r2, r2, #3
 8009d68:	4315      	orrs	r5, r2
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	e601      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009d6e:	2280      	movs	r2, #128	; 0x80
 8009d70:	0312      	lsls	r2, r2, #12
 8009d72:	4314      	orrs	r4, r2
 8009d74:	0324      	lsls	r4, r4, #12
 8009d76:	4a01      	ldr	r2, [pc, #4]	; (8009d7c <__aeabi_dmul+0x4cc>)
 8009d78:	0b24      	lsrs	r4, r4, #12
 8009d7a:	e5fa      	b.n	8009972 <__aeabi_dmul+0xc2>
 8009d7c:	000007ff 	.word	0x000007ff
 8009d80:	0000043e 	.word	0x0000043e
 8009d84:	0000041e 	.word	0x0000041e

08009d88 <__aeabi_dsub>:
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	4657      	mov	r7, sl
 8009d8c:	464e      	mov	r6, r9
 8009d8e:	4645      	mov	r5, r8
 8009d90:	46de      	mov	lr, fp
 8009d92:	b5e0      	push	{r5, r6, r7, lr}
 8009d94:	001e      	movs	r6, r3
 8009d96:	0017      	movs	r7, r2
 8009d98:	004a      	lsls	r2, r1, #1
 8009d9a:	030b      	lsls	r3, r1, #12
 8009d9c:	0d52      	lsrs	r2, r2, #21
 8009d9e:	0a5b      	lsrs	r3, r3, #9
 8009da0:	4690      	mov	r8, r2
 8009da2:	0f42      	lsrs	r2, r0, #29
 8009da4:	431a      	orrs	r2, r3
 8009da6:	0fcd      	lsrs	r5, r1, #31
 8009da8:	4ccd      	ldr	r4, [pc, #820]	; (800a0e0 <__aeabi_dsub+0x358>)
 8009daa:	0331      	lsls	r1, r6, #12
 8009dac:	00c3      	lsls	r3, r0, #3
 8009dae:	4694      	mov	ip, r2
 8009db0:	0070      	lsls	r0, r6, #1
 8009db2:	0f7a      	lsrs	r2, r7, #29
 8009db4:	0a49      	lsrs	r1, r1, #9
 8009db6:	00ff      	lsls	r7, r7, #3
 8009db8:	469a      	mov	sl, r3
 8009dba:	46b9      	mov	r9, r7
 8009dbc:	0d40      	lsrs	r0, r0, #21
 8009dbe:	0ff6      	lsrs	r6, r6, #31
 8009dc0:	4311      	orrs	r1, r2
 8009dc2:	42a0      	cmp	r0, r4
 8009dc4:	d100      	bne.n	8009dc8 <__aeabi_dsub+0x40>
 8009dc6:	e0b1      	b.n	8009f2c <__aeabi_dsub+0x1a4>
 8009dc8:	2201      	movs	r2, #1
 8009dca:	4056      	eors	r6, r2
 8009dcc:	46b3      	mov	fp, r6
 8009dce:	42b5      	cmp	r5, r6
 8009dd0:	d100      	bne.n	8009dd4 <__aeabi_dsub+0x4c>
 8009dd2:	e088      	b.n	8009ee6 <__aeabi_dsub+0x15e>
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	1a12      	subs	r2, r2, r0
 8009dd8:	2a00      	cmp	r2, #0
 8009dda:	dc00      	bgt.n	8009dde <__aeabi_dsub+0x56>
 8009ddc:	e0ae      	b.n	8009f3c <__aeabi_dsub+0x1b4>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d100      	bne.n	8009de4 <__aeabi_dsub+0x5c>
 8009de2:	e0c1      	b.n	8009f68 <__aeabi_dsub+0x1e0>
 8009de4:	48be      	ldr	r0, [pc, #760]	; (800a0e0 <__aeabi_dsub+0x358>)
 8009de6:	4580      	cmp	r8, r0
 8009de8:	d100      	bne.n	8009dec <__aeabi_dsub+0x64>
 8009dea:	e151      	b.n	800a090 <__aeabi_dsub+0x308>
 8009dec:	2080      	movs	r0, #128	; 0x80
 8009dee:	0400      	lsls	r0, r0, #16
 8009df0:	4301      	orrs	r1, r0
 8009df2:	2a38      	cmp	r2, #56	; 0x38
 8009df4:	dd00      	ble.n	8009df8 <__aeabi_dsub+0x70>
 8009df6:	e17b      	b.n	800a0f0 <__aeabi_dsub+0x368>
 8009df8:	2a1f      	cmp	r2, #31
 8009dfa:	dd00      	ble.n	8009dfe <__aeabi_dsub+0x76>
 8009dfc:	e1ee      	b.n	800a1dc <__aeabi_dsub+0x454>
 8009dfe:	2020      	movs	r0, #32
 8009e00:	003e      	movs	r6, r7
 8009e02:	1a80      	subs	r0, r0, r2
 8009e04:	000c      	movs	r4, r1
 8009e06:	40d6      	lsrs	r6, r2
 8009e08:	40d1      	lsrs	r1, r2
 8009e0a:	4087      	lsls	r7, r0
 8009e0c:	4662      	mov	r2, ip
 8009e0e:	4084      	lsls	r4, r0
 8009e10:	1a52      	subs	r2, r2, r1
 8009e12:	1e78      	subs	r0, r7, #1
 8009e14:	4187      	sbcs	r7, r0
 8009e16:	4694      	mov	ip, r2
 8009e18:	4334      	orrs	r4, r6
 8009e1a:	4327      	orrs	r7, r4
 8009e1c:	1bdc      	subs	r4, r3, r7
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	419b      	sbcs	r3, r3
 8009e22:	4662      	mov	r2, ip
 8009e24:	425b      	negs	r3, r3
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	4699      	mov	r9, r3
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	d400      	bmi.n	8009e32 <__aeabi_dsub+0xaa>
 8009e30:	e118      	b.n	800a064 <__aeabi_dsub+0x2dc>
 8009e32:	464b      	mov	r3, r9
 8009e34:	0258      	lsls	r0, r3, #9
 8009e36:	0a43      	lsrs	r3, r0, #9
 8009e38:	4699      	mov	r9, r3
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d100      	bne.n	8009e42 <__aeabi_dsub+0xba>
 8009e40:	e137      	b.n	800a0b2 <__aeabi_dsub+0x32a>
 8009e42:	4648      	mov	r0, r9
 8009e44:	f000 fce6 	bl	800a814 <__clzsi2>
 8009e48:	0001      	movs	r1, r0
 8009e4a:	3908      	subs	r1, #8
 8009e4c:	2320      	movs	r3, #32
 8009e4e:	0022      	movs	r2, r4
 8009e50:	4648      	mov	r0, r9
 8009e52:	1a5b      	subs	r3, r3, r1
 8009e54:	40da      	lsrs	r2, r3
 8009e56:	4088      	lsls	r0, r1
 8009e58:	408c      	lsls	r4, r1
 8009e5a:	4643      	mov	r3, r8
 8009e5c:	4310      	orrs	r0, r2
 8009e5e:	4588      	cmp	r8, r1
 8009e60:	dd00      	ble.n	8009e64 <__aeabi_dsub+0xdc>
 8009e62:	e136      	b.n	800a0d2 <__aeabi_dsub+0x34a>
 8009e64:	1ac9      	subs	r1, r1, r3
 8009e66:	1c4b      	adds	r3, r1, #1
 8009e68:	2b1f      	cmp	r3, #31
 8009e6a:	dd00      	ble.n	8009e6e <__aeabi_dsub+0xe6>
 8009e6c:	e0ea      	b.n	800a044 <__aeabi_dsub+0x2bc>
 8009e6e:	2220      	movs	r2, #32
 8009e70:	0026      	movs	r6, r4
 8009e72:	1ad2      	subs	r2, r2, r3
 8009e74:	0001      	movs	r1, r0
 8009e76:	4094      	lsls	r4, r2
 8009e78:	40de      	lsrs	r6, r3
 8009e7a:	40d8      	lsrs	r0, r3
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4091      	lsls	r1, r2
 8009e80:	1e62      	subs	r2, r4, #1
 8009e82:	4194      	sbcs	r4, r2
 8009e84:	4681      	mov	r9, r0
 8009e86:	4698      	mov	r8, r3
 8009e88:	4331      	orrs	r1, r6
 8009e8a:	430c      	orrs	r4, r1
 8009e8c:	0763      	lsls	r3, r4, #29
 8009e8e:	d009      	beq.n	8009ea4 <__aeabi_dsub+0x11c>
 8009e90:	230f      	movs	r3, #15
 8009e92:	4023      	ands	r3, r4
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d005      	beq.n	8009ea4 <__aeabi_dsub+0x11c>
 8009e98:	1d23      	adds	r3, r4, #4
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	41a4      	sbcs	r4, r4
 8009e9e:	4264      	negs	r4, r4
 8009ea0:	44a1      	add	r9, r4
 8009ea2:	001c      	movs	r4, r3
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	021b      	lsls	r3, r3, #8
 8009ea8:	d400      	bmi.n	8009eac <__aeabi_dsub+0x124>
 8009eaa:	e0de      	b.n	800a06a <__aeabi_dsub+0x2e2>
 8009eac:	4641      	mov	r1, r8
 8009eae:	4b8c      	ldr	r3, [pc, #560]	; (800a0e0 <__aeabi_dsub+0x358>)
 8009eb0:	3101      	adds	r1, #1
 8009eb2:	4299      	cmp	r1, r3
 8009eb4:	d100      	bne.n	8009eb8 <__aeabi_dsub+0x130>
 8009eb6:	e0e7      	b.n	800a088 <__aeabi_dsub+0x300>
 8009eb8:	464b      	mov	r3, r9
 8009eba:	488a      	ldr	r0, [pc, #552]	; (800a0e4 <__aeabi_dsub+0x35c>)
 8009ebc:	08e4      	lsrs	r4, r4, #3
 8009ebe:	4003      	ands	r3, r0
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	0549      	lsls	r1, r1, #21
 8009ec4:	075b      	lsls	r3, r3, #29
 8009ec6:	0240      	lsls	r0, r0, #9
 8009ec8:	4323      	orrs	r3, r4
 8009eca:	0d4a      	lsrs	r2, r1, #21
 8009ecc:	0b04      	lsrs	r4, r0, #12
 8009ece:	0512      	lsls	r2, r2, #20
 8009ed0:	07ed      	lsls	r5, r5, #31
 8009ed2:	4322      	orrs	r2, r4
 8009ed4:	432a      	orrs	r2, r5
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	0011      	movs	r1, r2
 8009eda:	bcf0      	pop	{r4, r5, r6, r7}
 8009edc:	46bb      	mov	fp, r7
 8009ede:	46b2      	mov	sl, r6
 8009ee0:	46a9      	mov	r9, r5
 8009ee2:	46a0      	mov	r8, r4
 8009ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	1a12      	subs	r2, r2, r0
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	dd52      	ble.n	8009f94 <__aeabi_dsub+0x20c>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d100      	bne.n	8009ef4 <__aeabi_dsub+0x16c>
 8009ef2:	e09c      	b.n	800a02e <__aeabi_dsub+0x2a6>
 8009ef4:	45a0      	cmp	r8, r4
 8009ef6:	d100      	bne.n	8009efa <__aeabi_dsub+0x172>
 8009ef8:	e0ca      	b.n	800a090 <__aeabi_dsub+0x308>
 8009efa:	2080      	movs	r0, #128	; 0x80
 8009efc:	0400      	lsls	r0, r0, #16
 8009efe:	4301      	orrs	r1, r0
 8009f00:	2a38      	cmp	r2, #56	; 0x38
 8009f02:	dd00      	ble.n	8009f06 <__aeabi_dsub+0x17e>
 8009f04:	e149      	b.n	800a19a <__aeabi_dsub+0x412>
 8009f06:	2a1f      	cmp	r2, #31
 8009f08:	dc00      	bgt.n	8009f0c <__aeabi_dsub+0x184>
 8009f0a:	e197      	b.n	800a23c <__aeabi_dsub+0x4b4>
 8009f0c:	0010      	movs	r0, r2
 8009f0e:	000e      	movs	r6, r1
 8009f10:	3820      	subs	r0, #32
 8009f12:	40c6      	lsrs	r6, r0
 8009f14:	2a20      	cmp	r2, #32
 8009f16:	d004      	beq.n	8009f22 <__aeabi_dsub+0x19a>
 8009f18:	2040      	movs	r0, #64	; 0x40
 8009f1a:	1a82      	subs	r2, r0, r2
 8009f1c:	4091      	lsls	r1, r2
 8009f1e:	430f      	orrs	r7, r1
 8009f20:	46b9      	mov	r9, r7
 8009f22:	464c      	mov	r4, r9
 8009f24:	1e62      	subs	r2, r4, #1
 8009f26:	4194      	sbcs	r4, r2
 8009f28:	4334      	orrs	r4, r6
 8009f2a:	e13a      	b.n	800a1a2 <__aeabi_dsub+0x41a>
 8009f2c:	000a      	movs	r2, r1
 8009f2e:	433a      	orrs	r2, r7
 8009f30:	d028      	beq.n	8009f84 <__aeabi_dsub+0x1fc>
 8009f32:	46b3      	mov	fp, r6
 8009f34:	42b5      	cmp	r5, r6
 8009f36:	d02b      	beq.n	8009f90 <__aeabi_dsub+0x208>
 8009f38:	4a6b      	ldr	r2, [pc, #428]	; (800a0e8 <__aeabi_dsub+0x360>)
 8009f3a:	4442      	add	r2, r8
 8009f3c:	2a00      	cmp	r2, #0
 8009f3e:	d05d      	beq.n	8009ffc <__aeabi_dsub+0x274>
 8009f40:	4642      	mov	r2, r8
 8009f42:	4644      	mov	r4, r8
 8009f44:	1a82      	subs	r2, r0, r2
 8009f46:	2c00      	cmp	r4, #0
 8009f48:	d000      	beq.n	8009f4c <__aeabi_dsub+0x1c4>
 8009f4a:	e0f5      	b.n	800a138 <__aeabi_dsub+0x3b0>
 8009f4c:	4665      	mov	r5, ip
 8009f4e:	431d      	orrs	r5, r3
 8009f50:	d100      	bne.n	8009f54 <__aeabi_dsub+0x1cc>
 8009f52:	e19c      	b.n	800a28e <__aeabi_dsub+0x506>
 8009f54:	1e55      	subs	r5, r2, #1
 8009f56:	2a01      	cmp	r2, #1
 8009f58:	d100      	bne.n	8009f5c <__aeabi_dsub+0x1d4>
 8009f5a:	e1fb      	b.n	800a354 <__aeabi_dsub+0x5cc>
 8009f5c:	4c60      	ldr	r4, [pc, #384]	; (800a0e0 <__aeabi_dsub+0x358>)
 8009f5e:	42a2      	cmp	r2, r4
 8009f60:	d100      	bne.n	8009f64 <__aeabi_dsub+0x1dc>
 8009f62:	e1bd      	b.n	800a2e0 <__aeabi_dsub+0x558>
 8009f64:	002a      	movs	r2, r5
 8009f66:	e0f0      	b.n	800a14a <__aeabi_dsub+0x3c2>
 8009f68:	0008      	movs	r0, r1
 8009f6a:	4338      	orrs	r0, r7
 8009f6c:	d100      	bne.n	8009f70 <__aeabi_dsub+0x1e8>
 8009f6e:	e0c3      	b.n	800a0f8 <__aeabi_dsub+0x370>
 8009f70:	1e50      	subs	r0, r2, #1
 8009f72:	2a01      	cmp	r2, #1
 8009f74:	d100      	bne.n	8009f78 <__aeabi_dsub+0x1f0>
 8009f76:	e1a8      	b.n	800a2ca <__aeabi_dsub+0x542>
 8009f78:	4c59      	ldr	r4, [pc, #356]	; (800a0e0 <__aeabi_dsub+0x358>)
 8009f7a:	42a2      	cmp	r2, r4
 8009f7c:	d100      	bne.n	8009f80 <__aeabi_dsub+0x1f8>
 8009f7e:	e087      	b.n	800a090 <__aeabi_dsub+0x308>
 8009f80:	0002      	movs	r2, r0
 8009f82:	e736      	b.n	8009df2 <__aeabi_dsub+0x6a>
 8009f84:	2201      	movs	r2, #1
 8009f86:	4056      	eors	r6, r2
 8009f88:	46b3      	mov	fp, r6
 8009f8a:	42b5      	cmp	r5, r6
 8009f8c:	d000      	beq.n	8009f90 <__aeabi_dsub+0x208>
 8009f8e:	e721      	b.n	8009dd4 <__aeabi_dsub+0x4c>
 8009f90:	4a55      	ldr	r2, [pc, #340]	; (800a0e8 <__aeabi_dsub+0x360>)
 8009f92:	4442      	add	r2, r8
 8009f94:	2a00      	cmp	r2, #0
 8009f96:	d100      	bne.n	8009f9a <__aeabi_dsub+0x212>
 8009f98:	e0b5      	b.n	800a106 <__aeabi_dsub+0x37e>
 8009f9a:	4642      	mov	r2, r8
 8009f9c:	4644      	mov	r4, r8
 8009f9e:	1a82      	subs	r2, r0, r2
 8009fa0:	2c00      	cmp	r4, #0
 8009fa2:	d100      	bne.n	8009fa6 <__aeabi_dsub+0x21e>
 8009fa4:	e138      	b.n	800a218 <__aeabi_dsub+0x490>
 8009fa6:	4e4e      	ldr	r6, [pc, #312]	; (800a0e0 <__aeabi_dsub+0x358>)
 8009fa8:	42b0      	cmp	r0, r6
 8009faa:	d100      	bne.n	8009fae <__aeabi_dsub+0x226>
 8009fac:	e1de      	b.n	800a36c <__aeabi_dsub+0x5e4>
 8009fae:	2680      	movs	r6, #128	; 0x80
 8009fb0:	4664      	mov	r4, ip
 8009fb2:	0436      	lsls	r6, r6, #16
 8009fb4:	4334      	orrs	r4, r6
 8009fb6:	46a4      	mov	ip, r4
 8009fb8:	2a38      	cmp	r2, #56	; 0x38
 8009fba:	dd00      	ble.n	8009fbe <__aeabi_dsub+0x236>
 8009fbc:	e196      	b.n	800a2ec <__aeabi_dsub+0x564>
 8009fbe:	2a1f      	cmp	r2, #31
 8009fc0:	dd00      	ble.n	8009fc4 <__aeabi_dsub+0x23c>
 8009fc2:	e224      	b.n	800a40e <__aeabi_dsub+0x686>
 8009fc4:	2620      	movs	r6, #32
 8009fc6:	1ab4      	subs	r4, r6, r2
 8009fc8:	46a2      	mov	sl, r4
 8009fca:	4664      	mov	r4, ip
 8009fcc:	4656      	mov	r6, sl
 8009fce:	40b4      	lsls	r4, r6
 8009fd0:	46a1      	mov	r9, r4
 8009fd2:	001c      	movs	r4, r3
 8009fd4:	464e      	mov	r6, r9
 8009fd6:	40d4      	lsrs	r4, r2
 8009fd8:	4326      	orrs	r6, r4
 8009fda:	0034      	movs	r4, r6
 8009fdc:	4656      	mov	r6, sl
 8009fde:	40b3      	lsls	r3, r6
 8009fe0:	1e5e      	subs	r6, r3, #1
 8009fe2:	41b3      	sbcs	r3, r6
 8009fe4:	431c      	orrs	r4, r3
 8009fe6:	4663      	mov	r3, ip
 8009fe8:	40d3      	lsrs	r3, r2
 8009fea:	18c9      	adds	r1, r1, r3
 8009fec:	19e4      	adds	r4, r4, r7
 8009fee:	42bc      	cmp	r4, r7
 8009ff0:	41bf      	sbcs	r7, r7
 8009ff2:	427f      	negs	r7, r7
 8009ff4:	46b9      	mov	r9, r7
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	4489      	add	r9, r1
 8009ffa:	e0d8      	b.n	800a1ae <__aeabi_dsub+0x426>
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4c3b      	ldr	r4, [pc, #236]	; (800a0ec <__aeabi_dsub+0x364>)
 800a000:	3001      	adds	r0, #1
 800a002:	4220      	tst	r0, r4
 800a004:	d000      	beq.n	800a008 <__aeabi_dsub+0x280>
 800a006:	e0b4      	b.n	800a172 <__aeabi_dsub+0x3ea>
 800a008:	4640      	mov	r0, r8
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d000      	beq.n	800a010 <__aeabi_dsub+0x288>
 800a00e:	e144      	b.n	800a29a <__aeabi_dsub+0x512>
 800a010:	4660      	mov	r0, ip
 800a012:	4318      	orrs	r0, r3
 800a014:	d100      	bne.n	800a018 <__aeabi_dsub+0x290>
 800a016:	e190      	b.n	800a33a <__aeabi_dsub+0x5b2>
 800a018:	0008      	movs	r0, r1
 800a01a:	4338      	orrs	r0, r7
 800a01c:	d000      	beq.n	800a020 <__aeabi_dsub+0x298>
 800a01e:	e1aa      	b.n	800a376 <__aeabi_dsub+0x5ee>
 800a020:	4661      	mov	r1, ip
 800a022:	08db      	lsrs	r3, r3, #3
 800a024:	0749      	lsls	r1, r1, #29
 800a026:	430b      	orrs	r3, r1
 800a028:	4661      	mov	r1, ip
 800a02a:	08cc      	lsrs	r4, r1, #3
 800a02c:	e027      	b.n	800a07e <__aeabi_dsub+0x2f6>
 800a02e:	0008      	movs	r0, r1
 800a030:	4338      	orrs	r0, r7
 800a032:	d061      	beq.n	800a0f8 <__aeabi_dsub+0x370>
 800a034:	1e50      	subs	r0, r2, #1
 800a036:	2a01      	cmp	r2, #1
 800a038:	d100      	bne.n	800a03c <__aeabi_dsub+0x2b4>
 800a03a:	e139      	b.n	800a2b0 <__aeabi_dsub+0x528>
 800a03c:	42a2      	cmp	r2, r4
 800a03e:	d027      	beq.n	800a090 <__aeabi_dsub+0x308>
 800a040:	0002      	movs	r2, r0
 800a042:	e75d      	b.n	8009f00 <__aeabi_dsub+0x178>
 800a044:	0002      	movs	r2, r0
 800a046:	391f      	subs	r1, #31
 800a048:	40ca      	lsrs	r2, r1
 800a04a:	0011      	movs	r1, r2
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	d003      	beq.n	800a058 <__aeabi_dsub+0x2d0>
 800a050:	2240      	movs	r2, #64	; 0x40
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	4098      	lsls	r0, r3
 800a056:	4304      	orrs	r4, r0
 800a058:	1e63      	subs	r3, r4, #1
 800a05a:	419c      	sbcs	r4, r3
 800a05c:	2300      	movs	r3, #0
 800a05e:	4699      	mov	r9, r3
 800a060:	4698      	mov	r8, r3
 800a062:	430c      	orrs	r4, r1
 800a064:	0763      	lsls	r3, r4, #29
 800a066:	d000      	beq.n	800a06a <__aeabi_dsub+0x2e2>
 800a068:	e712      	b.n	8009e90 <__aeabi_dsub+0x108>
 800a06a:	464b      	mov	r3, r9
 800a06c:	464a      	mov	r2, r9
 800a06e:	08e4      	lsrs	r4, r4, #3
 800a070:	075b      	lsls	r3, r3, #29
 800a072:	4323      	orrs	r3, r4
 800a074:	08d4      	lsrs	r4, r2, #3
 800a076:	4642      	mov	r2, r8
 800a078:	4919      	ldr	r1, [pc, #100]	; (800a0e0 <__aeabi_dsub+0x358>)
 800a07a:	428a      	cmp	r2, r1
 800a07c:	d00e      	beq.n	800a09c <__aeabi_dsub+0x314>
 800a07e:	0324      	lsls	r4, r4, #12
 800a080:	0552      	lsls	r2, r2, #21
 800a082:	0b24      	lsrs	r4, r4, #12
 800a084:	0d52      	lsrs	r2, r2, #21
 800a086:	e722      	b.n	8009ece <__aeabi_dsub+0x146>
 800a088:	000a      	movs	r2, r1
 800a08a:	2400      	movs	r4, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	e71e      	b.n	8009ece <__aeabi_dsub+0x146>
 800a090:	08db      	lsrs	r3, r3, #3
 800a092:	4662      	mov	r2, ip
 800a094:	0752      	lsls	r2, r2, #29
 800a096:	4313      	orrs	r3, r2
 800a098:	4662      	mov	r2, ip
 800a09a:	08d4      	lsrs	r4, r2, #3
 800a09c:	001a      	movs	r2, r3
 800a09e:	4322      	orrs	r2, r4
 800a0a0:	d100      	bne.n	800a0a4 <__aeabi_dsub+0x31c>
 800a0a2:	e1fc      	b.n	800a49e <__aeabi_dsub+0x716>
 800a0a4:	2280      	movs	r2, #128	; 0x80
 800a0a6:	0312      	lsls	r2, r2, #12
 800a0a8:	4314      	orrs	r4, r2
 800a0aa:	0324      	lsls	r4, r4, #12
 800a0ac:	4a0c      	ldr	r2, [pc, #48]	; (800a0e0 <__aeabi_dsub+0x358>)
 800a0ae:	0b24      	lsrs	r4, r4, #12
 800a0b0:	e70d      	b.n	8009ece <__aeabi_dsub+0x146>
 800a0b2:	0020      	movs	r0, r4
 800a0b4:	f000 fbae 	bl	800a814 <__clzsi2>
 800a0b8:	0001      	movs	r1, r0
 800a0ba:	3118      	adds	r1, #24
 800a0bc:	291f      	cmp	r1, #31
 800a0be:	dc00      	bgt.n	800a0c2 <__aeabi_dsub+0x33a>
 800a0c0:	e6c4      	b.n	8009e4c <__aeabi_dsub+0xc4>
 800a0c2:	3808      	subs	r0, #8
 800a0c4:	4084      	lsls	r4, r0
 800a0c6:	4643      	mov	r3, r8
 800a0c8:	0020      	movs	r0, r4
 800a0ca:	2400      	movs	r4, #0
 800a0cc:	4588      	cmp	r8, r1
 800a0ce:	dc00      	bgt.n	800a0d2 <__aeabi_dsub+0x34a>
 800a0d0:	e6c8      	b.n	8009e64 <__aeabi_dsub+0xdc>
 800a0d2:	4a04      	ldr	r2, [pc, #16]	; (800a0e4 <__aeabi_dsub+0x35c>)
 800a0d4:	1a5b      	subs	r3, r3, r1
 800a0d6:	4010      	ands	r0, r2
 800a0d8:	4698      	mov	r8, r3
 800a0da:	4681      	mov	r9, r0
 800a0dc:	e6d6      	b.n	8009e8c <__aeabi_dsub+0x104>
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	000007ff 	.word	0x000007ff
 800a0e4:	ff7fffff 	.word	0xff7fffff
 800a0e8:	fffff801 	.word	0xfffff801
 800a0ec:	000007fe 	.word	0x000007fe
 800a0f0:	430f      	orrs	r7, r1
 800a0f2:	1e7a      	subs	r2, r7, #1
 800a0f4:	4197      	sbcs	r7, r2
 800a0f6:	e691      	b.n	8009e1c <__aeabi_dsub+0x94>
 800a0f8:	4661      	mov	r1, ip
 800a0fa:	08db      	lsrs	r3, r3, #3
 800a0fc:	0749      	lsls	r1, r1, #29
 800a0fe:	430b      	orrs	r3, r1
 800a100:	4661      	mov	r1, ip
 800a102:	08cc      	lsrs	r4, r1, #3
 800a104:	e7b8      	b.n	800a078 <__aeabi_dsub+0x2f0>
 800a106:	4640      	mov	r0, r8
 800a108:	4cd3      	ldr	r4, [pc, #844]	; (800a458 <__aeabi_dsub+0x6d0>)
 800a10a:	3001      	adds	r0, #1
 800a10c:	4220      	tst	r0, r4
 800a10e:	d000      	beq.n	800a112 <__aeabi_dsub+0x38a>
 800a110:	e0a2      	b.n	800a258 <__aeabi_dsub+0x4d0>
 800a112:	4640      	mov	r0, r8
 800a114:	2800      	cmp	r0, #0
 800a116:	d000      	beq.n	800a11a <__aeabi_dsub+0x392>
 800a118:	e101      	b.n	800a31e <__aeabi_dsub+0x596>
 800a11a:	4660      	mov	r0, ip
 800a11c:	4318      	orrs	r0, r3
 800a11e:	d100      	bne.n	800a122 <__aeabi_dsub+0x39a>
 800a120:	e15e      	b.n	800a3e0 <__aeabi_dsub+0x658>
 800a122:	0008      	movs	r0, r1
 800a124:	4338      	orrs	r0, r7
 800a126:	d000      	beq.n	800a12a <__aeabi_dsub+0x3a2>
 800a128:	e15f      	b.n	800a3ea <__aeabi_dsub+0x662>
 800a12a:	4661      	mov	r1, ip
 800a12c:	08db      	lsrs	r3, r3, #3
 800a12e:	0749      	lsls	r1, r1, #29
 800a130:	430b      	orrs	r3, r1
 800a132:	4661      	mov	r1, ip
 800a134:	08cc      	lsrs	r4, r1, #3
 800a136:	e7a2      	b.n	800a07e <__aeabi_dsub+0x2f6>
 800a138:	4dc8      	ldr	r5, [pc, #800]	; (800a45c <__aeabi_dsub+0x6d4>)
 800a13a:	42a8      	cmp	r0, r5
 800a13c:	d100      	bne.n	800a140 <__aeabi_dsub+0x3b8>
 800a13e:	e0cf      	b.n	800a2e0 <__aeabi_dsub+0x558>
 800a140:	2580      	movs	r5, #128	; 0x80
 800a142:	4664      	mov	r4, ip
 800a144:	042d      	lsls	r5, r5, #16
 800a146:	432c      	orrs	r4, r5
 800a148:	46a4      	mov	ip, r4
 800a14a:	2a38      	cmp	r2, #56	; 0x38
 800a14c:	dc56      	bgt.n	800a1fc <__aeabi_dsub+0x474>
 800a14e:	2a1f      	cmp	r2, #31
 800a150:	dd00      	ble.n	800a154 <__aeabi_dsub+0x3cc>
 800a152:	e0d1      	b.n	800a2f8 <__aeabi_dsub+0x570>
 800a154:	2520      	movs	r5, #32
 800a156:	001e      	movs	r6, r3
 800a158:	1aad      	subs	r5, r5, r2
 800a15a:	4664      	mov	r4, ip
 800a15c:	40ab      	lsls	r3, r5
 800a15e:	40ac      	lsls	r4, r5
 800a160:	40d6      	lsrs	r6, r2
 800a162:	1e5d      	subs	r5, r3, #1
 800a164:	41ab      	sbcs	r3, r5
 800a166:	4334      	orrs	r4, r6
 800a168:	4323      	orrs	r3, r4
 800a16a:	4664      	mov	r4, ip
 800a16c:	40d4      	lsrs	r4, r2
 800a16e:	1b09      	subs	r1, r1, r4
 800a170:	e049      	b.n	800a206 <__aeabi_dsub+0x47e>
 800a172:	4660      	mov	r0, ip
 800a174:	1bdc      	subs	r4, r3, r7
 800a176:	1a46      	subs	r6, r0, r1
 800a178:	42a3      	cmp	r3, r4
 800a17a:	4180      	sbcs	r0, r0
 800a17c:	4240      	negs	r0, r0
 800a17e:	4681      	mov	r9, r0
 800a180:	0030      	movs	r0, r6
 800a182:	464e      	mov	r6, r9
 800a184:	1b80      	subs	r0, r0, r6
 800a186:	4681      	mov	r9, r0
 800a188:	0200      	lsls	r0, r0, #8
 800a18a:	d476      	bmi.n	800a27a <__aeabi_dsub+0x4f2>
 800a18c:	464b      	mov	r3, r9
 800a18e:	4323      	orrs	r3, r4
 800a190:	d000      	beq.n	800a194 <__aeabi_dsub+0x40c>
 800a192:	e652      	b.n	8009e3a <__aeabi_dsub+0xb2>
 800a194:	2400      	movs	r4, #0
 800a196:	2500      	movs	r5, #0
 800a198:	e771      	b.n	800a07e <__aeabi_dsub+0x2f6>
 800a19a:	4339      	orrs	r1, r7
 800a19c:	000c      	movs	r4, r1
 800a19e:	1e62      	subs	r2, r4, #1
 800a1a0:	4194      	sbcs	r4, r2
 800a1a2:	18e4      	adds	r4, r4, r3
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	419b      	sbcs	r3, r3
 800a1a8:	425b      	negs	r3, r3
 800a1aa:	4463      	add	r3, ip
 800a1ac:	4699      	mov	r9, r3
 800a1ae:	464b      	mov	r3, r9
 800a1b0:	021b      	lsls	r3, r3, #8
 800a1b2:	d400      	bmi.n	800a1b6 <__aeabi_dsub+0x42e>
 800a1b4:	e756      	b.n	800a064 <__aeabi_dsub+0x2dc>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	469c      	mov	ip, r3
 800a1ba:	4ba8      	ldr	r3, [pc, #672]	; (800a45c <__aeabi_dsub+0x6d4>)
 800a1bc:	44e0      	add	r8, ip
 800a1be:	4598      	cmp	r8, r3
 800a1c0:	d038      	beq.n	800a234 <__aeabi_dsub+0x4ac>
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	48a6      	ldr	r0, [pc, #664]	; (800a460 <__aeabi_dsub+0x6d8>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4003      	ands	r3, r0
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	0863      	lsrs	r3, r4, #1
 800a1ce:	4014      	ands	r4, r2
 800a1d0:	431c      	orrs	r4, r3
 800a1d2:	07c3      	lsls	r3, r0, #31
 800a1d4:	431c      	orrs	r4, r3
 800a1d6:	0843      	lsrs	r3, r0, #1
 800a1d8:	4699      	mov	r9, r3
 800a1da:	e657      	b.n	8009e8c <__aeabi_dsub+0x104>
 800a1dc:	0010      	movs	r0, r2
 800a1de:	000e      	movs	r6, r1
 800a1e0:	3820      	subs	r0, #32
 800a1e2:	40c6      	lsrs	r6, r0
 800a1e4:	2a20      	cmp	r2, #32
 800a1e6:	d004      	beq.n	800a1f2 <__aeabi_dsub+0x46a>
 800a1e8:	2040      	movs	r0, #64	; 0x40
 800a1ea:	1a82      	subs	r2, r0, r2
 800a1ec:	4091      	lsls	r1, r2
 800a1ee:	430f      	orrs	r7, r1
 800a1f0:	46b9      	mov	r9, r7
 800a1f2:	464f      	mov	r7, r9
 800a1f4:	1e7a      	subs	r2, r7, #1
 800a1f6:	4197      	sbcs	r7, r2
 800a1f8:	4337      	orrs	r7, r6
 800a1fa:	e60f      	b.n	8009e1c <__aeabi_dsub+0x94>
 800a1fc:	4662      	mov	r2, ip
 800a1fe:	431a      	orrs	r2, r3
 800a200:	0013      	movs	r3, r2
 800a202:	1e5a      	subs	r2, r3, #1
 800a204:	4193      	sbcs	r3, r2
 800a206:	1afc      	subs	r4, r7, r3
 800a208:	42a7      	cmp	r7, r4
 800a20a:	41bf      	sbcs	r7, r7
 800a20c:	427f      	negs	r7, r7
 800a20e:	1bcb      	subs	r3, r1, r7
 800a210:	4699      	mov	r9, r3
 800a212:	465d      	mov	r5, fp
 800a214:	4680      	mov	r8, r0
 800a216:	e608      	b.n	8009e2a <__aeabi_dsub+0xa2>
 800a218:	4666      	mov	r6, ip
 800a21a:	431e      	orrs	r6, r3
 800a21c:	d100      	bne.n	800a220 <__aeabi_dsub+0x498>
 800a21e:	e0be      	b.n	800a39e <__aeabi_dsub+0x616>
 800a220:	1e56      	subs	r6, r2, #1
 800a222:	2a01      	cmp	r2, #1
 800a224:	d100      	bne.n	800a228 <__aeabi_dsub+0x4a0>
 800a226:	e109      	b.n	800a43c <__aeabi_dsub+0x6b4>
 800a228:	4c8c      	ldr	r4, [pc, #560]	; (800a45c <__aeabi_dsub+0x6d4>)
 800a22a:	42a2      	cmp	r2, r4
 800a22c:	d100      	bne.n	800a230 <__aeabi_dsub+0x4a8>
 800a22e:	e119      	b.n	800a464 <__aeabi_dsub+0x6dc>
 800a230:	0032      	movs	r2, r6
 800a232:	e6c1      	b.n	8009fb8 <__aeabi_dsub+0x230>
 800a234:	4642      	mov	r2, r8
 800a236:	2400      	movs	r4, #0
 800a238:	2300      	movs	r3, #0
 800a23a:	e648      	b.n	8009ece <__aeabi_dsub+0x146>
 800a23c:	2020      	movs	r0, #32
 800a23e:	000c      	movs	r4, r1
 800a240:	1a80      	subs	r0, r0, r2
 800a242:	003e      	movs	r6, r7
 800a244:	4087      	lsls	r7, r0
 800a246:	4084      	lsls	r4, r0
 800a248:	40d6      	lsrs	r6, r2
 800a24a:	1e78      	subs	r0, r7, #1
 800a24c:	4187      	sbcs	r7, r0
 800a24e:	40d1      	lsrs	r1, r2
 800a250:	4334      	orrs	r4, r6
 800a252:	433c      	orrs	r4, r7
 800a254:	448c      	add	ip, r1
 800a256:	e7a4      	b.n	800a1a2 <__aeabi_dsub+0x41a>
 800a258:	4a80      	ldr	r2, [pc, #512]	; (800a45c <__aeabi_dsub+0x6d4>)
 800a25a:	4290      	cmp	r0, r2
 800a25c:	d100      	bne.n	800a260 <__aeabi_dsub+0x4d8>
 800a25e:	e0e9      	b.n	800a434 <__aeabi_dsub+0x6ac>
 800a260:	19df      	adds	r7, r3, r7
 800a262:	429f      	cmp	r7, r3
 800a264:	419b      	sbcs	r3, r3
 800a266:	4461      	add	r1, ip
 800a268:	425b      	negs	r3, r3
 800a26a:	18c9      	adds	r1, r1, r3
 800a26c:	07cc      	lsls	r4, r1, #31
 800a26e:	087f      	lsrs	r7, r7, #1
 800a270:	084b      	lsrs	r3, r1, #1
 800a272:	4699      	mov	r9, r3
 800a274:	4680      	mov	r8, r0
 800a276:	433c      	orrs	r4, r7
 800a278:	e6f4      	b.n	800a064 <__aeabi_dsub+0x2dc>
 800a27a:	1afc      	subs	r4, r7, r3
 800a27c:	42a7      	cmp	r7, r4
 800a27e:	41bf      	sbcs	r7, r7
 800a280:	4663      	mov	r3, ip
 800a282:	427f      	negs	r7, r7
 800a284:	1ac9      	subs	r1, r1, r3
 800a286:	1bcb      	subs	r3, r1, r7
 800a288:	4699      	mov	r9, r3
 800a28a:	465d      	mov	r5, fp
 800a28c:	e5d5      	b.n	8009e3a <__aeabi_dsub+0xb2>
 800a28e:	08ff      	lsrs	r7, r7, #3
 800a290:	074b      	lsls	r3, r1, #29
 800a292:	465d      	mov	r5, fp
 800a294:	433b      	orrs	r3, r7
 800a296:	08cc      	lsrs	r4, r1, #3
 800a298:	e6ee      	b.n	800a078 <__aeabi_dsub+0x2f0>
 800a29a:	4662      	mov	r2, ip
 800a29c:	431a      	orrs	r2, r3
 800a29e:	d000      	beq.n	800a2a2 <__aeabi_dsub+0x51a>
 800a2a0:	e082      	b.n	800a3a8 <__aeabi_dsub+0x620>
 800a2a2:	000b      	movs	r3, r1
 800a2a4:	433b      	orrs	r3, r7
 800a2a6:	d11b      	bne.n	800a2e0 <__aeabi_dsub+0x558>
 800a2a8:	2480      	movs	r4, #128	; 0x80
 800a2aa:	2500      	movs	r5, #0
 800a2ac:	0324      	lsls	r4, r4, #12
 800a2ae:	e6f9      	b.n	800a0a4 <__aeabi_dsub+0x31c>
 800a2b0:	19dc      	adds	r4, r3, r7
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	419b      	sbcs	r3, r3
 800a2b6:	4461      	add	r1, ip
 800a2b8:	4689      	mov	r9, r1
 800a2ba:	425b      	negs	r3, r3
 800a2bc:	4499      	add	r9, r3
 800a2be:	464b      	mov	r3, r9
 800a2c0:	021b      	lsls	r3, r3, #8
 800a2c2:	d444      	bmi.n	800a34e <__aeabi_dsub+0x5c6>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	4698      	mov	r8, r3
 800a2c8:	e6cc      	b.n	800a064 <__aeabi_dsub+0x2dc>
 800a2ca:	1bdc      	subs	r4, r3, r7
 800a2cc:	4662      	mov	r2, ip
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	419b      	sbcs	r3, r3
 800a2d2:	1a51      	subs	r1, r2, r1
 800a2d4:	425b      	negs	r3, r3
 800a2d6:	1acb      	subs	r3, r1, r3
 800a2d8:	4699      	mov	r9, r3
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4698      	mov	r8, r3
 800a2de:	e5a4      	b.n	8009e2a <__aeabi_dsub+0xa2>
 800a2e0:	08ff      	lsrs	r7, r7, #3
 800a2e2:	074b      	lsls	r3, r1, #29
 800a2e4:	465d      	mov	r5, fp
 800a2e6:	433b      	orrs	r3, r7
 800a2e8:	08cc      	lsrs	r4, r1, #3
 800a2ea:	e6d7      	b.n	800a09c <__aeabi_dsub+0x314>
 800a2ec:	4662      	mov	r2, ip
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	0014      	movs	r4, r2
 800a2f2:	1e63      	subs	r3, r4, #1
 800a2f4:	419c      	sbcs	r4, r3
 800a2f6:	e679      	b.n	8009fec <__aeabi_dsub+0x264>
 800a2f8:	0015      	movs	r5, r2
 800a2fa:	4664      	mov	r4, ip
 800a2fc:	3d20      	subs	r5, #32
 800a2fe:	40ec      	lsrs	r4, r5
 800a300:	46a0      	mov	r8, r4
 800a302:	2a20      	cmp	r2, #32
 800a304:	d005      	beq.n	800a312 <__aeabi_dsub+0x58a>
 800a306:	2540      	movs	r5, #64	; 0x40
 800a308:	4664      	mov	r4, ip
 800a30a:	1aaa      	subs	r2, r5, r2
 800a30c:	4094      	lsls	r4, r2
 800a30e:	4323      	orrs	r3, r4
 800a310:	469a      	mov	sl, r3
 800a312:	4654      	mov	r4, sl
 800a314:	1e63      	subs	r3, r4, #1
 800a316:	419c      	sbcs	r4, r3
 800a318:	4643      	mov	r3, r8
 800a31a:	4323      	orrs	r3, r4
 800a31c:	e773      	b.n	800a206 <__aeabi_dsub+0x47e>
 800a31e:	4662      	mov	r2, ip
 800a320:	431a      	orrs	r2, r3
 800a322:	d023      	beq.n	800a36c <__aeabi_dsub+0x5e4>
 800a324:	000a      	movs	r2, r1
 800a326:	433a      	orrs	r2, r7
 800a328:	d000      	beq.n	800a32c <__aeabi_dsub+0x5a4>
 800a32a:	e0a0      	b.n	800a46e <__aeabi_dsub+0x6e6>
 800a32c:	4662      	mov	r2, ip
 800a32e:	08db      	lsrs	r3, r3, #3
 800a330:	0752      	lsls	r2, r2, #29
 800a332:	4313      	orrs	r3, r2
 800a334:	4662      	mov	r2, ip
 800a336:	08d4      	lsrs	r4, r2, #3
 800a338:	e6b0      	b.n	800a09c <__aeabi_dsub+0x314>
 800a33a:	000b      	movs	r3, r1
 800a33c:	433b      	orrs	r3, r7
 800a33e:	d100      	bne.n	800a342 <__aeabi_dsub+0x5ba>
 800a340:	e728      	b.n	800a194 <__aeabi_dsub+0x40c>
 800a342:	08ff      	lsrs	r7, r7, #3
 800a344:	074b      	lsls	r3, r1, #29
 800a346:	465d      	mov	r5, fp
 800a348:	433b      	orrs	r3, r7
 800a34a:	08cc      	lsrs	r4, r1, #3
 800a34c:	e697      	b.n	800a07e <__aeabi_dsub+0x2f6>
 800a34e:	2302      	movs	r3, #2
 800a350:	4698      	mov	r8, r3
 800a352:	e736      	b.n	800a1c2 <__aeabi_dsub+0x43a>
 800a354:	1afc      	subs	r4, r7, r3
 800a356:	42a7      	cmp	r7, r4
 800a358:	41bf      	sbcs	r7, r7
 800a35a:	4663      	mov	r3, ip
 800a35c:	427f      	negs	r7, r7
 800a35e:	1ac9      	subs	r1, r1, r3
 800a360:	1bcb      	subs	r3, r1, r7
 800a362:	4699      	mov	r9, r3
 800a364:	2301      	movs	r3, #1
 800a366:	465d      	mov	r5, fp
 800a368:	4698      	mov	r8, r3
 800a36a:	e55e      	b.n	8009e2a <__aeabi_dsub+0xa2>
 800a36c:	074b      	lsls	r3, r1, #29
 800a36e:	08ff      	lsrs	r7, r7, #3
 800a370:	433b      	orrs	r3, r7
 800a372:	08cc      	lsrs	r4, r1, #3
 800a374:	e692      	b.n	800a09c <__aeabi_dsub+0x314>
 800a376:	1bdc      	subs	r4, r3, r7
 800a378:	4660      	mov	r0, ip
 800a37a:	42a3      	cmp	r3, r4
 800a37c:	41b6      	sbcs	r6, r6
 800a37e:	1a40      	subs	r0, r0, r1
 800a380:	4276      	negs	r6, r6
 800a382:	1b80      	subs	r0, r0, r6
 800a384:	4681      	mov	r9, r0
 800a386:	0200      	lsls	r0, r0, #8
 800a388:	d560      	bpl.n	800a44c <__aeabi_dsub+0x6c4>
 800a38a:	1afc      	subs	r4, r7, r3
 800a38c:	42a7      	cmp	r7, r4
 800a38e:	41bf      	sbcs	r7, r7
 800a390:	4663      	mov	r3, ip
 800a392:	427f      	negs	r7, r7
 800a394:	1ac9      	subs	r1, r1, r3
 800a396:	1bcb      	subs	r3, r1, r7
 800a398:	4699      	mov	r9, r3
 800a39a:	465d      	mov	r5, fp
 800a39c:	e576      	b.n	8009e8c <__aeabi_dsub+0x104>
 800a39e:	08ff      	lsrs	r7, r7, #3
 800a3a0:	074b      	lsls	r3, r1, #29
 800a3a2:	433b      	orrs	r3, r7
 800a3a4:	08cc      	lsrs	r4, r1, #3
 800a3a6:	e667      	b.n	800a078 <__aeabi_dsub+0x2f0>
 800a3a8:	000a      	movs	r2, r1
 800a3aa:	08db      	lsrs	r3, r3, #3
 800a3ac:	433a      	orrs	r2, r7
 800a3ae:	d100      	bne.n	800a3b2 <__aeabi_dsub+0x62a>
 800a3b0:	e66f      	b.n	800a092 <__aeabi_dsub+0x30a>
 800a3b2:	4662      	mov	r2, ip
 800a3b4:	0752      	lsls	r2, r2, #29
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	4662      	mov	r2, ip
 800a3ba:	08d4      	lsrs	r4, r2, #3
 800a3bc:	2280      	movs	r2, #128	; 0x80
 800a3be:	0312      	lsls	r2, r2, #12
 800a3c0:	4214      	tst	r4, r2
 800a3c2:	d007      	beq.n	800a3d4 <__aeabi_dsub+0x64c>
 800a3c4:	08c8      	lsrs	r0, r1, #3
 800a3c6:	4210      	tst	r0, r2
 800a3c8:	d104      	bne.n	800a3d4 <__aeabi_dsub+0x64c>
 800a3ca:	465d      	mov	r5, fp
 800a3cc:	0004      	movs	r4, r0
 800a3ce:	08fb      	lsrs	r3, r7, #3
 800a3d0:	0749      	lsls	r1, r1, #29
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	0f5a      	lsrs	r2, r3, #29
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	08db      	lsrs	r3, r3, #3
 800a3da:	0752      	lsls	r2, r2, #29
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	e65d      	b.n	800a09c <__aeabi_dsub+0x314>
 800a3e0:	074b      	lsls	r3, r1, #29
 800a3e2:	08ff      	lsrs	r7, r7, #3
 800a3e4:	433b      	orrs	r3, r7
 800a3e6:	08cc      	lsrs	r4, r1, #3
 800a3e8:	e649      	b.n	800a07e <__aeabi_dsub+0x2f6>
 800a3ea:	19dc      	adds	r4, r3, r7
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	419b      	sbcs	r3, r3
 800a3f0:	4461      	add	r1, ip
 800a3f2:	4689      	mov	r9, r1
 800a3f4:	425b      	negs	r3, r3
 800a3f6:	4499      	add	r9, r3
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	021b      	lsls	r3, r3, #8
 800a3fc:	d400      	bmi.n	800a400 <__aeabi_dsub+0x678>
 800a3fe:	e631      	b.n	800a064 <__aeabi_dsub+0x2dc>
 800a400:	464a      	mov	r2, r9
 800a402:	4b17      	ldr	r3, [pc, #92]	; (800a460 <__aeabi_dsub+0x6d8>)
 800a404:	401a      	ands	r2, r3
 800a406:	2301      	movs	r3, #1
 800a408:	4691      	mov	r9, r2
 800a40a:	4698      	mov	r8, r3
 800a40c:	e62a      	b.n	800a064 <__aeabi_dsub+0x2dc>
 800a40e:	0016      	movs	r6, r2
 800a410:	4664      	mov	r4, ip
 800a412:	3e20      	subs	r6, #32
 800a414:	40f4      	lsrs	r4, r6
 800a416:	46a0      	mov	r8, r4
 800a418:	2a20      	cmp	r2, #32
 800a41a:	d005      	beq.n	800a428 <__aeabi_dsub+0x6a0>
 800a41c:	2640      	movs	r6, #64	; 0x40
 800a41e:	4664      	mov	r4, ip
 800a420:	1ab2      	subs	r2, r6, r2
 800a422:	4094      	lsls	r4, r2
 800a424:	4323      	orrs	r3, r4
 800a426:	469a      	mov	sl, r3
 800a428:	4654      	mov	r4, sl
 800a42a:	1e63      	subs	r3, r4, #1
 800a42c:	419c      	sbcs	r4, r3
 800a42e:	4643      	mov	r3, r8
 800a430:	431c      	orrs	r4, r3
 800a432:	e5db      	b.n	8009fec <__aeabi_dsub+0x264>
 800a434:	0002      	movs	r2, r0
 800a436:	2400      	movs	r4, #0
 800a438:	2300      	movs	r3, #0
 800a43a:	e548      	b.n	8009ece <__aeabi_dsub+0x146>
 800a43c:	19dc      	adds	r4, r3, r7
 800a43e:	42bc      	cmp	r4, r7
 800a440:	41bf      	sbcs	r7, r7
 800a442:	4461      	add	r1, ip
 800a444:	4689      	mov	r9, r1
 800a446:	427f      	negs	r7, r7
 800a448:	44b9      	add	r9, r7
 800a44a:	e738      	b.n	800a2be <__aeabi_dsub+0x536>
 800a44c:	464b      	mov	r3, r9
 800a44e:	4323      	orrs	r3, r4
 800a450:	d100      	bne.n	800a454 <__aeabi_dsub+0x6cc>
 800a452:	e69f      	b.n	800a194 <__aeabi_dsub+0x40c>
 800a454:	e606      	b.n	800a064 <__aeabi_dsub+0x2dc>
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	000007fe 	.word	0x000007fe
 800a45c:	000007ff 	.word	0x000007ff
 800a460:	ff7fffff 	.word	0xff7fffff
 800a464:	08ff      	lsrs	r7, r7, #3
 800a466:	074b      	lsls	r3, r1, #29
 800a468:	433b      	orrs	r3, r7
 800a46a:	08cc      	lsrs	r4, r1, #3
 800a46c:	e616      	b.n	800a09c <__aeabi_dsub+0x314>
 800a46e:	4662      	mov	r2, ip
 800a470:	08db      	lsrs	r3, r3, #3
 800a472:	0752      	lsls	r2, r2, #29
 800a474:	4313      	orrs	r3, r2
 800a476:	4662      	mov	r2, ip
 800a478:	08d4      	lsrs	r4, r2, #3
 800a47a:	2280      	movs	r2, #128	; 0x80
 800a47c:	0312      	lsls	r2, r2, #12
 800a47e:	4214      	tst	r4, r2
 800a480:	d007      	beq.n	800a492 <__aeabi_dsub+0x70a>
 800a482:	08c8      	lsrs	r0, r1, #3
 800a484:	4210      	tst	r0, r2
 800a486:	d104      	bne.n	800a492 <__aeabi_dsub+0x70a>
 800a488:	465d      	mov	r5, fp
 800a48a:	0004      	movs	r4, r0
 800a48c:	08fb      	lsrs	r3, r7, #3
 800a48e:	0749      	lsls	r1, r1, #29
 800a490:	430b      	orrs	r3, r1
 800a492:	0f5a      	lsrs	r2, r3, #29
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	0752      	lsls	r2, r2, #29
 800a498:	08db      	lsrs	r3, r3, #3
 800a49a:	4313      	orrs	r3, r2
 800a49c:	e5fe      	b.n	800a09c <__aeabi_dsub+0x314>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	4a01      	ldr	r2, [pc, #4]	; (800a4a8 <__aeabi_dsub+0x720>)
 800a4a2:	001c      	movs	r4, r3
 800a4a4:	e513      	b.n	8009ece <__aeabi_dsub+0x146>
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	000007ff 	.word	0x000007ff

0800a4ac <__aeabi_dcmpun>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	0005      	movs	r5, r0
 800a4b0:	480c      	ldr	r0, [pc, #48]	; (800a4e4 <__aeabi_dcmpun+0x38>)
 800a4b2:	031c      	lsls	r4, r3, #12
 800a4b4:	0016      	movs	r6, r2
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	030a      	lsls	r2, r1, #12
 800a4ba:	0049      	lsls	r1, r1, #1
 800a4bc:	0b12      	lsrs	r2, r2, #12
 800a4be:	0d49      	lsrs	r1, r1, #21
 800a4c0:	0b24      	lsrs	r4, r4, #12
 800a4c2:	0d5b      	lsrs	r3, r3, #21
 800a4c4:	4281      	cmp	r1, r0
 800a4c6:	d008      	beq.n	800a4da <__aeabi_dcmpun+0x2e>
 800a4c8:	4a06      	ldr	r2, [pc, #24]	; (800a4e4 <__aeabi_dcmpun+0x38>)
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d103      	bne.n	800a4d8 <__aeabi_dcmpun+0x2c>
 800a4d0:	0020      	movs	r0, r4
 800a4d2:	4330      	orrs	r0, r6
 800a4d4:	1e43      	subs	r3, r0, #1
 800a4d6:	4198      	sbcs	r0, r3
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
 800a4da:	2001      	movs	r0, #1
 800a4dc:	432a      	orrs	r2, r5
 800a4de:	d1fb      	bne.n	800a4d8 <__aeabi_dcmpun+0x2c>
 800a4e0:	e7f2      	b.n	800a4c8 <__aeabi_dcmpun+0x1c>
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	000007ff 	.word	0x000007ff

0800a4e8 <__aeabi_d2iz>:
 800a4e8:	000a      	movs	r2, r1
 800a4ea:	b530      	push	{r4, r5, lr}
 800a4ec:	4c13      	ldr	r4, [pc, #76]	; (800a53c <__aeabi_d2iz+0x54>)
 800a4ee:	0053      	lsls	r3, r2, #1
 800a4f0:	0309      	lsls	r1, r1, #12
 800a4f2:	0005      	movs	r5, r0
 800a4f4:	0b09      	lsrs	r1, r1, #12
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	0d5b      	lsrs	r3, r3, #21
 800a4fa:	0fd2      	lsrs	r2, r2, #31
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	dd04      	ble.n	800a50a <__aeabi_d2iz+0x22>
 800a500:	480f      	ldr	r0, [pc, #60]	; (800a540 <__aeabi_d2iz+0x58>)
 800a502:	4283      	cmp	r3, r0
 800a504:	dd02      	ble.n	800a50c <__aeabi_d2iz+0x24>
 800a506:	4b0f      	ldr	r3, [pc, #60]	; (800a544 <__aeabi_d2iz+0x5c>)
 800a508:	18d0      	adds	r0, r2, r3
 800a50a:	bd30      	pop	{r4, r5, pc}
 800a50c:	2080      	movs	r0, #128	; 0x80
 800a50e:	0340      	lsls	r0, r0, #13
 800a510:	4301      	orrs	r1, r0
 800a512:	480d      	ldr	r0, [pc, #52]	; (800a548 <__aeabi_d2iz+0x60>)
 800a514:	1ac0      	subs	r0, r0, r3
 800a516:	281f      	cmp	r0, #31
 800a518:	dd08      	ble.n	800a52c <__aeabi_d2iz+0x44>
 800a51a:	480c      	ldr	r0, [pc, #48]	; (800a54c <__aeabi_d2iz+0x64>)
 800a51c:	1ac3      	subs	r3, r0, r3
 800a51e:	40d9      	lsrs	r1, r3
 800a520:	000b      	movs	r3, r1
 800a522:	4258      	negs	r0, r3
 800a524:	2a00      	cmp	r2, #0
 800a526:	d1f0      	bne.n	800a50a <__aeabi_d2iz+0x22>
 800a528:	0018      	movs	r0, r3
 800a52a:	e7ee      	b.n	800a50a <__aeabi_d2iz+0x22>
 800a52c:	4c08      	ldr	r4, [pc, #32]	; (800a550 <__aeabi_d2iz+0x68>)
 800a52e:	40c5      	lsrs	r5, r0
 800a530:	46a4      	mov	ip, r4
 800a532:	4463      	add	r3, ip
 800a534:	4099      	lsls	r1, r3
 800a536:	000b      	movs	r3, r1
 800a538:	432b      	orrs	r3, r5
 800a53a:	e7f2      	b.n	800a522 <__aeabi_d2iz+0x3a>
 800a53c:	000003fe 	.word	0x000003fe
 800a540:	0000041d 	.word	0x0000041d
 800a544:	7fffffff 	.word	0x7fffffff
 800a548:	00000433 	.word	0x00000433
 800a54c:	00000413 	.word	0x00000413
 800a550:	fffffbed 	.word	0xfffffbed

0800a554 <__aeabi_i2d>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	2800      	cmp	r0, #0
 800a558:	d016      	beq.n	800a588 <__aeabi_i2d+0x34>
 800a55a:	17c3      	asrs	r3, r0, #31
 800a55c:	18c5      	adds	r5, r0, r3
 800a55e:	405d      	eors	r5, r3
 800a560:	0fc4      	lsrs	r4, r0, #31
 800a562:	0028      	movs	r0, r5
 800a564:	f000 f956 	bl	800a814 <__clzsi2>
 800a568:	4a11      	ldr	r2, [pc, #68]	; (800a5b0 <__aeabi_i2d+0x5c>)
 800a56a:	1a12      	subs	r2, r2, r0
 800a56c:	280a      	cmp	r0, #10
 800a56e:	dc16      	bgt.n	800a59e <__aeabi_i2d+0x4a>
 800a570:	0003      	movs	r3, r0
 800a572:	002e      	movs	r6, r5
 800a574:	3315      	adds	r3, #21
 800a576:	409e      	lsls	r6, r3
 800a578:	230b      	movs	r3, #11
 800a57a:	1a18      	subs	r0, r3, r0
 800a57c:	40c5      	lsrs	r5, r0
 800a57e:	0552      	lsls	r2, r2, #21
 800a580:	032d      	lsls	r5, r5, #12
 800a582:	0b2d      	lsrs	r5, r5, #12
 800a584:	0d53      	lsrs	r3, r2, #21
 800a586:	e003      	b.n	800a590 <__aeabi_i2d+0x3c>
 800a588:	2400      	movs	r4, #0
 800a58a:	2300      	movs	r3, #0
 800a58c:	2500      	movs	r5, #0
 800a58e:	2600      	movs	r6, #0
 800a590:	051b      	lsls	r3, r3, #20
 800a592:	432b      	orrs	r3, r5
 800a594:	07e4      	lsls	r4, r4, #31
 800a596:	4323      	orrs	r3, r4
 800a598:	0030      	movs	r0, r6
 800a59a:	0019      	movs	r1, r3
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	380b      	subs	r0, #11
 800a5a0:	4085      	lsls	r5, r0
 800a5a2:	0552      	lsls	r2, r2, #21
 800a5a4:	032d      	lsls	r5, r5, #12
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	0b2d      	lsrs	r5, r5, #12
 800a5aa:	0d53      	lsrs	r3, r2, #21
 800a5ac:	e7f0      	b.n	800a590 <__aeabi_i2d+0x3c>
 800a5ae:	46c0      	nop			; (mov r8, r8)
 800a5b0:	0000041e 	.word	0x0000041e

0800a5b4 <__aeabi_ui2d>:
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	1e04      	subs	r4, r0, #0
 800a5b8:	d010      	beq.n	800a5dc <__aeabi_ui2d+0x28>
 800a5ba:	f000 f92b 	bl	800a814 <__clzsi2>
 800a5be:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <__aeabi_ui2d+0x48>)
 800a5c0:	1a1b      	subs	r3, r3, r0
 800a5c2:	280a      	cmp	r0, #10
 800a5c4:	dc11      	bgt.n	800a5ea <__aeabi_ui2d+0x36>
 800a5c6:	220b      	movs	r2, #11
 800a5c8:	0021      	movs	r1, r4
 800a5ca:	1a12      	subs	r2, r2, r0
 800a5cc:	40d1      	lsrs	r1, r2
 800a5ce:	3015      	adds	r0, #21
 800a5d0:	030a      	lsls	r2, r1, #12
 800a5d2:	055b      	lsls	r3, r3, #21
 800a5d4:	4084      	lsls	r4, r0
 800a5d6:	0b12      	lsrs	r2, r2, #12
 800a5d8:	0d5b      	lsrs	r3, r3, #21
 800a5da:	e001      	b.n	800a5e0 <__aeabi_ui2d+0x2c>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	2200      	movs	r2, #0
 800a5e0:	051b      	lsls	r3, r3, #20
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	0020      	movs	r0, r4
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	0022      	movs	r2, r4
 800a5ec:	380b      	subs	r0, #11
 800a5ee:	4082      	lsls	r2, r0
 800a5f0:	055b      	lsls	r3, r3, #21
 800a5f2:	0312      	lsls	r2, r2, #12
 800a5f4:	2400      	movs	r4, #0
 800a5f6:	0b12      	lsrs	r2, r2, #12
 800a5f8:	0d5b      	lsrs	r3, r3, #21
 800a5fa:	e7f1      	b.n	800a5e0 <__aeabi_ui2d+0x2c>
 800a5fc:	0000041e 	.word	0x0000041e

0800a600 <__aeabi_f2d>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	0043      	lsls	r3, r0, #1
 800a604:	0246      	lsls	r6, r0, #9
 800a606:	0fc4      	lsrs	r4, r0, #31
 800a608:	20fe      	movs	r0, #254	; 0xfe
 800a60a:	0e1b      	lsrs	r3, r3, #24
 800a60c:	1c59      	adds	r1, r3, #1
 800a60e:	0a75      	lsrs	r5, r6, #9
 800a610:	4208      	tst	r0, r1
 800a612:	d00c      	beq.n	800a62e <__aeabi_f2d+0x2e>
 800a614:	22e0      	movs	r2, #224	; 0xe0
 800a616:	0092      	lsls	r2, r2, #2
 800a618:	4694      	mov	ip, r2
 800a61a:	076d      	lsls	r5, r5, #29
 800a61c:	0b36      	lsrs	r6, r6, #12
 800a61e:	4463      	add	r3, ip
 800a620:	051b      	lsls	r3, r3, #20
 800a622:	4333      	orrs	r3, r6
 800a624:	07e4      	lsls	r4, r4, #31
 800a626:	4323      	orrs	r3, r4
 800a628:	0028      	movs	r0, r5
 800a62a:	0019      	movs	r1, r3
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d114      	bne.n	800a65c <__aeabi_f2d+0x5c>
 800a632:	2d00      	cmp	r5, #0
 800a634:	d01b      	beq.n	800a66e <__aeabi_f2d+0x6e>
 800a636:	0028      	movs	r0, r5
 800a638:	f000 f8ec 	bl	800a814 <__clzsi2>
 800a63c:	280a      	cmp	r0, #10
 800a63e:	dc1c      	bgt.n	800a67a <__aeabi_f2d+0x7a>
 800a640:	230b      	movs	r3, #11
 800a642:	002e      	movs	r6, r5
 800a644:	1a1b      	subs	r3, r3, r0
 800a646:	40de      	lsrs	r6, r3
 800a648:	0003      	movs	r3, r0
 800a64a:	3315      	adds	r3, #21
 800a64c:	409d      	lsls	r5, r3
 800a64e:	4a0e      	ldr	r2, [pc, #56]	; (800a688 <__aeabi_f2d+0x88>)
 800a650:	0336      	lsls	r6, r6, #12
 800a652:	1a12      	subs	r2, r2, r0
 800a654:	0552      	lsls	r2, r2, #21
 800a656:	0b36      	lsrs	r6, r6, #12
 800a658:	0d53      	lsrs	r3, r2, #21
 800a65a:	e7e1      	b.n	800a620 <__aeabi_f2d+0x20>
 800a65c:	2d00      	cmp	r5, #0
 800a65e:	d009      	beq.n	800a674 <__aeabi_f2d+0x74>
 800a660:	2280      	movs	r2, #128	; 0x80
 800a662:	0b36      	lsrs	r6, r6, #12
 800a664:	0312      	lsls	r2, r2, #12
 800a666:	4b09      	ldr	r3, [pc, #36]	; (800a68c <__aeabi_f2d+0x8c>)
 800a668:	076d      	lsls	r5, r5, #29
 800a66a:	4316      	orrs	r6, r2
 800a66c:	e7d8      	b.n	800a620 <__aeabi_f2d+0x20>
 800a66e:	2300      	movs	r3, #0
 800a670:	2600      	movs	r6, #0
 800a672:	e7d5      	b.n	800a620 <__aeabi_f2d+0x20>
 800a674:	2600      	movs	r6, #0
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <__aeabi_f2d+0x8c>)
 800a678:	e7d2      	b.n	800a620 <__aeabi_f2d+0x20>
 800a67a:	0003      	movs	r3, r0
 800a67c:	3b0b      	subs	r3, #11
 800a67e:	409d      	lsls	r5, r3
 800a680:	002e      	movs	r6, r5
 800a682:	2500      	movs	r5, #0
 800a684:	e7e3      	b.n	800a64e <__aeabi_f2d+0x4e>
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	00000389 	.word	0x00000389
 800a68c:	000007ff 	.word	0x000007ff

0800a690 <__aeabi_d2f>:
 800a690:	0002      	movs	r2, r0
 800a692:	004b      	lsls	r3, r1, #1
 800a694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a696:	0d5b      	lsrs	r3, r3, #21
 800a698:	030c      	lsls	r4, r1, #12
 800a69a:	4e3d      	ldr	r6, [pc, #244]	; (800a790 <__aeabi_d2f+0x100>)
 800a69c:	0a64      	lsrs	r4, r4, #9
 800a69e:	0f40      	lsrs	r0, r0, #29
 800a6a0:	1c5f      	adds	r7, r3, #1
 800a6a2:	0fc9      	lsrs	r1, r1, #31
 800a6a4:	4304      	orrs	r4, r0
 800a6a6:	00d5      	lsls	r5, r2, #3
 800a6a8:	4237      	tst	r7, r6
 800a6aa:	d00a      	beq.n	800a6c2 <__aeabi_d2f+0x32>
 800a6ac:	4839      	ldr	r0, [pc, #228]	; (800a794 <__aeabi_d2f+0x104>)
 800a6ae:	181e      	adds	r6, r3, r0
 800a6b0:	2efe      	cmp	r6, #254	; 0xfe
 800a6b2:	dd16      	ble.n	800a6e2 <__aeabi_d2f+0x52>
 800a6b4:	20ff      	movs	r0, #255	; 0xff
 800a6b6:	2400      	movs	r4, #0
 800a6b8:	05c0      	lsls	r0, r0, #23
 800a6ba:	4320      	orrs	r0, r4
 800a6bc:	07c9      	lsls	r1, r1, #31
 800a6be:	4308      	orrs	r0, r1
 800a6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <__aeabi_d2f+0x44>
 800a6c6:	432c      	orrs	r4, r5
 800a6c8:	d026      	beq.n	800a718 <__aeabi_d2f+0x88>
 800a6ca:	2205      	movs	r2, #5
 800a6cc:	0192      	lsls	r2, r2, #6
 800a6ce:	0a54      	lsrs	r4, r2, #9
 800a6d0:	b2d8      	uxtb	r0, r3
 800a6d2:	e7f1      	b.n	800a6b8 <__aeabi_d2f+0x28>
 800a6d4:	4325      	orrs	r5, r4
 800a6d6:	d0ed      	beq.n	800a6b4 <__aeabi_d2f+0x24>
 800a6d8:	2080      	movs	r0, #128	; 0x80
 800a6da:	03c0      	lsls	r0, r0, #15
 800a6dc:	4304      	orrs	r4, r0
 800a6de:	20ff      	movs	r0, #255	; 0xff
 800a6e0:	e7ea      	b.n	800a6b8 <__aeabi_d2f+0x28>
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	dd1b      	ble.n	800a71e <__aeabi_d2f+0x8e>
 800a6e6:	0192      	lsls	r2, r2, #6
 800a6e8:	1e53      	subs	r3, r2, #1
 800a6ea:	419a      	sbcs	r2, r3
 800a6ec:	00e4      	lsls	r4, r4, #3
 800a6ee:	0f6d      	lsrs	r5, r5, #29
 800a6f0:	4322      	orrs	r2, r4
 800a6f2:	432a      	orrs	r2, r5
 800a6f4:	0753      	lsls	r3, r2, #29
 800a6f6:	d048      	beq.n	800a78a <__aeabi_d2f+0xfa>
 800a6f8:	230f      	movs	r3, #15
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	d000      	beq.n	800a702 <__aeabi_d2f+0x72>
 800a700:	3204      	adds	r2, #4
 800a702:	2380      	movs	r3, #128	; 0x80
 800a704:	04db      	lsls	r3, r3, #19
 800a706:	4013      	ands	r3, r2
 800a708:	d03f      	beq.n	800a78a <__aeabi_d2f+0xfa>
 800a70a:	1c70      	adds	r0, r6, #1
 800a70c:	2efe      	cmp	r6, #254	; 0xfe
 800a70e:	d0d1      	beq.n	800a6b4 <__aeabi_d2f+0x24>
 800a710:	0192      	lsls	r2, r2, #6
 800a712:	0a54      	lsrs	r4, r2, #9
 800a714:	b2c0      	uxtb	r0, r0
 800a716:	e7cf      	b.n	800a6b8 <__aeabi_d2f+0x28>
 800a718:	2000      	movs	r0, #0
 800a71a:	2400      	movs	r4, #0
 800a71c:	e7cc      	b.n	800a6b8 <__aeabi_d2f+0x28>
 800a71e:	0032      	movs	r2, r6
 800a720:	3217      	adds	r2, #23
 800a722:	db22      	blt.n	800a76a <__aeabi_d2f+0xda>
 800a724:	2080      	movs	r0, #128	; 0x80
 800a726:	0400      	lsls	r0, r0, #16
 800a728:	4320      	orrs	r0, r4
 800a72a:	241e      	movs	r4, #30
 800a72c:	1ba4      	subs	r4, r4, r6
 800a72e:	2c1f      	cmp	r4, #31
 800a730:	dd1d      	ble.n	800a76e <__aeabi_d2f+0xde>
 800a732:	2202      	movs	r2, #2
 800a734:	4252      	negs	r2, r2
 800a736:	1b96      	subs	r6, r2, r6
 800a738:	0002      	movs	r2, r0
 800a73a:	40f2      	lsrs	r2, r6
 800a73c:	0016      	movs	r6, r2
 800a73e:	2c20      	cmp	r4, #32
 800a740:	d004      	beq.n	800a74c <__aeabi_d2f+0xbc>
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <__aeabi_d2f+0x108>)
 800a744:	4694      	mov	ip, r2
 800a746:	4463      	add	r3, ip
 800a748:	4098      	lsls	r0, r3
 800a74a:	4305      	orrs	r5, r0
 800a74c:	002a      	movs	r2, r5
 800a74e:	1e53      	subs	r3, r2, #1
 800a750:	419a      	sbcs	r2, r3
 800a752:	4332      	orrs	r2, r6
 800a754:	2600      	movs	r6, #0
 800a756:	0753      	lsls	r3, r2, #29
 800a758:	d1ce      	bne.n	800a6f8 <__aeabi_d2f+0x68>
 800a75a:	2480      	movs	r4, #128	; 0x80
 800a75c:	0013      	movs	r3, r2
 800a75e:	04e4      	lsls	r4, r4, #19
 800a760:	2001      	movs	r0, #1
 800a762:	4023      	ands	r3, r4
 800a764:	4222      	tst	r2, r4
 800a766:	d1d3      	bne.n	800a710 <__aeabi_d2f+0x80>
 800a768:	e7b0      	b.n	800a6cc <__aeabi_d2f+0x3c>
 800a76a:	2300      	movs	r3, #0
 800a76c:	e7ad      	b.n	800a6ca <__aeabi_d2f+0x3a>
 800a76e:	4a0b      	ldr	r2, [pc, #44]	; (800a79c <__aeabi_d2f+0x10c>)
 800a770:	4694      	mov	ip, r2
 800a772:	002a      	movs	r2, r5
 800a774:	40e2      	lsrs	r2, r4
 800a776:	0014      	movs	r4, r2
 800a778:	002a      	movs	r2, r5
 800a77a:	4463      	add	r3, ip
 800a77c:	409a      	lsls	r2, r3
 800a77e:	4098      	lsls	r0, r3
 800a780:	1e55      	subs	r5, r2, #1
 800a782:	41aa      	sbcs	r2, r5
 800a784:	4302      	orrs	r2, r0
 800a786:	4322      	orrs	r2, r4
 800a788:	e7e4      	b.n	800a754 <__aeabi_d2f+0xc4>
 800a78a:	0033      	movs	r3, r6
 800a78c:	e79e      	b.n	800a6cc <__aeabi_d2f+0x3c>
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	000007fe 	.word	0x000007fe
 800a794:	fffffc80 	.word	0xfffffc80
 800a798:	fffffca2 	.word	0xfffffca2
 800a79c:	fffffc82 	.word	0xfffffc82

0800a7a0 <__aeabi_cfrcmple>:
 800a7a0:	4684      	mov	ip, r0
 800a7a2:	0008      	movs	r0, r1
 800a7a4:	4661      	mov	r1, ip
 800a7a6:	e7ff      	b.n	800a7a8 <__aeabi_cfcmpeq>

0800a7a8 <__aeabi_cfcmpeq>:
 800a7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7aa:	f000 f8bd 	bl	800a928 <__lesf2>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d401      	bmi.n	800a7b6 <__aeabi_cfcmpeq+0xe>
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	42c8      	cmn	r0, r1
 800a7b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800a7b8 <__aeabi_fcmpeq>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	f000 f849 	bl	800a850 <__eqsf2>
 800a7be:	4240      	negs	r0, r0
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	bd10      	pop	{r4, pc}

0800a7c4 <__aeabi_fcmplt>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	f000 f8af 	bl	800a928 <__lesf2>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	db01      	blt.n	800a7d2 <__aeabi_fcmplt+0xe>
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	46c0      	nop			; (mov r8, r8)

0800a7d8 <__aeabi_fcmple>:
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	f000 f8a5 	bl	800a928 <__lesf2>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	dd01      	ble.n	800a7e6 <__aeabi_fcmple+0xe>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	bd10      	pop	{r4, pc}
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	46c0      	nop			; (mov r8, r8)

0800a7ec <__aeabi_fcmpgt>:
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	f000 f855 	bl	800a89c <__gesf2>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	dc01      	bgt.n	800a7fa <__aeabi_fcmpgt+0xe>
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	2001      	movs	r0, #1
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	46c0      	nop			; (mov r8, r8)

0800a800 <__aeabi_fcmpge>:
 800a800:	b510      	push	{r4, lr}
 800a802:	f000 f84b 	bl	800a89c <__gesf2>
 800a806:	2800      	cmp	r0, #0
 800a808:	da01      	bge.n	800a80e <__aeabi_fcmpge+0xe>
 800a80a:	2000      	movs	r0, #0
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	2001      	movs	r0, #1
 800a810:	bd10      	pop	{r4, pc}
 800a812:	46c0      	nop			; (mov r8, r8)

0800a814 <__clzsi2>:
 800a814:	211c      	movs	r1, #28
 800a816:	2301      	movs	r3, #1
 800a818:	041b      	lsls	r3, r3, #16
 800a81a:	4298      	cmp	r0, r3
 800a81c:	d301      	bcc.n	800a822 <__clzsi2+0xe>
 800a81e:	0c00      	lsrs	r0, r0, #16
 800a820:	3910      	subs	r1, #16
 800a822:	0a1b      	lsrs	r3, r3, #8
 800a824:	4298      	cmp	r0, r3
 800a826:	d301      	bcc.n	800a82c <__clzsi2+0x18>
 800a828:	0a00      	lsrs	r0, r0, #8
 800a82a:	3908      	subs	r1, #8
 800a82c:	091b      	lsrs	r3, r3, #4
 800a82e:	4298      	cmp	r0, r3
 800a830:	d301      	bcc.n	800a836 <__clzsi2+0x22>
 800a832:	0900      	lsrs	r0, r0, #4
 800a834:	3904      	subs	r1, #4
 800a836:	a202      	add	r2, pc, #8	; (adr r2, 800a840 <__clzsi2+0x2c>)
 800a838:	5c10      	ldrb	r0, [r2, r0]
 800a83a:	1840      	adds	r0, r0, r1
 800a83c:	4770      	bx	lr
 800a83e:	46c0      	nop			; (mov r8, r8)
 800a840:	02020304 	.word	0x02020304
 800a844:	01010101 	.word	0x01010101
	...

0800a850 <__eqsf2>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	0042      	lsls	r2, r0, #1
 800a854:	0245      	lsls	r5, r0, #9
 800a856:	024e      	lsls	r6, r1, #9
 800a858:	004c      	lsls	r4, r1, #1
 800a85a:	0fc3      	lsrs	r3, r0, #31
 800a85c:	0a6d      	lsrs	r5, r5, #9
 800a85e:	2001      	movs	r0, #1
 800a860:	0e12      	lsrs	r2, r2, #24
 800a862:	0a76      	lsrs	r6, r6, #9
 800a864:	0e24      	lsrs	r4, r4, #24
 800a866:	0fc9      	lsrs	r1, r1, #31
 800a868:	2aff      	cmp	r2, #255	; 0xff
 800a86a:	d006      	beq.n	800a87a <__eqsf2+0x2a>
 800a86c:	2cff      	cmp	r4, #255	; 0xff
 800a86e:	d003      	beq.n	800a878 <__eqsf2+0x28>
 800a870:	42a2      	cmp	r2, r4
 800a872:	d101      	bne.n	800a878 <__eqsf2+0x28>
 800a874:	42b5      	cmp	r5, r6
 800a876:	d006      	beq.n	800a886 <__eqsf2+0x36>
 800a878:	bd70      	pop	{r4, r5, r6, pc}
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	d1fc      	bne.n	800a878 <__eqsf2+0x28>
 800a87e:	2cff      	cmp	r4, #255	; 0xff
 800a880:	d1fa      	bne.n	800a878 <__eqsf2+0x28>
 800a882:	2e00      	cmp	r6, #0
 800a884:	d1f8      	bne.n	800a878 <__eqsf2+0x28>
 800a886:	428b      	cmp	r3, r1
 800a888:	d006      	beq.n	800a898 <__eqsf2+0x48>
 800a88a:	2001      	movs	r0, #1
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	d1f3      	bne.n	800a878 <__eqsf2+0x28>
 800a890:	0028      	movs	r0, r5
 800a892:	1e43      	subs	r3, r0, #1
 800a894:	4198      	sbcs	r0, r3
 800a896:	e7ef      	b.n	800a878 <__eqsf2+0x28>
 800a898:	2000      	movs	r0, #0
 800a89a:	e7ed      	b.n	800a878 <__eqsf2+0x28>

0800a89c <__gesf2>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	0042      	lsls	r2, r0, #1
 800a8a0:	0245      	lsls	r5, r0, #9
 800a8a2:	024e      	lsls	r6, r1, #9
 800a8a4:	004c      	lsls	r4, r1, #1
 800a8a6:	0fc3      	lsrs	r3, r0, #31
 800a8a8:	0a6d      	lsrs	r5, r5, #9
 800a8aa:	0e12      	lsrs	r2, r2, #24
 800a8ac:	0a76      	lsrs	r6, r6, #9
 800a8ae:	0e24      	lsrs	r4, r4, #24
 800a8b0:	0fc8      	lsrs	r0, r1, #31
 800a8b2:	2aff      	cmp	r2, #255	; 0xff
 800a8b4:	d01b      	beq.n	800a8ee <__gesf2+0x52>
 800a8b6:	2cff      	cmp	r4, #255	; 0xff
 800a8b8:	d00e      	beq.n	800a8d8 <__gesf2+0x3c>
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	d11b      	bne.n	800a8f6 <__gesf2+0x5a>
 800a8be:	2c00      	cmp	r4, #0
 800a8c0:	d101      	bne.n	800a8c6 <__gesf2+0x2a>
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	d01c      	beq.n	800a900 <__gesf2+0x64>
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	d00c      	beq.n	800a8e4 <__gesf2+0x48>
 800a8ca:	4283      	cmp	r3, r0
 800a8cc:	d01c      	beq.n	800a908 <__gesf2+0x6c>
 800a8ce:	2102      	movs	r1, #2
 800a8d0:	1e58      	subs	r0, r3, #1
 800a8d2:	4008      	ands	r0, r1
 800a8d4:	3801      	subs	r0, #1
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	d122      	bne.n	800a922 <__gesf2+0x86>
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	d1f4      	bne.n	800a8ca <__gesf2+0x2e>
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	d1f2      	bne.n	800a8ca <__gesf2+0x2e>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d1f6      	bne.n	800a8d6 <__gesf2+0x3a>
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	4240      	negs	r0, r0
 800a8ec:	e7f3      	b.n	800a8d6 <__gesf2+0x3a>
 800a8ee:	2d00      	cmp	r5, #0
 800a8f0:	d117      	bne.n	800a922 <__gesf2+0x86>
 800a8f2:	2cff      	cmp	r4, #255	; 0xff
 800a8f4:	d0f0      	beq.n	800a8d8 <__gesf2+0x3c>
 800a8f6:	2c00      	cmp	r4, #0
 800a8f8:	d1e7      	bne.n	800a8ca <__gesf2+0x2e>
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	d1e5      	bne.n	800a8ca <__gesf2+0x2e>
 800a8fe:	e7e6      	b.n	800a8ce <__gesf2+0x32>
 800a900:	2000      	movs	r0, #0
 800a902:	2d00      	cmp	r5, #0
 800a904:	d0e7      	beq.n	800a8d6 <__gesf2+0x3a>
 800a906:	e7e2      	b.n	800a8ce <__gesf2+0x32>
 800a908:	42a2      	cmp	r2, r4
 800a90a:	dc05      	bgt.n	800a918 <__gesf2+0x7c>
 800a90c:	dbea      	blt.n	800a8e4 <__gesf2+0x48>
 800a90e:	42b5      	cmp	r5, r6
 800a910:	d802      	bhi.n	800a918 <__gesf2+0x7c>
 800a912:	d3e7      	bcc.n	800a8e4 <__gesf2+0x48>
 800a914:	2000      	movs	r0, #0
 800a916:	e7de      	b.n	800a8d6 <__gesf2+0x3a>
 800a918:	4243      	negs	r3, r0
 800a91a:	4158      	adcs	r0, r3
 800a91c:	0040      	lsls	r0, r0, #1
 800a91e:	3801      	subs	r0, #1
 800a920:	e7d9      	b.n	800a8d6 <__gesf2+0x3a>
 800a922:	2002      	movs	r0, #2
 800a924:	4240      	negs	r0, r0
 800a926:	e7d6      	b.n	800a8d6 <__gesf2+0x3a>

0800a928 <__lesf2>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	0042      	lsls	r2, r0, #1
 800a92c:	0245      	lsls	r5, r0, #9
 800a92e:	024e      	lsls	r6, r1, #9
 800a930:	004c      	lsls	r4, r1, #1
 800a932:	0fc3      	lsrs	r3, r0, #31
 800a934:	0a6d      	lsrs	r5, r5, #9
 800a936:	0e12      	lsrs	r2, r2, #24
 800a938:	0a76      	lsrs	r6, r6, #9
 800a93a:	0e24      	lsrs	r4, r4, #24
 800a93c:	0fc8      	lsrs	r0, r1, #31
 800a93e:	2aff      	cmp	r2, #255	; 0xff
 800a940:	d00b      	beq.n	800a95a <__lesf2+0x32>
 800a942:	2cff      	cmp	r4, #255	; 0xff
 800a944:	d00d      	beq.n	800a962 <__lesf2+0x3a>
 800a946:	2a00      	cmp	r2, #0
 800a948:	d11f      	bne.n	800a98a <__lesf2+0x62>
 800a94a:	2c00      	cmp	r4, #0
 800a94c:	d116      	bne.n	800a97c <__lesf2+0x54>
 800a94e:	2e00      	cmp	r6, #0
 800a950:	d114      	bne.n	800a97c <__lesf2+0x54>
 800a952:	2000      	movs	r0, #0
 800a954:	2d00      	cmp	r5, #0
 800a956:	d010      	beq.n	800a97a <__lesf2+0x52>
 800a958:	e009      	b.n	800a96e <__lesf2+0x46>
 800a95a:	2d00      	cmp	r5, #0
 800a95c:	d10c      	bne.n	800a978 <__lesf2+0x50>
 800a95e:	2cff      	cmp	r4, #255	; 0xff
 800a960:	d113      	bne.n	800a98a <__lesf2+0x62>
 800a962:	2e00      	cmp	r6, #0
 800a964:	d108      	bne.n	800a978 <__lesf2+0x50>
 800a966:	2a00      	cmp	r2, #0
 800a968:	d008      	beq.n	800a97c <__lesf2+0x54>
 800a96a:	4283      	cmp	r3, r0
 800a96c:	d012      	beq.n	800a994 <__lesf2+0x6c>
 800a96e:	2102      	movs	r1, #2
 800a970:	1e58      	subs	r0, r3, #1
 800a972:	4008      	ands	r0, r1
 800a974:	3801      	subs	r0, #1
 800a976:	e000      	b.n	800a97a <__lesf2+0x52>
 800a978:	2002      	movs	r0, #2
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	2d00      	cmp	r5, #0
 800a97e:	d1f4      	bne.n	800a96a <__lesf2+0x42>
 800a980:	2800      	cmp	r0, #0
 800a982:	d1fa      	bne.n	800a97a <__lesf2+0x52>
 800a984:	2001      	movs	r0, #1
 800a986:	4240      	negs	r0, r0
 800a988:	e7f7      	b.n	800a97a <__lesf2+0x52>
 800a98a:	2c00      	cmp	r4, #0
 800a98c:	d1ed      	bne.n	800a96a <__lesf2+0x42>
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d1eb      	bne.n	800a96a <__lesf2+0x42>
 800a992:	e7ec      	b.n	800a96e <__lesf2+0x46>
 800a994:	42a2      	cmp	r2, r4
 800a996:	dc05      	bgt.n	800a9a4 <__lesf2+0x7c>
 800a998:	dbf2      	blt.n	800a980 <__lesf2+0x58>
 800a99a:	42b5      	cmp	r5, r6
 800a99c:	d802      	bhi.n	800a9a4 <__lesf2+0x7c>
 800a99e:	d3ef      	bcc.n	800a980 <__lesf2+0x58>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e7ea      	b.n	800a97a <__lesf2+0x52>
 800a9a4:	4243      	negs	r3, r0
 800a9a6:	4158      	adcs	r0, r3
 800a9a8:	0040      	lsls	r0, r0, #1
 800a9aa:	3801      	subs	r0, #1
 800a9ac:	e7e5      	b.n	800a97a <__lesf2+0x52>
 800a9ae:	46c0      	nop			; (mov r8, r8)

0800a9b0 <SPI_TxBuffer>:
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
}

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800a9b0:	000a      	movs	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a9b2:	2302      	movs	r3, #2
{
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	0004      	movs	r4, r0
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a9b8:	4804      	ldr	r0, [pc, #16]	; (800a9cc <SPI_TxBuffer+0x1c>)
 800a9ba:	6805      	ldr	r5, [r0, #0]
 800a9bc:	68a9      	ldr	r1, [r5, #8]
 800a9be:	4219      	tst	r1, r3
 800a9c0:	d0fc      	beq.n	800a9bc <SPI_TxBuffer+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800a9c2:	2364      	movs	r3, #100	; 0x64
 800a9c4:	0021      	movs	r1, r4
 800a9c6:	f006 f97c 	bl	8010cc2 <HAL_SPI_Transmit>
}
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	200003d8 	.word	0x200003d8

0800a9d0 <SPI_TxByte>:
{
 800a9d0:	b513      	push	{r0, r1, r4, lr}
 800a9d2:	466b      	mov	r3, sp
 800a9d4:	1dd9      	adds	r1, r3, #7
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a9d6:	2302      	movs	r3, #2
{
 800a9d8:	7008      	strb	r0, [r1, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a9da:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <SPI_TxByte+0x20>)
 800a9dc:	6804      	ldr	r4, [r0, #0]
 800a9de:	68a2      	ldr	r2, [r4, #8]
 800a9e0:	421a      	tst	r2, r3
 800a9e2:	d0fc      	beq.n	800a9de <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800a9e4:	2364      	movs	r3, #100	; 0x64
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f006 f96b 	bl	8010cc2 <HAL_SPI_Transmit>
}
 800a9ec:	bd13      	pop	{r0, r1, r4, pc}
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	200003d8 	.word	0x200003d8

0800a9f4 <SELECT>:
{
 800a9f4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	4803      	ldr	r0, [pc, #12]	; (800aa08 <SELECT+0x14>)
 800a9fc:	f004 fb7e 	bl	800f0fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800aa00:	2001      	movs	r0, #1
 800aa02:	f004 f8b1 	bl	800eb68 <HAL_Delay>
}
 800aa06:	bd10      	pop	{r4, pc}
 800aa08:	48000c00 	.word	0x48000c00

0800aa0c <DESELECT>:
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800aa0c:	2201      	movs	r2, #1
{
 800aa0e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800aa10:	0011      	movs	r1, r2
 800aa12:	4803      	ldr	r0, [pc, #12]	; (800aa20 <DESELECT+0x14>)
 800aa14:	f004 fb72 	bl	800f0fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800aa18:	2001      	movs	r0, #1
 800aa1a:	f004 f8a5 	bl	800eb68 <HAL_Delay>
}
 800aa1e:	bd10      	pop	{r4, pc}
 800aa20:	48000c00 	.word	0x48000c00

0800aa24 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800aa24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dummy, data;
	dummy = 0xFF;
 800aa26:	210e      	movs	r1, #14
 800aa28:	23ff      	movs	r3, #255	; 0xff

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800aa2a:	4809      	ldr	r0, [pc, #36]	; (800aa50 <SPI_RxByte+0x2c>)
	dummy = 0xFF;
 800aa2c:	4469      	add	r1, sp
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800aa2e:	6804      	ldr	r4, [r0, #0]
	dummy = 0xFF;
 800aa30:	700b      	strb	r3, [r1, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800aa32:	3bfd      	subs	r3, #253	; 0xfd
 800aa34:	68a2      	ldr	r2, [r4, #8]
 800aa36:	421a      	tst	r2, r3
 800aa38:	d0fc      	beq.n	800aa34 <SPI_RxByte+0x10>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800aa3a:	240f      	movs	r4, #15
 800aa3c:	2364      	movs	r3, #100	; 0x64
 800aa3e:	446c      	add	r4, sp
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	0022      	movs	r2, r4
 800aa44:	3b63      	subs	r3, #99	; 0x63
 800aa46:	f006 fa07 	bl	8010e58 <HAL_SPI_TransmitReceive>

	return data;
 800aa4a:	7820      	ldrb	r0, [r4, #0]
}
 800aa4c:	b004      	add	sp, #16
 800aa4e:	bd10      	pop	{r4, pc}
 800aa50:	200003d8 	.word	0x200003d8

0800aa54 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void) 
{
 800aa54:	b513      	push	{r0, r1, r4, lr}
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
 800aa56:	f7ff ffd9 	bl	800aa0c <DESELECT>
 800aa5a:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++)
	{
		SPI_TxByte(0xFF);
 800aa5c:	20ff      	movs	r0, #255	; 0xff
	for(int i = 0; i < 10; i++)
 800aa5e:	3c01      	subs	r4, #1
		SPI_TxByte(0xFF);
 800aa60:	f7ff ffb6 	bl	800a9d0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800aa64:	2c00      	cmp	r4, #0
 800aa66:	d1f9      	bne.n	800aa5c <SD_PowerOn+0x8>
	}

	/* slave select */
	SELECT();
 800aa68:	f7ff ffc4 	bl	800a9f4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800aa6c:	466a      	mov	r2, sp
 800aa6e:	2340      	movs	r3, #64	; 0x40
 800aa70:	7013      	strb	r3, [r2, #0]
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
	args[5] = 0x95;		/* CRC */
 800aa72:	2395      	movs	r3, #149	; 0x95
	args[1] = 0;
 800aa74:	7054      	strb	r4, [r2, #1]
	args[2] = 0;
 800aa76:	7094      	strb	r4, [r2, #2]
	args[3] = 0;
 800aa78:	70d4      	strb	r4, [r2, #3]
	args[4] = 0;
 800aa7a:	7114      	strb	r4, [r2, #4]

	SPI_TxBuffer(args, sizeof(args));
 800aa7c:	2106      	movs	r1, #6
 800aa7e:	4668      	mov	r0, sp

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800aa80:	2480      	movs	r4, #128	; 0x80
	args[5] = 0x95;		/* CRC */
 800aa82:	7153      	strb	r3, [r2, #5]
	SPI_TxBuffer(args, sizeof(args));
 800aa84:	f7ff ff94 	bl	800a9b0 <SPI_TxBuffer>
	while ((SPI_RxByte() != 0x01) && cnt)
 800aa88:	01a4      	lsls	r4, r4, #6
 800aa8a:	f7ff ffcb 	bl	800aa24 <SPI_RxByte>
 800aa8e:	2801      	cmp	r0, #1
 800aa90:	d002      	beq.n	800aa98 <SD_PowerOn+0x44>
 800aa92:	3c01      	subs	r4, #1
 800aa94:	2c00      	cmp	r4, #0
 800aa96:	d1f8      	bne.n	800aa8a <SD_PowerOn+0x36>
	{
		cnt--;
	}

	DESELECT();
 800aa98:	f7ff ffb8 	bl	800aa0c <DESELECT>
	SPI_TxByte(0XFF);
 800aa9c:	20ff      	movs	r0, #255	; 0xff
 800aa9e:	f7ff ff97 	bl	800a9d0 <SPI_TxByte>

	PowerFlag = 1;
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4b01      	ldr	r3, [pc, #4]	; (800aaac <SD_PowerOn+0x58>)
 800aaa6:	701a      	strb	r2, [r3, #0]
}
 800aaa8:	bd13      	pop	{r0, r1, r4, pc}
 800aaaa:	46c0      	nop			; (mov r8, r8)
 800aaac:	20000345 	.word	0x20000345

0800aab0 <SD_ReadyWait>:
	Timer2 = 500;
 800aab0:	23fa      	movs	r3, #250	; 0xfa
{
 800aab2:	b510      	push	{r4, lr}
	Timer2 = 500;
 800aab4:	4c05      	ldr	r4, [pc, #20]	; (800aacc <SD_ReadyWait+0x1c>)
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	8023      	strh	r3, [r4, #0]
		res = SPI_RxByte();
 800aaba:	f7ff ffb3 	bl	800aa24 <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 800aabe:	28ff      	cmp	r0, #255	; 0xff
 800aac0:	d002      	beq.n	800aac8 <SD_ReadyWait+0x18>
 800aac2:	8823      	ldrh	r3, [r4, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1f8      	bne.n	800aaba <SD_ReadyWait+0xa>
}
 800aac8:	bd10      	pop	{r4, pc}
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	20000348 	.word	0x20000348

0800aad0 <SD_TxDataBlock>:
}

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	0006      	movs	r6, r0
 800aad4:	000d      	movs	r5, r1
 800aad6:	2400      	movs	r4, #0
	uint8_t resp;
	uint8_t i = 0;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800aad8:	f7ff ffea 	bl	800aab0 <SD_ReadyWait>
 800aadc:	0003      	movs	r3, r0
 800aade:	0020      	movs	r0, r4
 800aae0:	2bff      	cmp	r3, #255	; 0xff
 800aae2:	d124      	bne.n	800ab2e <SD_TxDataBlock+0x5e>

	/* transmit token */
	SPI_TxByte(token);
 800aae4:	0028      	movs	r0, r5
 800aae6:	f7ff ff73 	bl	800a9d0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800aaea:	2dfd      	cmp	r5, #253	; 0xfd
 800aaec:	d019      	beq.n	800ab22 <SD_TxDataBlock+0x52>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800aaee:	2180      	movs	r1, #128	; 0x80
 800aaf0:	0030      	movs	r0, r6
 800aaf2:	0089      	lsls	r1, r1, #2
 800aaf4:	f7ff ff5c 	bl	800a9b0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
		SPI_RxByte();
 800aaf8:	2541      	movs	r5, #65	; 0x41
		SPI_RxByte();
 800aafa:	f7ff ff93 	bl	800aa24 <SPI_RxByte>
		while (i <= 64)
		{
			resp = SPI_RxByte();

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800aafe:	261f      	movs	r6, #31
		SPI_RxByte();
 800ab00:	f7ff ff90 	bl	800aa24 <SPI_RxByte>
			resp = SPI_RxByte();
 800ab04:	f7ff ff8e 	bl	800aa24 <SPI_RxByte>
			if ((resp & 0x1F) == 0x05) break;
 800ab08:	0003      	movs	r3, r0
			resp = SPI_RxByte();
 800ab0a:	0004      	movs	r4, r0
			if ((resp & 0x1F) == 0x05) break;
 800ab0c:	4033      	ands	r3, r6
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	d003      	beq.n	800ab1a <SD_TxDataBlock+0x4a>
		while (i <= 64)
 800ab12:	3d01      	subs	r5, #1
 800ab14:	b2ed      	uxtb	r5, r5
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	d1f4      	bne.n	800ab04 <SD_TxDataBlock+0x34>
			i++;
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800ab1a:	f7ff ff83 	bl	800aa24 <SPI_RxByte>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d0fb      	beq.n	800ab1a <SD_TxDataBlock+0x4a>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800ab22:	201f      	movs	r0, #31
 800ab24:	4004      	ands	r4, r0
 800ab26:	3c05      	subs	r4, #5
 800ab28:	4263      	negs	r3, r4
 800ab2a:	415c      	adcs	r4, r3
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800ab2c:	b2e0      	uxtb	r0, r4

	return FALSE;
}
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}

0800ab30 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	0005      	movs	r5, r0
 800ab34:	000c      	movs	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800ab36:	f7ff ffbb 	bl	800aab0 <SD_ReadyWait>
 800ab3a:	0003      	movs	r3, r0
 800ab3c:	20ff      	movs	r0, #255	; 0xff
 800ab3e:	4283      	cmp	r3, r0
 800ab40:	d126      	bne.n	800ab90 <SD_SendCmd+0x60>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800ab42:	0028      	movs	r0, r5
 800ab44:	f7ff ff44 	bl	800a9d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800ab48:	0e20      	lsrs	r0, r4, #24
 800ab4a:	f7ff ff41 	bl	800a9d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800ab4e:	0c20      	lsrs	r0, r4, #16
 800ab50:	b2c0      	uxtb	r0, r0
 800ab52:	f7ff ff3d 	bl	800a9d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800ab56:	0a20      	lsrs	r0, r4, #8
 800ab58:	b2c0      	uxtb	r0, r0
 800ab5a:	f7ff ff39 	bl	800a9d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800ab5e:	b2e0      	uxtb	r0, r4
 800ab60:	f7ff ff36 	bl	800a9d0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800ab64:	2095      	movs	r0, #149	; 0x95
 800ab66:	2d40      	cmp	r5, #64	; 0x40
 800ab68:	d003      	beq.n	800ab72 <SD_SendCmd+0x42>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800ab6a:	380e      	subs	r0, #14
 800ab6c:	2d48      	cmp	r5, #72	; 0x48
 800ab6e:	d000      	beq.n	800ab72 <SD_SendCmd+0x42>
	else crc = 1;
 800ab70:	3886      	subs	r0, #134	; 0x86

	/* transmit CRC */
	SPI_TxByte(crc);
 800ab72:	f7ff ff2d 	bl	800a9d0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800ab76:	2d4c      	cmp	r5, #76	; 0x4c
 800ab78:	d101      	bne.n	800ab7e <SD_SendCmd+0x4e>
 800ab7a:	f7ff ff53 	bl	800aa24 <SPI_RxByte>
	else crc = 1;
 800ab7e:	240a      	movs	r4, #10

	/* receive response */
	uint8_t n = 10;
	do {
		res = SPI_RxByte();
 800ab80:	f7ff ff50 	bl	800aa24 <SPI_RxByte>
	} while ((res & 0x80) && --n);
 800ab84:	0603      	lsls	r3, r0, #24
 800ab86:	d503      	bpl.n	800ab90 <SD_SendCmd+0x60>
 800ab88:	3c01      	subs	r4, #1
 800ab8a:	b2e4      	uxtb	r4, r4
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	d1f7      	bne.n	800ab80 <SD_SendCmd+0x50>

	return res;
}
 800ab90:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab94 <SD_RxDataBlock>:
	Timer1 = 200;
 800ab94:	23c8      	movs	r3, #200	; 0xc8
{
 800ab96:	b570      	push	{r4, r5, r6, lr}
 800ab98:	0005      	movs	r5, r0
 800ab9a:	000c      	movs	r4, r1
	Timer1 = 200;
 800ab9c:	4e0d      	ldr	r6, [pc, #52]	; (800abd4 <SD_RxDataBlock+0x40>)
 800ab9e:	8033      	strh	r3, [r6, #0]
		token = SPI_RxByte();
 800aba0:	f7ff ff40 	bl	800aa24 <SPI_RxByte>
 800aba4:	0003      	movs	r3, r0
	} while((token == 0xFF) && Timer1);
 800aba6:	28ff      	cmp	r0, #255	; 0xff
 800aba8:	d103      	bne.n	800abb2 <SD_RxDataBlock+0x1e>
 800abaa:	8830      	ldrh	r0, [r6, #0]
 800abac:	2800      	cmp	r0, #0
 800abae:	d1f7      	bne.n	800aba0 <SD_RxDataBlock+0xc>
}
 800abb0:	bd70      	pop	{r4, r5, r6, pc}
	if(token != 0xFE) return FALSE;
 800abb2:	2000      	movs	r0, #0
 800abb4:	2bfe      	cmp	r3, #254	; 0xfe
 800abb6:	d1fb      	bne.n	800abb0 <SD_RxDataBlock+0x1c>
 800abb8:	0026      	movs	r6, r4
	*buff = SPI_RxByte();
 800abba:	f7ff ff33 	bl	800aa24 <SPI_RxByte>
 800abbe:	192b      	adds	r3, r5, r4
 800abc0:	4272      	negs	r2, r6
 800abc2:	5498      	strb	r0, [r3, r2]
	} while(len--);
 800abc4:	3e01      	subs	r6, #1
 800abc6:	d2f8      	bcs.n	800abba <SD_RxDataBlock+0x26>
	SPI_RxByte();
 800abc8:	f7ff ff2c 	bl	800aa24 <SPI_RxByte>
	SPI_RxByte();
 800abcc:	f7ff ff2a 	bl	800aa24 <SPI_RxByte>
 800abd0:	2001      	movs	r0, #1
 800abd2:	e7ed      	b.n	800abb0 <SD_RxDataBlock+0x1c>
 800abd4:	20000346 	.word	0x20000346

0800abd8 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800abd8:	2301      	movs	r3, #1
{
 800abda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(drv) return STA_NOINIT;
 800abdc:	2800      	cmp	r0, #0
 800abde:	d108      	bne.n	800abf2 <SD_disk_initialize+0x1a>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800abe0:	2502      	movs	r5, #2
 800abe2:	2202      	movs	r2, #2
 800abe4:	4e46      	ldr	r6, [pc, #280]	; (800ad00 <SD_disk_initialize+0x128>)
 800abe6:	7833      	ldrb	r3, [r6, #0]
 800abe8:	401d      	ands	r5, r3
 800abea:	4213      	tst	r3, r2
 800abec:	d003      	beq.n	800abf6 <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 800abee:	7833      	ldrb	r3, [r6, #0]
 800abf0:	b2db      	uxtb	r3, r3
}
 800abf2:	0018      	movs	r0, r3
 800abf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	SD_PowerOn();
 800abf6:	f7ff ff2d 	bl	800aa54 <SD_PowerOn>
	SELECT();
 800abfa:	f7ff fefb 	bl	800a9f4 <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 800abfe:	0029      	movs	r1, r5
 800ac00:	2040      	movs	r0, #64	; 0x40
 800ac02:	f7ff ff95 	bl	800ab30 <SD_SendCmd>
 800ac06:	0004      	movs	r4, r0
 800ac08:	2801      	cmp	r0, #1
 800ac0a:	d122      	bne.n	800ac52 <SD_disk_initialize+0x7a>
		Timer1 = 1000;
 800ac0c:	23fa      	movs	r3, #250	; 0xfa
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ac0e:	21d5      	movs	r1, #213	; 0xd5
		Timer1 = 1000;
 800ac10:	4f3c      	ldr	r7, [pc, #240]	; (800ad04 <SD_disk_initialize+0x12c>)
 800ac12:	009b      	lsls	r3, r3, #2
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ac14:	2048      	movs	r0, #72	; 0x48
 800ac16:	0049      	lsls	r1, r1, #1
		Timer1 = 1000;
 800ac18:	803b      	strh	r3, [r7, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ac1a:	f7ff ff89 	bl	800ab30 <SD_SendCmd>
 800ac1e:	2801      	cmp	r0, #1
 800ac20:	d13f      	bne.n	800aca2 <SD_disk_initialize+0xca>
				ocr[n] = SPI_RxByte();
 800ac22:	f7ff feff 	bl	800aa24 <SPI_RxByte>
 800ac26:	ac01      	add	r4, sp, #4
 800ac28:	5560      	strb	r0, [r4, r5]
			for (n = 0; n < 4; n++)
 800ac2a:	3501      	adds	r5, #1
 800ac2c:	2d04      	cmp	r5, #4
 800ac2e:	d1f8      	bne.n	800ac22 <SD_disk_initialize+0x4a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800ac30:	78a3      	ldrb	r3, [r4, #2]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d10d      	bne.n	800ac52 <SD_disk_initialize+0x7a>
 800ac36:	78e3      	ldrb	r3, [r4, #3]
 800ac38:	2baa      	cmp	r3, #170	; 0xaa
 800ac3a:	d10a      	bne.n	800ac52 <SD_disk_initialize+0x7a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ac3c:	2580      	movs	r5, #128	; 0x80
 800ac3e:	05ed      	lsls	r5, r5, #23
 800ac40:	2100      	movs	r1, #0
 800ac42:	2077      	movs	r0, #119	; 0x77
 800ac44:	f7ff ff74 	bl	800ab30 <SD_SendCmd>
 800ac48:	2801      	cmp	r0, #1
 800ac4a:	d904      	bls.n	800ac56 <SD_disk_initialize+0x7e>
				} while (Timer1);
 800ac4c:	883b      	ldrh	r3, [r7, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1f6      	bne.n	800ac40 <SD_disk_initialize+0x68>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800ac52:	2400      	movs	r4, #0
 800ac54:	e018      	b.n	800ac88 <SD_disk_initialize+0xb0>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ac56:	0029      	movs	r1, r5
 800ac58:	2069      	movs	r0, #105	; 0x69
 800ac5a:	f7ff ff69 	bl	800ab30 <SD_SendCmd>
 800ac5e:	1e01      	subs	r1, r0, #0
 800ac60:	d1f4      	bne.n	800ac4c <SD_disk_initialize+0x74>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800ac62:	883b      	ldrh	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0f4      	beq.n	800ac52 <SD_disk_initialize+0x7a>
 800ac68:	207a      	movs	r0, #122	; 0x7a
 800ac6a:	f7ff ff61 	bl	800ab30 <SD_SendCmd>
 800ac6e:	1e05      	subs	r5, r0, #0
 800ac70:	d1ef      	bne.n	800ac52 <SD_disk_initialize+0x7a>
						ocr[n] = SPI_RxByte();
 800ac72:	f7ff fed7 	bl	800aa24 <SPI_RxByte>
 800ac76:	5560      	strb	r0, [r4, r5]
					for (n = 0; n < 4; n++)
 800ac78:	3501      	adds	r5, #1
 800ac7a:	2d04      	cmp	r5, #4
 800ac7c:	d1f9      	bne.n	800ac72 <SD_disk_initialize+0x9a>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800ac7e:	7823      	ldrb	r3, [r4, #0]
 800ac80:	240c      	movs	r4, #12
 800ac82:	065b      	lsls	r3, r3, #25
 800ac84:	d400      	bmi.n	800ac88 <SD_disk_initialize+0xb0>
 800ac86:	002c      	movs	r4, r5
	CardType = type;
 800ac88:	4b1f      	ldr	r3, [pc, #124]	; (800ad08 <SD_disk_initialize+0x130>)
 800ac8a:	701c      	strb	r4, [r3, #0]
	DESELECT();
 800ac8c:	f7ff febe 	bl	800aa0c <DESELECT>
	SPI_RxByte();
 800ac90:	f7ff fec8 	bl	800aa24 <SPI_RxByte>
	if (type)
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	d02f      	beq.n	800acf8 <SD_disk_initialize+0x120>
		Stat &= ~STA_NOINIT;
 800ac98:	2201      	movs	r2, #1
 800ac9a:	7833      	ldrb	r3, [r6, #0]
 800ac9c:	4393      	bics	r3, r2
 800ac9e:	7033      	strb	r3, [r6, #0]
 800aca0:	e7a5      	b.n	800abee <SD_disk_initialize+0x16>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800aca2:	0029      	movs	r1, r5
 800aca4:	2077      	movs	r0, #119	; 0x77
 800aca6:	f7ff ff43 	bl	800ab30 <SD_SendCmd>
 800acaa:	2801      	cmp	r0, #1
 800acac:	d806      	bhi.n	800acbc <SD_disk_initialize+0xe4>
 800acae:	0029      	movs	r1, r5
 800acb0:	2069      	movs	r0, #105	; 0x69
 800acb2:	f7ff ff3d 	bl	800ab30 <SD_SendCmd>
 800acb6:	2801      	cmp	r0, #1
 800acb8:	d800      	bhi.n	800acbc <SD_disk_initialize+0xe4>
 800acba:	2402      	movs	r4, #2
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800acbc:	2100      	movs	r1, #0
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800acbe:	2041      	movs	r0, #65	; 0x41
				if (type == CT_SD1)
 800acc0:	2c02      	cmp	r4, #2
 800acc2:	d10a      	bne.n	800acda <SD_disk_initialize+0x102>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800acc4:	2077      	movs	r0, #119	; 0x77
 800acc6:	f7ff ff33 	bl	800ab30 <SD_SendCmd>
 800acca:	2801      	cmp	r0, #1
 800accc:	d903      	bls.n	800acd6 <SD_disk_initialize+0xfe>
			} while (Timer1);
 800acce:	883b      	ldrh	r3, [r7, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1f3      	bne.n	800acbc <SD_disk_initialize+0xe4>
 800acd4:	e7bd      	b.n	800ac52 <SD_disk_initialize+0x7a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800acd6:	2100      	movs	r1, #0
 800acd8:	2069      	movs	r0, #105	; 0x69
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800acda:	f7ff ff29 	bl	800ab30 <SD_SendCmd>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d1f5      	bne.n	800acce <SD_disk_initialize+0xf6>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800ace2:	883b      	ldrh	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0b4      	beq.n	800ac52 <SD_disk_initialize+0x7a>
 800ace8:	2180      	movs	r1, #128	; 0x80
 800acea:	2050      	movs	r0, #80	; 0x50
 800acec:	0089      	lsls	r1, r1, #2
 800acee:	f7ff ff1f 	bl	800ab30 <SD_SendCmd>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d0c8      	beq.n	800ac88 <SD_disk_initialize+0xb0>
 800acf6:	e7ac      	b.n	800ac52 <SD_disk_initialize+0x7a>
	PowerFlag = 0;
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <SD_disk_initialize+0x134>)
 800acfa:	701c      	strb	r4, [r3, #0]
}
 800acfc:	e777      	b.n	800abee <SD_disk_initialize+0x16>
 800acfe:	46c0      	nop			; (mov r8, r8)
 800ad00:	200000c0 	.word	0x200000c0
 800ad04:	20000346 	.word	0x20000346
 800ad08:	20000344 	.word	0x20000344
 800ad0c:	20000345 	.word	0x20000345

0800ad10 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 800ad10:	2301      	movs	r3, #1
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d102      	bne.n	800ad1c <SD_disk_status+0xc>
	return Stat;
 800ad16:	4b02      	ldr	r3, [pc, #8]	; (800ad20 <SD_disk_status+0x10>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	b2db      	uxtb	r3, r3
}
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	4770      	bx	lr
 800ad20:	200000c0 	.word	0x200000c0

0800ad24 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	0007      	movs	r7, r0
 800ad28:	000d      	movs	r5, r1
 800ad2a:	0016      	movs	r6, r2
 800ad2c:	001c      	movs	r4, r3
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800ad2e:	2004      	movs	r0, #4
 800ad30:	2f00      	cmp	r7, #0
 800ad32:	d123      	bne.n	800ad7c <SD_disk_read+0x58>
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d021      	beq.n	800ad7c <SD_disk_read+0x58>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad38:	4b1d      	ldr	r3, [pc, #116]	; (800adb0 <SD_disk_read+0x8c>)
 800ad3a:	3801      	subs	r0, #1
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	07db      	lsls	r3, r3, #31
 800ad40:	d41c      	bmi.n	800ad7c <SD_disk_read+0x58>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800ad42:	4b1c      	ldr	r3, [pc, #112]	; (800adb4 <SD_disk_read+0x90>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	075b      	lsls	r3, r3, #29
 800ad48:	d400      	bmi.n	800ad4c <SD_disk_read+0x28>
 800ad4a:	0256      	lsls	r6, r2, #9

	SELECT();
 800ad4c:	f7ff fe52 	bl	800a9f4 <SELECT>

	if (count == 1)
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800ad50:	0031      	movs	r1, r6
	if (count == 1)
 800ad52:	2c01      	cmp	r4, #1
 800ad54:	d113      	bne.n	800ad7e <SD_disk_read+0x5a>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800ad56:	2051      	movs	r0, #81	; 0x51
 800ad58:	f7ff feea 	bl	800ab30 <SD_SendCmd>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d106      	bne.n	800ad6e <SD_disk_read+0x4a>
 800ad60:	2180      	movs	r1, #128	; 0x80
 800ad62:	0028      	movs	r0, r5
 800ad64:	0089      	lsls	r1, r1, #2
 800ad66:	f7ff ff15 	bl	800ab94 <SD_RxDataBlock>
 800ad6a:	4244      	negs	r4, r0
 800ad6c:	4144      	adcs	r4, r0

	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
 800ad6e:	1e63      	subs	r3, r4, #1
 800ad70:	419c      	sbcs	r4, r3
	DESELECT();
 800ad72:	f7ff fe4b 	bl	800aa0c <DESELECT>
	SPI_RxByte();
 800ad76:	f7ff fe55 	bl	800aa24 <SPI_RxByte>
	return count ? RES_ERROR : RES_OK;
 800ad7a:	b2e0      	uxtb	r0, r4
}
 800ad7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (SD_SendCmd(CMD18, sector) == 0)
 800ad7e:	2052      	movs	r0, #82	; 0x52
 800ad80:	f7ff fed6 	bl	800ab30 <SD_SendCmd>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d1f2      	bne.n	800ad6e <SD_disk_read+0x4a>
				if (!SD_RxDataBlock(buff, 512)) break;
 800ad88:	2680      	movs	r6, #128	; 0x80
 800ad8a:	00b6      	lsls	r6, r6, #2
 800ad8c:	0031      	movs	r1, r6
 800ad8e:	0028      	movs	r0, r5
 800ad90:	f7ff ff00 	bl	800ab94 <SD_RxDataBlock>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d005      	beq.n	800ada4 <SD_disk_read+0x80>
				buff += 512;
 800ad98:	2380      	movs	r3, #128	; 0x80
			} while (--count);
 800ad9a:	3c01      	subs	r4, #1
				buff += 512;
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	18ed      	adds	r5, r5, r3
			} while (--count);
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	d1f3      	bne.n	800ad8c <SD_disk_read+0x68>
			SD_SendCmd(CMD12, 0);
 800ada4:	2100      	movs	r1, #0
 800ada6:	204c      	movs	r0, #76	; 0x4c
 800ada8:	f7ff fec2 	bl	800ab30 <SD_SendCmd>
 800adac:	e7df      	b.n	800ad6e <SD_disk_read+0x4a>
 800adae:	46c0      	nop			; (mov r8, r8)
 800adb0:	200000c0 	.word	0x200000c0
 800adb4:	20000344 	.word	0x20000344

0800adb8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	0007      	movs	r7, r0
 800adbc:	000d      	movs	r5, r1
 800adbe:	0016      	movs	r6, r2
 800adc0:	001c      	movs	r4, r3
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800adc2:	2004      	movs	r0, #4
 800adc4:	2f00      	cmp	r7, #0
 800adc6:	d127      	bne.n	800ae18 <SD_disk_write+0x60>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d025      	beq.n	800ae18 <SD_disk_write+0x60>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800adcc:	4b25      	ldr	r3, [pc, #148]	; (800ae64 <SD_disk_write+0xac>)
 800adce:	3801      	subs	r0, #1
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	07d2      	lsls	r2, r2, #31
 800add4:	d420      	bmi.n	800ae18 <SD_disk_write+0x60>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	2304      	movs	r3, #4
 800adda:	3801      	subs	r0, #1
 800addc:	421a      	tst	r2, r3
 800adde:	d11b      	bne.n	800ae18 <SD_disk_write+0x60>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800ade0:	4f21      	ldr	r7, [pc, #132]	; (800ae68 <SD_disk_write+0xb0>)
 800ade2:	783a      	ldrb	r2, [r7, #0]
 800ade4:	421a      	tst	r2, r3
 800ade6:	d100      	bne.n	800adea <SD_disk_write+0x32>
 800ade8:	0276      	lsls	r6, r6, #9

	SELECT();
 800adea:	f7ff fe03 	bl	800a9f4 <SELECT>

	if (count == 1)
 800adee:	2c01      	cmp	r4, #1
 800adf0:	d113      	bne.n	800ae1a <SD_disk_write+0x62>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800adf2:	0031      	movs	r1, r6
 800adf4:	2058      	movs	r0, #88	; 0x58
 800adf6:	f7ff fe9b 	bl	800ab30 <SD_SendCmd>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d130      	bne.n	800ae60 <SD_disk_write+0xa8>
 800adfe:	21fe      	movs	r1, #254	; 0xfe
 800ae00:	0028      	movs	r0, r5
 800ae02:	f7ff fe65 	bl	800aad0 <SD_TxDataBlock>
 800ae06:	4244      	negs	r4, r0
 800ae08:	4144      	adcs	r4, r0

	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
 800ae0a:	1e63      	subs	r3, r4, #1
 800ae0c:	419c      	sbcs	r4, r3
	DESELECT();
 800ae0e:	f7ff fdfd 	bl	800aa0c <DESELECT>
	SPI_RxByte();
 800ae12:	f7ff fe07 	bl	800aa24 <SPI_RxByte>
	return count ? RES_ERROR : RES_OK;
 800ae16:	b2e0      	uxtb	r0, r4
}
 800ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (CardType & CT_SD1)
 800ae1a:	783b      	ldrb	r3, [r7, #0]
 800ae1c:	079b      	lsls	r3, r3, #30
 800ae1e:	d507      	bpl.n	800ae30 <SD_disk_write+0x78>
			SD_SendCmd(CMD55, 0);
 800ae20:	2100      	movs	r1, #0
 800ae22:	2077      	movs	r0, #119	; 0x77
 800ae24:	f7ff fe84 	bl	800ab30 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800ae28:	0021      	movs	r1, r4
 800ae2a:	2057      	movs	r0, #87	; 0x57
 800ae2c:	f7ff fe80 	bl	800ab30 <SD_SendCmd>
		if (SD_SendCmd(CMD25, sector) == 0)
 800ae30:	0031      	movs	r1, r6
 800ae32:	2059      	movs	r0, #89	; 0x59
 800ae34:	f7ff fe7c 	bl	800ab30 <SD_SendCmd>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d1e6      	bne.n	800ae0a <SD_disk_write+0x52>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ae3c:	21fc      	movs	r1, #252	; 0xfc
 800ae3e:	0028      	movs	r0, r5
 800ae40:	f7ff fe46 	bl	800aad0 <SD_TxDataBlock>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d005      	beq.n	800ae54 <SD_disk_write+0x9c>
				buff += 512;
 800ae48:	2380      	movs	r3, #128	; 0x80
			} while (--count);
 800ae4a:	3c01      	subs	r4, #1
				buff += 512;
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	18ed      	adds	r5, r5, r3
			} while (--count);
 800ae50:	2c00      	cmp	r4, #0
 800ae52:	d1f3      	bne.n	800ae3c <SD_disk_write+0x84>
			if(!SD_TxDataBlock(0, 0xFD))
 800ae54:	21fd      	movs	r1, #253	; 0xfd
 800ae56:	2000      	movs	r0, #0
 800ae58:	f7ff fe3a 	bl	800aad0 <SD_TxDataBlock>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d1d4      	bne.n	800ae0a <SD_disk_write+0x52>
				count = 1;
 800ae60:	2401      	movs	r4, #1
 800ae62:	e7d2      	b.n	800ae0a <SD_disk_write+0x52>
 800ae64:	200000c0 	.word	0x200000c0
 800ae68:	20000344 	.word	0x20000344

0800ae6c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800ae6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ae6e:	0004      	movs	r4, r0
 800ae70:	000e      	movs	r6, r1
 800ae72:	0015      	movs	r5, r2
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d000      	beq.n	800ae7a <SD_disk_ioctl+0xe>
 800ae78:	e092      	b.n	800afa0 <SD_disk_ioctl+0x134>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 800ae7a:	2905      	cmp	r1, #5
 800ae7c:	d113      	bne.n	800aea6 <SD_disk_ioctl+0x3a>
	{
		switch (*ptr)
 800ae7e:	7813      	ldrb	r3, [r2, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d009      	beq.n	800ae98 <SD_disk_ioctl+0x2c>
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d00a      	beq.n	800ae9e <SD_disk_ioctl+0x32>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d000      	beq.n	800ae8e <SD_disk_ioctl+0x22>
 800ae8c:	e088      	b.n	800afa0 <SD_disk_ioctl+0x134>
	PowerFlag = 0;
 800ae8e:	4b46      	ldr	r3, [pc, #280]	; (800afa8 <SD_disk_ioctl+0x13c>)
 800ae90:	7018      	strb	r0, [r3, #0]
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 800ae92:	0020      	movs	r0, r4
 800ae94:	b004      	add	sp, #16
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
			SD_PowerOn();		/* Power On */
 800ae98:	f7ff fddc 	bl	800aa54 <SD_PowerOn>
			break;
 800ae9c:	e7f9      	b.n	800ae92 <SD_disk_ioctl+0x26>
	return PowerFlag;
 800ae9e:	4b42      	ldr	r3, [pc, #264]	; (800afa8 <SD_disk_ioctl+0x13c>)
			*(ptr + 1) = SD_CheckPower();
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	7053      	strb	r3, [r2, #1]
			break;
 800aea4:	e7f5      	b.n	800ae92 <SD_disk_ioctl+0x26>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aea6:	4b41      	ldr	r3, [pc, #260]	; (800afac <SD_disk_ioctl+0x140>)
 800aea8:	781a      	ldrb	r2, [r3, #0]
 800aeaa:	2301      	movs	r3, #1
 800aeac:	0014      	movs	r4, r2
 800aeae:	401c      	ands	r4, r3
 800aeb0:	421a      	tst	r2, r3
 800aeb2:	d177      	bne.n	800afa4 <SD_disk_ioctl+0x138>
		SELECT();
 800aeb4:	f7ff fd9e 	bl	800a9f4 <SELECT>
		switch (ctrl)
 800aeb8:	2e0d      	cmp	r6, #13
 800aeba:	d867      	bhi.n	800af8c <SD_disk_ioctl+0x120>
 800aebc:	0030      	movs	r0, r6
 800aebe:	f7fc fdb5 	bl	8007a2c <__gnu_thumb1_case_uqi>
 800aec2:	0748      	.short	0x0748
 800aec4:	65656544 	.word	0x65656544
 800aec8:	65656565 	.word	0x65656565
 800aecc:	5f5c4f65 	.word	0x5f5c4f65
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800aed0:	2100      	movs	r1, #0
 800aed2:	2049      	movs	r0, #73	; 0x49
 800aed4:	f7ff fe2c 	bl	800ab30 <SD_SendCmd>
 800aed8:	1e04      	subs	r4, r0, #0
 800aeda:	d005      	beq.n	800aee8 <SD_disk_ioctl+0x7c>
	res = RES_ERROR;
 800aedc:	2401      	movs	r4, #1
		DESELECT();
 800aede:	f7ff fd95 	bl	800aa0c <DESELECT>
		SPI_RxByte();
 800aee2:	f7ff fd9f 	bl	800aa24 <SPI_RxByte>
 800aee6:	e7d4      	b.n	800ae92 <SD_disk_ioctl+0x26>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800aee8:	2110      	movs	r1, #16
 800aeea:	4668      	mov	r0, sp
 800aeec:	f7ff fe52 	bl	800ab94 <SD_RxDataBlock>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d0f3      	beq.n	800aedc <SD_disk_ioctl+0x70>
				if ((csd[0] >> 6) == 1)
 800aef4:	466a      	mov	r2, sp
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800aef6:	466b      	mov	r3, sp
				if ((csd[0] >> 6) == 1)
 800aef8:	7812      	ldrb	r2, [r2, #0]
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800aefa:	7a59      	ldrb	r1, [r3, #9]
				if ((csd[0] >> 6) == 1)
 800aefc:	0992      	lsrs	r2, r2, #6
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800aefe:	7a1b      	ldrb	r3, [r3, #8]
				if ((csd[0] >> 6) == 1)
 800af00:	2a01      	cmp	r2, #1
 800af02:	d106      	bne.n	800af12 <SD_disk_ioctl+0xa6>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800af04:	021b      	lsls	r3, r3, #8
 800af06:	3101      	adds	r1, #1
 800af08:	185b      	adds	r3, r3, r1
					*(DWORD*) buff = (DWORD) csize << 10;
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	029b      	lsls	r3, r3, #10
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800af0e:	602b      	str	r3, [r5, #0]
 800af10:	e7e5      	b.n	800aede <SD_disk_ioctl+0x72>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800af12:	466a      	mov	r2, sp
 800af14:	79d2      	ldrb	r2, [r2, #7]
 800af16:	099b      	lsrs	r3, r3, #6
 800af18:	0092      	lsls	r2, r2, #2
 800af1a:	189b      	adds	r3, r3, r2
 800af1c:	466a      	mov	r2, sp
 800af1e:	20c0      	movs	r0, #192	; 0xc0
 800af20:	7992      	ldrb	r2, [r2, #6]
 800af22:	0100      	lsls	r0, r0, #4
 800af24:	0292      	lsls	r2, r2, #10
 800af26:	4002      	ands	r2, r0
 800af28:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800af2a:	189b      	adds	r3, r3, r2
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800af2c:	466a      	mov	r2, sp
 800af2e:	200f      	movs	r0, #15
 800af30:	7952      	ldrb	r2, [r2, #5]
 800af32:	0049      	lsls	r1, r1, #1
 800af34:	4002      	ands	r2, r0
 800af36:	4668      	mov	r0, sp
 800af38:	7a80      	ldrb	r0, [r0, #10]
 800af3a:	09c0      	lsrs	r0, r0, #7
 800af3c:	1812      	adds	r2, r2, r0
 800af3e:	2006      	movs	r0, #6
 800af40:	4001      	ands	r1, r0
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800af42:	1852      	adds	r2, r2, r1
 800af44:	3a07      	subs	r2, #7
 800af46:	4093      	lsls	r3, r2
 800af48:	e7e1      	b.n	800af0e <SD_disk_ioctl+0xa2>
			*(WORD*) buff = 512;
 800af4a:	2380      	movs	r3, #128	; 0x80
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	802b      	strh	r3, [r5, #0]
			break;
 800af50:	e7c5      	b.n	800aede <SD_disk_ioctl+0x72>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800af52:	f7ff fdad 	bl	800aab0 <SD_ReadyWait>
 800af56:	38ff      	subs	r0, #255	; 0xff
 800af58:	1e43      	subs	r3, r0, #1
 800af5a:	4198      	sbcs	r0, r3
	res = RES_ERROR;
 800af5c:	b2c4      	uxtb	r4, r0
 800af5e:	e7be      	b.n	800aede <SD_disk_ioctl+0x72>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800af60:	2100      	movs	r1, #0
 800af62:	2049      	movs	r0, #73	; 0x49
 800af64:	f7ff fde4 	bl	800ab30 <SD_SendCmd>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1b7      	bne.n	800aedc <SD_disk_ioctl+0x70>
 800af6c:	2110      	movs	r1, #16
 800af6e:	0028      	movs	r0, r5
 800af70:	f7ff fe10 	bl	800ab94 <SD_RxDataBlock>
 800af74:	4243      	negs	r3, r0
 800af76:	4158      	adcs	r0, r3
 800af78:	e7f0      	b.n	800af5c <SD_disk_ioctl+0xf0>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800af7a:	2100      	movs	r1, #0
 800af7c:	204a      	movs	r0, #74	; 0x4a
 800af7e:	e7f1      	b.n	800af64 <SD_disk_ioctl+0xf8>
			if (SD_SendCmd(CMD58, 0) == 0)
 800af80:	2100      	movs	r1, #0
 800af82:	207a      	movs	r0, #122	; 0x7a
 800af84:	f7ff fdd4 	bl	800ab30 <SD_SendCmd>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d001      	beq.n	800af90 <SD_disk_ioctl+0x124>
		switch (ctrl)
 800af8c:	2404      	movs	r4, #4
 800af8e:	e7a6      	b.n	800aede <SD_disk_ioctl+0x72>
 800af90:	1d2c      	adds	r4, r5, #4
					*ptr++ = SPI_RxByte();
 800af92:	f7ff fd47 	bl	800aa24 <SPI_RxByte>
 800af96:	7028      	strb	r0, [r5, #0]
				for (n = 0; n < 4; n++)
 800af98:	3501      	adds	r5, #1
 800af9a:	42a5      	cmp	r5, r4
 800af9c:	d1f9      	bne.n	800af92 <SD_disk_ioctl+0x126>
 800af9e:	e7f5      	b.n	800af8c <SD_disk_ioctl+0x120>
		switch (*ptr)
 800afa0:	2404      	movs	r4, #4
 800afa2:	e776      	b.n	800ae92 <SD_disk_ioctl+0x26>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800afa4:	2403      	movs	r4, #3
 800afa6:	e774      	b.n	800ae92 <SD_disk_ioctl+0x26>
 800afa8:	20000345 	.word	0x20000345
 800afac:	200000c0 	.word	0x200000c0

0800afb0 <flash_erase>:

/* Function pointer for jumping to user application. */
typedef void (*fnc_ptr)(void);

flash_status_t flash_erase(uint32_t page, uint32_t num_page)
{
 800afb0:	b530      	push	{r4, r5, lr}
 800afb2:	b085      	sub	sp, #20
 800afb4:	000d      	movs	r5, r1
 800afb6:	0004      	movs	r4, r0
  uint32_t pageAddress = FLASH_BASE + page*FLASH_PAGE_SIZE;
  flash_status_t status = FLASH_OK;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 800afb8:	f003 fe64 	bl	800ec84 <HAL_FLASH_Unlock>
#if 1
  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800afbc:	2234      	movs	r2, #52	; 0x34
 800afbe:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <flash_erase+0x40>)
  erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
  erase_init.PageAddress = pageAddress;
  erase_init.NbPages = num_page;

  /* Do the actual erasing */
  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &error))
 800afc0:	4669      	mov	r1, sp
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800afc2:	60da      	str	r2, [r3, #12]
  uint32_t error = 0u;
 800afc4:	2300      	movs	r3, #0
 800afc6:	9300      	str	r3, [sp, #0]
  erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800afc8:	9301      	str	r3, [sp, #4]
  uint32_t pageAddress = FLASH_BASE + page*FLASH_PAGE_SIZE;
 800afca:	2380      	movs	r3, #128	; 0x80
 800afcc:	025b      	lsls	r3, r3, #9
 800afce:	18e4      	adds	r4, r4, r3
 800afd0:	02e4      	lsls	r4, r4, #11
  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &error))
 800afd2:	a801      	add	r0, sp, #4
  erase_init.PageAddress = pageAddress;
 800afd4:	9402      	str	r4, [sp, #8]
  erase_init.NbPages = num_page;
 800afd6:	9503      	str	r5, [sp, #12]
  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &error))
 800afd8:	f003 ff02 	bl	800ede0 <HAL_FLASHEx_Erase>
 800afdc:	0004      	movs	r4, r0
 800afde:	1e63      	subs	r3, r4, #1
 800afe0:	419c      	sbcs	r4, r3
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
		/*Error occurred while page erase.*/
		return;
	}
#endif
  HAL_FLASH_Lock();
 800afe2:	f003 fe63 	bl	800ecac <HAL_FLASH_Lock>
  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &error))
 800afe6:	4260      	negs	r0, r4

  return status;
 800afe8:	b2c0      	uxtb	r0, r0
}
 800afea:	b005      	add	sp, #20
 800afec:	bd30      	pop	{r4, r5, pc}
 800afee:	46c0      	nop			; (mov r8, r8)
 800aff0:	40022000 	.word	0x40022000

0800aff4 <flash_write>:

flash_status_t flash_write(uint32_t address, uint64_t *buf, uint32_t len)
{
 800aff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  flash_status_t status = FLASH_OK;

  HAL_FLASH_Unlock();

  /* Loop through the array. */
  for (uint32_t i = 0u; (i < len) && (FLASH_OK == status); i++)
 800aff6:	2700      	movs	r7, #0
{
 800aff8:	0006      	movs	r6, r0
 800affa:	000d      	movs	r5, r1
 800affc:	9201      	str	r2, [sp, #4]
  flash_status_t status = FLASH_OK;
 800affe:	003c      	movs	r4, r7
  HAL_FLASH_Unlock();
 800b000:	f003 fe40 	bl	800ec84 <HAL_FLASH_Unlock>
  for (uint32_t i = 0u; (i < len) && (FLASH_OK == status); i++)
 800b004:	9b01      	ldr	r3, [sp, #4]
 800b006:	429f      	cmp	r7, r3
 800b008:	d001      	beq.n	800b00e <flash_write+0x1a>
 800b00a:	2c00      	cmp	r4, #0
 800b00c:	d003      	beq.n	800b016 <flash_write+0x22>
      /* Shift the address by a double word. */
      address += 8;
    }
  }

  HAL_FLASH_Lock();
 800b00e:	f003 fe4d 	bl	800ecac <HAL_FLASH_Lock>

  return status;
}
 800b012:	0020      	movs	r0, r4
 800b014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (FLASH_APP_END_ADDRESS <= address)
 800b016:	4b0e      	ldr	r3, [pc, #56]	; (800b050 <flash_write+0x5c>)
      status |= FLASH_ERROR_SIZE;
 800b018:	2401      	movs	r4, #1
    if (FLASH_APP_END_ADDRESS <= address)
 800b01a:	429e      	cmp	r6, r3
 800b01c:	d814      	bhi.n	800b048 <flash_write+0x54>
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, buf[i]))
 800b01e:	682a      	ldr	r2, [r5, #0]
 800b020:	686b      	ldr	r3, [r5, #4]
 800b022:	0031      	movs	r1, r6
 800b024:	2003      	movs	r0, #3
 800b026:	f003 fe75 	bl	800ed14 <HAL_FLASH_Program>
 800b02a:	1e04      	subs	r4, r0, #0
 800b02c:	d000      	beq.n	800b030 <flash_write+0x3c>
        status |= FLASH_ERROR_WRITE;
 800b02e:	2402      	movs	r4, #2
      if ((buf[i]) != (*(volatile uint64_t*)address))
 800b030:	6832      	ldr	r2, [r6, #0]
 800b032:	6873      	ldr	r3, [r6, #4]
 800b034:	6829      	ldr	r1, [r5, #0]
 800b036:	4291      	cmp	r1, r2
 800b038:	d102      	bne.n	800b040 <flash_write+0x4c>
 800b03a:	6869      	ldr	r1, [r5, #4]
 800b03c:	4299      	cmp	r1, r3
 800b03e:	d002      	beq.n	800b046 <flash_write+0x52>
        status |= FLASH_ERROR_READBACK;
 800b040:	2304      	movs	r3, #4
 800b042:	431c      	orrs	r4, r3
 800b044:	b2e4      	uxtb	r4, r4
      address += 8;
 800b046:	3608      	adds	r6, #8
  for (uint32_t i = 0u; (i < len) && (FLASH_OK == status); i++)
 800b048:	3701      	adds	r7, #1
 800b04a:	3508      	adds	r5, #8
 800b04c:	e7da      	b.n	800b004 <flash_write+0x10>
 800b04e:	46c0      	nop			; (mov r8, r8)
 800b050:	0801ffff 	.word	0x0801ffff

0800b054 <flash_get_page>:
  return FLASH_OK;
}

uint32_t flash_get_page(uint32_t addr)
{
  return (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800b054:	23f8      	movs	r3, #248	; 0xf8
 800b056:	061b      	lsls	r3, r3, #24
 800b058:	18c0      	adds	r0, r0, r3
 800b05a:	0ac0      	lsrs	r0, r0, #11
}
 800b05c:	4770      	bx	lr
	...

0800b060 <io_getInput>:
void io_setLedStatus(ledStatus led, uint8_t *MBReg);

static inline input io_getInput(void)
{
    input linput;
    linput.in0 = (GET_IN0 > 0) ? _OFF:_ON;
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <io_getInput+0x20>)
{
 800b062:	b082      	sub	sp, #8
    linput.in0 = (GET_IN0 > 0) ? _OFF:_ON;
 800b064:	691a      	ldr	r2, [r3, #16]
    linput.in1 = (GET_IN1 > 0) ? _OFF:_ON;
 800b066:	6919      	ldr	r1, [r3, #16]
    linput.in0 = (GET_IN0 > 0) ? _OFF:_ON;
 800b068:	2301      	movs	r3, #1
    return linput;
 800b06a:	0018      	movs	r0, r3
    linput.in0 = (GET_IN0 > 0) ? _OFF:_ON;
 800b06c:	0ad2      	lsrs	r2, r2, #11
    return linput;
 800b06e:	4390      	bics	r0, r2
 800b070:	0002      	movs	r2, r0
    linput.in1 = (GET_IN1 > 0) ? _OFF:_ON;
 800b072:	0a89      	lsrs	r1, r1, #10
    return linput;
 800b074:	438b      	bics	r3, r1
 800b076:	0218      	lsls	r0, r3, #8
 800b078:	4310      	orrs	r0, r2
}
 800b07a:	b002      	add	sp, #8
 800b07c:	4770      	bx	lr
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	48000c00 	.word	0x48000c00

0800b084 <Callback_IPAssigned>:
static void MX_TIM3_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

void Callback_IPAssigned(void) {
	ip_assigned = true;
 800b084:	2201      	movs	r2, #1
 800b086:	4b01      	ldr	r3, [pc, #4]	; (800b08c <Callback_IPAssigned+0x8>)
 800b088:	701a      	strb	r2, [r3, #0]
}
 800b08a:	4770      	bx	lr
 800b08c:	2000059c 	.word	0x2000059c

0800b090 <Callback_IPConflict>:
void Callback_IPConflict(void) {

}
 800b090:	4770      	bx	lr
	...

0800b094 <self_atof>:
	}
}

static int self_atof(char *str)
{
	int sign = 1;
 800b094:	2201      	movs	r2, #1
{
 800b096:	b5f0      	push	{r4, r5, r6, r7, lr}
	float result = 0, fraction = 0;
	uint8_t decimalPlace = 0;
	uint8_t parsingFraction = 0;

    if (*str == '-') {
 800b098:	7803      	ldrb	r3, [r0, #0]
{
 800b09a:	b085      	sub	sp, #20
 800b09c:	0005      	movs	r5, r0
	int sign = 1;
 800b09e:	9202      	str	r2, [sp, #8]
    if (*str == '-') {
 800b0a0:	2b2d      	cmp	r3, #45	; 0x2d
 800b0a2:	d102      	bne.n	800b0aa <self_atof+0x16>
        sign = -1;
 800b0a4:	3b2e      	subs	r3, #46	; 0x2e
        str++;
 800b0a6:	1885      	adds	r5, r0, r2
        sign = -1;
 800b0a8:	9302      	str	r3, [sp, #8]
    }

	while (*str && *str != '\0') {
		if (*str == '.') {
			parsingFraction = 1;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2400      	movs	r4, #0
 800b0ae:	001f      	movs	r7, r3
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	1c26      	adds	r6, r4, #0
 800b0b4:	e016      	b.n	800b0e4 <self_atof+0x50>
			str++;
 800b0b6:	3501      	adds	r5, #1
		if (*str == '.') {
 800b0b8:	282e      	cmp	r0, #46	; 0x2e
 800b0ba:	d033      	beq.n	800b124 <self_atof+0x90>
			continue;
		}

		if (*str >= '0' && *str <= '9') {
 800b0bc:	3830      	subs	r0, #48	; 0x30
 800b0be:	b2c3      	uxtb	r3, r0
 800b0c0:	2b09      	cmp	r3, #9
 800b0c2:	d80f      	bhi.n	800b0e4 <self_atof+0x50>
			if (parsingFraction) {
				fraction = fraction * 10 + (*str - '0');
 800b0c4:	f7fd fc68 	bl	8008998 <__aeabi_i2f>
			if (parsingFraction) {
 800b0c8:	9b01      	ldr	r3, [sp, #4]
				fraction = fraction * 10 + (*str - '0');
 800b0ca:	491c      	ldr	r1, [pc, #112]	; (800b13c <self_atof+0xa8>)
 800b0cc:	9003      	str	r0, [sp, #12]
			if (parsingFraction) {
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d020      	beq.n	800b114 <self_atof+0x80>
				fraction = fraction * 10 + (*str - '0');
 800b0d2:	1c20      	adds	r0, r4, #0
 800b0d4:	f7fd f956 	bl	8008384 <__aeabi_fmul>
 800b0d8:	9903      	ldr	r1, [sp, #12]
 800b0da:	f7fc fe9d 	bl	8007e18 <__aeabi_fadd>
				decimalPlace++;
 800b0de:	3701      	adds	r7, #1
				fraction = fraction * 10 + (*str - '0');
 800b0e0:	1c04      	adds	r4, r0, #0
				decimalPlace++;
 800b0e2:	b2ff      	uxtb	r7, r7
	while (*str && *str != '\0') {
 800b0e4:	7828      	ldrb	r0, [r5, #0]
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d1e5      	bne.n	800b0b6 <self_atof+0x22>

		str++;
	}

    // Adjust for the decimal point
     while (decimalPlace > 0) {
 800b0ea:	2f00      	cmp	r7, #0
 800b0ec:	d11d      	bne.n	800b12a <self_atof+0x96>
         fraction /= 10;
         decimalPlace--;
     }

     result += fraction;
     return (int)(result * sign * 100);
 800b0ee:	9802      	ldr	r0, [sp, #8]
 800b0f0:	f7fd fc52 	bl	8008998 <__aeabi_i2f>
     result += fraction;
 800b0f4:	1c21      	adds	r1, r4, #0
     return (int)(result * sign * 100);
 800b0f6:	1c05      	adds	r5, r0, #0
     result += fraction;
 800b0f8:	1c30      	adds	r0, r6, #0
 800b0fa:	f7fc fe8d 	bl	8007e18 <__aeabi_fadd>
 800b0fe:	1c01      	adds	r1, r0, #0
     return (int)(result * sign * 100);
 800b100:	1c28      	adds	r0, r5, #0
 800b102:	f7fd f93f 	bl	8008384 <__aeabi_fmul>
 800b106:	490e      	ldr	r1, [pc, #56]	; (800b140 <self_atof+0xac>)
 800b108:	f7fd f93c 	bl	8008384 <__aeabi_fmul>
 800b10c:	f7fd fc24 	bl	8008958 <__aeabi_f2iz>
}
 800b110:	b005      	add	sp, #20
 800b112:	bdf0      	pop	{r4, r5, r6, r7, pc}
				result = result * 10 + (*str - '0');
 800b114:	1c30      	adds	r0, r6, #0
 800b116:	f7fd f935 	bl	8008384 <__aeabi_fmul>
 800b11a:	9903      	ldr	r1, [sp, #12]
 800b11c:	f7fc fe7c 	bl	8007e18 <__aeabi_fadd>
 800b120:	1c06      	adds	r6, r0, #0
		str++;
 800b122:	e7df      	b.n	800b0e4 <self_atof+0x50>
			parsingFraction = 1;
 800b124:	2301      	movs	r3, #1
 800b126:	9301      	str	r3, [sp, #4]
 800b128:	e7dc      	b.n	800b0e4 <self_atof+0x50>
         fraction /= 10;
 800b12a:	1c20      	adds	r0, r4, #0
 800b12c:	4903      	ldr	r1, [pc, #12]	; (800b13c <self_atof+0xa8>)
 800b12e:	f7fd f811 	bl	8008154 <__aeabi_fdiv>
         decimalPlace--;
 800b132:	3f01      	subs	r7, #1
         fraction /= 10;
 800b134:	1c04      	adds	r4, r0, #0
         decimalPlace--;
 800b136:	b2ff      	uxtb	r7, r7
 800b138:	e7d7      	b.n	800b0ea <self_atof+0x56>
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	41200000 	.word	0x41200000
 800b140:	42c80000 	.word	0x42c80000

0800b144 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b144:	22e0      	movs	r2, #224	; 0xe0
  hspi2.Instance = SPI2;
 800b146:	4811      	ldr	r0, [pc, #68]	; (800b18c <MX_SPI2_Init+0x48>)
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <MX_SPI2_Init+0x4c>)
{
 800b14a:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 800b14c:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b14e:	2382      	movs	r3, #130	; 0x82
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b150:	00d2      	lsls	r2, r2, #3
 800b152:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b154:	2280      	movs	r2, #128	; 0x80
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b15a:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b15c:	0092      	lsls	r2, r2, #2
 800b15e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b160:	3ae9      	subs	r2, #233	; 0xe9
 800b162:	3aff      	subs	r2, #255	; 0xff
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b164:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b166:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b168:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b16a:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b16c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b16e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b170:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800b172:	3a11      	subs	r2, #17
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800b174:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b176:	3308      	adds	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 800b178:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b17a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b17c:	f005 fd12 	bl	8010ba4 <HAL_SPI_Init>
 800b180:	2800      	cmp	r0, #0
 800b182:	d001      	beq.n	800b188 <MX_SPI2_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b184:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800b186:	e7fe      	b.n	800b186 <MX_SPI2_Init+0x42>
}
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	46c0      	nop			; (mov r8, r8)
 800b18c:	200003d8 	.word	0x200003d8
 800b190:	40003800 	.word	0x40003800

0800b194 <W5500_init>:
static void W5500_init() {
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	4c30      	ldr	r4, [pc, #192]	; (800b258 <W5500_init+0xc4>)
	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 800b198:	2208      	movs	r2, #8
static void W5500_init() {
 800b19a:	44a5      	add	sp, r4
	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 800b19c:	492f      	ldr	r1, [pc, #188]	; (800b25c <W5500_init+0xc8>)
 800b19e:	a802      	add	r0, sp, #8
 800b1a0:	f00d fa4a 	bl	8018638 <memcpy>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800b1a4:	492e      	ldr	r1, [pc, #184]	; (800b260 <W5500_init+0xcc>)
 800b1a6:	482f      	ldr	r0, [pc, #188]	; (800b264 <W5500_init+0xd0>)
 800b1a8:	f008 f9da 	bl	8013560 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800b1ac:	492e      	ldr	r1, [pc, #184]	; (800b268 <W5500_init+0xd4>)
 800b1ae:	482f      	ldr	r0, [pc, #188]	; (800b26c <W5500_init+0xd8>)
 800b1b0:	f008 f9ea 	bl	8013588 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800b1b4:	492e      	ldr	r1, [pc, #184]	; (800b270 <W5500_init+0xdc>)
 800b1b6:	482f      	ldr	r0, [pc, #188]	; (800b274 <W5500_init+0xe0>)
 800b1b8:	f008 f9fe 	bl	80135b8 <reg_wizchip_spiburst_cbfunc>
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800b1bc:	a902      	add	r1, sp, #8
 800b1be:	0008      	movs	r0, r1
 800b1c0:	f008 fa4e 	bl	8013660 <wizchip_init>
	setSHAR(net_info.mac);
 800b1c4:	2090      	movs	r0, #144	; 0x90
 800b1c6:	4c2c      	ldr	r4, [pc, #176]	; (800b278 <W5500_init+0xe4>)
 800b1c8:	2206      	movs	r2, #6
 800b1ca:	0021      	movs	r1, r4
 800b1cc:	0100      	lsls	r0, r0, #4
 800b1ce:	f008 f8b9 	bl	8013344 <WIZCHIP_WRITE_BUF>
	DHCP_init(DHCP_SOCKET, dhcp_buffer);
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	a904      	add	r1, sp, #16
 800b1d6:	f008 fce7 	bl	8013ba8 <DHCP_init>
	reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned,
 800b1da:	4828      	ldr	r0, [pc, #160]	; (800b27c <W5500_init+0xe8>)
 800b1dc:	4a28      	ldr	r2, [pc, #160]	; (800b280 <W5500_init+0xec>)
 800b1de:	0001      	movs	r1, r0
 800b1e0:	f008 faec 	bl	80137bc <reg_dhcp_cbfunc>
	uint32_t current = HAL_GetTick();
 800b1e4:	f003 fcba 	bl	800eb5c <HAL_GetTick>
	while (HAL_GetTick() - current < 1000) {
 800b1e8:	26fa      	movs	r6, #250	; 0xfa
	uint32_t current = HAL_GetTick();
 800b1ea:	0005      	movs	r5, r0
	while (HAL_GetTick() - current < 1000) {
 800b1ec:	00b6      	lsls	r6, r6, #2
 800b1ee:	f003 fcb5 	bl	800eb5c <HAL_GetTick>
 800b1f2:	1b40      	subs	r0, r0, r5
 800b1f4:	42b0      	cmp	r0, r6
 800b1f6:	d32b      	bcc.n	800b250 <W5500_init+0xbc>
	if (!ip_assigned) {
 800b1f8:	4b22      	ldr	r3, [pc, #136]	; (800b284 <W5500_init+0xf0>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d023      	beq.n	800b248 <W5500_init+0xb4>
	getIPfromDHCP(net_info.ip);
 800b200:	1da0      	adds	r0, r4, #6
 800b202:	f008 fd25 	bl	8013c50 <getIPfromDHCP>
	getGWfromDHCP(net_info.gw);
 800b206:	0020      	movs	r0, r4
 800b208:	300e      	adds	r0, #14
 800b20a:	f008 fd2d 	bl	8013c68 <getGWfromDHCP>
	getSNfromDHCP(net_info.sn);
 800b20e:	0020      	movs	r0, r4
 800b210:	300a      	adds	r0, #10
 800b212:	f008 fd35 	bl	8013c80 <getSNfromDHCP>
	getDNSfromDHCP(dns);
 800b216:	a801      	add	r0, sp, #4
 800b218:	f008 fd3e 	bl	8013c98 <getDNSfromDHCP>
	wizchip_setnetinfo(&net_info);
 800b21c:	0020      	movs	r0, r4
 800b21e:	f008 fa5f 	bl	80136e0 <wizchip_setnetinfo>
	HAL_Delay(200);
 800b222:	20c8      	movs	r0, #200	; 0xc8
 800b224:	f003 fca0 	bl	800eb68 <HAL_Delay>
	if (eMBTCPInit(MBTCP_PORT) != MB_ENOERR) {
 800b228:	20fb      	movs	r0, #251	; 0xfb
 800b22a:	0040      	lsls	r0, r0, #1
 800b22c:	f00b ff7e 	bl	801712c <eMBTCPInit>
 800b230:	2800      	cmp	r0, #0
 800b232:	d109      	bne.n	800b248 <W5500_init+0xb4>
	if (eMBSetSlaveID(SLAVE_ID, true, Vendor, sizeof(Vendor)) != MB_ENOERR) {
 800b234:	2101      	movs	r1, #1
 800b236:	230b      	movs	r3, #11
 800b238:	0008      	movs	r0, r1
 800b23a:	4a13      	ldr	r2, [pc, #76]	; (800b288 <W5500_init+0xf4>)
 800b23c:	f00b ffbe 	bl	80171bc <eMBSetSlaveID>
 800b240:	2800      	cmp	r0, #0
 800b242:	d101      	bne.n	800b248 <W5500_init+0xb4>
	if (eMBEnable() != MB_ENOERR) {
 800b244:	f00b ffaa 	bl	801719c <eMBEnable>
}
 800b248:	2382      	movs	r3, #130	; 0x82
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	449d      	add	sp, r3
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
		DHCP_run();
 800b250:	f008 ff8c 	bl	801416c <DHCP_run>
 800b254:	e7cb      	b.n	800b1ee <W5500_init+0x5a>
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	fffffbf0 	.word	0xfffffbf0
 800b25c:	0801bd50 	.word	0x0801bd50
 800b260:	08017797 	.word	0x08017797
 800b264:	08017787 	.word	0x08017787
 800b268:	080177c5 	.word	0x080177c5
 800b26c:	080177a9 	.word	0x080177a9
 800b270:	080177f9 	.word	0x080177f9
 800b274:	080177e1 	.word	0x080177e1
 800b278:	200000cc 	.word	0x200000cc
 800b27c:	0800b085 	.word	0x0800b085
 800b280:	0800b091 	.word	0x0800b091
 800b284:	2000059c 	.word	0x2000059c
 800b288:	200000c1 	.word	0x200000c1

0800b28c <read_SDCard>:
static dataMeasure read_SDCard(char *fileName, uint8_t lineIndex) {
 800b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28e:	4c74      	ldr	r4, [pc, #464]	; (800b460 <read_SDCard+0x1d4>)
 800b290:	0015      	movs	r5, r2
 800b292:	44a5      	add	sp, r4
	dataMeasure data = { 0 };
 800b294:	2213      	movs	r2, #19
static dataMeasure read_SDCard(char *fileName, uint8_t lineIndex) {
 800b296:	000c      	movs	r4, r1
	dataMeasure data = { 0 };
 800b298:	2100      	movs	r1, #0
static dataMeasure read_SDCard(char *fileName, uint8_t lineIndex) {
 800b29a:	0007      	movs	r7, r0
	dataMeasure data = { 0 };
 800b29c:	f00d f9d5 	bl	801864a <memset>
	if (f_mount(&FatFs, "", 0) != FR_OK) //mount SD card
 800b2a0:	2087      	movs	r0, #135	; 0x87
 800b2a2:	4e70      	ldr	r6, [pc, #448]	; (800b464 <read_SDCard+0x1d8>)
 800b2a4:	0140      	lsls	r0, r0, #5
 800b2a6:	ab08      	add	r3, sp, #32
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	0031      	movs	r1, r6
 800b2ac:	18c0      	adds	r0, r0, r3
 800b2ae:	f00b f905 	bl	80164bc <f_mount>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d000      	beq.n	800b2b8 <read_SDCard+0x2c>
 800b2b6:	e0c6      	b.n	800b446 <read_SDCard+0x1ba>
	if (f_open(&fil, fileName, FA_READ) != FR_OK)
 800b2b8:	0021      	movs	r1, r4
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	a835      	add	r0, sp, #212	; 0xd4
 800b2be:	f00b f92d 	bl	801651c <f_open>
 800b2c2:	1e04      	subs	r4, r0, #0
 800b2c4:	d000      	beq.n	800b2c8 <read_SDCard+0x3c>
 800b2c6:	e0be      	b.n	800b446 <read_SDCard+0x1ba>
	while (f_gets(buff, 100, &fil) != FR_OK) {
 800b2c8:	2164      	movs	r1, #100	; 0x64
 800b2ca:	aa35      	add	r2, sp, #212	; 0xd4
 800b2cc:	a821      	add	r0, sp, #132	; 0x84
 800b2ce:	f00b fe91 	bl	8016ff4 <f_gets>
 800b2d2:	1e01      	subs	r1, r0, #0
 800b2d4:	d000      	beq.n	800b2d8 <read_SDCard+0x4c>
 800b2d6:	e0ba      	b.n	800b44e <read_SDCard+0x1c2>
	f_lseek(&fil, 0); // move pointer to beginning of file
 800b2d8:	a835      	add	r0, sp, #212	; 0xd4
 800b2da:	f00b fcfb 	bl	8016cd4 <f_lseek>
	while (totalLines - lineIndex > 0) {
 800b2de:	42a5      	cmp	r5, r4
 800b2e0:	d000      	beq.n	800b2e4 <read_SDCard+0x58>
 800b2e2:	e0b6      	b.n	800b452 <read_SDCard+0x1c6>
	f_close(&fil);
 800b2e4:	a835      	add	r0, sp, #212	; 0xd4
 800b2e6:	f00b fcdd 	bl	8016ca4 <f_close>
	if (f_mount(NULL, "", 0) != FR_OK) //unmount fatfs
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	0031      	movs	r1, r6
 800b2ee:	0010      	movs	r0, r2
 800b2f0:	f00b f8e4 	bl	80164bc <f_mount>
 800b2f4:	1e04      	subs	r4, r0, #0
 800b2f6:	d000      	beq.n	800b2fa <read_SDCard+0x6e>
 800b2f8:	e0a5      	b.n	800b446 <read_SDCard+0x1ba>
	sscanf(token, "20%hu/%hu/%hu - %hu:%hu", &year, &month, &day, &hour,
 800b2fa:	2612      	movs	r6, #18
	char *token = strtok(buff, ",");
 800b2fc:	4d5a      	ldr	r5, [pc, #360]	; (800b468 <read_SDCard+0x1dc>)
 800b2fe:	a821      	add	r0, sp, #132	; 0x84
 800b300:	0029      	movs	r1, r5
 800b302:	f00d fdf5 	bl	8018ef0 <strtok>
	sscanf(token, "20%hu/%hu/%hu - %hu:%hu", &year, &month, &day, &hour,
 800b306:	ab08      	add	r3, sp, #32
 800b308:	18f6      	adds	r6, r6, r3
 800b30a:	231a      	movs	r3, #26
 800b30c:	aa08      	add	r2, sp, #32
 800b30e:	189b      	adds	r3, r3, r2
 800b310:	9302      	str	r3, [sp, #8]
 800b312:	ab0e      	add	r3, sp, #56	; 0x38
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	2316      	movs	r3, #22
 800b318:	189b      	adds	r3, r3, r2
 800b31a:	4954      	ldr	r1, [pc, #336]	; (800b46c <read_SDCard+0x1e0>)
 800b31c:	0032      	movs	r2, r6
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	ab0d      	add	r3, sp, #52	; 0x34
 800b322:	f00d fd67 	bl	8018df4 <siscanf>
	data.time.day = (uint8_t) day;
 800b326:	ab08      	add	r3, sp, #32
 800b328:	7d9b      	ldrb	r3, [r3, #22]
	token = strtok(NULL, ",");
 800b32a:	0029      	movs	r1, r5
	data.time.day = (uint8_t) day;
 800b32c:	9307      	str	r3, [sp, #28]
	data.time.hour = (uint8_t) hour;
 800b32e:	ab08      	add	r3, sp, #32
 800b330:	7e1b      	ldrb	r3, [r3, #24]
	token = strtok(NULL, ",");
 800b332:	0020      	movs	r0, r4
	data.time.hour = (uint8_t) hour;
 800b334:	9308      	str	r3, [sp, #32]
	data.time.minute = (uint8_t) minute;
 800b336:	ab08      	add	r3, sp, #32
 800b338:	7e9b      	ldrb	r3, [r3, #26]
 800b33a:	9309      	str	r3, [sp, #36]	; 0x24
	data.time.month = (uint8_t) month;
 800b33c:	ab08      	add	r3, sp, #32
 800b33e:	7d1b      	ldrb	r3, [r3, #20]
 800b340:	930a      	str	r3, [sp, #40]	; 0x28
	data.time.year = (uint8_t) year;
 800b342:	7833      	ldrb	r3, [r6, #0]
 800b344:	930b      	str	r3, [sp, #44]	; 0x2c
	token = strtok(NULL, ",");
 800b346:	f00d fdd3 	bl	8018ef0 <strtok>
	sscanf(token, "%s", Z_str);
 800b34a:	4e49      	ldr	r6, [pc, #292]	; (800b470 <read_SDCard+0x1e4>)
 800b34c:	aa15      	add	r2, sp, #84	; 0x54
 800b34e:	0031      	movs	r1, r6
 800b350:	f00d fd50 	bl	8018df4 <siscanf>
	token = strtok(NULL, ",");
 800b354:	0029      	movs	r1, r5
 800b356:	0020      	movs	r0, r4
 800b358:	f00d fdca 	bl	8018ef0 <strtok>
	sscanf(token, "%s", X_str);
 800b35c:	aa0f      	add	r2, sp, #60	; 0x3c
 800b35e:	0031      	movs	r1, r6
 800b360:	f00d fd48 	bl	8018df4 <siscanf>
	token = strtok(NULL, ",");
 800b364:	0029      	movs	r1, r5
 800b366:	0020      	movs	r0, r4
 800b368:	f00d fdc2 	bl	8018ef0 <strtok>
	sscanf(token, "%s", Y_str);
 800b36c:	aa12      	add	r2, sp, #72	; 0x48
 800b36e:	0031      	movs	r1, r6
 800b370:	f00d fd40 	bl	8018df4 <siscanf>
	token = strtok(NULL, ",");
 800b374:	0029      	movs	r1, r5
 800b376:	0020      	movs	r0, r4
 800b378:	f00d fdba 	bl	8018ef0 <strtok>
	sscanf(token, "%s", R_str);
 800b37c:	aa18      	add	r2, sp, #96	; 0x60
 800b37e:	0031      	movs	r1, r6
 800b380:	f00d fd38 	bl	8018df4 <siscanf>
	token = strtok(NULL, ",");
 800b384:	0029      	movs	r1, r5
 800b386:	0020      	movs	r0, r4
 800b388:	f00d fdb2 	bl	8018ef0 <strtok>
	sscanf(token, "%s", aX_str);
 800b38c:	aa1b      	add	r2, sp, #108	; 0x6c
 800b38e:	0031      	movs	r1, r6
 800b390:	f00d fd30 	bl	8018df4 <siscanf>
	token = strtok(NULL, ",");
 800b394:	0029      	movs	r1, r5
 800b396:	0020      	movs	r0, r4
 800b398:	f00d fdaa 	bl	8018ef0 <strtok>
	sscanf(token, "%s", aY_str);
 800b39c:	aa1e      	add	r2, sp, #120	; 0x78
 800b39e:	0031      	movs	r1, r6
 800b3a0:	f00d fd28 	bl	8018df4 <siscanf>
	token = strtok(NULL, ",");
 800b3a4:	0020      	movs	r0, r4
 800b3a6:	0029      	movs	r1, r5
 800b3a8:	f00d fda2 	bl	8018ef0 <strtok>
	if(Z_str[1] == '\0')
 800b3ac:	2235      	movs	r2, #53	; 0x35
 800b3ae:	ab08      	add	r3, sp, #32
 800b3b0:	189b      	adds	r3, r3, r2
 800b3b2:	781b      	ldrb	r3, [r3, #0]
		data.mode = ZERROR2;
 800b3b4:	3403      	adds	r4, #3
	if(Z_str[1] == '\0')
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d005      	beq.n	800b3c6 <read_SDCard+0x13a>
	else if (X_str[1] == '\0')
 800b3ba:	ab08      	add	r3, sp, #32
 800b3bc:	7f5b      	ldrb	r3, [r3, #29]
		data.mode = ZONLY;
 800b3be:	3c02      	subs	r4, #2
	else if (X_str[1] == '\0')
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d000      	beq.n	800b3c6 <read_SDCard+0x13a>
		data.mode = MEASUREALL;
 800b3c4:	3403      	adds	r4, #3
	data.coordinates.R = self_atof(R_str);
 800b3c6:	a818      	add	r0, sp, #96	; 0x60
 800b3c8:	f7ff fe64 	bl	800b094 <self_atof>
 800b3cc:	9004      	str	r0, [sp, #16]
	data.coordinates.X = self_atof(X_str);
 800b3ce:	a80f      	add	r0, sp, #60	; 0x3c
 800b3d0:	f7ff fe60 	bl	800b094 <self_atof>
 800b3d4:	0006      	movs	r6, r0
	data.coordinates.Y = self_atof(Y_str);
 800b3d6:	a812      	add	r0, sp, #72	; 0x48
 800b3d8:	f7ff fe5c 	bl	800b094 <self_atof>
 800b3dc:	0005      	movs	r5, r0
	data.coordinates.Z = self_atof(Z_str);
 800b3de:	a815      	add	r0, sp, #84	; 0x54
 800b3e0:	f7ff fe58 	bl	800b094 <self_atof>
 800b3e4:	9005      	str	r0, [sp, #20]
	data.coordinates.aX = self_atof(aX_str);
 800b3e6:	a81b      	add	r0, sp, #108	; 0x6c
 800b3e8:	f7ff fe54 	bl	800b094 <self_atof>
 800b3ec:	9006      	str	r0, [sp, #24]
	data.coordinates.aY = self_atof(aY_str);
 800b3ee:	a81e      	add	r0, sp, #120	; 0x78
 800b3f0:	f7ff fe50 	bl	800b094 <self_atof>
	return data;
 800b3f4:	b2b3      	uxth	r3, r6
 800b3f6:	0a1b      	lsrs	r3, r3, #8
 800b3f8:	707b      	strb	r3, [r7, #1]
 800b3fa:	b2ab      	uxth	r3, r5
 800b3fc:	0a1b      	lsrs	r3, r3, #8
 800b3fe:	70fb      	strb	r3, [r7, #3]
 800b400:	466b      	mov	r3, sp
 800b402:	8a9b      	ldrh	r3, [r3, #20]
 800b404:	9a05      	ldr	r2, [sp, #20]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	717b      	strb	r3, [r7, #5]
 800b40a:	466b      	mov	r3, sp
 800b40c:	8a1b      	ldrh	r3, [r3, #16]
 800b40e:	713a      	strb	r2, [r7, #4]
 800b410:	0a1b      	lsrs	r3, r3, #8
 800b412:	71fb      	strb	r3, [r7, #7]
 800b414:	466b      	mov	r3, sp
 800b416:	8b1b      	ldrh	r3, [r3, #24]
 800b418:	9a04      	ldr	r2, [sp, #16]
 800b41a:	0a1b      	lsrs	r3, r3, #8
 800b41c:	727b      	strb	r3, [r7, #9]
 800b41e:	b283      	uxth	r3, r0
 800b420:	0a1b      	lsrs	r3, r3, #8
 800b422:	72fb      	strb	r3, [r7, #11]
 800b424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b426:	71ba      	strb	r2, [r7, #6]
 800b428:	733b      	strb	r3, [r7, #12]
 800b42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b42c:	9a06      	ldr	r2, [sp, #24]
 800b42e:	737b      	strb	r3, [r7, #13]
 800b430:	9b07      	ldr	r3, [sp, #28]
 800b432:	703e      	strb	r6, [r7, #0]
 800b434:	73bb      	strb	r3, [r7, #14]
 800b436:	9b08      	ldr	r3, [sp, #32]
 800b438:	70bd      	strb	r5, [r7, #2]
 800b43a:	723a      	strb	r2, [r7, #8]
 800b43c:	72b8      	strb	r0, [r7, #10]
 800b43e:	73fb      	strb	r3, [r7, #15]
 800b440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b442:	74bc      	strb	r4, [r7, #18]
 800b444:	743b      	strb	r3, [r7, #16]
}
 800b446:	0038      	movs	r0, r7
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <read_SDCard+0x1e8>)
 800b44a:	449d      	add	sp, r3
 800b44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		totalLines++;
 800b44e:	3401      	adds	r4, #1
 800b450:	e73a      	b.n	800b2c8 <read_SDCard+0x3c>
		f_gets(buff, sizeof(buff), &fil);
 800b452:	2150      	movs	r1, #80	; 0x50
 800b454:	aa35      	add	r2, sp, #212	; 0xd4
 800b456:	a821      	add	r0, sp, #132	; 0x84
		totalLines--;
 800b458:	3c01      	subs	r4, #1
		f_gets(buff, sizeof(buff), &fil);
 800b45a:	f00b fdcb 	bl	8016ff4 <f_gets>
 800b45e:	e73e      	b.n	800b2de <read_SDCard+0x52>
 800b460:	ffffdecc 	.word	0xffffdecc
 800b464:	0801bd58 	.word	0x0801bd58
 800b468:	0801bd59 	.word	0x0801bd59
 800b46c:	0801bd5b 	.word	0x0801bd5b
 800b470:	0801bd73 	.word	0x0801bd73
 800b474:	00002134 	.word	0x00002134

0800b478 <app_GotoMainScreen>:
		uint8_t showSetCalib) {
 800b478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b47a:	b09d      	sub	sp, #116	; 0x74
	volatile dataMeasure data = { 0 };
 800b47c:	ac17      	add	r4, sp, #92	; 0x5c
		uint8_t showSetCalib) {
 800b47e:	9005      	str	r0, [sp, #20]
 800b480:	9104      	str	r1, [sp, #16]
 800b482:	0015      	movs	r5, r2
	volatile dataMeasure data = { 0 };
 800b484:	2100      	movs	r1, #0
 800b486:	2213      	movs	r2, #19
 800b488:	0020      	movs	r0, r4
 800b48a:	f00d f8de 	bl	801864a <memset>
	mainScreenFlag = measurementIndex; //use for reset calib
 800b48e:	4b50      	ldr	r3, [pc, #320]	; (800b5d0 <app_GotoMainScreen+0x158>)
 800b490:	9a04      	ldr	r2, [sp, #16]
 800b492:	701a      	strb	r2, [r3, #0]
	if (showSetCalib == NOT_SHOW_SET_CALIB) {
 800b494:	2d00      	cmp	r5, #0
 800b496:	d000      	beq.n	800b49a <app_GotoMainScreen+0x22>
 800b498:	e07c      	b.n	800b594 <app_GotoMainScreen+0x11c>
		if (measurementIndex == MEASUREMENT_1) {
 800b49a:	0013      	movs	r3, r2
			data = read_SDCard(MEASUREMENT_1_FILE_NAME, index);
 800b49c:	002a      	movs	r2, r5
		if (measurementIndex == MEASUREMENT_1) {
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d000      	beq.n	800b4a4 <app_GotoMainScreen+0x2c>
 800b4a2:	e06d      	b.n	800b580 <app_GotoMainScreen+0x108>
			data = read_SDCard(MEASUREMENT_1_FILE_NAME, index);
 800b4a4:	0020      	movs	r0, r4
 800b4a6:	494b      	ldr	r1, [pc, #300]	; (800b5d4 <app_GotoMainScreen+0x15c>)
 800b4a8:	f7ff fef0 	bl	800b28c <read_SDCard>
	screen_DataMeasureType1(data, option, measurementIndex, NOT_SHOW_HIS);
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9303      	str	r3, [sp, #12]
 800b4b0:	9b04      	ldr	r3, [sp, #16]
 800b4b2:	ad1b      	add	r5, sp, #108	; 0x6c
 800b4b4:	9302      	str	r3, [sp, #8]
 800b4b6:	9b05      	ldr	r3, [sp, #20]
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	466b      	mov	r3, sp
 800b4bc:	882a      	ldrh	r2, [r5, #0]
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	78aa      	ldrb	r2, [r5, #2]
 800b4c2:	709a      	strb	r2, [r3, #2]
 800b4c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b4c6:	6861      	ldr	r1, [r4, #4]
 800b4c8:	68a2      	ldr	r2, [r4, #8]
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	f00c faae 	bl	8017a2c <screen_DataMeasureType1>
		mbutton = io_getButton();
 800b4d0:	4e41      	ldr	r6, [pc, #260]	; (800b5d8 <app_GotoMainScreen+0x160>)
 800b4d2:	a806      	add	r0, sp, #24
 800b4d4:	f00c f99c 	bl	8017810 <io_getButton>
 800b4d8:	2205      	movs	r2, #5
 800b4da:	a906      	add	r1, sp, #24
 800b4dc:	0030      	movs	r0, r6
 800b4de:	f00d f8ab 	bl	8018638 <memcpy>
		minput = io_getInput();
 800b4e2:	f7ff fdbd 	bl	800b060 <io_getInput>
 800b4e6:	4b3d      	ldr	r3, [pc, #244]	; (800b5dc <app_GotoMainScreen+0x164>)
 800b4e8:	0402      	lsls	r2, r0, #16
 800b4ea:	7018      	strb	r0, [r3, #0]
 800b4ec:	0200      	lsls	r0, r0, #8
 800b4ee:	0e12      	lsrs	r2, r2, #24
 800b4f0:	0e00      	lsrs	r0, r0, #24
 800b4f2:	705a      	strb	r2, [r3, #1]
 800b4f4:	7098      	strb	r0, [r3, #2]
		if (mbutton.next == _ON) {
 800b4f6:	78f3      	ldrb	r3, [r6, #3]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d117      	bne.n	800b52c <app_GotoMainScreen+0xb4>
			while (_ON == io_getButton().next)
 800b4fc:	af11      	add	r7, sp, #68	; 0x44
 800b4fe:	0038      	movs	r0, r7
 800b500:	f00c f986 	bl	8017810 <io_getButton>
 800b504:	78fb      	ldrb	r3, [r7, #3]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d0f8      	beq.n	800b4fc <app_GotoMainScreen+0x84>
			screen_DataMeasureType2(data, option, measurementIndex,
 800b50a:	2300      	movs	r3, #0
 800b50c:	9303      	str	r3, [sp, #12]
 800b50e:	9b04      	ldr	r3, [sp, #16]
 800b510:	9302      	str	r3, [sp, #8]
 800b512:	9b05      	ldr	r3, [sp, #20]
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	466b      	mov	r3, sp
 800b518:	882a      	ldrh	r2, [r5, #0]
 800b51a:	801a      	strh	r2, [r3, #0]
 800b51c:	78aa      	ldrb	r2, [r5, #2]
 800b51e:	709a      	strb	r2, [r3, #2]
 800b520:	6820      	ldr	r0, [r4, #0]
 800b522:	6861      	ldr	r1, [r4, #4]
 800b524:	68a2      	ldr	r2, [r4, #8]
 800b526:	68e3      	ldr	r3, [r4, #12]
 800b528:	f00c fc86 	bl	8017e38 <screen_DataMeasureType2>
		if (mbutton.prev == _ON) {
 800b52c:	7933      	ldrb	r3, [r6, #4]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d117      	bne.n	800b562 <app_GotoMainScreen+0xea>
			while (_ON == io_getButton().prev)
 800b532:	af13      	add	r7, sp, #76	; 0x4c
 800b534:	0038      	movs	r0, r7
 800b536:	f00c f96b 	bl	8017810 <io_getButton>
 800b53a:	793b      	ldrb	r3, [r7, #4]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d0f8      	beq.n	800b532 <app_GotoMainScreen+0xba>
			screen_DataMeasureType1(data, option, measurementIndex,
 800b540:	2300      	movs	r3, #0
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	9b04      	ldr	r3, [sp, #16]
 800b546:	9302      	str	r3, [sp, #8]
 800b548:	9b05      	ldr	r3, [sp, #20]
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	466b      	mov	r3, sp
 800b54e:	882a      	ldrh	r2, [r5, #0]
 800b550:	801a      	strh	r2, [r3, #0]
 800b552:	78aa      	ldrb	r2, [r5, #2]
 800b554:	709a      	strb	r2, [r3, #2]
 800b556:	6820      	ldr	r0, [r4, #0]
 800b558:	6861      	ldr	r1, [r4, #4]
 800b55a:	68a2      	ldr	r2, [r4, #8]
 800b55c:	68e3      	ldr	r3, [r4, #12]
 800b55e:	f00c fa65 	bl	8017a2c <screen_DataMeasureType1>
		if (_ON == mbutton.menu) {
 800b562:	78b3      	ldrb	r3, [r6, #2]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d120      	bne.n	800b5aa <app_GotoMainScreen+0x132>
			while (_ON == io_getButton().menu)
 800b568:	ac15      	add	r4, sp, #84	; 0x54
 800b56a:	0020      	movs	r0, r4
 800b56c:	f00c f950 	bl	8017810 <io_getButton>
 800b570:	78a3      	ldrb	r3, [r4, #2]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d0f8      	beq.n	800b568 <app_GotoMainScreen+0xf0>
			menuScreenFlag = 1;
 800b576:	2201      	movs	r2, #1
 800b578:	4b19      	ldr	r3, [pc, #100]	; (800b5e0 <app_GotoMainScreen+0x168>)
 800b57a:	701a      	strb	r2, [r3, #0]
}
 800b57c:	b01d      	add	sp, #116	; 0x74
 800b57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data = read_SDCard(MEASUREMENT_2_FILE_NAME, index);
 800b580:	a80a      	add	r0, sp, #40	; 0x28
 800b582:	4918      	ldr	r1, [pc, #96]	; (800b5e4 <app_GotoMainScreen+0x16c>)
 800b584:	f7ff fe82 	bl	800b28c <read_SDCard>
 800b588:	2213      	movs	r2, #19
 800b58a:	0020      	movs	r0, r4
 800b58c:	a90a      	add	r1, sp, #40	; 0x28
 800b58e:	f00d f853 	bl	8018638 <memcpy>
 800b592:	e78b      	b.n	800b4ac <app_GotoMainScreen+0x34>
		data.time = rtc_Now();
 800b594:	a808      	add	r0, sp, #32
 800b596:	f00c fa27 	bl	80179e8 <rtc_Now>
 800b59a:	2206      	movs	r2, #6
 800b59c:	a908      	add	r1, sp, #32
 800b59e:	a81a      	add	r0, sp, #104	; 0x68
 800b5a0:	f00d f84a 	bl	8018638 <memcpy>
		data.mode = 4;
 800b5a4:	2304      	movs	r3, #4
 800b5a6:	74a3      	strb	r3, [r4, #18]
 800b5a8:	e780      	b.n	800b4ac <app_GotoMainScreen+0x34>
	while (exit == 0 && _OFF == minput.in0 && _OFF == minput.in1
 800b5aa:	4b0c      	ldr	r3, [pc, #48]	; (800b5dc <app_GotoMainScreen+0x164>)
 800b5ac:	781a      	ldrb	r2, [r3, #0]
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	d1e4      	bne.n	800b57c <app_GotoMainScreen+0x104>
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e1      	bne.n	800b57c <app_GotoMainScreen+0x104>
			&& _OFF == mbutton.reset && GET_IN3 == 1);
 800b5b8:	7873      	ldrb	r3, [r6, #1]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1de      	bne.n	800b57c <app_GotoMainScreen+0x104>
 800b5be:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <app_GotoMainScreen+0x170>)
 800b5c0:	3201      	adds	r2, #1
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	32ff      	adds	r2, #255	; 0xff
 800b5c6:	4213      	tst	r3, r2
 800b5c8:	d000      	beq.n	800b5cc <app_GotoMainScreen+0x154>
 800b5ca:	e781      	b.n	800b4d0 <app_GotoMainScreen+0x58>
 800b5cc:	e7d6      	b.n	800b57c <app_GotoMainScreen+0x104>
 800b5ce:	46c0      	nop			; (mov r8, r8)
 800b5d0:	2000059d 	.word	0x2000059d
 800b5d4:	0801bd76 	.word	0x0801bd76
 800b5d8:	2000059e 	.word	0x2000059e
 800b5dc:	200005cd 	.word	0x200005cd
 800b5e0:	200005cc 	.word	0x200005cc
 800b5e4:	0801bd87 	.word	0x0801bd87
 800b5e8:	48000c00 	.word	0x48000c00

0800b5ec <app_HisValue>:
static void app_HisValue(uint8_t measurementIndex) {
 800b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
		strcpy(fileName, MEASUREMENT_1_FILE_NAME);
 800b5ee:	4983      	ldr	r1, [pc, #524]	; (800b7fc <app_HisValue+0x210>)
static void app_HisValue(uint8_t measurementIndex) {
 800b5f0:	0005      	movs	r5, r0
 800b5f2:	b0a1      	sub	sp, #132	; 0x84
	if (measurementIndex == MEASUREMENT_1) {
 800b5f4:	2801      	cmp	r0, #1
 800b5f6:	d000      	beq.n	800b5fa <app_HisValue+0xe>
		strcpy(fileName, MEASUREMENT_2_FILE_NAME);
 800b5f8:	4981      	ldr	r1, [pc, #516]	; (800b800 <app_HisValue+0x214>)
 800b5fa:	a816      	add	r0, sp, #88	; 0x58
 800b5fc:	f00d fc70 	bl	8018ee0 <strcpy>
	LCD_Clear();
 800b600:	f008 feee 	bl	80143e0 <LCD_Clear>
	ldata = read_SDCard(fileName, index);
 800b604:	2200      	movs	r2, #0
 800b606:	a916      	add	r1, sp, #88	; 0x58
 800b608:	a81b      	add	r0, sp, #108	; 0x6c
 800b60a:	f7ff fe3f 	bl	800b28c <read_SDCard>
	screen_DataMeasureType1(ldata, CALIBSET, measurementIndex, SHOW_HIS);
 800b60e:	2301      	movs	r3, #1
 800b610:	2400      	movs	r4, #0
 800b612:	9303      	str	r3, [sp, #12]
 800b614:	466b      	mov	r3, sp
 800b616:	9502      	str	r5, [sp, #8]
 800b618:	9401      	str	r4, [sp, #4]
 800b61a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b61c:	8811      	ldrh	r1, [r2, #0]
 800b61e:	8019      	strh	r1, [r3, #0]
 800b620:	7892      	ldrb	r2, [r2, #2]
 800b622:	709a      	strb	r2, [r3, #2]
 800b624:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b626:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b628:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b62a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b62c:	f00c f9fe 	bl	8017a2c <screen_DataMeasureType1>
		mbutton = io_getButton();
 800b630:	4e74      	ldr	r6, [pc, #464]	; (800b804 <app_HisValue+0x218>)
 800b632:	a804      	add	r0, sp, #16
 800b634:	f00c f8ec 	bl	8017810 <io_getButton>
 800b638:	2205      	movs	r2, #5
 800b63a:	0030      	movs	r0, r6
 800b63c:	a904      	add	r1, sp, #16
 800b63e:	f00c fffb 	bl	8018638 <memcpy>
		if (_ON == mbutton.next) {
 800b642:	78f3      	ldrb	r3, [r6, #3]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d121      	bne.n	800b68c <app_HisValue+0xa0>
			while (_ON == io_getButton().next)
 800b648:	af06      	add	r7, sp, #24
 800b64a:	0038      	movs	r0, r7
 800b64c:	f00c f8e0 	bl	8017810 <io_getButton>
 800b650:	78fb      	ldrb	r3, [r7, #3]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d0f8      	beq.n	800b648 <app_HisValue+0x5c>
			index--;
 800b656:	3c01      	subs	r4, #1
 800b658:	b2e4      	uxtb	r4, r4
			if (index > 9)
 800b65a:	2c09      	cmp	r4, #9
 800b65c:	d900      	bls.n	800b660 <app_HisValue+0x74>
				index = 0;
 800b65e:	2400      	movs	r4, #0
			ldata = read_SDCard(fileName, index);
 800b660:	0022      	movs	r2, r4
 800b662:	a916      	add	r1, sp, #88	; 0x58
 800b664:	a81b      	add	r0, sp, #108	; 0x6c
 800b666:	f7ff fe11 	bl	800b28c <read_SDCard>
			screen_DataMeasureType1(ldata, CALIBSET, measurementIndex,
 800b66a:	2301      	movs	r3, #1
 800b66c:	9303      	str	r3, [sp, #12]
 800b66e:	2300      	movs	r3, #0
 800b670:	9301      	str	r3, [sp, #4]
 800b672:	466b      	mov	r3, sp
 800b674:	9502      	str	r5, [sp, #8]
 800b676:	aa1f      	add	r2, sp, #124	; 0x7c
 800b678:	8811      	ldrh	r1, [r2, #0]
 800b67a:	8019      	strh	r1, [r3, #0]
 800b67c:	7892      	ldrb	r2, [r2, #2]
 800b67e:	709a      	strb	r2, [r3, #2]
 800b680:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b682:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b684:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b686:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b688:	f00c f9d0 	bl	8017a2c <screen_DataMeasureType1>
		if (_ON == mbutton.prev) {
 800b68c:	7933      	ldrb	r3, [r6, #4]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d123      	bne.n	800b6da <app_HisValue+0xee>
			while (_ON == io_getButton().prev)
 800b692:	af08      	add	r7, sp, #32
 800b694:	0038      	movs	r0, r7
 800b696:	f00c f8bb 	bl	8017810 <io_getButton>
 800b69a:	793b      	ldrb	r3, [r7, #4]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d0f8      	beq.n	800b692 <app_HisValue+0xa6>
			index++;
 800b6a0:	3401      	adds	r4, #1
 800b6a2:	b2e4      	uxtb	r4, r4
			if (index > 9)
 800b6a4:	1c23      	adds	r3, r4, #0
 800b6a6:	2c09      	cmp	r4, #9
 800b6a8:	d900      	bls.n	800b6ac <app_HisValue+0xc0>
 800b6aa:	2309      	movs	r3, #9
 800b6ac:	b2dc      	uxtb	r4, r3
			ldata = read_SDCard(fileName, index);
 800b6ae:	0022      	movs	r2, r4
 800b6b0:	a916      	add	r1, sp, #88	; 0x58
 800b6b2:	a81b      	add	r0, sp, #108	; 0x6c
 800b6b4:	f7ff fdea 	bl	800b28c <read_SDCard>
			screen_DataMeasureType1(ldata, CALIBSET, measurementIndex,
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	9303      	str	r3, [sp, #12]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	466b      	mov	r3, sp
 800b6c2:	9502      	str	r5, [sp, #8]
 800b6c4:	aa1f      	add	r2, sp, #124	; 0x7c
 800b6c6:	8811      	ldrh	r1, [r2, #0]
 800b6c8:	8019      	strh	r1, [r3, #0]
 800b6ca:	7892      	ldrb	r2, [r2, #2]
 800b6cc:	709a      	strb	r2, [r3, #2]
 800b6ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b6d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b6d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6d6:	f00c f9a9 	bl	8017a2c <screen_DataMeasureType1>
		if (_ON == mbutton.set) {
 800b6da:	7833      	ldrb	r3, [r6, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d000      	beq.n	800b6e2 <app_HisValue+0xf6>
 800b6e0:	e086      	b.n	800b7f0 <app_HisValue+0x204>
			while (_ON == io_getButton().set)
 800b6e2:	ae0a      	add	r6, sp, #40	; 0x28
 800b6e4:	0030      	movs	r0, r6
 800b6e6:	f00c f893 	bl	8017810 <io_getButton>
 800b6ea:	7833      	ldrb	r3, [r6, #0]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d0f8      	beq.n	800b6e2 <app_HisValue+0xf6>
				mbutton = io_getButton();
 800b6f0:	4e44      	ldr	r6, [pc, #272]	; (800b804 <app_HisValue+0x218>)
 800b6f2:	a804      	add	r0, sp, #16
 800b6f4:	f00c f88c 	bl	8017810 <io_getButton>
 800b6f8:	2205      	movs	r2, #5
 800b6fa:	0030      	movs	r0, r6
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	f00c ff9b 	bl	8018638 <memcpy>
				if (mbutton.next == _ON) {
 800b702:	78f3      	ldrb	r3, [r6, #3]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d117      	bne.n	800b738 <app_HisValue+0x14c>
					while (_ON == io_getButton().next)
 800b708:	af0c      	add	r7, sp, #48	; 0x30
 800b70a:	0038      	movs	r0, r7
 800b70c:	f00c f880 	bl	8017810 <io_getButton>
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d0f8      	beq.n	800b708 <app_HisValue+0x11c>
					screen_DataMeasureType2(ldata, CALIBSET, measurementIndex,
 800b716:	2301      	movs	r3, #1
 800b718:	9303      	str	r3, [sp, #12]
 800b71a:	2300      	movs	r3, #0
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	466b      	mov	r3, sp
 800b720:	9502      	str	r5, [sp, #8]
 800b722:	aa1f      	add	r2, sp, #124	; 0x7c
 800b724:	8811      	ldrh	r1, [r2, #0]
 800b726:	8019      	strh	r1, [r3, #0]
 800b728:	7892      	ldrb	r2, [r2, #2]
 800b72a:	709a      	strb	r2, [r3, #2]
 800b72c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b72e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b730:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b732:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b734:	f00c fb80 	bl	8017e38 <screen_DataMeasureType2>
				if (mbutton.prev == _ON) {
 800b738:	7933      	ldrb	r3, [r6, #4]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d117      	bne.n	800b76e <app_HisValue+0x182>
					while (_ON == io_getButton().prev)
 800b73e:	af0e      	add	r7, sp, #56	; 0x38
 800b740:	0038      	movs	r0, r7
 800b742:	f00c f865 	bl	8017810 <io_getButton>
 800b746:	793b      	ldrb	r3, [r7, #4]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d0f8      	beq.n	800b73e <app_HisValue+0x152>
					screen_DataMeasureType1(ldata, CALIBSET, measurementIndex,
 800b74c:	2301      	movs	r3, #1
 800b74e:	9303      	str	r3, [sp, #12]
 800b750:	2300      	movs	r3, #0
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	466b      	mov	r3, sp
 800b756:	9502      	str	r5, [sp, #8]
 800b758:	aa1f      	add	r2, sp, #124	; 0x7c
 800b75a:	8811      	ldrh	r1, [r2, #0]
 800b75c:	8019      	strh	r1, [r3, #0]
 800b75e:	7892      	ldrb	r2, [r2, #2]
 800b760:	709a      	strb	r2, [r3, #2]
 800b762:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b764:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b766:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b768:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b76a:	f00c f95f 	bl	8017a2c <screen_DataMeasureType1>
				if (mbutton.reset == _ON) {
 800b76e:	7873      	ldrb	r3, [r6, #1]
 800b770:	b2df      	uxtb	r7, r3
 800b772:	2b01      	cmp	r3, #1
 800b774:	d137      	bne.n	800b7e6 <app_HisValue+0x1fa>
					while (_ON == io_getButton().reset)
 800b776:	ae10      	add	r6, sp, #64	; 0x40
 800b778:	0030      	movs	r0, r6
 800b77a:	f00c f849 	bl	8017810 <io_getButton>
 800b77e:	7873      	ldrb	r3, [r6, #1]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d0f8      	beq.n	800b776 <app_HisValue+0x18a>
					screen_DataMeasureType1(ldata, CALIBSET, measurementIndex,
 800b784:	2301      	movs	r3, #1
 800b786:	9303      	str	r3, [sp, #12]
 800b788:	2300      	movs	r3, #0
 800b78a:	9301      	str	r3, [sp, #4]
 800b78c:	466b      	mov	r3, sp
 800b78e:	9502      	str	r5, [sp, #8]
 800b790:	aa1f      	add	r2, sp, #124	; 0x7c
 800b792:	8811      	ldrh	r1, [r2, #0]
 800b794:	8019      	strh	r1, [r3, #0]
 800b796:	7892      	ldrb	r2, [r2, #2]
 800b798:	709a      	strb	r2, [r3, #2]
 800b79a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b79c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b79e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b7a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b7a2:	f00c f943 	bl	8017a2c <screen_DataMeasureType1>
				if (_ON == mbutton.menu) {
 800b7a6:	4b17      	ldr	r3, [pc, #92]	; (800b804 <app_HisValue+0x218>)
 800b7a8:	789b      	ldrb	r3, [r3, #2]
 800b7aa:	b2de      	uxtb	r6, r3
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d11c      	bne.n	800b7ea <app_HisValue+0x1fe>
					while (_ON == io_getButton().menu)
 800b7b0:	af12      	add	r7, sp, #72	; 0x48
 800b7b2:	0038      	movs	r0, r7
 800b7b4:	f00c f82c 	bl	8017810 <io_getButton>
 800b7b8:	78bb      	ldrb	r3, [r7, #2]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d0f8      	beq.n	800b7b0 <app_HisValue+0x1c4>
		if (_ON == mbutton.menu) {
 800b7be:	4b11      	ldr	r3, [pc, #68]	; (800b804 <app_HisValue+0x218>)
 800b7c0:	789b      	ldrb	r3, [r3, #2]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d116      	bne.n	800b7f4 <app_HisValue+0x208>
			while (_ON == io_getButton().menu)
 800b7c6:	ac14      	add	r4, sp, #80	; 0x50
 800b7c8:	0020      	movs	r0, r4
 800b7ca:	f00c f821 	bl	8017810 <io_getButton>
 800b7ce:	78a3      	ldrb	r3, [r4, #2]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d0f8      	beq.n	800b7c6 <app_HisValue+0x1da>
	app_GotoMainScreen(calibStatus_1, MEASUREMENT_1, NOT_SHOW_SET_CALIB); // main screen
 800b7d4:	4b0c      	ldr	r3, [pc, #48]	; (800b808 <app_HisValue+0x21c>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	7818      	ldrb	r0, [r3, #0]
 800b7da:	2101      	movs	r1, #1
 800b7dc:	b2c0      	uxtb	r0, r0
 800b7de:	f7ff fe4b 	bl	800b478 <app_GotoMainScreen>
}
 800b7e2:	b021      	add	sp, #132	; 0x84
 800b7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e6:	2700      	movs	r7, #0
 800b7e8:	e7dd      	b.n	800b7a6 <app_HisValue+0x1ba>
			} while (tempExit == 0);
 800b7ea:	2f00      	cmp	r7, #0
 800b7ec:	d100      	bne.n	800b7f0 <app_HisValue+0x204>
 800b7ee:	e77f      	b.n	800b6f0 <app_HisValue+0x104>
 800b7f0:	2600      	movs	r6, #0
 800b7f2:	e7e4      	b.n	800b7be <app_HisValue+0x1d2>
	} while (exit == 0);
 800b7f4:	2e00      	cmp	r6, #0
 800b7f6:	d100      	bne.n	800b7fa <app_HisValue+0x20e>
 800b7f8:	e71a      	b.n	800b630 <app_HisValue+0x44>
 800b7fa:	e7eb      	b.n	800b7d4 <app_HisValue+0x1e8>
 800b7fc:	0801bd76 	.word	0x0801bd76
 800b800:	0801bd87 	.word	0x0801bd87
 800b804:	2000059e 	.word	0x2000059e
 800b808:	2000034a 	.word	0x2000034a

0800b80c <float2String>:
static void float2String(int n, char *res) {
 800b80c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b80e:	000d      	movs	r5, r1
	int ipart = n / 100;
 800b810:	2164      	movs	r1, #100	; 0x64
static void float2String(int n, char *res) {
 800b812:	0007      	movs	r7, r0
	int ipart = n / 100;
 800b814:	f7fc f9b2 	bl	8007b7c <__divsi3>
	int fpart = n % 100;
 800b818:	2164      	movs	r1, #100	; 0x64
	int ipart = n / 100;
 800b81a:	0004      	movs	r4, r0
	int fpart = n % 100;
 800b81c:	0038      	movs	r0, r7
 800b81e:	f7fc fa93 	bl	8007d48 <__aeabi_idivmod>
	uint8_t f_length = 0;
 800b822:	2600      	movs	r6, #0
	temp = fpart;
 800b824:	0008      	movs	r0, r1
	int fpart = n % 100;
 800b826:	9101      	str	r1, [sp, #4]
	while (temp) {
 800b828:	2800      	cmp	r0, #0
 800b82a:	d110      	bne.n	800b84e <float2String+0x42>
			sprintf(res, "-%d.0%d", ipart, abs(fpart));
 800b82c:	9b01      	ldr	r3, [sp, #4]
 800b82e:	17da      	asrs	r2, r3, #31
 800b830:	189b      	adds	r3, r3, r2
 800b832:	4053      	eors	r3, r2
 800b834:	0022      	movs	r2, r4
	if (n < 0 && ipart == 0) {
 800b836:	2f00      	cmp	r7, #0
 800b838:	da0f      	bge.n	800b85a <float2String+0x4e>
 800b83a:	2c00      	cmp	r4, #0
 800b83c:	d10d      	bne.n	800b85a <float2String+0x4e>
			sprintf(res, "-%d.0%d", ipart, abs(fpart));
 800b83e:	4909      	ldr	r1, [pc, #36]	; (800b864 <float2String+0x58>)
		if (f_length == 1)
 800b840:	2e01      	cmp	r6, #1
 800b842:	d000      	beq.n	800b846 <float2String+0x3a>
			sprintf(res, "-%d.%d", ipart, abs(fpart));
 800b844:	4908      	ldr	r1, [pc, #32]	; (800b868 <float2String+0x5c>)
			sprintf(res, "%d.%d", ipart, abs(fpart));
 800b846:	0028      	movs	r0, r5
 800b848:	f00d fab4 	bl	8018db4 <siprintf>
}
 800b84c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		temp /= 10;
 800b84e:	210a      	movs	r1, #10
		f_length++;
 800b850:	3601      	adds	r6, #1
 800b852:	b2f6      	uxtb	r6, r6
		temp /= 10;
 800b854:	f7fc f992 	bl	8007b7c <__divsi3>
 800b858:	e7e6      	b.n	800b828 <float2String+0x1c>
			sprintf(res, "%d.0%d", ipart, abs(fpart));
 800b85a:	4904      	ldr	r1, [pc, #16]	; (800b86c <float2String+0x60>)
		if (f_length == 1)
 800b85c:	2e01      	cmp	r6, #1
 800b85e:	d0f2      	beq.n	800b846 <float2String+0x3a>
			sprintf(res, "%d.%d", ipart, abs(fpart));
 800b860:	4903      	ldr	r1, [pc, #12]	; (800b870 <float2String+0x64>)
 800b862:	e7f0      	b.n	800b846 <float2String+0x3a>
 800b864:	0801bd98 	.word	0x0801bd98
 800b868:	0801bda0 	.word	0x0801bda0
 800b86c:	0801bd99 	.word	0x0801bd99
 800b870:	0801bda1 	.word	0x0801bda1

0800b874 <write_SDCard>:
		uint8_t measurementIndex) {
 800b874:	b084      	sub	sp, #16
 800b876:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b878:	4c86      	ldr	r4, [pc, #536]	; (800ba94 <write_SDCard+0x220>)
	char buff[110], RJudg[3] = " ", ZJudg[3] = " ";
 800b87a:	4f87      	ldr	r7, [pc, #540]	; (800ba98 <write_SDCard+0x224>)
		uint8_t measurementIndex) {
 800b87c:	44a5      	add	sp, r4
 800b87e:	4c87      	ldr	r4, [pc, #540]	; (800ba9c <write_SDCard+0x228>)
 800b880:	ad06      	add	r5, sp, #24
 800b882:	1964      	adds	r4, r4, r5
 800b884:	6020      	str	r0, [r4, #0]
 800b886:	4886      	ldr	r0, [pc, #536]	; (800baa0 <write_SDCard+0x22c>)
 800b888:	0a1c      	lsrs	r4, r3, #8
 800b88a:	1940      	adds	r0, r0, r5
 800b88c:	6001      	str	r1, [r0, #0]
 800b88e:	4985      	ldr	r1, [pc, #532]	; (800baa4 <write_SDCard+0x230>)
	char buff[110], RJudg[3] = " ", ZJudg[3] = " ";
 800b890:	a812      	add	r0, sp, #72	; 0x48
		uint8_t measurementIndex) {
 800b892:	1949      	adds	r1, r1, r5
 800b894:	600a      	str	r2, [r1, #0]
 800b896:	4984      	ldr	r1, [pc, #528]	; (800baa8 <write_SDCard+0x234>)
 800b898:	0c1a      	lsrs	r2, r3, #16
 800b89a:	1949      	adds	r1, r1, r5
 800b89c:	600b      	str	r3, [r1, #0]
 800b89e:	2186      	movs	r1, #134	; 0x86
 800b8a0:	0189      	lsls	r1, r1, #6
 800b8a2:	1949      	adds	r1, r1, r5
 800b8a4:	7809      	ldrb	r1, [r1, #0]
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	9111      	str	r1, [sp, #68]	; 0x44
 800b8aa:	497c      	ldr	r1, [pc, #496]	; (800ba9c <write_SDCard+0x228>)
 800b8ac:	920d      	str	r2, [sp, #52]	; 0x34
 800b8ae:	1949      	adds	r1, r1, r5
 800b8b0:	b2dd      	uxtb	r5, r3
 800b8b2:	0e1b      	lsrs	r3, r3, #24
 800b8b4:	930e      	str	r3, [sp, #56]	; 0x38
 800b8b6:	7c0b      	ldrb	r3, [r1, #16]
	char buff[110], RJudg[3] = " ", ZJudg[3] = " ";
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8bc:	7c8b      	ldrb	r3, [r1, #18]
 800b8be:	0039      	movs	r1, r7
 800b8c0:	9310      	str	r3, [sp, #64]	; 0x40
 800b8c2:	f00c feb9 	bl	8018638 <memcpy>
 800b8c6:	2332      	movs	r3, #50	; 0x32
 800b8c8:	2600      	movs	r6, #0
 800b8ca:	aa06      	add	r2, sp, #24
 800b8cc:	189b      	adds	r3, r3, r2
 800b8ce:	0039      	movs	r1, r7
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	a813      	add	r0, sp, #76	; 0x4c
 800b8d4:	701e      	strb	r6, [r3, #0]
 800b8d6:	f00c feaf 	bl	8018638 <memcpy>
 800b8da:	2336      	movs	r3, #54	; 0x36
	if (f_mount(&FatFs, "", 0) != FR_OK) //mount SD card
 800b8dc:	2089      	movs	r0, #137	; 0x89
	char buff[110], RJudg[3] = " ", ZJudg[3] = " ";
 800b8de:	aa06      	add	r2, sp, #24
 800b8e0:	189b      	adds	r3, r3, r2
 800b8e2:	701e      	strb	r6, [r3, #0]
	if (f_mount(&FatFs, "", 0) != FR_OK) //mount SD card
 800b8e4:	0140      	lsls	r0, r0, #5
 800b8e6:	ab06      	add	r3, sp, #24
 800b8e8:	0032      	movs	r2, r6
 800b8ea:	4970      	ldr	r1, [pc, #448]	; (800baac <write_SDCard+0x238>)
 800b8ec:	18c0      	adds	r0, r0, r3
 800b8ee:	b2e4      	uxtb	r4, r4
 800b8f0:	f00a fde4 	bl	80164bc <f_mount>
 800b8f4:	42b0      	cmp	r0, r6
 800b8f6:	d000      	beq.n	800b8fa <write_SDCard+0x86>
 800b8f8:	e089      	b.n	800ba0e <write_SDCard+0x19a>
	if (measurementIndex == MEASUREMENT_1) {
 800b8fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b8fc:	4b6c      	ldr	r3, [pc, #432]	; (800bab0 <write_SDCard+0x23c>)
 800b8fe:	2a01      	cmp	r2, #1
 800b900:	d000      	beq.n	800b904 <write_SDCard+0x90>
 800b902:	e08a      	b.n	800ba1a <write_SDCard+0x1a6>
		if (moutput.out3 == _ON) {
 800b904:	78db      	ldrb	r3, [r3, #3]
			strcpy(ZJudg, "NG");
 800b906:	496b      	ldr	r1, [pc, #428]	; (800bab4 <write_SDCard+0x240>)
		if (moutput.out3 == _ON) {
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d000      	beq.n	800b90e <write_SDCard+0x9a>
			strcpy(ZJudg, "OK");
 800b90c:	496a      	ldr	r1, [pc, #424]	; (800bab8 <write_SDCard+0x244>)
 800b90e:	a813      	add	r0, sp, #76	; 0x4c
 800b910:	f00d fae6 	bl	8018ee0 <strcpy>
		if (moutput.out2 == _ON) {
 800b914:	4b66      	ldr	r3, [pc, #408]	; (800bab0 <write_SDCard+0x23c>)
 800b916:	789b      	ldrb	r3, [r3, #2]
			strcpy(RJudg, "NG");
 800b918:	4966      	ldr	r1, [pc, #408]	; (800bab4 <write_SDCard+0x240>)
		if (moutput.out2 == _ON) {
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d000      	beq.n	800b920 <write_SDCard+0xac>
			strcpy(RJudg, "OK");
 800b91e:	4966      	ldr	r1, [pc, #408]	; (800bab8 <write_SDCard+0x244>)
	float2String(data.coordinates.X, X_str);
 800b920:	4e5e      	ldr	r6, [pc, #376]	; (800ba9c <write_SDCard+0x228>)
			strcpy(RJudg, "OK");
 800b922:	a812      	add	r0, sp, #72	; 0x48
 800b924:	f00d fadc 	bl	8018ee0 <strcpy>
	float2String(data.coordinates.X, X_str);
 800b928:	ab06      	add	r3, sp, #24
 800b92a:	18f6      	adds	r6, r6, r3
 800b92c:	2300      	movs	r3, #0
 800b92e:	5ef0      	ldrsh	r0, [r6, r3]
 800b930:	a915      	add	r1, sp, #84	; 0x54
 800b932:	f7ff ff6b 	bl	800b80c <float2String>
	float2String(data.coordinates.Z, Z_str);
 800b936:	2304      	movs	r3, #4
 800b938:	5ef0      	ldrsh	r0, [r6, r3]
 800b93a:	a91b      	add	r1, sp, #108	; 0x6c
 800b93c:	f7ff ff66 	bl	800b80c <float2String>
	float2String(data.coordinates.Y, Y_str);
 800b940:	2302      	movs	r3, #2
 800b942:	5ef0      	ldrsh	r0, [r6, r3]
 800b944:	a918      	add	r1, sp, #96	; 0x60
 800b946:	f7ff ff61 	bl	800b80c <float2String>
	float2String(data.coordinates.aX, aX_str);
 800b94a:	af21      	add	r7, sp, #132	; 0x84
	float2String(data.coordinates.R, R_str);
 800b94c:	2306      	movs	r3, #6
 800b94e:	5ef0      	ldrsh	r0, [r6, r3]
 800b950:	a91e      	add	r1, sp, #120	; 0x78
 800b952:	f7ff ff5b 	bl	800b80c <float2String>
	float2String(data.coordinates.aX, aX_str);
 800b956:	2308      	movs	r3, #8
 800b958:	5ef0      	ldrsh	r0, [r6, r3]
 800b95a:	0039      	movs	r1, r7
 800b95c:	f7ff ff56 	bl	800b80c <float2String>
	float2String(data.coordinates.aY, aY_str);
 800b960:	230a      	movs	r3, #10
 800b962:	5ef0      	ldrsh	r0, [r6, r3]
 800b964:	a924      	add	r1, sp, #144	; 0x90
 800b966:	f7ff ff51 	bl	800b80c <float2String>
	if (f_open(&fil, fileName, FA_WRITE) != FR_OK) {
 800b96a:	4b54      	ldr	r3, [pc, #336]	; (800babc <write_SDCard+0x248>)
 800b96c:	a906      	add	r1, sp, #24
 800b96e:	185b      	adds	r3, r3, r1
 800b970:	2202      	movs	r2, #2
 800b972:	6819      	ldr	r1, [r3, #0]
 800b974:	a843      	add	r0, sp, #268	; 0x10c
 800b976:	f00a fdd1 	bl	801651c <f_open>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d014      	beq.n	800b9a8 <write_SDCard+0x134>
		f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE); //create file
 800b97e:	4b4f      	ldr	r3, [pc, #316]	; (800babc <write_SDCard+0x248>)
 800b980:	a906      	add	r1, sp, #24
 800b982:	185b      	adds	r3, r3, r1
 800b984:	6819      	ldr	r1, [r3, #0]
 800b986:	2212      	movs	r2, #18
 800b988:	a843      	add	r0, sp, #268	; 0x10c
 800b98a:	f00a fdc7 	bl	801651c <f_open>
		sprintf(buff, "Date & Time,Z,X,Y,R,A,B,Judgment of Z,Judgment of R\n");
 800b98e:	494c      	ldr	r1, [pc, #304]	; (800bac0 <write_SDCard+0x24c>)
 800b990:	a827      	add	r0, sp, #156	; 0x9c
 800b992:	f00d faa5 	bl	8018ee0 <strcpy>
		f_write(&fil, buff, strlen(buff), &BytesWr);
 800b996:	a827      	add	r0, sp, #156	; 0x9c
 800b998:	f7fc f836 	bl	8007a08 <strlen>
 800b99c:	ab14      	add	r3, sp, #80	; 0x50
 800b99e:	0002      	movs	r2, r0
 800b9a0:	a927      	add	r1, sp, #156	; 0x9c
 800b9a2:	a843      	add	r0, sp, #268	; 0x10c
 800b9a4:	f00a ffe6 	bl	8016974 <f_write>
	if (data.mode == ZERROR2) {
 800b9a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d140      	bne.n	800ba30 <write_SDCard+0x1bc>
		sprintf(buff, "20%02u/%02u/%02u - %02u:%02u,-,%s,%s,%s,%s,%s,-,%s\n",
 800b9ae:	ab12      	add	r3, sp, #72	; 0x48
 800b9b0:	9308      	str	r3, [sp, #32]
 800b9b2:	ab24      	add	r3, sp, #144	; 0x90
 800b9b4:	9307      	str	r3, [sp, #28]
 800b9b6:	ab1e      	add	r3, sp, #120	; 0x78
 800b9b8:	9305      	str	r3, [sp, #20]
 800b9ba:	ab18      	add	r3, sp, #96	; 0x60
 800b9bc:	9304      	str	r3, [sp, #16]
 800b9be:	ab15      	add	r3, sp, #84	; 0x54
 800b9c0:	9303      	str	r3, [sp, #12]
 800b9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9c4:	002a      	movs	r2, r5
 800b9c6:	9302      	str	r3, [sp, #8]
 800b9c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ca:	493e      	ldr	r1, [pc, #248]	; (800bac4 <write_SDCard+0x250>)
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9d0:	9706      	str	r7, [sp, #24]
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	a827      	add	r0, sp, #156	; 0x9c
 800b9d6:	0023      	movs	r3, r4
 800b9d8:	f00d f9ec 	bl	8018db4 <siprintf>
	f_lseek(&fil, f_size(&fil));
 800b9dc:	2388      	movs	r3, #136	; 0x88
 800b9de:	aa06      	add	r2, sp, #24
 800b9e0:	015b      	lsls	r3, r3, #5
 800b9e2:	189b      	adds	r3, r3, r2
 800b9e4:	6819      	ldr	r1, [r3, #0]
 800b9e6:	a843      	add	r0, sp, #268	; 0x10c
 800b9e8:	f00b f974 	bl	8016cd4 <f_lseek>
	f_write(&fil, buff, strlen(buff), &BytesWr);
 800b9ec:	a827      	add	r0, sp, #156	; 0x9c
 800b9ee:	f7fc f80b 	bl	8007a08 <strlen>
 800b9f2:	a927      	add	r1, sp, #156	; 0x9c
 800b9f4:	0002      	movs	r2, r0
 800b9f6:	ab14      	add	r3, sp, #80	; 0x50
 800b9f8:	a843      	add	r0, sp, #268	; 0x10c
 800b9fa:	f00a ffbb 	bl	8016974 <f_write>
	f_close(&fil);
 800b9fe:	a843      	add	r0, sp, #268	; 0x10c
 800ba00:	f00b f950 	bl	8016ca4 <f_close>
	f_mount(NULL, "", 0);
 800ba04:	2200      	movs	r2, #0
 800ba06:	4929      	ldr	r1, [pc, #164]	; (800baac <write_SDCard+0x238>)
 800ba08:	0010      	movs	r0, r2
 800ba0a:	f00a fd57 	bl	80164bc <f_mount>
}
 800ba0e:	4b24      	ldr	r3, [pc, #144]	; (800baa0 <write_SDCard+0x22c>)
 800ba10:	449d      	add	sp, r3
 800ba12:	bcf0      	pop	{r4, r5, r6, r7}
 800ba14:	bc08      	pop	{r3}
 800ba16:	b004      	add	sp, #16
 800ba18:	4718      	bx	r3
		if (moutput.out6 == _ON) {
 800ba1a:	799b      	ldrb	r3, [r3, #6]
			strcpy(ZJudg, "NG");
 800ba1c:	4925      	ldr	r1, [pc, #148]	; (800bab4 <write_SDCard+0x240>)
		if (moutput.out6 == _ON) {
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d000      	beq.n	800ba24 <write_SDCard+0x1b0>
			strcpy(ZJudg, "OK");
 800ba22:	4925      	ldr	r1, [pc, #148]	; (800bab8 <write_SDCard+0x244>)
 800ba24:	a813      	add	r0, sp, #76	; 0x4c
 800ba26:	f00d fa5b 	bl	8018ee0 <strcpy>
		if (moutput.out5 == _ON) {
 800ba2a:	4b21      	ldr	r3, [pc, #132]	; (800bab0 <write_SDCard+0x23c>)
 800ba2c:	795b      	ldrb	r3, [r3, #5]
 800ba2e:	e773      	b.n	800b918 <write_SDCard+0xa4>
	} else if (data.mode == ZONLY) {
 800ba30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d110      	bne.n	800ba58 <write_SDCard+0x1e4>
		sprintf(buff, "20%02u/%02u/%02u - %02u:%02u,%s,-,-,-,-,-,%s,-\n",
 800ba36:	ab13      	add	r3, sp, #76	; 0x4c
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	ab1b      	add	r3, sp, #108	; 0x6c
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba40:	002a      	movs	r2, r5
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba46:	4920      	ldr	r1, [pc, #128]	; (800bac8 <write_SDCard+0x254>)
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba4c:	a827      	add	r0, sp, #156	; 0x9c
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	0023      	movs	r3, r4
 800ba52:	f00d f9af 	bl	8018db4 <siprintf>
 800ba56:	e7c1      	b.n	800b9dc <write_SDCard+0x168>
		sprintf(buff, "20%02u/%02u/%02u - %02u:%02u,%s,%s,%s,%s,%s,%s,%s,%s\n",
 800ba58:	ab12      	add	r3, sp, #72	; 0x48
 800ba5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba5c:	ab13      	add	r3, sp, #76	; 0x4c
 800ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba60:	ab24      	add	r3, sp, #144	; 0x90
 800ba62:	9308      	str	r3, [sp, #32]
 800ba64:	ab21      	add	r3, sp, #132	; 0x84
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	ab1e      	add	r3, sp, #120	; 0x78
 800ba6a:	9306      	str	r3, [sp, #24]
 800ba6c:	ab18      	add	r3, sp, #96	; 0x60
 800ba6e:	9305      	str	r3, [sp, #20]
 800ba70:	ab15      	add	r3, sp, #84	; 0x54
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	ab1b      	add	r3, sp, #108	; 0x6c
 800ba76:	9303      	str	r3, [sp, #12]
 800ba78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba7a:	002a      	movs	r2, r5
 800ba7c:	9302      	str	r3, [sp, #8]
 800ba7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba80:	4912      	ldr	r1, [pc, #72]	; (800bacc <write_SDCard+0x258>)
 800ba82:	9301      	str	r3, [sp, #4]
 800ba84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba86:	a827      	add	r0, sp, #156	; 0x9c
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	0023      	movs	r3, r4
 800ba8c:	f00d f992 	bl	8018db4 <siprintf>
 800ba90:	e7a4      	b.n	800b9dc <write_SDCard+0x168>
 800ba92:	46c0      	nop			; (mov r8, r8)
 800ba94:	ffffde94 	.word	0xffffde94
 800ba98:	0801bc00 	.word	0x0801bc00
 800ba9c:	00002168 	.word	0x00002168
 800baa0:	0000216c 	.word	0x0000216c
 800baa4:	00002170 	.word	0x00002170
 800baa8:	00002174 	.word	0x00002174
 800baac:	0801bd58 	.word	0x0801bd58
 800bab0:	200005e7 	.word	0x200005e7
 800bab4:	0801c5ff 	.word	0x0801c5ff
 800bab8:	0801bda7 	.word	0x0801bda7
 800babc:	0000217c 	.word	0x0000217c
 800bac0:	0801bdaa 	.word	0x0801bdaa
 800bac4:	0801bddf 	.word	0x0801bddf
 800bac8:	0801be13 	.word	0x0801be13
 800bacc:	0801be43 	.word	0x0801be43

0800bad0 <app_GetCalibValue>:
static void app_GetCalibValue(uint8_t measurementIndex) {
 800bad0:	b570      	push	{r4, r5, r6, lr}
	mcalibValue = FLASH_ReadDataCalib(measurementIndex);
 800bad2:	4c2d      	ldr	r4, [pc, #180]	; (800bb88 <app_GetCalibValue+0xb8>)
static void app_GetCalibValue(uint8_t measurementIndex) {
 800bad4:	b086      	sub	sp, #24
 800bad6:	0001      	movs	r1, r0
	mcalibValue = FLASH_ReadDataCalib(measurementIndex);
 800bad8:	4668      	mov	r0, sp
 800bada:	f007 f8ad 	bl	8012c38 <FLASH_ReadDataCalib>
 800bade:	2214      	movs	r2, #20
 800bae0:	4669      	mov	r1, sp
 800bae2:	0020      	movs	r0, r4
 800bae4:	f00c fda8 	bl	8018638 <memcpy>
	if (mcalibValue.X1 == EMPTY && mcalibValue.X2 == EMPTY
 800bae8:	7865      	ldrb	r5, [r4, #1]
 800baea:	7820      	ldrb	r0, [r4, #0]
 800baec:	022d      	lsls	r5, r5, #8
 800baee:	4305      	orrs	r5, r0
 800baf0:	78a0      	ldrb	r0, [r4, #2]
 800baf2:	7a62      	ldrb	r2, [r4, #9]
 800baf4:	0400      	lsls	r0, r0, #16
 800baf6:	4328      	orrs	r0, r5
 800baf8:	78e5      	ldrb	r5, [r4, #3]
 800bafa:	0212      	lsls	r2, r2, #8
 800bafc:	062d      	lsls	r5, r5, #24
 800bafe:	4305      	orrs	r5, r0
 800bb00:	7a20      	ldrb	r0, [r4, #8]
			&& mcalibValue.Y1 == EMPTY && mcalibValue.Y2 == EMPTY
 800bb02:	7961      	ldrb	r1, [r4, #5]
	if (mcalibValue.X1 == EMPTY && mcalibValue.X2 == EMPTY
 800bb04:	4302      	orrs	r2, r0
 800bb06:	7aa0      	ldrb	r0, [r4, #10]
 800bb08:	7ae6      	ldrb	r6, [r4, #11]
 800bb0a:	0400      	lsls	r0, r0, #16
 800bb0c:	4310      	orrs	r0, r2
			&& mcalibValue.Y1 == EMPTY && mcalibValue.Y2 == EMPTY
 800bb0e:	7922      	ldrb	r2, [r4, #4]
 800bb10:	0209      	lsls	r1, r1, #8
 800bb12:	4311      	orrs	r1, r2
	if (mcalibValue.X1 == EMPTY && mcalibValue.X2 == EMPTY
 800bb14:	0636      	lsls	r6, r6, #24
			&& mcalibValue.Y1 == EMPTY && mcalibValue.Y2 == EMPTY
 800bb16:	79a2      	ldrb	r2, [r4, #6]
	if (mcalibValue.X1 == EMPTY && mcalibValue.X2 == EMPTY
 800bb18:	4330      	orrs	r0, r6
			&& mcalibValue.Z == EMPTY) {
 800bb1a:	4028      	ands	r0, r5
			&& mcalibValue.Y1 == EMPTY && mcalibValue.Y2 == EMPTY
 800bb1c:	7b63      	ldrb	r3, [r4, #13]
 800bb1e:	79e5      	ldrb	r5, [r4, #7]
 800bb20:	0412      	lsls	r2, r2, #16
 800bb22:	430a      	orrs	r2, r1
 800bb24:	7b21      	ldrb	r1, [r4, #12]
 800bb26:	062d      	lsls	r5, r5, #24
 800bb28:	021b      	lsls	r3, r3, #8
 800bb2a:	430b      	orrs	r3, r1
 800bb2c:	432a      	orrs	r2, r5
 800bb2e:	7ba1      	ldrb	r1, [r4, #14]
			&& mcalibValue.Z == EMPTY) {
 800bb30:	4002      	ands	r2, r0
			&& mcalibValue.Y1 == EMPTY && mcalibValue.Y2 == EMPTY
 800bb32:	7be0      	ldrb	r0, [r4, #15]
 800bb34:	0409      	lsls	r1, r1, #16
 800bb36:	4319      	orrs	r1, r3
 800bb38:	0600      	lsls	r0, r0, #24
 800bb3a:	4301      	orrs	r1, r0
			&& mcalibValue.Z == EMPTY) {
 800bb3c:	7c60      	ldrb	r0, [r4, #17]
 800bb3e:	7c23      	ldrb	r3, [r4, #16]
 800bb40:	4011      	ands	r1, r2
 800bb42:	0200      	lsls	r0, r0, #8
 800bb44:	7ca2      	ldrb	r2, [r4, #18]
 800bb46:	4318      	orrs	r0, r3
 800bb48:	7ce3      	ldrb	r3, [r4, #19]
 800bb4a:	0412      	lsls	r2, r2, #16
 800bb4c:	4310      	orrs	r0, r2
 800bb4e:	061b      	lsls	r3, r3, #24
 800bb50:	4303      	orrs	r3, r0
 800bb52:	400b      	ands	r3, r1
 800bb54:	3301      	adds	r3, #1
 800bb56:	d114      	bne.n	800bb82 <app_GetCalibValue+0xb2>
		mcalibValue.X1 = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	7023      	strb	r3, [r4, #0]
 800bb5c:	7063      	strb	r3, [r4, #1]
 800bb5e:	70a3      	strb	r3, [r4, #2]
 800bb60:	70e3      	strb	r3, [r4, #3]
		mcalibValue.X2 = 0;
 800bb62:	7223      	strb	r3, [r4, #8]
 800bb64:	7263      	strb	r3, [r4, #9]
 800bb66:	72a3      	strb	r3, [r4, #10]
 800bb68:	72e3      	strb	r3, [r4, #11]
		mcalibValue.Y1 = 0;
 800bb6a:	7123      	strb	r3, [r4, #4]
 800bb6c:	7163      	strb	r3, [r4, #5]
 800bb6e:	71a3      	strb	r3, [r4, #6]
 800bb70:	71e3      	strb	r3, [r4, #7]
		mcalibValue.Y2 = 0;
 800bb72:	7323      	strb	r3, [r4, #12]
 800bb74:	7363      	strb	r3, [r4, #13]
 800bb76:	73a3      	strb	r3, [r4, #14]
 800bb78:	73e3      	strb	r3, [r4, #15]
		mcalibValue.Z = 0;
 800bb7a:	7423      	strb	r3, [r4, #16]
 800bb7c:	7463      	strb	r3, [r4, #17]
 800bb7e:	74a3      	strb	r3, [r4, #18]
 800bb80:	74e3      	strb	r3, [r4, #19]
}
 800bb82:	b006      	add	sp, #24
 800bb84:	bd70      	pop	{r4, r5, r6, pc}
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	200005a3 	.word	0x200005a3

0800bb8c <SystemClock_Config>:
{
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bb90:	2234      	movs	r2, #52	; 0x34
 800bb92:	2100      	movs	r1, #0
 800bb94:	a80b      	add	r0, sp, #44	; 0x2c
 800bb96:	f00c fd58 	bl	801864a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bb9a:	2210      	movs	r2, #16
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4668      	mov	r0, sp
 800bba0:	f00c fd53 	bl	801864a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bba4:	221c      	movs	r2, #28
 800bba6:	2100      	movs	r1, #0
 800bba8:	a804      	add	r0, sp, #16
 800bbaa:	f00c fd4e 	bl	801864a <memset>
  HAL_PWR_EnableBkUpAccess();
 800bbae:	f004 f957 	bl	800fe60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800bbb2:	2318      	movs	r3, #24
 800bbb4:	4a17      	ldr	r2, [pc, #92]	; (800bc14 <SystemClock_Config+0x88>)
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bbb6:	2401      	movs	r4, #1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800bbb8:	6a11      	ldr	r1, [r2, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bbba:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE;
 800bbc0:	2324      	movs	r3, #36	; 0x24
 800bbc2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800bbc4:	2300      	movs	r3, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bbc6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800bbc8:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800bbca:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bbcc:	f004 f952 	bl	800fe74 <HAL_RCC_OscConfig>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d001      	beq.n	800bbd8 <SystemClock_Config+0x4c>
 800bbd4:	b672      	cpsid	i
	while (1) {
 800bbd6:	e7fe      	b.n	800bbd6 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bbd8:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bbda:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bbdc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bbde:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800bbe0:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800bbe2:	0021      	movs	r1, r4
 800bbe4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800bbe6:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800bbe8:	f004 fbcc 	bl	8010384 <HAL_RCC_ClockConfig>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d001      	beq.n	800bbf4 <SystemClock_Config+0x68>
 800bbf0:	b672      	cpsid	i
	while (1) {
 800bbf2:	e7fe      	b.n	800bbf2 <SystemClock_Config+0x66>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800bbf4:	4b08      	ldr	r3, [pc, #32]	; (800bc18 <SystemClock_Config+0x8c>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bbf6:	9007      	str	r0, [sp, #28]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800bbf8:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bbfa:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bbfc:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bbfe:	005b      	lsls	r3, r3, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bc00:	a804      	add	r0, sp, #16
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bc02:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bc04:	f004 fc58 	bl	80104b8 <HAL_RCCEx_PeriphCLKConfig>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d001      	beq.n	800bc10 <SystemClock_Config+0x84>
 800bc0c:	b672      	cpsid	i
	while (1) {
 800bc0e:	e7fe      	b.n	800bc0e <SystemClock_Config+0x82>
}
 800bc10:	b018      	add	sp, #96	; 0x60
 800bc12:	bd10      	pop	{r4, pc}
 800bc14:	40021000 	.word	0x40021000
 800bc18:	00030002 	.word	0x00030002

0800bc1c <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim1) {
 800bc1c:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <HAL_TIM_PeriodElapsedCallback+0x4c>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //should check
 800bc1e:	b570      	push	{r4, r5, r6, lr}
	if (htim == &htim1) {
 800bc20:	4298      	cmp	r0, r3
 800bc22:	d104      	bne.n	800bc2e <HAL_TIM_PeriodElapsedCallback+0x12>
		overflow++;
 800bc24:	4a11      	ldr	r2, [pc, #68]	; (800bc6c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800bc26:	6813      	ldr	r3, [r2, #0]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	6013      	str	r3, [r2, #0]
}
 800bc2c:	bd70      	pop	{r4, r5, r6, pc}
	if (htim == &htim3) {
 800bc2e:	4c10      	ldr	r4, [pc, #64]	; (800bc70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800bc30:	42a0      	cmp	r0, r4
 800bc32:	d1fb      	bne.n	800bc2c <HAL_TIM_PeriodElapsedCallback+0x10>
		if (meas1WrongPos)
 800bc34:	4e0f      	ldr	r6, [pc, #60]	; (800bc74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800bc36:	7833      	ldrb	r3, [r6, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d004      	beq.n	800bc46 <HAL_TIM_PeriodElapsedCallback+0x2a>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bc3c:	2180      	movs	r1, #128	; 0x80
 800bc3e:	480e      	ldr	r0, [pc, #56]	; (800bc78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800bc40:	0049      	lsls	r1, r1, #1
 800bc42:	f003 fa61 	bl	800f108 <HAL_GPIO_TogglePin>
		if (meas2WrongPos)
 800bc46:	4d0d      	ldr	r5, [pc, #52]	; (800bc7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800bc48:	782b      	ldrb	r3, [r5, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d004      	beq.n	800bc58 <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800bc4e:	2180      	movs	r1, #128	; 0x80
 800bc50:	4809      	ldr	r0, [pc, #36]	; (800bc78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800bc52:	0089      	lsls	r1, r1, #2
 800bc54:	f003 fa58 	bl	800f108 <HAL_GPIO_TogglePin>
		if (meas1WrongPos == 0 && meas2WrongPos == 0) {
 800bc58:	7833      	ldrb	r3, [r6, #0]
 800bc5a:	782a      	ldrb	r2, [r5, #0]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	d1e5      	bne.n	800bc2c <HAL_TIM_PeriodElapsedCallback+0x10>
			HAL_TIM_Base_Stop_IT(&htim3);
 800bc60:	0020      	movs	r0, r4
 800bc62:	f005 fbef 	bl	8011444 <HAL_TIM_Base_Stop_IT>
}
 800bc66:	e7e1      	b.n	800bc2c <HAL_TIM_PeriodElapsedCallback+0x10>
 800bc68:	2000043c 	.word	0x2000043c
 800bc6c:	200005f4 	.word	0x200005f4
 800bc70:	20000484 	.word	0x20000484
 800bc74:	200005ca 	.word	0x200005ca
 800bc78:	48000800 	.word	0x48000800
 800bc7c:	200005cb 	.word	0x200005cb

0800bc80 <app_CalculatorValue>:
		uint8_t measurementIndex) {
 800bc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc82:	b097      	sub	sp, #92	; 0x5c
 800bc84:	9000      	str	r0, [sp, #0]
	buffer = FLASH_ReadVDRLZ();
 800bc86:	a811      	add	r0, sp, #68	; 0x44
		uint8_t measurementIndex) {
 800bc88:	000d      	movs	r5, r1
 800bc8a:	920c      	str	r2, [sp, #48]	; 0x30
	buffer = FLASH_ReadVDRLZ();
 800bc8c:	f006 fff8 	bl	8012c80 <FLASH_ReadVDRLZ>
 800bc90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bc94:	9302      	str	r3, [sp, #8]
 800bc96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc98:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800bc9a:	930d      	str	r3, [sp, #52]	; 0x34
	if (measurementIndex == 1) {
 800bc9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d000      	beq.n	800bca4 <app_CalculatorValue+0x24>
 800bca2:	e2be      	b.n	800c222 <app_CalculatorValue+0x5a2>
		temp = (uint8_t) calibStatus_1;
 800bca4:	4bf3      	ldr	r3, [pc, #972]	; (800c074 <app_CalculatorValue+0x3f4>)
		app_GetCalibValue(MEASUREMENT_1);
 800bca6:	980c      	ldr	r0, [sp, #48]	; 0x30
		temp = (uint8_t) calibStatus_1;
 800bca8:	781c      	ldrb	r4, [r3, #0]
 800bcaa:	b2e4      	uxtb	r4, r4
		app_GetCalibValue(MEASUREMENT_2);
 800bcac:	f7ff ff10 	bl	800bad0 <app_GetCalibValue>
	if (CALIBSET == temp) {
 800bcb0:	2c00      	cmp	r4, #0
 800bcb2:	d000      	beq.n	800bcb6 <app_CalculatorValue+0x36>
 800bcb4:	e2b3      	b.n	800c21e <app_CalculatorValue+0x59e>
		mdata.time = rtc_Now();
 800bcb6:	a80e      	add	r0, sp, #56	; 0x38
 800bcb8:	f00b fe96 	bl	80179e8 <rtc_Now>
 800bcbc:	48ee      	ldr	r0, [pc, #952]	; (800c078 <app_CalculatorValue+0x3f8>)
 800bcbe:	2206      	movs	r2, #6
 800bcc0:	a90e      	add	r1, sp, #56	; 0x38
 800bcc2:	300c      	adds	r0, #12
 800bcc4:	f00c fcb8 	bl	8018638 <memcpy>
		if ((ZONLY == mode) || (MEASUREALL == mode)) {
 800bcc8:	2d01      	cmp	r5, #1
 800bcca:	d001      	beq.n	800bcd0 <app_CalculatorValue+0x50>
 800bccc:	2d04      	cmp	r5, #4
 800bcce:	d167      	bne.n	800bda0 <app_CalculatorValue+0x120>
			db_DetaTZ = ((double) (mmeasureValue.Z - mcalibValue.Z))
 800bcd0:	49ea      	ldr	r1, [pc, #936]	; (800c07c <app_CalculatorValue+0x3fc>)
 800bcd2:	4ceb      	ldr	r4, [pc, #940]	; (800c080 <app_CalculatorValue+0x400>)
 800bcd4:	7c4b      	ldrb	r3, [r1, #17]
 800bcd6:	7c0a      	ldrb	r2, [r1, #16]
 800bcd8:	7c88      	ldrb	r0, [r1, #18]
 800bcda:	021b      	lsls	r3, r3, #8
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	7ccb      	ldrb	r3, [r1, #19]
 800bce0:	0400      	lsls	r0, r0, #16
 800bce2:	7c61      	ldrb	r1, [r4, #17]
 800bce4:	4310      	orrs	r0, r2
 800bce6:	061b      	lsls	r3, r3, #24
 800bce8:	4318      	orrs	r0, r3
 800bcea:	7c23      	ldrb	r3, [r4, #16]
 800bcec:	7ca2      	ldrb	r2, [r4, #18]
 800bcee:	0209      	lsls	r1, r1, #8
 800bcf0:	4319      	orrs	r1, r3
 800bcf2:	7ce3      	ldrb	r3, [r4, #19]
 800bcf4:	0412      	lsls	r2, r2, #16
 800bcf6:	4311      	orrs	r1, r2
 800bcf8:	061b      	lsls	r3, r3, #24
 800bcfa:	430b      	orrs	r3, r1
 800bcfc:	1ac0      	subs	r0, r0, r3
 800bcfe:	f7fe fc29 	bl	800a554 <__aeabi_i2d>
 800bd02:	2200      	movs	r2, #0
 800bd04:	4bdf      	ldr	r3, [pc, #892]	; (800c084 <app_CalculatorValue+0x404>)
 800bd06:	f7fd f9d1 	bl	80090ac <__aeabi_ddiv>
 800bd0a:	0004      	movs	r4, r0
			db_DetaZ = buffer.V * db_DetaTZ;
 800bd0c:	0030      	movs	r0, r6
			db_DetaTZ = ((double) (mmeasureValue.Z - mcalibValue.Z))
 800bd0e:	000d      	movs	r5, r1
			db_DetaZ = buffer.V * db_DetaTZ;
 800bd10:	f7fe fc50 	bl	800a5b4 <__aeabi_ui2d>
 800bd14:	0002      	movs	r2, r0
 800bd16:	000b      	movs	r3, r1
 800bd18:	0020      	movs	r0, r4
 800bd1a:	0029      	movs	r1, r5
 800bd1c:	f7fd fdc8 	bl	80098b0 <__aeabi_dmul>
			mdata.coordinates.Z = (int16_t) (db_DetaZ * 100.0);
 800bd20:	2200      	movs	r2, #0
 800bd22:	4bd9      	ldr	r3, [pc, #868]	; (800c088 <app_CalculatorValue+0x408>)
			db_DetaZ = buffer.V * db_DetaTZ;
 800bd24:	0004      	movs	r4, r0
 800bd26:	000d      	movs	r5, r1
			mdata.coordinates.Z = (int16_t) (db_DetaZ * 100.0);
 800bd28:	f7fd fdc2 	bl	80098b0 <__aeabi_dmul>
 800bd2c:	f7fe fbdc 	bl	800a4e8 <__aeabi_d2iz>
 800bd30:	4ad1      	ldr	r2, [pc, #836]	; (800c078 <app_CalculatorValue+0x3f8>)
 800bd32:	b283      	uxth	r3, r0
 800bd34:	0a1b      	lsrs	r3, r3, #8
 800bd36:	7110      	strb	r0, [r2, #4]
 800bd38:	7153      	strb	r3, [r2, #5]
			if ((db_DetaZ > buffer.Z) || (db_DetaZ < (-buffer.Z))) {
 800bd3a:	1c38      	adds	r0, r7, #0
 800bd3c:	f7fe fc60 	bl	800a600 <__aeabi_f2d>
 800bd40:	0022      	movs	r2, r4
 800bd42:	002b      	movs	r3, r5
 800bd44:	f7fc f828 	bl	8007d98 <__aeabi_dcmplt>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d10b      	bne.n	800bd64 <app_CalculatorValue+0xe4>
 800bd4c:	2380      	movs	r3, #128	; 0x80
 800bd4e:	061b      	lsls	r3, r3, #24
 800bd50:	18f8      	adds	r0, r7, r3
 800bd52:	f7fe fc55 	bl	800a600 <__aeabi_f2d>
 800bd56:	0022      	movs	r2, r4
 800bd58:	002b      	movs	r3, r5
 800bd5a:	f7fc f831 	bl	8007dc0 <__aeabi_dcmpgt>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d100      	bne.n	800bd64 <app_CalculatorValue+0xe4>
 800bd62:	e266      	b.n	800c232 <app_CalculatorValue+0x5b2>
				if (measurementIndex == 1)
 800bd64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd66:	4bc9      	ldr	r3, [pc, #804]	; (800c08c <app_CalculatorValue+0x40c>)
 800bd68:	2a01      	cmp	r2, #1
 800bd6a:	d000      	beq.n	800bd6e <app_CalculatorValue+0xee>
 800bd6c:	e25e      	b.n	800c22c <app_CalculatorValue+0x5ac>
					moutput.out3 = _ON;
 800bd6e:	70da      	strb	r2, [r3, #3]
			io_setOutput(moutput, ucRegCoilsBuf);
 800bd70:	4bc6      	ldr	r3, [pc, #792]	; (800c08c <app_CalculatorValue+0x40c>)
 800bd72:	785a      	ldrb	r2, [r3, #1]
 800bd74:	7819      	ldrb	r1, [r3, #0]
 800bd76:	0212      	lsls	r2, r2, #8
 800bd78:	7898      	ldrb	r0, [r3, #2]
 800bd7a:	4311      	orrs	r1, r2
 800bd7c:	78da      	ldrb	r2, [r3, #3]
 800bd7e:	0400      	lsls	r0, r0, #16
 800bd80:	4308      	orrs	r0, r1
 800bd82:	0612      	lsls	r2, r2, #24
 800bd84:	4310      	orrs	r0, r2
 800bd86:	795a      	ldrb	r2, [r3, #5]
 800bd88:	7919      	ldrb	r1, [r3, #4]
 800bd8a:	799c      	ldrb	r4, [r3, #6]
 800bd8c:	0212      	lsls	r2, r2, #8
 800bd8e:	430a      	orrs	r2, r1
 800bd90:	79d9      	ldrb	r1, [r3, #7]
 800bd92:	0424      	lsls	r4, r4, #16
 800bd94:	4322      	orrs	r2, r4
 800bd96:	0609      	lsls	r1, r1, #24
 800bd98:	4311      	orrs	r1, r2
 800bd9a:	4abd      	ldr	r2, [pc, #756]	; (800c090 <app_CalculatorValue+0x410>)
 800bd9c:	f00b fd76 	bl	801788c <io_setOutput>
		if (FINISH == lcycleMeasures) {
 800bda0:	9b00      	ldr	r3, [sp, #0]
 800bda2:	2b15      	cmp	r3, #21
 800bda4:	d000      	beq.n	800bda8 <app_CalculatorValue+0x128>
 800bda6:	e23a      	b.n	800c21e <app_CalculatorValue+0x59e>
			db_anpha1 = 2 * (buffer.V * db_DetaTX1) / buffer.D;
 800bda8:	0030      	movs	r0, r6
 800bdaa:	f7fe fc03 	bl	800a5b4 <__aeabi_ui2d>
 800bdae:	9000      	str	r0, [sp, #0]
 800bdb0:	9101      	str	r1, [sp, #4]
 800bdb2:	9802      	ldr	r0, [sp, #8]
 800bdb4:	f7fe fbfe 	bl	800a5b4 <__aeabi_ui2d>
			db_DetaTX1 = ((double) (mmeasureValue.X1 - mcalibValue.X1))
 800bdb8:	4bb0      	ldr	r3, [pc, #704]	; (800c07c <app_CalculatorValue+0x3fc>)
			db_anpha1 = 2 * (buffer.V * db_DetaTX1) / buffer.D;
 800bdba:	0006      	movs	r6, r0
			db_DetaTX1 = ((double) (mmeasureValue.X1 - mcalibValue.X1))
 800bdbc:	781a      	ldrb	r2, [r3, #0]
 800bdbe:	785b      	ldrb	r3, [r3, #1]
			db_anpha1 = 2 * (buffer.V * db_DetaTX1) / buffer.D;
 800bdc0:	000f      	movs	r7, r1
			db_DetaTX1 = ((double) (mmeasureValue.X1 - mcalibValue.X1))
 800bdc2:	021b      	lsls	r3, r3, #8
 800bdc4:	431a      	orrs	r2, r3
 800bdc6:	4bad      	ldr	r3, [pc, #692]	; (800c07c <app_CalculatorValue+0x3fc>)
 800bdc8:	7898      	ldrb	r0, [r3, #2]
 800bdca:	78db      	ldrb	r3, [r3, #3]
 800bdcc:	0400      	lsls	r0, r0, #16
 800bdce:	4310      	orrs	r0, r2
 800bdd0:	061b      	lsls	r3, r3, #24
 800bdd2:	4aab      	ldr	r2, [pc, #684]	; (800c080 <app_CalculatorValue+0x400>)
 800bdd4:	4318      	orrs	r0, r3
 800bdd6:	4baa      	ldr	r3, [pc, #680]	; (800c080 <app_CalculatorValue+0x400>)
 800bdd8:	7851      	ldrb	r1, [r2, #1]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	0209      	lsls	r1, r1, #8
 800bdde:	4319      	orrs	r1, r3
 800bde0:	0013      	movs	r3, r2
 800bde2:	7892      	ldrb	r2, [r2, #2]
 800bde4:	78db      	ldrb	r3, [r3, #3]
 800bde6:	0412      	lsls	r2, r2, #16
 800bde8:	4311      	orrs	r1, r2
 800bdea:	061b      	lsls	r3, r3, #24
 800bdec:	430b      	orrs	r3, r1
 800bdee:	1ac0      	subs	r0, r0, r3
 800bdf0:	f7fe fbb0 	bl	800a554 <__aeabi_i2d>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4ba3      	ldr	r3, [pc, #652]	; (800c084 <app_CalculatorValue+0x404>)
 800bdf8:	f7fd f958 	bl	80090ac <__aeabi_ddiv>
			db_anpha1 = 2 * (buffer.V * db_DetaTX1) / buffer.D;
 800bdfc:	9a00      	ldr	r2, [sp, #0]
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	f7fd fd56 	bl	80098b0 <__aeabi_dmul>
 800be04:	0002      	movs	r2, r0
 800be06:	000b      	movs	r3, r1
 800be08:	f7fc fe14 	bl	8008a34 <__aeabi_dadd>
 800be0c:	0032      	movs	r2, r6
 800be0e:	003b      	movs	r3, r7
 800be10:	f7fd f94c 	bl	80090ac <__aeabi_ddiv>
			db_DetaXSS1 = buffer.D * sin(db_anpha1 / 2) * cos(db_anpha1 / 2);
 800be14:	2200      	movs	r2, #0
 800be16:	4b9f      	ldr	r3, [pc, #636]	; (800c094 <app_CalculatorValue+0x414>)
 800be18:	f7fd fd4a 	bl	80098b0 <__aeabi_dmul>
 800be1c:	0004      	movs	r4, r0
 800be1e:	000d      	movs	r5, r1
 800be20:	f00e fdfc 	bl	801aa1c <sin>
 800be24:	9002      	str	r0, [sp, #8]
 800be26:	9103      	str	r1, [sp, #12]
 800be28:	0020      	movs	r0, r4
 800be2a:	0029      	movs	r1, r5
 800be2c:	f00e fdb0 	bl	801a990 <cos>
 800be30:	9a02      	ldr	r2, [sp, #8]
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	0004      	movs	r4, r0
 800be36:	000d      	movs	r5, r1
 800be38:	0030      	movs	r0, r6
 800be3a:	0039      	movs	r1, r7
 800be3c:	f7fd fd38 	bl	80098b0 <__aeabi_dmul>
 800be40:	0022      	movs	r2, r4
 800be42:	002b      	movs	r3, r5
 800be44:	f7fd fd34 	bl	80098b0 <__aeabi_dmul>
 800be48:	9002      	str	r0, [sp, #8]
 800be4a:	9103      	str	r1, [sp, #12]
			db_DetaTY1 = ((double) (mmeasureValue.Y1 - mcalibValue.Y1))
 800be4c:	4b8b      	ldr	r3, [pc, #556]	; (800c07c <app_CalculatorValue+0x3fc>)
 800be4e:	791a      	ldrb	r2, [r3, #4]
 800be50:	795b      	ldrb	r3, [r3, #5]
 800be52:	021b      	lsls	r3, r3, #8
 800be54:	431a      	orrs	r2, r3
 800be56:	4b89      	ldr	r3, [pc, #548]	; (800c07c <app_CalculatorValue+0x3fc>)
 800be58:	7998      	ldrb	r0, [r3, #6]
 800be5a:	79db      	ldrb	r3, [r3, #7]
 800be5c:	0400      	lsls	r0, r0, #16
 800be5e:	4310      	orrs	r0, r2
 800be60:	061b      	lsls	r3, r3, #24
 800be62:	4a87      	ldr	r2, [pc, #540]	; (800c080 <app_CalculatorValue+0x400>)
 800be64:	4318      	orrs	r0, r3
 800be66:	4b86      	ldr	r3, [pc, #536]	; (800c080 <app_CalculatorValue+0x400>)
 800be68:	7951      	ldrb	r1, [r2, #5]
 800be6a:	791b      	ldrb	r3, [r3, #4]
 800be6c:	0209      	lsls	r1, r1, #8
 800be6e:	4319      	orrs	r1, r3
 800be70:	0013      	movs	r3, r2
 800be72:	7992      	ldrb	r2, [r2, #6]
 800be74:	79db      	ldrb	r3, [r3, #7]
 800be76:	0412      	lsls	r2, r2, #16
 800be78:	4311      	orrs	r1, r2
 800be7a:	061b      	lsls	r3, r3, #24
 800be7c:	430b      	orrs	r3, r1
 800be7e:	1ac0      	subs	r0, r0, r3
 800be80:	f7fe fb68 	bl	800a554 <__aeabi_i2d>
 800be84:	2200      	movs	r2, #0
 800be86:	4b7f      	ldr	r3, [pc, #508]	; (800c084 <app_CalculatorValue+0x404>)
 800be88:	f7fd f910 	bl	80090ac <__aeabi_ddiv>
			db_beta1 = 2 * (buffer.V * db_DetaTY1) / buffer.D;
 800be8c:	9a00      	ldr	r2, [sp, #0]
 800be8e:	9b01      	ldr	r3, [sp, #4]
 800be90:	f7fd fd0e 	bl	80098b0 <__aeabi_dmul>
 800be94:	0002      	movs	r2, r0
 800be96:	000b      	movs	r3, r1
 800be98:	f7fc fdcc 	bl	8008a34 <__aeabi_dadd>
 800be9c:	0032      	movs	r2, r6
 800be9e:	003b      	movs	r3, r7
 800bea0:	f7fd f904 	bl	80090ac <__aeabi_ddiv>
			db_DetaYSS1 = buffer.D * sin(db_beta1 / 2) * cos(db_beta1 / 2);
 800bea4:	2200      	movs	r2, #0
 800bea6:	4b7b      	ldr	r3, [pc, #492]	; (800c094 <app_CalculatorValue+0x414>)
 800bea8:	f7fd fd02 	bl	80098b0 <__aeabi_dmul>
 800beac:	0004      	movs	r4, r0
 800beae:	000d      	movs	r5, r1
 800beb0:	f00e fdb4 	bl	801aa1c <sin>
 800beb4:	9004      	str	r0, [sp, #16]
 800beb6:	9105      	str	r1, [sp, #20]
 800beb8:	0020      	movs	r0, r4
 800beba:	0029      	movs	r1, r5
 800bebc:	f00e fd68 	bl	801a990 <cos>
 800bec0:	9a04      	ldr	r2, [sp, #16]
 800bec2:	9b05      	ldr	r3, [sp, #20]
 800bec4:	0004      	movs	r4, r0
 800bec6:	000d      	movs	r5, r1
 800bec8:	0030      	movs	r0, r6
 800beca:	0039      	movs	r1, r7
 800becc:	f7fd fcf0 	bl	80098b0 <__aeabi_dmul>
 800bed0:	0022      	movs	r2, r4
 800bed2:	002b      	movs	r3, r5
 800bed4:	f7fd fcec 	bl	80098b0 <__aeabi_dmul>
 800bed8:	9004      	str	r0, [sp, #16]
 800beda:	9105      	str	r1, [sp, #20]
			db_DetaTX2 = ((double) (mmeasureValue.X2 - mcalibValue.X2))
 800bedc:	4b67      	ldr	r3, [pc, #412]	; (800c07c <app_CalculatorValue+0x3fc>)
 800bede:	7a1a      	ldrb	r2, [r3, #8]
 800bee0:	7a5b      	ldrb	r3, [r3, #9]
 800bee2:	021b      	lsls	r3, r3, #8
 800bee4:	431a      	orrs	r2, r3
 800bee6:	4b65      	ldr	r3, [pc, #404]	; (800c07c <app_CalculatorValue+0x3fc>)
 800bee8:	7a98      	ldrb	r0, [r3, #10]
 800beea:	7adb      	ldrb	r3, [r3, #11]
 800beec:	0400      	lsls	r0, r0, #16
 800beee:	4310      	orrs	r0, r2
 800bef0:	061b      	lsls	r3, r3, #24
 800bef2:	4a63      	ldr	r2, [pc, #396]	; (800c080 <app_CalculatorValue+0x400>)
 800bef4:	4318      	orrs	r0, r3
 800bef6:	4b62      	ldr	r3, [pc, #392]	; (800c080 <app_CalculatorValue+0x400>)
 800bef8:	7a51      	ldrb	r1, [r2, #9]
 800befa:	7a1b      	ldrb	r3, [r3, #8]
 800befc:	0209      	lsls	r1, r1, #8
 800befe:	4319      	orrs	r1, r3
 800bf00:	0013      	movs	r3, r2
 800bf02:	7a92      	ldrb	r2, [r2, #10]
 800bf04:	7adb      	ldrb	r3, [r3, #11]
 800bf06:	0412      	lsls	r2, r2, #16
 800bf08:	4311      	orrs	r1, r2
 800bf0a:	061b      	lsls	r3, r3, #24
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	1ac0      	subs	r0, r0, r3
 800bf10:	f7fe fb20 	bl	800a554 <__aeabi_i2d>
 800bf14:	2200      	movs	r2, #0
 800bf16:	4b5b      	ldr	r3, [pc, #364]	; (800c084 <app_CalculatorValue+0x404>)
 800bf18:	f7fd f8c8 	bl	80090ac <__aeabi_ddiv>
			db_anpha2 = 2 * (buffer.V * db_DetaTX2) / buffer.D;
 800bf1c:	9a00      	ldr	r2, [sp, #0]
 800bf1e:	9b01      	ldr	r3, [sp, #4]
 800bf20:	f7fd fcc6 	bl	80098b0 <__aeabi_dmul>
 800bf24:	0002      	movs	r2, r0
 800bf26:	000b      	movs	r3, r1
 800bf28:	f7fc fd84 	bl	8008a34 <__aeabi_dadd>
 800bf2c:	0032      	movs	r2, r6
 800bf2e:	003b      	movs	r3, r7
 800bf30:	f7fd f8bc 	bl	80090ac <__aeabi_ddiv>
			db_DetaXSS2 = buffer.D * sin(db_anpha2 / 2) * cos(db_anpha2 / 2);
 800bf34:	2200      	movs	r2, #0
 800bf36:	4b57      	ldr	r3, [pc, #348]	; (800c094 <app_CalculatorValue+0x414>)
 800bf38:	f7fd fcba 	bl	80098b0 <__aeabi_dmul>
 800bf3c:	0004      	movs	r4, r0
 800bf3e:	000d      	movs	r5, r1
 800bf40:	f00e fd6c 	bl	801aa1c <sin>
 800bf44:	9006      	str	r0, [sp, #24]
 800bf46:	9107      	str	r1, [sp, #28]
 800bf48:	0020      	movs	r0, r4
 800bf4a:	0029      	movs	r1, r5
 800bf4c:	f00e fd20 	bl	801a990 <cos>
 800bf50:	9a06      	ldr	r2, [sp, #24]
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	0004      	movs	r4, r0
 800bf56:	000d      	movs	r5, r1
 800bf58:	0030      	movs	r0, r6
 800bf5a:	0039      	movs	r1, r7
 800bf5c:	f7fd fca8 	bl	80098b0 <__aeabi_dmul>
 800bf60:	0022      	movs	r2, r4
 800bf62:	002b      	movs	r3, r5
 800bf64:	f7fd fca4 	bl	80098b0 <__aeabi_dmul>
 800bf68:	9006      	str	r0, [sp, #24]
 800bf6a:	9107      	str	r1, [sp, #28]
			db_DetaTY2 = ((double) (mmeasureValue.Y2 - mcalibValue.Y2))
 800bf6c:	4b43      	ldr	r3, [pc, #268]	; (800c07c <app_CalculatorValue+0x3fc>)
 800bf6e:	7b1a      	ldrb	r2, [r3, #12]
 800bf70:	7b5b      	ldrb	r3, [r3, #13]
 800bf72:	021b      	lsls	r3, r3, #8
 800bf74:	431a      	orrs	r2, r3
 800bf76:	4b41      	ldr	r3, [pc, #260]	; (800c07c <app_CalculatorValue+0x3fc>)
 800bf78:	7b98      	ldrb	r0, [r3, #14]
 800bf7a:	7bdb      	ldrb	r3, [r3, #15]
 800bf7c:	0400      	lsls	r0, r0, #16
 800bf7e:	4310      	orrs	r0, r2
 800bf80:	061b      	lsls	r3, r3, #24
 800bf82:	4a3f      	ldr	r2, [pc, #252]	; (800c080 <app_CalculatorValue+0x400>)
 800bf84:	4318      	orrs	r0, r3
 800bf86:	4b3e      	ldr	r3, [pc, #248]	; (800c080 <app_CalculatorValue+0x400>)
 800bf88:	7b51      	ldrb	r1, [r2, #13]
 800bf8a:	7b1b      	ldrb	r3, [r3, #12]
 800bf8c:	0209      	lsls	r1, r1, #8
 800bf8e:	4319      	orrs	r1, r3
 800bf90:	0013      	movs	r3, r2
 800bf92:	7b92      	ldrb	r2, [r2, #14]
 800bf94:	7bdb      	ldrb	r3, [r3, #15]
 800bf96:	0412      	lsls	r2, r2, #16
 800bf98:	4311      	orrs	r1, r2
 800bf9a:	061b      	lsls	r3, r3, #24
 800bf9c:	430b      	orrs	r3, r1
 800bf9e:	1ac0      	subs	r0, r0, r3
 800bfa0:	f7fe fad8 	bl	800a554 <__aeabi_i2d>
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	4b37      	ldr	r3, [pc, #220]	; (800c084 <app_CalculatorValue+0x404>)
 800bfa8:	f7fd f880 	bl	80090ac <__aeabi_ddiv>
			db_beta2 = 2 * (buffer.V * db_DetaTY2) / buffer.D;
 800bfac:	9a00      	ldr	r2, [sp, #0]
 800bfae:	9b01      	ldr	r3, [sp, #4]
 800bfb0:	f7fd fc7e 	bl	80098b0 <__aeabi_dmul>
 800bfb4:	0002      	movs	r2, r0
 800bfb6:	000b      	movs	r3, r1
 800bfb8:	f7fc fd3c 	bl	8008a34 <__aeabi_dadd>
 800bfbc:	0032      	movs	r2, r6
 800bfbe:	003b      	movs	r3, r7
 800bfc0:	f7fd f874 	bl	80090ac <__aeabi_ddiv>
			db_DetaYSS2 = buffer.D * sin(db_beta2 / 2) * cos(db_beta2 / 2);
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	4b33      	ldr	r3, [pc, #204]	; (800c094 <app_CalculatorValue+0x414>)
 800bfc8:	f7fd fc72 	bl	80098b0 <__aeabi_dmul>
 800bfcc:	0004      	movs	r4, r0
 800bfce:	000d      	movs	r5, r1
 800bfd0:	f00e fd24 	bl	801aa1c <sin>
 800bfd4:	9000      	str	r0, [sp, #0]
 800bfd6:	9101      	str	r1, [sp, #4]
 800bfd8:	0020      	movs	r0, r4
 800bfda:	0029      	movs	r1, r5
 800bfdc:	f00e fcd8 	bl	801a990 <cos>
 800bfe0:	9a00      	ldr	r2, [sp, #0]
 800bfe2:	9b01      	ldr	r3, [sp, #4]
 800bfe4:	0004      	movs	r4, r0
 800bfe6:	000d      	movs	r5, r1
 800bfe8:	0030      	movs	r0, r6
 800bfea:	0039      	movs	r1, r7
 800bfec:	f7fd fc60 	bl	80098b0 <__aeabi_dmul>
 800bff0:	0022      	movs	r2, r4
 800bff2:	002b      	movs	r3, r5
 800bff4:	f7fd fc5c 	bl	80098b0 <__aeabi_dmul>
 800bff8:	0006      	movs	r6, r0
 800bffa:	000f      	movs	r7, r1
			db_DetaXRB2 = (db_DetaXSS2 + db_DetaYSS2) * cos(3.142 / 180 * 45);
 800bffc:	0002      	movs	r2, r0
 800bffe:	000b      	movs	r3, r1
 800c000:	9806      	ldr	r0, [sp, #24]
 800c002:	9907      	ldr	r1, [sp, #28]
 800c004:	f7fc fd16 	bl	8008a34 <__aeabi_dadd>
 800c008:	4a23      	ldr	r2, [pc, #140]	; (800c098 <app_CalculatorValue+0x418>)
 800c00a:	4b24      	ldr	r3, [pc, #144]	; (800c09c <app_CalculatorValue+0x41c>)
 800c00c:	f7fd fc50 	bl	80098b0 <__aeabi_dmul>
			db_DetaYRB2 = -(db_DetaXSS2 - db_DetaYSS2) * cos(3.142 / 180 * 45);
 800c010:	0032      	movs	r2, r6
 800c012:	003b      	movs	r3, r7
			db_DetaXRB2 = (db_DetaXSS2 + db_DetaYSS2) * cos(3.142 / 180 * 45);
 800c014:	9008      	str	r0, [sp, #32]
 800c016:	9109      	str	r1, [sp, #36]	; 0x24
			db_DetaYRB2 = -(db_DetaXSS2 - db_DetaYSS2) * cos(3.142 / 180 * 45);
 800c018:	9806      	ldr	r0, [sp, #24]
 800c01a:	9907      	ldr	r1, [sp, #28]
 800c01c:	f7fd feb4 	bl	8009d88 <__aeabi_dsub>
 800c020:	0004      	movs	r4, r0
 800c022:	2080      	movs	r0, #128	; 0x80
 800c024:	0600      	lsls	r0, r0, #24
 800c026:	180d      	adds	r5, r1, r0
 800c028:	0029      	movs	r1, r5
 800c02a:	0020      	movs	r0, r4
 800c02c:	4a1a      	ldr	r2, [pc, #104]	; (800c098 <app_CalculatorValue+0x418>)
 800c02e:	4b1b      	ldr	r3, [pc, #108]	; (800c09c <app_CalculatorValue+0x41c>)
 800c030:	f7fd fc3e 	bl	80098b0 <__aeabi_dmul>
					(db_DetaYSS1 * db_DetaYSS1) + (db_DetaXSS1 * db_DetaXSS1));
 800c034:	9a04      	ldr	r2, [sp, #16]
 800c036:	9b05      	ldr	r3, [sp, #20]
			db_DetaYRB2 = -(db_DetaXSS2 - db_DetaYSS2) * cos(3.142 / 180 * 45);
 800c038:	900a      	str	r0, [sp, #40]	; 0x28
 800c03a:	910b      	str	r1, [sp, #44]	; 0x2c
					(db_DetaYSS1 * db_DetaYSS1) + (db_DetaXSS1 * db_DetaXSS1));
 800c03c:	0010      	movs	r0, r2
 800c03e:	0019      	movs	r1, r3
 800c040:	f7fd fc36 	bl	80098b0 <__aeabi_dmul>
 800c044:	9a02      	ldr	r2, [sp, #8]
 800c046:	9b03      	ldr	r3, [sp, #12]
 800c048:	0004      	movs	r4, r0
 800c04a:	000d      	movs	r5, r1
 800c04c:	0010      	movs	r0, r2
 800c04e:	0019      	movs	r1, r3
 800c050:	f7fd fc2e 	bl	80098b0 <__aeabi_dmul>
 800c054:	0002      	movs	r2, r0
 800c056:	000b      	movs	r3, r1
			db_r1 = sqrt(
 800c058:	0020      	movs	r0, r4
 800c05a:	0029      	movs	r1, r5
 800c05c:	f7fc fcea 	bl	8008a34 <__aeabi_dadd>
 800c060:	f00e fd22 	bl	801aaa8 <sqrt>
					(db_DetaYSS2 * db_DetaYSS2) + (db_DetaXSS2 * db_DetaXSS2));
 800c064:	0032      	movs	r2, r6
 800c066:	003b      	movs	r3, r7
 800c068:	0030      	movs	r0, r6
 800c06a:	0039      	movs	r1, r7
 800c06c:	f7fd fc20 	bl	80098b0 <__aeabi_dmul>
 800c070:	e016      	b.n	800c0a0 <app_CalculatorValue+0x420>
 800c072:	46c0      	nop			; (mov r8, r8)
 800c074:	2000034a 	.word	0x2000034a
 800c078:	200005b7 	.word	0x200005b7
 800c07c:	200005d3 	.word	0x200005d3
 800c080:	200005a3 	.word	0x200005a3
 800c084:	412e8480 	.word	0x412e8480
 800c088:	40590000 	.word	0x40590000
 800c08c:	200005e7 	.word	0x200005e7
 800c090:	200005fc 	.word	0x200005fc
 800c094:	3fe00000 	.word	0x3fe00000
 800c098:	60cd4e62 	.word	0x60cd4e62
 800c09c:	3fe6a007 	.word	0x3fe6a007
 800c0a0:	9a06      	ldr	r2, [sp, #24]
 800c0a2:	9b07      	ldr	r3, [sp, #28]
 800c0a4:	0004      	movs	r4, r0
 800c0a6:	000d      	movs	r5, r1
 800c0a8:	0010      	movs	r0, r2
 800c0aa:	0019      	movs	r1, r3
 800c0ac:	f7fd fc00 	bl	80098b0 <__aeabi_dmul>
 800c0b0:	0002      	movs	r2, r0
 800c0b2:	000b      	movs	r3, r1
			db_r2 = sqrt(
 800c0b4:	0020      	movs	r0, r4
 800c0b6:	0029      	movs	r1, r5
 800c0b8:	f7fc fcbc 	bl	8008a34 <__aeabi_dadd>
 800c0bc:	f00e fcf4 	bl	801aaa8 <sqrt>
 800c0c0:	9000      	str	r0, [sp, #0]
 800c0c2:	9101      	str	r1, [sp, #4]
			db_LXSS = (atan((db_DetaXSS2 - db_DetaXSS1) / buffer.L) * 180)
 800c0c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c0c6:	f7fe fa75 	bl	800a5b4 <__aeabi_ui2d>
			db_DetaXRB1 = (db_DetaXSS1 + db_DetaYSS1) * cos(3.142 / 180 * 45);
 800c0ca:	9a04      	ldr	r2, [sp, #16]
 800c0cc:	9b05      	ldr	r3, [sp, #20]
			db_LXSS = (atan((db_DetaXSS2 - db_DetaXSS1) / buffer.L) * 180)
 800c0ce:	0004      	movs	r4, r0
 800c0d0:	000d      	movs	r5, r1
			db_DetaXRB1 = (db_DetaXSS1 + db_DetaYSS1) * cos(3.142 / 180 * 45);
 800c0d2:	9802      	ldr	r0, [sp, #8]
 800c0d4:	9903      	ldr	r1, [sp, #12]
 800c0d6:	f7fc fcad 	bl	8008a34 <__aeabi_dadd>
 800c0da:	4a5e      	ldr	r2, [pc, #376]	; (800c254 <app_CalculatorValue+0x5d4>)
 800c0dc:	4b5e      	ldr	r3, [pc, #376]	; (800c258 <app_CalculatorValue+0x5d8>)
 800c0de:	f7fd fbe7 	bl	80098b0 <__aeabi_dmul>
 800c0e2:	0002      	movs	r2, r0
 800c0e4:	000b      	movs	r3, r1
			db_LXRB = (atan((db_DetaXRB2 - db_DetaXRB1) / buffer.L) * 180)
 800c0e6:	9808      	ldr	r0, [sp, #32]
 800c0e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0ea:	f7fd fe4d 	bl	8009d88 <__aeabi_dsub>
 800c0ee:	0022      	movs	r2, r4
 800c0f0:	002b      	movs	r3, r5
 800c0f2:	f7fc ffdb 	bl	80090ac <__aeabi_ddiv>
 800c0f6:	f00e facb 	bl	801a690 <atan>
			db_DetaYRB1 = -(db_DetaXSS1 - db_DetaYSS1) * cos(3.142 / 180 * 45);
 800c0fa:	9a04      	ldr	r2, [sp, #16]
 800c0fc:	9b05      	ldr	r3, [sp, #20]
			db_LXRB = (atan((db_DetaXRB2 - db_DetaXRB1) / buffer.L) * 180)
 800c0fe:	9006      	str	r0, [sp, #24]
 800c100:	9107      	str	r1, [sp, #28]
			db_DetaYRB1 = -(db_DetaXSS1 - db_DetaYSS1) * cos(3.142 / 180 * 45);
 800c102:	9802      	ldr	r0, [sp, #8]
 800c104:	9903      	ldr	r1, [sp, #12]
 800c106:	f7fd fe3f 	bl	8009d88 <__aeabi_dsub>
 800c10a:	0006      	movs	r6, r0
 800c10c:	2080      	movs	r0, #128	; 0x80
 800c10e:	0600      	lsls	r0, r0, #24
 800c110:	180f      	adds	r7, r1, r0
 800c112:	0039      	movs	r1, r7
 800c114:	0030      	movs	r0, r6
 800c116:	4a4f      	ldr	r2, [pc, #316]	; (800c254 <app_CalculatorValue+0x5d4>)
 800c118:	4b4f      	ldr	r3, [pc, #316]	; (800c258 <app_CalculatorValue+0x5d8>)
 800c11a:	f7fd fbc9 	bl	80098b0 <__aeabi_dmul>
 800c11e:	0002      	movs	r2, r0
 800c120:	000b      	movs	r3, r1
			db_LYRB = (atan((db_DetaYRB2 - db_DetaYRB1) / buffer.L) * 180)
 800c122:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c126:	f7fd fe2f 	bl	8009d88 <__aeabi_dsub>
 800c12a:	0022      	movs	r2, r4
 800c12c:	002b      	movs	r3, r5
 800c12e:	f7fc ffbd 	bl	80090ac <__aeabi_ddiv>
 800c132:	f00e faad 	bl	801a690 <atan>
			mdata.coordinates.X = (int16_t) (db_DetaXRB2 * 100.0);
 800c136:	2200      	movs	r2, #0
 800c138:	4b48      	ldr	r3, [pc, #288]	; (800c25c <app_CalculatorValue+0x5dc>)
			db_LYRB = (atan((db_DetaYRB2 - db_DetaYRB1) / buffer.L) * 180)
 800c13a:	0006      	movs	r6, r0
 800c13c:	000f      	movs	r7, r1
			mdata.coordinates.X = (int16_t) (db_DetaXRB2 * 100.0);
 800c13e:	9808      	ldr	r0, [sp, #32]
 800c140:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c142:	f7fd fbb5 	bl	80098b0 <__aeabi_dmul>
 800c146:	f7fe f9cf 	bl	800a4e8 <__aeabi_d2iz>
 800c14a:	4c45      	ldr	r4, [pc, #276]	; (800c260 <app_CalculatorValue+0x5e0>)
 800c14c:	b283      	uxth	r3, r0
 800c14e:	0a1b      	lsrs	r3, r3, #8
			mdata.coordinates.Y = (int16_t) (db_DetaYRB2 * 100.0);
 800c150:	2200      	movs	r2, #0
			mdata.coordinates.X = (int16_t) (db_DetaXRB2 * 100.0);
 800c152:	7020      	strb	r0, [r4, #0]
 800c154:	7063      	strb	r3, [r4, #1]
			mdata.coordinates.Y = (int16_t) (db_DetaYRB2 * 100.0);
 800c156:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c15a:	4b40      	ldr	r3, [pc, #256]	; (800c25c <app_CalculatorValue+0x5dc>)
 800c15c:	f7fd fba8 	bl	80098b0 <__aeabi_dmul>
 800c160:	f7fe f9c2 	bl	800a4e8 <__aeabi_d2iz>
 800c164:	b283      	uxth	r3, r0
 800c166:	0a1b      	lsrs	r3, r3, #8
			mdata.coordinates.R = (int16_t) (db_r2 * 100.0);
 800c168:	2200      	movs	r2, #0
			mdata.coordinates.Y = (int16_t) (db_DetaYRB2 * 100.0);
 800c16a:	70a0      	strb	r0, [r4, #2]
 800c16c:	70e3      	strb	r3, [r4, #3]
			mdata.coordinates.R = (int16_t) (db_r2 * 100.0);
 800c16e:	9800      	ldr	r0, [sp, #0]
 800c170:	9901      	ldr	r1, [sp, #4]
 800c172:	4b3a      	ldr	r3, [pc, #232]	; (800c25c <app_CalculatorValue+0x5dc>)
 800c174:	f7fd fb9c 	bl	80098b0 <__aeabi_dmul>
 800c178:	f7fe f9b6 	bl	800a4e8 <__aeabi_d2iz>
 800c17c:	b283      	uxth	r3, r0
 800c17e:	0a1b      	lsrs	r3, r3, #8
			db_LXRB = (atan((db_DetaXRB2 - db_DetaXRB1) / buffer.L) * 180)
 800c180:	2200      	movs	r2, #0
			mdata.coordinates.R = (int16_t) (db_r2 * 100.0);
 800c182:	71a0      	strb	r0, [r4, #6]
 800c184:	71e3      	strb	r3, [r4, #7]
			db_LXRB = (atan((db_DetaXRB2 - db_DetaXRB1) / buffer.L) * 180)
 800c186:	9806      	ldr	r0, [sp, #24]
 800c188:	9907      	ldr	r1, [sp, #28]
 800c18a:	4b36      	ldr	r3, [pc, #216]	; (800c264 <app_CalculatorValue+0x5e4>)
 800c18c:	f7fd fb90 	bl	80098b0 <__aeabi_dmul>
 800c190:	4a35      	ldr	r2, [pc, #212]	; (800c268 <app_CalculatorValue+0x5e8>)
 800c192:	4b36      	ldr	r3, [pc, #216]	; (800c26c <app_CalculatorValue+0x5ec>)
 800c194:	f7fc ff8a 	bl	80090ac <__aeabi_ddiv>
			mdata.coordinates.aX = (int16_t) (db_LXRB * 10.0);
 800c198:	2200      	movs	r2, #0
 800c19a:	4b35      	ldr	r3, [pc, #212]	; (800c270 <app_CalculatorValue+0x5f0>)
 800c19c:	f7fd fb88 	bl	80098b0 <__aeabi_dmul>
 800c1a0:	f7fe f9a2 	bl	800a4e8 <__aeabi_d2iz>
 800c1a4:	b283      	uxth	r3, r0
 800c1a6:	0a1b      	lsrs	r3, r3, #8
			db_LYRB = (atan((db_DetaYRB2 - db_DetaYRB1) / buffer.L) * 180)
 800c1a8:	2200      	movs	r2, #0
			mdata.coordinates.aX = (int16_t) (db_LXRB * 10.0);
 800c1aa:	7220      	strb	r0, [r4, #8]
 800c1ac:	7263      	strb	r3, [r4, #9]
			db_LYRB = (atan((db_DetaYRB2 - db_DetaYRB1) / buffer.L) * 180)
 800c1ae:	0030      	movs	r0, r6
 800c1b0:	4b2c      	ldr	r3, [pc, #176]	; (800c264 <app_CalculatorValue+0x5e4>)
 800c1b2:	0039      	movs	r1, r7
 800c1b4:	f7fd fb7c 	bl	80098b0 <__aeabi_dmul>
 800c1b8:	4a2b      	ldr	r2, [pc, #172]	; (800c268 <app_CalculatorValue+0x5e8>)
 800c1ba:	4b2c      	ldr	r3, [pc, #176]	; (800c26c <app_CalculatorValue+0x5ec>)
 800c1bc:	f7fc ff76 	bl	80090ac <__aeabi_ddiv>
			mdata.coordinates.aY = (int16_t) (db_LYRB * 10.0);
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4b2b      	ldr	r3, [pc, #172]	; (800c270 <app_CalculatorValue+0x5f0>)
 800c1c4:	f7fd fb74 	bl	80098b0 <__aeabi_dmul>
 800c1c8:	f7fe f98e 	bl	800a4e8 <__aeabi_d2iz>
 800c1cc:	b283      	uxth	r3, r0
 800c1ce:	0a1b      	lsrs	r3, r3, #8
 800c1d0:	72a0      	strb	r0, [r4, #10]
 800c1d2:	72e3      	strb	r3, [r4, #11]
			if (db_r2 > buffer.R) {
 800c1d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c1d6:	f7fe fa13 	bl	800a600 <__aeabi_f2d>
 800c1da:	9a00      	ldr	r2, [sp, #0]
 800c1dc:	9b01      	ldr	r3, [sp, #4]
 800c1de:	f7fb fddb 	bl	8007d98 <__aeabi_dcmplt>
 800c1e2:	4b24      	ldr	r3, [pc, #144]	; (800c274 <app_CalculatorValue+0x5f4>)
				if (measurementIndex == 1)
 800c1e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (db_r2 > buffer.R) {
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d02e      	beq.n	800c248 <app_CalculatorValue+0x5c8>
				if (measurementIndex == 1)
 800c1ea:	2a01      	cmp	r2, #1
 800c1ec:	d129      	bne.n	800c242 <app_CalculatorValue+0x5c2>
					moutput.out2 = _ON;
 800c1ee:	709a      	strb	r2, [r3, #2]
			io_setOutput(moutput, ucRegCoilsBuf);
 800c1f0:	785a      	ldrb	r2, [r3, #1]
 800c1f2:	7819      	ldrb	r1, [r3, #0]
 800c1f4:	0212      	lsls	r2, r2, #8
 800c1f6:	7898      	ldrb	r0, [r3, #2]
 800c1f8:	4311      	orrs	r1, r2
 800c1fa:	78da      	ldrb	r2, [r3, #3]
 800c1fc:	0400      	lsls	r0, r0, #16
 800c1fe:	4308      	orrs	r0, r1
 800c200:	0612      	lsls	r2, r2, #24
 800c202:	4310      	orrs	r0, r2
 800c204:	795a      	ldrb	r2, [r3, #5]
 800c206:	7919      	ldrb	r1, [r3, #4]
 800c208:	799c      	ldrb	r4, [r3, #6]
 800c20a:	0212      	lsls	r2, r2, #8
 800c20c:	430a      	orrs	r2, r1
 800c20e:	79d9      	ldrb	r1, [r3, #7]
 800c210:	0424      	lsls	r4, r4, #16
 800c212:	4322      	orrs	r2, r4
 800c214:	0609      	lsls	r1, r1, #24
 800c216:	4311      	orrs	r1, r2
 800c218:	4a17      	ldr	r2, [pc, #92]	; (800c278 <app_CalculatorValue+0x5f8>)
 800c21a:	f00b fb37 	bl	801788c <io_setOutput>
}
 800c21e:	b017      	add	sp, #92	; 0x5c
 800c220:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint8_t) calibStatus_2;
 800c222:	4b16      	ldr	r3, [pc, #88]	; (800c27c <app_CalculatorValue+0x5fc>)
		app_GetCalibValue(MEASUREMENT_2);
 800c224:	2002      	movs	r0, #2
		temp = (uint8_t) calibStatus_2;
 800c226:	781c      	ldrb	r4, [r3, #0]
 800c228:	b2e4      	uxtb	r4, r4
		app_GetCalibValue(MEASUREMENT_2);
 800c22a:	e53f      	b.n	800bcac <app_CalculatorValue+0x2c>
					moutput.out6 = _ON;
 800c22c:	2201      	movs	r2, #1
 800c22e:	719a      	strb	r2, [r3, #6]
 800c230:	e59e      	b.n	800bd70 <app_CalculatorValue+0xf0>
				if (measurementIndex == 1)
 800c232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c234:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <app_CalculatorValue+0x5f4>)
 800c236:	2a01      	cmp	r2, #1
 800c238:	d101      	bne.n	800c23e <app_CalculatorValue+0x5be>
					moutput.out3 = _OFF;
 800c23a:	70d8      	strb	r0, [r3, #3]
 800c23c:	e598      	b.n	800bd70 <app_CalculatorValue+0xf0>
					moutput.out6 = _OFF;
 800c23e:	7198      	strb	r0, [r3, #6]
 800c240:	e596      	b.n	800bd70 <app_CalculatorValue+0xf0>
					moutput.out5 = _ON;
 800c242:	2201      	movs	r2, #1
 800c244:	715a      	strb	r2, [r3, #5]
 800c246:	e7d3      	b.n	800c1f0 <app_CalculatorValue+0x570>
				if (measurementIndex == 1)
 800c248:	2a01      	cmp	r2, #1
 800c24a:	d101      	bne.n	800c250 <app_CalculatorValue+0x5d0>
					moutput.out2 = _OFF;
 800c24c:	7098      	strb	r0, [r3, #2]
 800c24e:	e7cf      	b.n	800c1f0 <app_CalculatorValue+0x570>
					moutput.out5 = _OFF;
 800c250:	7158      	strb	r0, [r3, #5]
 800c252:	e7cd      	b.n	800c1f0 <app_CalculatorValue+0x570>
 800c254:	60cd4e62 	.word	0x60cd4e62
 800c258:	3fe6a007 	.word	0x3fe6a007
 800c25c:	40590000 	.word	0x40590000
 800c260:	200005b7 	.word	0x200005b7
 800c264:	40668000 	.word	0x40668000
 800c268:	e5604189 	.word	0xe5604189
 800c26c:	400922d0 	.word	0x400922d0
 800c270:	40240000 	.word	0x40240000
 800c274:	200005e7 	.word	0x200005e7
 800c278:	200005fc 	.word	0x200005fc
 800c27c:	2000034b 	.word	0x2000034b

0800c280 <meas_checkSensor>:
		uint8_t measurementIndex) {
 800c280:	b570      	push	{r4, r5, r6, lr}
	while ((STOP == cycleMeasure) && (0 == GET_INPUT(measurementIndex))) {
 800c282:	2801      	cmp	r0, #1
 800c284:	d162      	bne.n	800c34c <meas_checkSensor+0xcc>
 800c286:	4b33      	ldr	r3, [pc, #204]	; (800c354 <meas_checkSensor+0xd4>)
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	2901      	cmp	r1, #1
 800c28c:	d102      	bne.n	800c294 <meas_checkSensor+0x14>
 800c28e:	051b      	lsls	r3, r3, #20
 800c290:	d502      	bpl.n	800c298 <meas_checkSensor+0x18>
}
 800c292:	bd70      	pop	{r4, r5, r6, pc}
	while ((STOP == cycleMeasure) && (0 == GET_INPUT(measurementIndex))) {
 800c294:	055b      	lsls	r3, r3, #21
 800c296:	d4fc      	bmi.n	800c292 <meas_checkSensor+0x12>
		minput.in0 = _OFF;
 800c298:	2200      	movs	r2, #0
		moutput.out4 = _ON; // O7 ON start clear sensor
 800c29a:	2101      	movs	r1, #1
		minput.in0 = _OFF;
 800c29c:	4b2e      	ldr	r3, [pc, #184]	; (800c358 <meas_checkSensor+0xd8>)
 800c29e:	701a      	strb	r2, [r3, #0]
		moutput.out4 = _ON; // O7 ON start clear sensor
 800c2a0:	4b2e      	ldr	r3, [pc, #184]	; (800c35c <meas_checkSensor+0xdc>)
		io_setOutput(moutput, ucRegCoilsBuf);
 800c2a2:	785a      	ldrb	r2, [r3, #1]
 800c2a4:	781d      	ldrb	r5, [r3, #0]
 800c2a6:	0212      	lsls	r2, r2, #8
 800c2a8:	7898      	ldrb	r0, [r3, #2]
 800c2aa:	4315      	orrs	r5, r2
 800c2ac:	78da      	ldrb	r2, [r3, #3]
 800c2ae:	0400      	lsls	r0, r0, #16
 800c2b0:	0612      	lsls	r2, r2, #24
 800c2b2:	4328      	orrs	r0, r5
 800c2b4:	4310      	orrs	r0, r2
 800c2b6:	795a      	ldrb	r2, [r3, #5]
 800c2b8:	799c      	ldrb	r4, [r3, #6]
 800c2ba:	0212      	lsls	r2, r2, #8
 800c2bc:	430a      	orrs	r2, r1
		moutput.out4 = _ON; // O7 ON start clear sensor
 800c2be:	7119      	strb	r1, [r3, #4]
		io_setOutput(moutput, ucRegCoilsBuf);
 800c2c0:	79d9      	ldrb	r1, [r3, #7]
 800c2c2:	0424      	lsls	r4, r4, #16
 800c2c4:	4322      	orrs	r2, r4
 800c2c6:	0609      	lsls	r1, r1, #24
 800c2c8:	4311      	orrs	r1, r2
 800c2ca:	4a25      	ldr	r2, [pc, #148]	; (800c360 <meas_checkSensor+0xe0>)
 800c2cc:	f00b fade 	bl	801788c <io_setOutput>
		HAL_Delay(2000); //delay 2s to check sensor
 800c2d0:	20fa      	movs	r0, #250	; 0xfa
 800c2d2:	00c0      	lsls	r0, r0, #3
 800c2d4:	f002 fc48 	bl	800eb68 <HAL_Delay>
		if ((1 == GET_SENSOR1) && (1 == GET_SENSOR0)) {
 800c2d8:	4922      	ldr	r1, [pc, #136]	; (800c364 <meas_checkSensor+0xe4>)
 800c2da:	2401      	movs	r4, #1
 800c2dc:	6908      	ldr	r0, [r1, #16]
 800c2de:	4b1f      	ldr	r3, [pc, #124]	; (800c35c <meas_checkSensor+0xdc>)
 800c2e0:	4a1f      	ldr	r2, [pc, #124]	; (800c360 <meas_checkSensor+0xe0>)
 800c2e2:	0500      	lsls	r0, r0, #20
 800c2e4:	d51b      	bpl.n	800c31e <meas_checkSensor+0x9e>
 800c2e6:	6909      	ldr	r1, [r1, #16]
 800c2e8:	0a49      	lsrs	r1, r1, #9
 800c2ea:	4221      	tst	r1, r4
 800c2ec:	d017      	beq.n	800c31e <meas_checkSensor+0x9e>
			moutput.out4 = _OFF; //turn off O7
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	7119      	strb	r1, [r3, #4]
			io_setOutput(moutput, ucRegCoilsBuf);
 800c2f2:	7859      	ldrb	r1, [r3, #1]
 800c2f4:	7898      	ldrb	r0, [r3, #2]
 800c2f6:	0209      	lsls	r1, r1, #8
			moutput.out0 = _ON;
 800c2f8:	701c      	strb	r4, [r3, #0]
			io_setOutput(moutput, ucRegCoilsBuf);
 800c2fa:	430c      	orrs	r4, r1
 800c2fc:	78d9      	ldrb	r1, [r3, #3]
 800c2fe:	0400      	lsls	r0, r0, #16
 800c300:	799d      	ldrb	r5, [r3, #6]
 800c302:	4320      	orrs	r0, r4
 800c304:	0609      	lsls	r1, r1, #24
 800c306:	795c      	ldrb	r4, [r3, #5]
 800c308:	4308      	orrs	r0, r1
 800c30a:	79d9      	ldrb	r1, [r3, #7]
 800c30c:	0224      	lsls	r4, r4, #8
 800c30e:	042d      	lsls	r5, r5, #16
 800c310:	432c      	orrs	r4, r5
 800c312:	0609      	lsls	r1, r1, #24
 800c314:	4321      	orrs	r1, r4
 800c316:	f00b fab9 	bl	801788c <io_setOutput>
			cycleMeasure = WAITMEASUREZ;
 800c31a:	2003      	movs	r0, #3
 800c31c:	e7b9      	b.n	800c292 <meas_checkSensor+0x12>
			moutput.out0 = _OFF;
 800c31e:	2100      	movs	r1, #0
			io_setOutput(moutput, ucRegCoilsBuf);
 800c320:	785c      	ldrb	r4, [r3, #1]
 800c322:	7898      	ldrb	r0, [r3, #2]
			moutput.out0 = _OFF;
 800c324:	7019      	strb	r1, [r3, #0]
			moutput.out4 = _OFF; //turn off O7
 800c326:	7119      	strb	r1, [r3, #4]
			io_setOutput(moutput, ucRegCoilsBuf);
 800c328:	78d9      	ldrb	r1, [r3, #3]
 800c32a:	0224      	lsls	r4, r4, #8
 800c32c:	0400      	lsls	r0, r0, #16
 800c32e:	799d      	ldrb	r5, [r3, #6]
 800c330:	4320      	orrs	r0, r4
 800c332:	0609      	lsls	r1, r1, #24
 800c334:	795c      	ldrb	r4, [r3, #5]
 800c336:	4308      	orrs	r0, r1
 800c338:	79d9      	ldrb	r1, [r3, #7]
 800c33a:	0224      	lsls	r4, r4, #8
 800c33c:	042d      	lsls	r5, r5, #16
 800c33e:	432c      	orrs	r4, r5
 800c340:	0609      	lsls	r1, r1, #24
 800c342:	4321      	orrs	r1, r4
 800c344:	f00b faa2 	bl	801788c <io_setOutput>
			cycleMeasure = _ERROR_XY;
 800c348:	2014      	movs	r0, #20
 800c34a:	e7a2      	b.n	800c292 <meas_checkSensor+0x12>
	while (CLEARSENSOR == cycleMeasure) {
 800c34c:	2802      	cmp	r0, #2
 800c34e:	d1a0      	bne.n	800c292 <meas_checkSensor+0x12>
 800c350:	e7be      	b.n	800c2d0 <meas_checkSensor+0x50>
 800c352:	46c0      	nop			; (mov r8, r8)
 800c354:	48000c00 	.word	0x48000c00
 800c358:	200005cd 	.word	0x200005cd
 800c35c:	200005e7 	.word	0x200005e7
 800c360:	200005fc 	.word	0x200005fc
 800c364:	48001000 	.word	0x48001000

0800c368 <meas_measurementZ>:
	captureTime_X = 0;
 800c368:	2300      	movs	r3, #0
		uint8_t measurementIndex, setCalibValue calibStatus) {
 800c36a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c36c:	b08b      	sub	sp, #44	; 0x2c
 800c36e:	9207      	str	r2, [sp, #28]
	captureTime_X = 0;
 800c370:	4a90      	ldr	r2, [pc, #576]	; (800c5b4 <meas_measurementZ+0x24c>)
		uint8_t measurementIndex, setCalibValue calibStatus) {
 800c372:	9106      	str	r1, [sp, #24]
	captureTime_X = 0;
 800c374:	6013      	str	r3, [r2, #0]
	captureTime_Y = 0;
 800c376:	4a90      	ldr	r2, [pc, #576]	; (800c5b8 <meas_measurementZ+0x250>)
	msensor.s0 = _OFF;
 800c378:	4990      	ldr	r1, [pc, #576]	; (800c5bc <meas_measurementZ+0x254>)
	captureTime_Y = 0;
 800c37a:	6013      	str	r3, [r2, #0]
	minput.in2 = _OFF;
 800c37c:	4a90      	ldr	r2, [pc, #576]	; (800c5c0 <meas_measurementZ+0x258>)
		uint8_t measurementIndex, setCalibValue calibStatus) {
 800c37e:	9005      	str	r0, [sp, #20]
	minput.in2 = _OFF;
 800c380:	7093      	strb	r3, [r2, #2]
	msensor.s0 = _OFF;
 800c382:	700b      	strb	r3, [r1, #0]
	msensor.s1 = _OFF;
 800c384:	704b      	strb	r3, [r1, #1]
	mdata.coordinates.Z = 0;
 800c386:	498f      	ldr	r1, [pc, #572]	; (800c5c4 <meas_measurementZ+0x25c>)
 800c388:	710b      	strb	r3, [r1, #4]
 800c38a:	714b      	strb	r3, [r1, #5]
	while ((WAITMEASUREZ == cycleMeasure) && (0 == GET_INPUT(measurementIndex))) {
 800c38c:	2803      	cmp	r0, #3
 800c38e:	d122      	bne.n	800c3d6 <meas_measurementZ+0x6e>
 800c390:	2180      	movs	r1, #128	; 0x80
 800c392:	2480      	movs	r4, #128	; 0x80
 800c394:	4b8c      	ldr	r3, [pc, #560]	; (800c5c8 <meas_measurementZ+0x260>)
 800c396:	00c9      	lsls	r1, r1, #3
 800c398:	0124      	lsls	r4, r4, #4
 800c39a:	9806      	ldr	r0, [sp, #24]
 800c39c:	2801      	cmp	r0, #1
 800c39e:	d125      	bne.n	800c3ec <meas_measurementZ+0x84>
 800c3a0:	6918      	ldr	r0, [r3, #16]
 800c3a2:	4220      	tst	r0, r4
 800c3a4:	d11b      	bne.n	800c3de <meas_measurementZ+0x76>
		if (_ON == minput.in2) //C=1
 800c3a6:	7890      	ldrb	r0, [r2, #2]
 800c3a8:	2801      	cmp	r0, #1
 800c3aa:	d1f6      	bne.n	800c39a <meas_measurementZ+0x32>
			minput.in2 = _OFF;
 800c3ac:	2100      	movs	r1, #0
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c3ae:	2080      	movs	r0, #128	; 0x80
 800c3b0:	2480      	movs	r4, #128	; 0x80
			minput.in2 = _OFF;
 800c3b2:	7091      	strb	r1, [r2, #2]
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c3b4:	2280      	movs	r2, #128	; 0x80
 800c3b6:	0080      	lsls	r0, r0, #2
 800c3b8:	00d2      	lsls	r2, r2, #3
 800c3ba:	0124      	lsls	r4, r4, #4
 800c3bc:	6919      	ldr	r1, [r3, #16]
 800c3be:	4201      	tst	r1, r0
 800c3c0:	d105      	bne.n	800c3ce <meas_measurementZ+0x66>
 800c3c2:	9906      	ldr	r1, [sp, #24]
 800c3c4:	2901      	cmp	r1, #1
 800c3c6:	d10d      	bne.n	800c3e4 <meas_measurementZ+0x7c>
 800c3c8:	6919      	ldr	r1, [r3, #16]
 800c3ca:	4221      	tst	r1, r4
 800c3cc:	d0f6      	beq.n	800c3bc <meas_measurementZ+0x54>
 800c3ce:	2305      	movs	r3, #5
 800c3d0:	2208      	movs	r2, #8
 800c3d2:	9305      	str	r3, [sp, #20]
 800c3d4:	e000      	b.n	800c3d8 <meas_measurementZ+0x70>
	CycleMeasure cycleMeasureZ = MEASUREZ;
 800c3d6:	2205      	movs	r2, #5
	while ((MEASUREZ == cycleMeasure) && (0 == GET_INPUT(measurementIndex))) {
 800c3d8:	9b05      	ldr	r3, [sp, #20]
 800c3da:	2b05      	cmp	r3, #5
 800c3dc:	d054      	beq.n	800c488 <meas_measurementZ+0x120>
}
 800c3de:	9805      	ldr	r0, [sp, #20]
 800c3e0:	b00b      	add	sp, #44	; 0x2c
 800c3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c3e4:	6919      	ldr	r1, [r3, #16]
 800c3e6:	4211      	tst	r1, r2
 800c3e8:	d0e8      	beq.n	800c3bc <meas_measurementZ+0x54>
 800c3ea:	e7f0      	b.n	800c3ce <meas_measurementZ+0x66>
	while ((WAITMEASUREZ == cycleMeasure) && (0 == GET_INPUT(measurementIndex))) {
 800c3ec:	6918      	ldr	r0, [r3, #16]
 800c3ee:	4208      	tst	r0, r1
 800c3f0:	d0d9      	beq.n	800c3a6 <meas_measurementZ+0x3e>
 800c3f2:	e7f4      	b.n	800c3de <meas_measurementZ+0x76>
		if ((_ON == msensor.s0) && (_ON == msensor.s1)
 800c3f4:	4b71      	ldr	r3, [pc, #452]	; (800c5bc <meas_measurementZ+0x254>)
 800c3f6:	7819      	ldrb	r1, [r3, #0]
 800c3f8:	2901      	cmp	r1, #1
 800c3fa:	d117      	bne.n	800c42c <meas_measurementZ+0xc4>
 800c3fc:	7859      	ldrb	r1, [r3, #1]
 800c3fe:	2901      	cmp	r1, #1
 800c400:	d114      	bne.n	800c42c <meas_measurementZ+0xc4>
				&& cycleMeasureZ == Z_NOT_OK) //C=2
 800c402:	2a08      	cmp	r2, #8
 800c404:	d112      	bne.n	800c42c <meas_measurementZ+0xc4>
			msensor.s0 = _OFF;
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
			msensor.s1 = _OFF;
 800c40a:	705a      	strb	r2, [r3, #1]
			mmeasureValue.Z = MAX(captureTime_X, captureTime_Y);
 800c40c:	4a69      	ldr	r2, [pc, #420]	; (800c5b4 <meas_measurementZ+0x24c>)
 800c40e:	4b6a      	ldr	r3, [pc, #424]	; (800c5b8 <meas_measurementZ+0x250>)
 800c410:	6810      	ldr	r0, [r2, #0]
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	4288      	cmp	r0, r1
 800c416:	d942      	bls.n	800c49e <meas_measurementZ+0x136>
 800c418:	6813      	ldr	r3, [r2, #0]
 800c41a:	4a6c      	ldr	r2, [pc, #432]	; (800c5cc <meas_measurementZ+0x264>)
 800c41c:	0a19      	lsrs	r1, r3, #8
 800c41e:	7413      	strb	r3, [r2, #16]
 800c420:	7451      	strb	r1, [r2, #17]
 800c422:	0c19      	lsrs	r1, r3, #16
 800c424:	0e1b      	lsrs	r3, r3, #24
 800c426:	7491      	strb	r1, [r2, #18]
 800c428:	74d3      	strb	r3, [r2, #19]
			cycleMeasureZ = Z_OK;
 800c42a:	2207      	movs	r2, #7
		if ((MEASUREZ == cycleMeasure) && (_ON == minput.in2)) //else if ((MEASUREZ == cycleMeasure) && (_ON == minput.in2) && ((_OFF == msensor.s0) || (_OFF == msensor.s1))) //C=2
 800c42c:	4b64      	ldr	r3, [pc, #400]	; (800c5c0 <meas_measurementZ+0x258>)
 800c42e:	789b      	ldrb	r3, [r3, #2]
 800c430:	b2de      	uxtb	r6, r3
 800c432:	2b01      	cmp	r3, #1
 800c434:	d000      	beq.n	800c438 <meas_measurementZ+0xd0>
 800c436:	e0b2      	b.n	800c59e <meas_measurementZ+0x236>
			if (cycleMeasureZ != Z_OK) {
 800c438:	4b65      	ldr	r3, [pc, #404]	; (800c5d0 <meas_measurementZ+0x268>)
 800c43a:	2a07      	cmp	r2, #7
 800c43c:	d03e      	beq.n	800c4bc <meas_measurementZ+0x154>
				minput.in2 = _OFF;
 800c43e:	2200      	movs	r2, #0
 800c440:	495f      	ldr	r1, [pc, #380]	; (800c5c0 <meas_measurementZ+0x258>)
				io_setOutput(moutput, ucRegCoilsBuf);
 800c442:	7898      	ldrb	r0, [r3, #2]
				minput.in2 = _OFF;
 800c444:	708a      	strb	r2, [r1, #2]
				moutput.out1 = _OFF;
 800c446:	705a      	strb	r2, [r3, #1]
				io_setOutput(moutput, ucRegCoilsBuf);
 800c448:	7819      	ldrb	r1, [r3, #0]
 800c44a:	78da      	ldrb	r2, [r3, #3]
 800c44c:	0400      	lsls	r0, r0, #16
 800c44e:	4308      	orrs	r0, r1
 800c450:	0612      	lsls	r2, r2, #24
 800c452:	4310      	orrs	r0, r2
 800c454:	795a      	ldrb	r2, [r3, #5]
 800c456:	7919      	ldrb	r1, [r3, #4]
 800c458:	799c      	ldrb	r4, [r3, #6]
 800c45a:	0212      	lsls	r2, r2, #8
 800c45c:	430a      	orrs	r2, r1
 800c45e:	79d9      	ldrb	r1, [r3, #7]
 800c460:	0424      	lsls	r4, r4, #16
 800c462:	4322      	orrs	r2, r4
 800c464:	0609      	lsls	r1, r1, #24
 800c466:	4311      	orrs	r1, r2
 800c468:	4a5a      	ldr	r2, [pc, #360]	; (800c5d4 <meas_measurementZ+0x26c>)
 800c46a:	f00b fa0f 	bl	801788c <io_setOutput>
				mdata.mode = ZERROR1;
 800c46e:	2202      	movs	r2, #2
 800c470:	4b54      	ldr	r3, [pc, #336]	; (800c5c4 <meas_measurementZ+0x25c>)
 800c472:	749a      	strb	r2, [r3, #18]
				while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c474:	32ff      	adds	r2, #255	; 0xff
 800c476:	32ff      	adds	r2, #255	; 0xff
 800c478:	692b      	ldr	r3, [r5, #16]
 800c47a:	4213      	tst	r3, r2
 800c47c:	d011      	beq.n	800c4a2 <meas_measurementZ+0x13a>
		if ((Z_DONE == cycleMeasureZ) && (1 == GET_IN2)) //if (((Z_OK == cycleMeasure) || (Z_NOT_OK == cycleMeasure)) && (_OFF == minput.in2))
 800c47e:	692b      	ldr	r3, [r5, #16]
 800c480:	059b      	lsls	r3, r3, #22
 800c482:	d500      	bpl.n	800c486 <meas_measurementZ+0x11e>
 800c484:	e093      	b.n	800c5ae <meas_measurementZ+0x246>
 800c486:	2209      	movs	r2, #9
	while ((MEASUREZ == cycleMeasure) && (0 == GET_INPUT(measurementIndex))) {
 800c488:	9b06      	ldr	r3, [sp, #24]
 800c48a:	4d4f      	ldr	r5, [pc, #316]	; (800c5c8 <meas_measurementZ+0x260>)
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d000      	beq.n	800c492 <meas_measurementZ+0x12a>
 800c490:	e089      	b.n	800c5a6 <meas_measurementZ+0x23e>
 800c492:	2180      	movs	r1, #128	; 0x80
 800c494:	692b      	ldr	r3, [r5, #16]
 800c496:	0109      	lsls	r1, r1, #4
 800c498:	420b      	tst	r3, r1
 800c49a:	d0ab      	beq.n	800c3f4 <meas_measurementZ+0x8c>
 800c49c:	e79f      	b.n	800c3de <meas_measurementZ+0x76>
			mmeasureValue.Z = MAX(captureTime_X, captureTime_Y);
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	e7bb      	b.n	800c41a <meas_measurementZ+0xb2>
				while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d105      	bne.n	800c4b4 <meas_measurementZ+0x14c>
 800c4a8:	2180      	movs	r1, #128	; 0x80
 800c4aa:	692b      	ldr	r3, [r5, #16]
 800c4ac:	0109      	lsls	r1, r1, #4
 800c4ae:	420b      	tst	r3, r1
 800c4b0:	d0e2      	beq.n	800c478 <meas_measurementZ+0x110>
 800c4b2:	e7e4      	b.n	800c47e <meas_measurementZ+0x116>
 800c4b4:	2180      	movs	r1, #128	; 0x80
 800c4b6:	692b      	ldr	r3, [r5, #16]
 800c4b8:	00c9      	lsls	r1, r1, #3
 800c4ba:	e7f8      	b.n	800c4ae <meas_measurementZ+0x146>
				io_setOutput(moutput, ucRegCoilsBuf);
 800c4bc:	2080      	movs	r0, #128	; 0x80
 800c4be:	7819      	ldrb	r1, [r3, #0]
 800c4c0:	0040      	lsls	r0, r0, #1
 800c4c2:	4301      	orrs	r1, r0
 800c4c4:	7898      	ldrb	r0, [r3, #2]
 800c4c6:	78da      	ldrb	r2, [r3, #3]
 800c4c8:	0400      	lsls	r0, r0, #16
 800c4ca:	4308      	orrs	r0, r1
 800c4cc:	0612      	lsls	r2, r2, #24
 800c4ce:	4310      	orrs	r0, r2
 800c4d0:	795a      	ldrb	r2, [r3, #5]
 800c4d2:	7919      	ldrb	r1, [r3, #4]
 800c4d4:	799c      	ldrb	r4, [r3, #6]
 800c4d6:	0212      	lsls	r2, r2, #8
 800c4d8:	430a      	orrs	r2, r1
 800c4da:	79d9      	ldrb	r1, [r3, #7]
 800c4dc:	0424      	lsls	r4, r4, #16
 800c4de:	4322      	orrs	r2, r4
 800c4e0:	0609      	lsls	r1, r1, #24
 800c4e2:	4311      	orrs	r1, r2
 800c4e4:	4a3b      	ldr	r2, [pc, #236]	; (800c5d4 <meas_measurementZ+0x26c>)
				moutput.out1 = _ON;
 800c4e6:	705e      	strb	r6, [r3, #1]
				io_setOutput(moutput, ucRegCoilsBuf);
 800c4e8:	f00b f9d0 	bl	801788c <io_setOutput>
				mdata.mode = ZONLY;
 800c4ec:	4c35      	ldr	r4, [pc, #212]	; (800c5c4 <meas_measurementZ+0x25c>)
				app_CalculatorValue(cycleMeasure, mdata.mode, measurementIndex);
 800c4ee:	0031      	movs	r1, r6
 800c4f0:	2005      	movs	r0, #5
 800c4f2:	9a06      	ldr	r2, [sp, #24]
				mdata.mode = ZONLY;
 800c4f4:	74a6      	strb	r6, [r4, #18]
				app_CalculatorValue(cycleMeasure, mdata.mode, measurementIndex);
 800c4f6:	f7ff fbc3 	bl	800bc80 <app_CalculatorValue>
				screen_DataMeasureType1(mdata, calibStatus, measurementIndex,
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9a06      	ldr	r2, [sp, #24]
 800c4fe:	9303      	str	r3, [sp, #12]
 800c500:	9202      	str	r2, [sp, #8]
 800c502:	9a07      	ldr	r2, [sp, #28]
 800c504:	4668      	mov	r0, sp
 800c506:	9201      	str	r2, [sp, #4]
 800c508:	7862      	ldrb	r2, [r4, #1]
 800c50a:	7821      	ldrb	r1, [r4, #0]
 800c50c:	78a3      	ldrb	r3, [r4, #2]
 800c50e:	0212      	lsls	r2, r2, #8
 800c510:	4311      	orrs	r1, r2
 800c512:	78e2      	ldrb	r2, [r4, #3]
 800c514:	041b      	lsls	r3, r3, #16
 800c516:	430b      	orrs	r3, r1
 800c518:	0612      	lsls	r2, r2, #24
 800c51a:	431a      	orrs	r2, r3
 800c51c:	9208      	str	r2, [sp, #32]
 800c51e:	7962      	ldrb	r2, [r4, #5]
 800c520:	7921      	ldrb	r1, [r4, #4]
 800c522:	79a3      	ldrb	r3, [r4, #6]
 800c524:	0212      	lsls	r2, r2, #8
 800c526:	4311      	orrs	r1, r2
 800c528:	041b      	lsls	r3, r3, #16
 800c52a:	430b      	orrs	r3, r1
 800c52c:	0021      	movs	r1, r4
 800c52e:	79e2      	ldrb	r2, [r4, #7]
 800c530:	7aa7      	ldrb	r7, [r4, #10]
 800c532:	0612      	lsls	r2, r2, #24
 800c534:	431a      	orrs	r2, r3
 800c536:	7a63      	ldrb	r3, [r4, #9]
 800c538:	9209      	str	r2, [sp, #36]	; 0x24
 800c53a:	7a22      	ldrb	r2, [r4, #8]
 800c53c:	021b      	lsls	r3, r3, #8
 800c53e:	431a      	orrs	r2, r3
 800c540:	7ae3      	ldrb	r3, [r4, #11]
 800c542:	043f      	lsls	r7, r7, #16
 800c544:	4317      	orrs	r7, r2
 800c546:	061b      	lsls	r3, r3, #24
 800c548:	431f      	orrs	r7, r3
 800c54a:	7b63      	ldrb	r3, [r4, #13]
 800c54c:	7b22      	ldrb	r2, [r4, #12]
 800c54e:	7ba6      	ldrb	r6, [r4, #14]
 800c550:	021b      	lsls	r3, r3, #8
 800c552:	431a      	orrs	r2, r3
 800c554:	7be3      	ldrb	r3, [r4, #15]
 800c556:	0436      	lsls	r6, r6, #16
 800c558:	061b      	lsls	r3, r3, #24
 800c55a:	4316      	orrs	r6, r2
 800c55c:	431e      	orrs	r6, r3
 800c55e:	2203      	movs	r2, #3
 800c560:	3110      	adds	r1, #16
 800c562:	f00c f869 	bl	8018638 <memcpy>
 800c566:	003a      	movs	r2, r7
 800c568:	0033      	movs	r3, r6
 800c56a:	9808      	ldr	r0, [sp, #32]
 800c56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c56e:	f00b fa5d 	bl	8017a2c <screen_DataMeasureType1>
				minput.in2 = _OFF;
 800c572:	2300      	movs	r3, #0
 800c574:	4a12      	ldr	r2, [pc, #72]	; (800c5c0 <meas_measurementZ+0x258>)
 800c576:	7093      	strb	r3, [r2, #2]
				while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c578:	2280      	movs	r2, #128	; 0x80
 800c57a:	0092      	lsls	r2, r2, #2
 800c57c:	692b      	ldr	r3, [r5, #16]
 800c57e:	4213      	tst	r3, r2
 800c580:	d000      	beq.n	800c584 <meas_measurementZ+0x21c>
 800c582:	e77c      	b.n	800c47e <meas_measurementZ+0x116>
 800c584:	9b06      	ldr	r3, [sp, #24]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d105      	bne.n	800c596 <meas_measurementZ+0x22e>
 800c58a:	2180      	movs	r1, #128	; 0x80
 800c58c:	692b      	ldr	r3, [r5, #16]
 800c58e:	0109      	lsls	r1, r1, #4
 800c590:	420b      	tst	r3, r1
 800c592:	d0f3      	beq.n	800c57c <meas_measurementZ+0x214>
 800c594:	e773      	b.n	800c47e <meas_measurementZ+0x116>
 800c596:	2180      	movs	r1, #128	; 0x80
 800c598:	692b      	ldr	r3, [r5, #16]
 800c59a:	00c9      	lsls	r1, r1, #3
 800c59c:	e7f8      	b.n	800c590 <meas_measurementZ+0x228>
		if ((Z_DONE == cycleMeasureZ) && (1 == GET_IN2)) //if (((Z_OK == cycleMeasure) || (Z_NOT_OK == cycleMeasure)) && (_OFF == minput.in2))
 800c59e:	2a09      	cmp	r2, #9
 800c5a0:	d000      	beq.n	800c5a4 <meas_measurementZ+0x23c>
 800c5a2:	e771      	b.n	800c488 <meas_measurementZ+0x120>
 800c5a4:	e76b      	b.n	800c47e <meas_measurementZ+0x116>
	while ((MEASUREZ == cycleMeasure) && (0 == GET_INPUT(measurementIndex))) {
 800c5a6:	2180      	movs	r1, #128	; 0x80
 800c5a8:	692b      	ldr	r3, [r5, #16]
 800c5aa:	00c9      	lsls	r1, r1, #3
 800c5ac:	e774      	b.n	800c498 <meas_measurementZ+0x130>
			cycleMeasure = WAITMEASUREX1Y1;
 800c5ae:	230b      	movs	r3, #11
 800c5b0:	9305      	str	r3, [sp, #20]
 800c5b2:	e714      	b.n	800c3de <meas_measurementZ+0x76>
 800c5b4:	2000034c 	.word	0x2000034c
 800c5b8:	20000350 	.word	0x20000350
 800c5bc:	200005ef 	.word	0x200005ef
 800c5c0:	200005cd 	.word	0x200005cd
 800c5c4:	200005b7 	.word	0x200005b7
 800c5c8:	48000c00 	.word	0x48000c00
 800c5cc:	200005d3 	.word	0x200005d3
 800c5d0:	200005e7 	.word	0x200005e7
 800c5d4:	200005fc 	.word	0x200005fc

0800c5d8 <meas_measurementX1Y1>:
	captureTime_X = 0;
 800c5d8:	2300      	movs	r3, #0
		uint8_t measurementIndex) {
 800c5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	captureTime_X = 0;
 800c5dc:	4a6c      	ldr	r2, [pc, #432]	; (800c790 <meas_measurementX1Y1+0x1b8>)
		uint8_t measurementIndex) {
 800c5de:	9101      	str	r1, [sp, #4]
	captureTime_X = 0;
 800c5e0:	6013      	str	r3, [r2, #0]
	captureTime_Y = 0;
 800c5e2:	4a6c      	ldr	r2, [pc, #432]	; (800c794 <meas_measurementX1Y1+0x1bc>)
 800c5e4:	6013      	str	r3, [r2, #0]
	while ((WAITMEASUREX1Y1 == cycleMeasure)
 800c5e6:	280b      	cmp	r0, #11
 800c5e8:	d10c      	bne.n	800c604 <meas_measurementX1Y1+0x2c>
			&& (0 == GET_INPUT(measurementIndex))) {
 800c5ea:	2280      	movs	r2, #128	; 0x80
 800c5ec:	2580      	movs	r5, #128	; 0x80
 800c5ee:	4b6a      	ldr	r3, [pc, #424]	; (800c798 <meas_measurementX1Y1+0x1c0>)
		if (_ON == minput.in2) //C=3 Start timer
 800c5f0:	496a      	ldr	r1, [pc, #424]	; (800c79c <meas_measurementX1Y1+0x1c4>)
			&& (0 == GET_INPUT(measurementIndex))) {
 800c5f2:	00d2      	lsls	r2, r2, #3
 800c5f4:	012d      	lsls	r5, r5, #4
	while ((WAITMEASUREX1Y1 == cycleMeasure)
 800c5f6:	9c01      	ldr	r4, [sp, #4]
 800c5f8:	2c01      	cmp	r4, #1
 800c5fa:	d150      	bne.n	800c69e <meas_measurementX1Y1+0xc6>
			&& (0 == GET_INPUT(measurementIndex))) {
 800c5fc:	691c      	ldr	r4, [r3, #16]
 800c5fe:	422c      	tst	r4, r5
 800c600:	d050      	beq.n	800c6a4 <meas_measurementX1Y1+0xcc>
}
 800c602:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	CycleMeasureSensor cycleMeasureX = SEN_STOP;
 800c604:	2601      	movs	r6, #1
 800c606:	4b66      	ldr	r3, [pc, #408]	; (800c7a0 <meas_measurementX1Y1+0x1c8>)
 800c608:	785a      	ldrb	r2, [r3, #1]
 800c60a:	781c      	ldrb	r4, [r3, #0]
 800c60c:	0212      	lsls	r2, r2, #8
 800c60e:	7899      	ldrb	r1, [r3, #2]
 800c610:	4314      	orrs	r4, r2
 800c612:	78da      	ldrb	r2, [r3, #3]
 800c614:	0409      	lsls	r1, r1, #16
 800c616:	4321      	orrs	r1, r4
 800c618:	0612      	lsls	r2, r2, #24
 800c61a:	795c      	ldrb	r4, [r3, #5]
 800c61c:	791d      	ldrb	r5, [r3, #4]
 800c61e:	4311      	orrs	r1, r2
 800c620:	799a      	ldrb	r2, [r3, #6]
 800c622:	0224      	lsls	r4, r4, #8
 800c624:	4325      	orrs	r5, r4
 800c626:	0412      	lsls	r2, r2, #16
 800c628:	432a      	orrs	r2, r5
			cycleMeasure = _ERROR_XY;
 800c62a:	2500      	movs	r5, #0
 800c62c:	79dc      	ldrb	r4, [r3, #7]
 800c62e:	46ac      	mov	ip, r5
 800c630:	0624      	lsls	r4, r4, #24
 800c632:	4322      	orrs	r2, r4
 800c634:	0034      	movs	r4, r6
 800c636:	9500      	str	r5, [sp, #0]
	while (cycleMeasure == MEASUREX1Y1 && (0 == GET_INPUT(measurementIndex))) {
 800c638:	280d      	cmp	r0, #13
 800c63a:	d000      	beq.n	800c63e <meas_measurementX1Y1+0x66>
 800c63c:	e086      	b.n	800c74c <meas_measurementX1Y1+0x174>
 800c63e:	9d01      	ldr	r5, [sp, #4]
 800c640:	2d01      	cmp	r5, #1
 800c642:	d000      	beq.n	800c646 <meas_measurementX1Y1+0x6e>
 800c644:	e09c      	b.n	800c780 <meas_measurementX1Y1+0x1a8>
 800c646:	4d54      	ldr	r5, [pc, #336]	; (800c798 <meas_measurementX1Y1+0x1c0>)
 800c648:	692f      	ldr	r7, [r5, #16]
 800c64a:	2580      	movs	r5, #128	; 0x80
 800c64c:	012d      	lsls	r5, r5, #4
 800c64e:	422f      	tst	r7, r5
 800c650:	d17c      	bne.n	800c74c <meas_measurementX1Y1+0x174>
		if (SEN_START == cycleMeasureX && (_ON == msensor.s0)) {
 800c652:	2e00      	cmp	r6, #0
 800c654:	d146      	bne.n	800c6e4 <meas_measurementX1Y1+0x10c>
 800c656:	4f53      	ldr	r7, [pc, #332]	; (800c7a4 <meas_measurementX1Y1+0x1cc>)
 800c658:	783f      	ldrb	r7, [r7, #0]
 800c65a:	2f01      	cmp	r7, #1
 800c65c:	d000      	beq.n	800c660 <meas_measurementX1Y1+0x88>
 800c65e:	e094      	b.n	800c78a <meas_measurementX1Y1+0x1b2>
			while (GET_SENSOR0 == 0 && (0 == GET_INPUT(measurementIndex)))
 800c660:	2680      	movs	r6, #128	; 0x80
 800c662:	00b6      	lsls	r6, r6, #2
 800c664:	46b4      	mov	ip, r6
			mmeasureValue.X1 = captureTime_X;
 800c666:	494a      	ldr	r1, [pc, #296]	; (800c790 <meas_measurementX1Y1+0x1b8>)
			while (GET_SENSOR0 == 0 && (0 == GET_INPUT(measurementIndex)))
 800c668:	4f4f      	ldr	r7, [pc, #316]	; (800c7a8 <meas_measurementX1Y1+0x1d0>)
			mmeasureValue.X1 = captureTime_X;
 800c66a:	6809      	ldr	r1, [r1, #0]
			while (GET_SENSOR0 == 0 && (0 == GET_INPUT(measurementIndex)))
 800c66c:	4665      	mov	r5, ip
 800c66e:	693e      	ldr	r6, [r7, #16]
 800c670:	422e      	tst	r6, r5
 800c672:	d108      	bne.n	800c686 <meas_measurementX1Y1+0xae>
 800c674:	9d01      	ldr	r5, [sp, #4]
 800c676:	2d01      	cmp	r5, #1
 800c678:	d12f      	bne.n	800c6da <meas_measurementX1Y1+0x102>
 800c67a:	4d47      	ldr	r5, [pc, #284]	; (800c798 <meas_measurementX1Y1+0x1c0>)
 800c67c:	692e      	ldr	r6, [r5, #16]
 800c67e:	2580      	movs	r5, #128	; 0x80
 800c680:	012d      	lsls	r5, r5, #4
 800c682:	422e      	tst	r6, r5
 800c684:	d0f2      	beq.n	800c66c <meas_measurementX1Y1+0x94>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c686:	2c00      	cmp	r4, #0
 800c688:	d049      	beq.n	800c71e <meas_measurementX1Y1+0x146>
 800c68a:	2501      	movs	r5, #1
 800c68c:	46ac      	mov	ip, r5
 800c68e:	e051      	b.n	800c734 <meas_measurementX1Y1+0x15c>
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c690:	6919      	ldr	r1, [r3, #16]
 800c692:	4201      	tst	r1, r0
 800c694:	d014      	beq.n	800c6c0 <meas_measurementX1Y1+0xe8>
 800c696:	e01e      	b.n	800c6d6 <meas_measurementX1Y1+0xfe>
 800c698:	200d      	movs	r0, #13
 800c69a:	2600      	movs	r6, #0
 800c69c:	e7b3      	b.n	800c606 <meas_measurementX1Y1+0x2e>
			&& (0 == GET_INPUT(measurementIndex))) {
 800c69e:	691c      	ldr	r4, [r3, #16]
 800c6a0:	4214      	tst	r4, r2
 800c6a2:	d1ae      	bne.n	800c602 <meas_measurementX1Y1+0x2a>
		if (_ON == minput.in2) //C=3 Start timer
 800c6a4:	788c      	ldrb	r4, [r1, #2]
 800c6a6:	2c01      	cmp	r4, #1
 800c6a8:	d1a5      	bne.n	800c5f6 <meas_measurementX1Y1+0x1e>
			minput.in2 = _OFF;
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	708a      	strb	r2, [r1, #2]
			msensor.s0 = _OFF;
 800c6ae:	493d      	ldr	r1, [pc, #244]	; (800c7a4 <meas_measurementX1Y1+0x1cc>)
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c6b0:	2080      	movs	r0, #128	; 0x80
			msensor.s0 = _OFF;
 800c6b2:	700a      	strb	r2, [r1, #0]
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c6b4:	2480      	movs	r4, #128	; 0x80
			msensor.s1 = _OFF;
 800c6b6:	704a      	strb	r2, [r1, #1]
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c6b8:	2280      	movs	r2, #128	; 0x80
 800c6ba:	00c0      	lsls	r0, r0, #3
 800c6bc:	0092      	lsls	r2, r2, #2
 800c6be:	0124      	lsls	r4, r4, #4
 800c6c0:	6919      	ldr	r1, [r3, #16]
 800c6c2:	000e      	movs	r6, r1
 800c6c4:	4016      	ands	r6, r2
 800c6c6:	4211      	tst	r1, r2
 800c6c8:	d1e6      	bne.n	800c698 <meas_measurementX1Y1+0xc0>
 800c6ca:	9901      	ldr	r1, [sp, #4]
 800c6cc:	2901      	cmp	r1, #1
 800c6ce:	d1df      	bne.n	800c690 <meas_measurementX1Y1+0xb8>
 800c6d0:	6919      	ldr	r1, [r3, #16]
 800c6d2:	4221      	tst	r1, r4
 800c6d4:	d0f4      	beq.n	800c6c0 <meas_measurementX1Y1+0xe8>
 800c6d6:	200d      	movs	r0, #13
 800c6d8:	e795      	b.n	800c606 <meas_measurementX1Y1+0x2e>
			while (GET_SENSOR0 == 0 && (0 == GET_INPUT(measurementIndex)))
 800c6da:	4d2f      	ldr	r5, [pc, #188]	; (800c798 <meas_measurementX1Y1+0x1c0>)
 800c6dc:	692e      	ldr	r6, [r5, #16]
 800c6de:	2580      	movs	r5, #128	; 0x80
 800c6e0:	00ed      	lsls	r5, r5, #3
 800c6e2:	e7ce      	b.n	800c682 <meas_measurementX1Y1+0xaa>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c6e4:	2c00      	cmp	r4, #0
 800c6e6:	d123      	bne.n	800c730 <meas_measurementX1Y1+0x158>
 800c6e8:	4c2e      	ldr	r4, [pc, #184]	; (800c7a4 <meas_measurementX1Y1+0x1cc>)
 800c6ea:	7867      	ldrb	r7, [r4, #1]
 800c6ec:	2400      	movs	r4, #0
 800c6ee:	2f01      	cmp	r7, #1
 800c6f0:	d124      	bne.n	800c73c <meas_measurementX1Y1+0x164>
			mmeasureValue.Y1 = captureTime_Y; //Stop counter Y
 800c6f2:	4a28      	ldr	r2, [pc, #160]	; (800c794 <meas_measurementX1Y1+0x1bc>)
			while (GET_SENSOR1 == 0 && (0 == GET_INPUT(measurementIndex)))
 800c6f4:	4f2c      	ldr	r7, [pc, #176]	; (800c7a8 <meas_measurementX1Y1+0x1d0>)
			mmeasureValue.Y1 = captureTime_Y; //Stop counter Y
 800c6f6:	6812      	ldr	r2, [r2, #0]
			while (GET_SENSOR1 == 0 && (0 == GET_INPUT(measurementIndex)))
 800c6f8:	2580      	movs	r5, #128	; 0x80
 800c6fa:	693c      	ldr	r4, [r7, #16]
 800c6fc:	012d      	lsls	r5, r5, #4
 800c6fe:	422c      	tst	r4, r5
 800c700:	d106      	bne.n	800c710 <meas_measurementX1Y1+0x138>
 800c702:	9c01      	ldr	r4, [sp, #4]
 800c704:	2c01      	cmp	r4, #1
 800c706:	d10e      	bne.n	800c726 <meas_measurementX1Y1+0x14e>
 800c708:	4c23      	ldr	r4, [pc, #140]	; (800c798 <meas_measurementX1Y1+0x1c0>)
 800c70a:	6924      	ldr	r4, [r4, #16]
 800c70c:	422c      	tst	r4, r5
 800c70e:	d0f3      	beq.n	800c6f8 <meas_measurementX1Y1+0x120>
		if ((SEN_FINISH == cycleMeasureX) && (SEN_FINISH == cycleMeasureY)) {
 800c710:	2e02      	cmp	r6, #2
 800c712:	d131      	bne.n	800c778 <meas_measurementX1Y1+0x1a0>
 800c714:	2001      	movs	r0, #1
 800c716:	0034      	movs	r4, r6
 800c718:	9000      	str	r0, [sp, #0]
			cycleMeasure = WAITMEASUREX2Y2;
 800c71a:	300d      	adds	r0, #13
 800c71c:	e00e      	b.n	800c73c <meas_measurementX1Y1+0x164>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c71e:	2401      	movs	r4, #1
 800c720:	2602      	movs	r6, #2
 800c722:	46a4      	mov	ip, r4
 800c724:	e7e0      	b.n	800c6e8 <meas_measurementX1Y1+0x110>
			while (GET_SENSOR1 == 0 && (0 == GET_INPUT(measurementIndex)))
 800c726:	2580      	movs	r5, #128	; 0x80
 800c728:	4c1b      	ldr	r4, [pc, #108]	; (800c798 <meas_measurementX1Y1+0x1c0>)
 800c72a:	00ed      	lsls	r5, r5, #3
 800c72c:	6924      	ldr	r4, [r4, #16]
 800c72e:	e7ed      	b.n	800c70c <meas_measurementX1Y1+0x134>
		if ((SEN_FINISH == cycleMeasureX) && (SEN_FINISH == cycleMeasureY)) {
 800c730:	2e02      	cmp	r6, #2
 800c732:	d103      	bne.n	800c73c <meas_measurementX1Y1+0x164>
 800c734:	2602      	movs	r6, #2
 800c736:	42b4      	cmp	r4, r6
 800c738:	d100      	bne.n	800c73c <meas_measurementX1Y1+0x164>
			cycleMeasure = WAITMEASUREX2Y2;
 800c73a:	200e      	movs	r0, #14
		if (0 == GET_IN2 && cycleMeasure != WAITMEASUREX2Y2) {
 800c73c:	4d16      	ldr	r5, [pc, #88]	; (800c798 <meas_measurementX1Y1+0x1c0>)
 800c73e:	692d      	ldr	r5, [r5, #16]
 800c740:	05ad      	lsls	r5, r5, #22
 800c742:	d500      	bpl.n	800c746 <meas_measurementX1Y1+0x16e>
 800c744:	e778      	b.n	800c638 <meas_measurementX1Y1+0x60>
 800c746:	280e      	cmp	r0, #14
 800c748:	d000      	beq.n	800c74c <meas_measurementX1Y1+0x174>
			cycleMeasure = _ERROR_XY;
 800c74a:	2014      	movs	r0, #20
 800c74c:	4664      	mov	r4, ip
 800c74e:	2c00      	cmp	r4, #0
 800c750:	d006      	beq.n	800c760 <meas_measurementX1Y1+0x188>
 800c752:	0a0c      	lsrs	r4, r1, #8
 800c754:	7019      	strb	r1, [r3, #0]
 800c756:	705c      	strb	r4, [r3, #1]
 800c758:	0c0c      	lsrs	r4, r1, #16
 800c75a:	0e09      	lsrs	r1, r1, #24
 800c75c:	709c      	strb	r4, [r3, #2]
 800c75e:	70d9      	strb	r1, [r3, #3]
 800c760:	9900      	ldr	r1, [sp, #0]
 800c762:	2900      	cmp	r1, #0
 800c764:	d100      	bne.n	800c768 <meas_measurementX1Y1+0x190>
 800c766:	e74c      	b.n	800c602 <meas_measurementX1Y1+0x2a>
 800c768:	0a11      	lsrs	r1, r2, #8
 800c76a:	711a      	strb	r2, [r3, #4]
 800c76c:	7159      	strb	r1, [r3, #5]
 800c76e:	0c11      	lsrs	r1, r2, #16
 800c770:	0e12      	lsrs	r2, r2, #24
 800c772:	7199      	strb	r1, [r3, #6]
 800c774:	71da      	strb	r2, [r3, #7]
	return cycleMeasure;
 800c776:	e744      	b.n	800c602 <meas_measurementX1Y1+0x2a>
		if ((SEN_FINISH == cycleMeasureX) && (SEN_FINISH == cycleMeasureY)) {
 800c778:	2401      	movs	r4, #1
 800c77a:	9400      	str	r4, [sp, #0]
 800c77c:	1924      	adds	r4, r4, r4
 800c77e:	e7dd      	b.n	800c73c <meas_measurementX1Y1+0x164>
	while (cycleMeasure == MEASUREX1Y1 && (0 == GET_INPUT(measurementIndex))) {
 800c780:	4d05      	ldr	r5, [pc, #20]	; (800c798 <meas_measurementX1Y1+0x1c0>)
 800c782:	692f      	ldr	r7, [r5, #16]
 800c784:	2580      	movs	r5, #128	; 0x80
 800c786:	00ed      	lsls	r5, r5, #3
 800c788:	e761      	b.n	800c64e <meas_measurementX1Y1+0x76>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c78a:	2c00      	cmp	r4, #0
 800c78c:	d0ac      	beq.n	800c6e8 <meas_measurementX1Y1+0x110>
 800c78e:	e7d5      	b.n	800c73c <meas_measurementX1Y1+0x164>
 800c790:	2000034c 	.word	0x2000034c
 800c794:	20000350 	.word	0x20000350
 800c798:	48000c00 	.word	0x48000c00
 800c79c:	200005cd 	.word	0x200005cd
 800c7a0:	200005d3 	.word	0x200005d3
 800c7a4:	200005ef 	.word	0x200005ef
 800c7a8:	48001000 	.word	0x48001000

0800c7ac <meas_measurementX2Y2>:
	captureTime_X = 0;
 800c7ac:	2300      	movs	r3, #0
		uint8_t measurementIndex) {
 800c7ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	captureTime_X = 0;
 800c7b0:	4a7c      	ldr	r2, [pc, #496]	; (800c9a4 <meas_measurementX2Y2+0x1f8>)
		uint8_t measurementIndex) {
 800c7b2:	b085      	sub	sp, #20
	captureTime_X = 0;
 800c7b4:	6013      	str	r3, [r2, #0]
	captureTime_Y = 0;
 800c7b6:	4a7c      	ldr	r2, [pc, #496]	; (800c9a8 <meas_measurementX2Y2+0x1fc>)
		uint8_t measurementIndex) {
 800c7b8:	9103      	str	r1, [sp, #12]
	captureTime_Y = 0;
 800c7ba:	6013      	str	r3, [r2, #0]
	while ((WAITMEASUREX2Y2 == cycleMeasure)
 800c7bc:	280e      	cmp	r0, #14
 800c7be:	d10d      	bne.n	800c7dc <meas_measurementX2Y2+0x30>
			&& (0 == GET_INPUT(measurementIndex))) {
 800c7c0:	2280      	movs	r2, #128	; 0x80
 800c7c2:	2580      	movs	r5, #128	; 0x80
 800c7c4:	4b79      	ldr	r3, [pc, #484]	; (800c9ac <meas_measurementX2Y2+0x200>)
		if (_ON == minput.in2) //C=4
 800c7c6:	497a      	ldr	r1, [pc, #488]	; (800c9b0 <meas_measurementX2Y2+0x204>)
			&& (0 == GET_INPUT(measurementIndex))) {
 800c7c8:	00d2      	lsls	r2, r2, #3
 800c7ca:	012d      	lsls	r5, r5, #4
	while ((WAITMEASUREX2Y2 == cycleMeasure)
 800c7cc:	9c03      	ldr	r4, [sp, #12]
 800c7ce:	2c01      	cmp	r4, #1
 800c7d0:	d149      	bne.n	800c866 <meas_measurementX2Y2+0xba>
			&& (0 == GET_INPUT(measurementIndex))) {
 800c7d2:	691c      	ldr	r4, [r3, #16]
 800c7d4:	422c      	tst	r4, r5
 800c7d6:	d049      	beq.n	800c86c <meas_measurementX2Y2+0xc0>
}
 800c7d8:	b005      	add	sp, #20
 800c7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	CycleMeasureSensor cycleMeasureX = SEN_STOP;
 800c7dc:	2401      	movs	r4, #1
 800c7de:	4975      	ldr	r1, [pc, #468]	; (800c9b4 <meas_measurementX2Y2+0x208>)
			cycleMeasure = _ERROR_XY;
 800c7e0:	46a4      	mov	ip, r4
 800c7e2:	7a4b      	ldrb	r3, [r1, #9]
 800c7e4:	7a0d      	ldrb	r5, [r1, #8]
 800c7e6:	7a8a      	ldrb	r2, [r1, #10]
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	431d      	orrs	r5, r3
 800c7ec:	0412      	lsls	r2, r2, #16
 800c7ee:	7acb      	ldrb	r3, [r1, #11]
 800c7f0:	432a      	orrs	r2, r5
 800c7f2:	7b4d      	ldrb	r5, [r1, #13]
 800c7f4:	7b0e      	ldrb	r6, [r1, #12]
 800c7f6:	061b      	lsls	r3, r3, #24
 800c7f8:	022d      	lsls	r5, r5, #8
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	7b8b      	ldrb	r3, [r1, #14]
 800c7fe:	432e      	orrs	r6, r5
 800c800:	7bcd      	ldrb	r5, [r1, #15]
 800c802:	041b      	lsls	r3, r3, #16
 800c804:	062d      	lsls	r5, r5, #24
 800c806:	4333      	orrs	r3, r6
 800c808:	432b      	orrs	r3, r5
 800c80a:	2500      	movs	r5, #0
 800c80c:	9501      	str	r5, [sp, #4]
 800c80e:	9502      	str	r5, [sp, #8]
	while (cycleMeasure == MEASUREX2Y2 && (0 == GET_INPUT(measurementIndex))) {
 800c810:	2810      	cmp	r0, #16
 800c812:	d000      	beq.n	800c816 <meas_measurementX2Y2+0x6a>
 800c814:	e0a2      	b.n	800c95c <meas_measurementX2Y2+0x1b0>
 800c816:	9d03      	ldr	r5, [sp, #12]
 800c818:	2d01      	cmp	r5, #1
 800c81a:	d000      	beq.n	800c81e <meas_measurementX2Y2+0x72>
 800c81c:	e0b9      	b.n	800c992 <meas_measurementX2Y2+0x1e6>
 800c81e:	4d63      	ldr	r5, [pc, #396]	; (800c9ac <meas_measurementX2Y2+0x200>)
 800c820:	692e      	ldr	r6, [r5, #16]
 800c822:	2580      	movs	r5, #128	; 0x80
 800c824:	012d      	lsls	r5, r5, #4
 800c826:	422e      	tst	r6, r5
 800c828:	d03b      	beq.n	800c8a2 <meas_measurementX2Y2+0xf6>
 800c82a:	9902      	ldr	r1, [sp, #8]
 800c82c:	2900      	cmp	r1, #0
 800c82e:	d007      	beq.n	800c840 <meas_measurementX2Y2+0x94>
 800c830:	4960      	ldr	r1, [pc, #384]	; (800c9b4 <meas_measurementX2Y2+0x208>)
 800c832:	0a14      	lsrs	r4, r2, #8
 800c834:	720a      	strb	r2, [r1, #8]
 800c836:	724c      	strb	r4, [r1, #9]
 800c838:	0c14      	lsrs	r4, r2, #16
 800c83a:	0e12      	lsrs	r2, r2, #24
 800c83c:	728c      	strb	r4, [r1, #10]
 800c83e:	72ca      	strb	r2, [r1, #11]
 800c840:	9a01      	ldr	r2, [sp, #4]
 800c842:	2a00      	cmp	r2, #0
 800c844:	d0c8      	beq.n	800c7d8 <meas_measurementX2Y2+0x2c>
 800c846:	4a5b      	ldr	r2, [pc, #364]	; (800c9b4 <meas_measurementX2Y2+0x208>)
 800c848:	0a19      	lsrs	r1, r3, #8
 800c84a:	7313      	strb	r3, [r2, #12]
 800c84c:	7351      	strb	r1, [r2, #13]
 800c84e:	0c19      	lsrs	r1, r3, #16
 800c850:	0e1b      	lsrs	r3, r3, #24
 800c852:	7391      	strb	r1, [r2, #14]
 800c854:	73d3      	strb	r3, [r2, #15]
	return cycleMeasure;
 800c856:	e7bf      	b.n	800c7d8 <meas_measurementX2Y2+0x2c>
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c858:	6919      	ldr	r1, [r3, #16]
 800c85a:	4201      	tst	r1, r0
 800c85c:	d014      	beq.n	800c888 <meas_measurementX2Y2+0xdc>
 800c85e:	e01e      	b.n	800c89e <meas_measurementX2Y2+0xf2>
 800c860:	2010      	movs	r0, #16
 800c862:	2400      	movs	r4, #0
 800c864:	e7bb      	b.n	800c7de <meas_measurementX2Y2+0x32>
			&& (0 == GET_INPUT(measurementIndex))) {
 800c866:	691c      	ldr	r4, [r3, #16]
 800c868:	4214      	tst	r4, r2
 800c86a:	d1b5      	bne.n	800c7d8 <meas_measurementX2Y2+0x2c>
		if (_ON == minput.in2) //C=4
 800c86c:	788c      	ldrb	r4, [r1, #2]
 800c86e:	2c01      	cmp	r4, #1
 800c870:	d1ac      	bne.n	800c7cc <meas_measurementX2Y2+0x20>
			minput.in2 = _OFF;
 800c872:	2200      	movs	r2, #0
 800c874:	708a      	strb	r2, [r1, #2]
			msensor.s0 = _OFF;
 800c876:	4950      	ldr	r1, [pc, #320]	; (800c9b8 <meas_measurementX2Y2+0x20c>)
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c878:	2080      	movs	r0, #128	; 0x80
			msensor.s0 = _OFF;
 800c87a:	700a      	strb	r2, [r1, #0]
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c87c:	2580      	movs	r5, #128	; 0x80
			msensor.s1 = _OFF;
 800c87e:	704a      	strb	r2, [r1, #1]
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800c880:	2280      	movs	r2, #128	; 0x80
 800c882:	00c0      	lsls	r0, r0, #3
 800c884:	0092      	lsls	r2, r2, #2
 800c886:	012d      	lsls	r5, r5, #4
 800c888:	6919      	ldr	r1, [r3, #16]
 800c88a:	000c      	movs	r4, r1
 800c88c:	4014      	ands	r4, r2
 800c88e:	4211      	tst	r1, r2
 800c890:	d1e6      	bne.n	800c860 <meas_measurementX2Y2+0xb4>
 800c892:	9903      	ldr	r1, [sp, #12]
 800c894:	2901      	cmp	r1, #1
 800c896:	d1df      	bne.n	800c858 <meas_measurementX2Y2+0xac>
 800c898:	6919      	ldr	r1, [r3, #16]
 800c89a:	4229      	tst	r1, r5
 800c89c:	d0f4      	beq.n	800c888 <meas_measurementX2Y2+0xdc>
 800c89e:	2010      	movs	r0, #16
 800c8a0:	e79d      	b.n	800c7de <meas_measurementX2Y2+0x32>
		if (SEN_START == cycleMeasureX && (_ON == msensor.s0)) {
 800c8a2:	2c00      	cmp	r4, #0
 800c8a4:	d120      	bne.n	800c8e8 <meas_measurementX2Y2+0x13c>
 800c8a6:	4e44      	ldr	r6, [pc, #272]	; (800c9b8 <meas_measurementX2Y2+0x20c>)
 800c8a8:	7837      	ldrb	r7, [r6, #0]
 800c8aa:	2f01      	cmp	r7, #1
 800c8ac:	d176      	bne.n	800c99c <meas_measurementX2Y2+0x1f0>
			while (0 == GET_SENSOR0 && (0 == GET_INPUT(measurementIndex)))
 800c8ae:	2780      	movs	r7, #128	; 0x80
			mmeasureValue.X2 = captureTime_X; //Stop counter X
 800c8b0:	4a3c      	ldr	r2, [pc, #240]	; (800c9a4 <meas_measurementX2Y2+0x1f8>)
			while (0 == GET_SENSOR0 && (0 == GET_INPUT(measurementIndex)))
 800c8b2:	00bf      	lsls	r7, r7, #2
			mmeasureValue.X2 = captureTime_X; //Stop counter X
 800c8b4:	6812      	ldr	r2, [r2, #0]
			msensor.s0 = _OFF;
 800c8b6:	7034      	strb	r4, [r6, #0]
			while (0 == GET_SENSOR0 && (0 == GET_INPUT(measurementIndex)))
 800c8b8:	4e40      	ldr	r6, [pc, #256]	; (800c9bc <meas_measurementX2Y2+0x210>)
 800c8ba:	6934      	ldr	r4, [r6, #16]
 800c8bc:	423c      	tst	r4, r7
 800c8be:	d108      	bne.n	800c8d2 <meas_measurementX2Y2+0x126>
 800c8c0:	9c03      	ldr	r4, [sp, #12]
 800c8c2:	2c01      	cmp	r4, #1
 800c8c4:	d10b      	bne.n	800c8de <meas_measurementX2Y2+0x132>
 800c8c6:	2580      	movs	r5, #128	; 0x80
 800c8c8:	4c38      	ldr	r4, [pc, #224]	; (800c9ac <meas_measurementX2Y2+0x200>)
 800c8ca:	012d      	lsls	r5, r5, #4
 800c8cc:	6924      	ldr	r4, [r4, #16]
 800c8ce:	422c      	tst	r4, r5
 800c8d0:	d0f3      	beq.n	800c8ba <meas_measurementX2Y2+0x10e>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c8d2:	4664      	mov	r4, ip
 800c8d4:	2c00      	cmp	r4, #0
 800c8d6:	d029      	beq.n	800c92c <meas_measurementX2Y2+0x180>
 800c8d8:	2401      	movs	r4, #1
 800c8da:	9402      	str	r4, [sp, #8]
 800c8dc:	e031      	b.n	800c942 <meas_measurementX2Y2+0x196>
			while (0 == GET_SENSOR0 && (0 == GET_INPUT(measurementIndex)))
 800c8de:	2580      	movs	r5, #128	; 0x80
 800c8e0:	4c32      	ldr	r4, [pc, #200]	; (800c9ac <meas_measurementX2Y2+0x200>)
 800c8e2:	00ed      	lsls	r5, r5, #3
 800c8e4:	6924      	ldr	r4, [r4, #16]
 800c8e6:	e7f2      	b.n	800c8ce <meas_measurementX2Y2+0x122>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c8e8:	4665      	mov	r5, ip
 800c8ea:	2d00      	cmp	r5, #0
 800c8ec:	d127      	bne.n	800c93e <meas_measurementX2Y2+0x192>
 800c8ee:	2700      	movs	r7, #0
 800c8f0:	4e31      	ldr	r6, [pc, #196]	; (800c9b8 <meas_measurementX2Y2+0x20c>)
 800c8f2:	46bc      	mov	ip, r7
 800c8f4:	7875      	ldrb	r5, [r6, #1]
 800c8f6:	2d01      	cmp	r5, #1
 800c8f8:	d128      	bne.n	800c94c <meas_measurementX2Y2+0x1a0>
			mmeasureValue.Y2 = captureTime_Y; //Stop counter Y
 800c8fa:	4b2b      	ldr	r3, [pc, #172]	; (800c9a8 <meas_measurementX2Y2+0x1fc>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
			msensor.s1 = _OFF;
 800c8fe:	7077      	strb	r7, [r6, #1]
			while (0 == GET_SENSOR1 && (0 == GET_INPUT(measurementIndex)))
 800c900:	4f2e      	ldr	r7, [pc, #184]	; (800c9bc <meas_measurementX2Y2+0x210>)
 800c902:	2580      	movs	r5, #128	; 0x80
 800c904:	693e      	ldr	r6, [r7, #16]
 800c906:	012d      	lsls	r5, r5, #4
 800c908:	422e      	tst	r6, r5
 800c90a:	d108      	bne.n	800c91e <meas_measurementX2Y2+0x172>
 800c90c:	9d03      	ldr	r5, [sp, #12]
 800c90e:	2d01      	cmp	r5, #1
 800c910:	d110      	bne.n	800c934 <meas_measurementX2Y2+0x188>
 800c912:	4d26      	ldr	r5, [pc, #152]	; (800c9ac <meas_measurementX2Y2+0x200>)
 800c914:	692e      	ldr	r6, [r5, #16]
 800c916:	2580      	movs	r5, #128	; 0x80
 800c918:	012d      	lsls	r5, r5, #4
 800c91a:	422e      	tst	r6, r5
 800c91c:	d0f1      	beq.n	800c902 <meas_measurementX2Y2+0x156>
		if ((SEN_FINISH == cycleMeasureX) && (SEN_FINISH == cycleMeasureY)) {
 800c91e:	2c02      	cmp	r4, #2
 800c920:	d132      	bne.n	800c988 <meas_measurementX2Y2+0x1dc>
 800c922:	2001      	movs	r0, #1
 800c924:	46a4      	mov	ip, r4
 800c926:	9001      	str	r0, [sp, #4]
			cycleMeasure = CALCULATORVALUE;
 800c928:	3011      	adds	r0, #17
 800c92a:	e00f      	b.n	800c94c <meas_measurementX2Y2+0x1a0>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c92c:	2401      	movs	r4, #1
 800c92e:	9402      	str	r4, [sp, #8]
 800c930:	1924      	adds	r4, r4, r4
 800c932:	e7dc      	b.n	800c8ee <meas_measurementX2Y2+0x142>
			while (0 == GET_SENSOR1 && (0 == GET_INPUT(measurementIndex)))
 800c934:	4d1d      	ldr	r5, [pc, #116]	; (800c9ac <meas_measurementX2Y2+0x200>)
 800c936:	692e      	ldr	r6, [r5, #16]
 800c938:	2580      	movs	r5, #128	; 0x80
 800c93a:	00ed      	lsls	r5, r5, #3
 800c93c:	e7ed      	b.n	800c91a <meas_measurementX2Y2+0x16e>
		if ((SEN_FINISH == cycleMeasureX) && (SEN_FINISH == cycleMeasureY)) {
 800c93e:	2c02      	cmp	r4, #2
 800c940:	d104      	bne.n	800c94c <meas_measurementX2Y2+0x1a0>
 800c942:	2402      	movs	r4, #2
 800c944:	4665      	mov	r5, ip
 800c946:	42a5      	cmp	r5, r4
 800c948:	d100      	bne.n	800c94c <meas_measurementX2Y2+0x1a0>
			cycleMeasure = CALCULATORVALUE;
 800c94a:	2012      	movs	r0, #18
		if (0 == GET_IN2 && cycleMeasure != CALCULATORVALUE) {
 800c94c:	4d17      	ldr	r5, [pc, #92]	; (800c9ac <meas_measurementX2Y2+0x200>)
 800c94e:	692d      	ldr	r5, [r5, #16]
 800c950:	05ad      	lsls	r5, r5, #22
 800c952:	d500      	bpl.n	800c956 <meas_measurementX2Y2+0x1aa>
 800c954:	e75c      	b.n	800c810 <meas_measurementX2Y2+0x64>
 800c956:	2812      	cmp	r0, #18
 800c958:	d000      	beq.n	800c95c <meas_measurementX2Y2+0x1b0>
			cycleMeasure = _ERROR_XY;
 800c95a:	2014      	movs	r0, #20
 800c95c:	9c02      	ldr	r4, [sp, #8]
 800c95e:	2c00      	cmp	r4, #0
 800c960:	d006      	beq.n	800c970 <meas_measurementX2Y2+0x1c4>
 800c962:	0a14      	lsrs	r4, r2, #8
 800c964:	720a      	strb	r2, [r1, #8]
 800c966:	724c      	strb	r4, [r1, #9]
 800c968:	0c14      	lsrs	r4, r2, #16
 800c96a:	0e12      	lsrs	r2, r2, #24
 800c96c:	728c      	strb	r4, [r1, #10]
 800c96e:	72ca      	strb	r2, [r1, #11]
 800c970:	9a01      	ldr	r2, [sp, #4]
 800c972:	2a00      	cmp	r2, #0
 800c974:	d100      	bne.n	800c978 <meas_measurementX2Y2+0x1cc>
 800c976:	e72f      	b.n	800c7d8 <meas_measurementX2Y2+0x2c>
 800c978:	0a1a      	lsrs	r2, r3, #8
 800c97a:	730b      	strb	r3, [r1, #12]
 800c97c:	734a      	strb	r2, [r1, #13]
 800c97e:	0c1a      	lsrs	r2, r3, #16
 800c980:	0e1b      	lsrs	r3, r3, #24
 800c982:	738a      	strb	r2, [r1, #14]
 800c984:	73cb      	strb	r3, [r1, #15]
 800c986:	e727      	b.n	800c7d8 <meas_measurementX2Y2+0x2c>
		if ((SEN_FINISH == cycleMeasureX) && (SEN_FINISH == cycleMeasureY)) {
 800c988:	2501      	movs	r5, #1
 800c98a:	9501      	str	r5, [sp, #4]
 800c98c:	196d      	adds	r5, r5, r5
 800c98e:	46ac      	mov	ip, r5
 800c990:	e7dc      	b.n	800c94c <meas_measurementX2Y2+0x1a0>
	while (cycleMeasure == MEASUREX2Y2 && (0 == GET_INPUT(measurementIndex))) {
 800c992:	4d06      	ldr	r5, [pc, #24]	; (800c9ac <meas_measurementX2Y2+0x200>)
 800c994:	692e      	ldr	r6, [r5, #16]
 800c996:	2580      	movs	r5, #128	; 0x80
 800c998:	00ed      	lsls	r5, r5, #3
 800c99a:	e744      	b.n	800c826 <meas_measurementX2Y2+0x7a>
		if ((SEN_START == cycleMeasureY) && (_ON == msensor.s1)) {
 800c99c:	4665      	mov	r5, ip
 800c99e:	2d00      	cmp	r5, #0
 800c9a0:	d0a5      	beq.n	800c8ee <meas_measurementX2Y2+0x142>
 800c9a2:	e7d3      	b.n	800c94c <meas_measurementX2Y2+0x1a0>
 800c9a4:	2000034c 	.word	0x2000034c
 800c9a8:	20000350 	.word	0x20000350
 800c9ac:	48000c00 	.word	0x48000c00
 800c9b0:	200005cd 	.word	0x200005cd
 800c9b4:	200005d3 	.word	0x200005d3
 800c9b8:	200005ef 	.word	0x200005ef
 800c9bc:	48001000 	.word	0x48001000

0800c9c0 <app_Measurement>:
static void app_Measurement(uint8_t measurementIndex) {
 800c9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile CycleMeasure cycleMeasure = STOP;
 800c9c2:	271b      	movs	r7, #27
static void app_Measurement(uint8_t measurementIndex) {
 800c9c4:	b095      	sub	sp, #84	; 0x54
	volatile CycleMeasure cycleMeasure = STOP;
 800c9c6:	ab04      	add	r3, sp, #16
 800c9c8:	18ff      	adds	r7, r7, r3
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	703b      	strb	r3, [r7, #0]
	mdata.coordinates.X = 0;
 800c9ce:	2300      	movs	r3, #0
	mmeasureValue.X1 = 0;
 800c9d0:	4ec1      	ldr	r6, [pc, #772]	; (800ccd8 <app_Measurement+0x318>)
	mdata.coordinates.X = 0;
 800c9d2:	4ac2      	ldr	r2, [pc, #776]	; (800ccdc <app_Measurement+0x31c>)
static void app_Measurement(uint8_t measurementIndex) {
 800c9d4:	9004      	str	r0, [sp, #16]
	mdata.coordinates.X = 0;
 800c9d6:	7013      	strb	r3, [r2, #0]
 800c9d8:	7053      	strb	r3, [r2, #1]
	mdata.coordinates.Y = 0;
 800c9da:	7093      	strb	r3, [r2, #2]
 800c9dc:	70d3      	strb	r3, [r2, #3]
	mdata.coordinates.Z = 0;
 800c9de:	7113      	strb	r3, [r2, #4]
 800c9e0:	7153      	strb	r3, [r2, #5]
	mdata.coordinates.aX = 0;
 800c9e2:	7213      	strb	r3, [r2, #8]
 800c9e4:	7253      	strb	r3, [r2, #9]
	mdata.coordinates.aY = 0;
 800c9e6:	7293      	strb	r3, [r2, #10]
 800c9e8:	72d3      	strb	r3, [r2, #11]
	mdata.mode = NONE;
 800c9ea:	7493      	strb	r3, [r2, #18]
	mmeasureValue.X1 = 0;
 800c9ec:	7033      	strb	r3, [r6, #0]
 800c9ee:	7073      	strb	r3, [r6, #1]
 800c9f0:	70b3      	strb	r3, [r6, #2]
 800c9f2:	70f3      	strb	r3, [r6, #3]
	mmeasureValue.Y1 = 0;
 800c9f4:	7133      	strb	r3, [r6, #4]
 800c9f6:	7173      	strb	r3, [r6, #5]
 800c9f8:	71b3      	strb	r3, [r6, #6]
 800c9fa:	71f3      	strb	r3, [r6, #7]
	mmeasureValue.X2 = 0;
 800c9fc:	7233      	strb	r3, [r6, #8]
 800c9fe:	7273      	strb	r3, [r6, #9]
 800ca00:	72b3      	strb	r3, [r6, #10]
 800ca02:	72f3      	strb	r3, [r6, #11]
	mmeasureValue.Y2 = 0;
 800ca04:	7333      	strb	r3, [r6, #12]
 800ca06:	7373      	strb	r3, [r6, #13]
 800ca08:	73b3      	strb	r3, [r6, #14]
 800ca0a:	73f3      	strb	r3, [r6, #15]
	mmeasureValue.Z = 0;
 800ca0c:	7433      	strb	r3, [r6, #16]
	captureTime_X = 0;
 800ca0e:	4ab4      	ldr	r2, [pc, #720]	; (800cce0 <app_Measurement+0x320>)
 800ca10:	4cb4      	ldr	r4, [pc, #720]	; (800cce4 <app_Measurement+0x324>)
 800ca12:	6013      	str	r3, [r2, #0]
	captureTime_Y = 0;
 800ca14:	4ab4      	ldr	r2, [pc, #720]	; (800cce8 <app_Measurement+0x328>)
	mmeasureValue.Z = 0;
 800ca16:	7473      	strb	r3, [r6, #17]
	captureTime_Y = 0;
 800ca18:	6013      	str	r3, [r2, #0]
	msensor.s0 = _OFF;
 800ca1a:	4ab4      	ldr	r2, [pc, #720]	; (800ccec <app_Measurement+0x32c>)
	mmeasureValue.Z = 0;
 800ca1c:	74b3      	strb	r3, [r6, #18]
	msensor.s0 = _OFF;
 800ca1e:	7013      	strb	r3, [r2, #0]
	msensor.s1 = _OFF;
 800ca20:	7053      	strb	r3, [r2, #1]
	minput.in2 = _OFF;
 800ca22:	4ab3      	ldr	r2, [pc, #716]	; (800ccf0 <app_Measurement+0x330>)
	mmeasureValue.Z = 0;
 800ca24:	74f3      	strb	r3, [r6, #19]
	minput.in2 = _OFF;
 800ca26:	7093      	strb	r3, [r2, #2]
	if (measurementIndex == MEASUREMENT_1) {
 800ca28:	2801      	cmp	r0, #1
 800ca2a:	d000      	beq.n	800ca2e <app_Measurement+0x6e>
 800ca2c:	e1e8      	b.n	800ce00 <app_Measurement+0x440>
		meas1WrongPos = 0;   //reset
 800ca2e:	4ab1      	ldr	r2, [pc, #708]	; (800ccf4 <app_Measurement+0x334>)
		io_setOutput(moutput, ucRegCoilsBuf);
 800ca30:	7860      	ldrb	r0, [r4, #1]
		meas1WrongPos = 0;   //reset
 800ca32:	7013      	strb	r3, [r2, #0]
		moutput.out2 = _OFF; //reset
 800ca34:	70a3      	strb	r3, [r4, #2]
		moutput.out3 = _OFF; //reset
 800ca36:	70e3      	strb	r3, [r4, #3]
		io_setOutput(moutput, ucRegCoilsBuf);
 800ca38:	7823      	ldrb	r3, [r4, #0]
 800ca3a:	0200      	lsls	r0, r0, #8
 800ca3c:	4318      	orrs	r0, r3
 800ca3e:	7963      	ldrb	r3, [r4, #5]
 800ca40:	7921      	ldrb	r1, [r4, #4]
 800ca42:	79a2      	ldrb	r2, [r4, #6]
 800ca44:	021b      	lsls	r3, r3, #8
 800ca46:	430b      	orrs	r3, r1
 800ca48:	79e1      	ldrb	r1, [r4, #7]
 800ca4a:	4dab      	ldr	r5, [pc, #684]	; (800ccf8 <app_Measurement+0x338>)
 800ca4c:	0412      	lsls	r2, r2, #16
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	0609      	lsls	r1, r1, #24
 800ca52:	4319      	orrs	r1, r3
 800ca54:	002a      	movs	r2, r5
 800ca56:	f00a ff19 	bl	801788c <io_setOutput>
		calibStatus = calibStatus_1;
 800ca5a:	4ba8      	ldr	r3, [pc, #672]	; (800ccfc <app_Measurement+0x33c>)
		strcpy(fileName, MEASUREMENT_1_FILE_NAME);
 800ca5c:	49a8      	ldr	r1, [pc, #672]	; (800cd00 <app_Measurement+0x340>)
		calibStatus = calibStatus_1;
 800ca5e:	781b      	ldrb	r3, [r3, #0]
		strcpy(fileName, MEASUREMENT_1_FILE_NAME);
 800ca60:	a80f      	add	r0, sp, #60	; 0x3c
		calibStatus = calibStatus_1;
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	9305      	str	r3, [sp, #20]
		strcpy(fileName, MEASUREMENT_1_FILE_NAME);
 800ca66:	f00c fa3b 	bl	8018ee0 <strcpy>
		if (calibStatus == CALIBSET) {
 800ca6a:	9b05      	ldr	r3, [sp, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10c      	bne.n	800ca8a <app_Measurement+0xca>
			mledStatus.led1 = _ON;
 800ca70:	4aa4      	ldr	r2, [pc, #656]	; (800cd04 <app_Measurement+0x344>)
 800ca72:	9b04      	ldr	r3, [sp, #16]
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ca74:	9904      	ldr	r1, [sp, #16]
			mledStatus.led1 = _ON;
 800ca76:	7013      	strb	r3, [r2, #0]
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ca78:	7853      	ldrb	r3, [r2, #1]
 800ca7a:	021b      	lsls	r3, r3, #8
 800ca7c:	430b      	orrs	r3, r1
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ca7e:	7890      	ldrb	r0, [r2, #2]
 800ca80:	0029      	movs	r1, r5
 800ca82:	0400      	lsls	r0, r0, #16
 800ca84:	4318      	orrs	r0, r3
 800ca86:	f00a ff5f 	bl	8017948 <io_setLedStatus>
	HAL_TIM_Base_Stop_IT(&htim3); //stop blink led for measurement
 800ca8a:	489f      	ldr	r0, [pc, #636]	; (800cd08 <app_Measurement+0x348>)
 800ca8c:	f004 fcda 	bl	8011444 <HAL_TIM_Base_Stop_IT>
	screen_waitMeasurement(measurementIndex);
 800ca90:	9804      	ldr	r0, [sp, #16]
 800ca92:	f00b fcdd 	bl	8018450 <screen_waitMeasurement>
	cycleMeasure = meas_checkSensor(cycleMeasure, measurementIndex);
 800ca96:	7838      	ldrb	r0, [r7, #0]
 800ca98:	9904      	ldr	r1, [sp, #16]
 800ca9a:	b2c0      	uxtb	r0, r0
 800ca9c:	f7ff fbf0 	bl	800c280 <meas_checkSensor>
 800caa0:	7038      	strb	r0, [r7, #0]
	if (cycleMeasure == _ERROR) {
 800caa2:	783b      	ldrb	r3, [r7, #0]
	cycleMeasure = meas_measurementZ(cycleMeasure, measurementIndex,
 800caa4:	7838      	ldrb	r0, [r7, #0]
 800caa6:	9a05      	ldr	r2, [sp, #20]
 800caa8:	9904      	ldr	r1, [sp, #16]
 800caaa:	b2c0      	uxtb	r0, r0
 800caac:	f7ff fc5c 	bl	800c368 <meas_measurementZ>
 800cab0:	7038      	strb	r0, [r7, #0]
	cycleMeasure = meas_measurementX1Y1(cycleMeasure, measurementIndex);
 800cab2:	7838      	ldrb	r0, [r7, #0]
 800cab4:	9904      	ldr	r1, [sp, #16]
 800cab6:	b2c0      	uxtb	r0, r0
 800cab8:	f7ff fd8e 	bl	800c5d8 <meas_measurementX1Y1>
 800cabc:	7038      	strb	r0, [r7, #0]
	cycleMeasure = meas_measurementX2Y2(cycleMeasure, measurementIndex);
 800cabe:	7838      	ldrb	r0, [r7, #0]
 800cac0:	9904      	ldr	r1, [sp, #16]
 800cac2:	b2c0      	uxtb	r0, r0
 800cac4:	f7ff fe72 	bl	800c7ac <meas_measurementX2Y2>
 800cac8:	7038      	strb	r0, [r7, #0]
	if (cycleMeasure == _ERROR_XY) {
 800caca:	783b      	ldrb	r3, [r7, #0]
 800cacc:	2b14      	cmp	r3, #20
 800cace:	d11f      	bne.n	800cb10 <app_Measurement+0x150>
		if (measurementIndex == MEASUREMENT_1) {
 800cad0:	9b04      	ldr	r3, [sp, #16]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d000      	beq.n	800cad8 <app_Measurement+0x118>
 800cad6:	e1bd      	b.n	800ce54 <app_Measurement+0x494>
			screen_errorXY(MEASUREMENT_1);
 800cad8:	0018      	movs	r0, r3
			moutput.out2 = _ON;
 800cada:	70a3      	strb	r3, [r4, #2]
			moutput.out3 = _ON;
 800cadc:	70e3      	strb	r3, [r4, #3]
			screen_errorXY(MEASUREMENT_1);
 800cade:	f00b fd05 	bl	80184ec <screen_errorXY>
		io_setOutput(moutput, ucRegCoilsBuf);
 800cae2:	7863      	ldrb	r3, [r4, #1]
 800cae4:	7822      	ldrb	r2, [r4, #0]
 800cae6:	021b      	lsls	r3, r3, #8
 800cae8:	78a0      	ldrb	r0, [r4, #2]
 800caea:	431a      	orrs	r2, r3
 800caec:	78e3      	ldrb	r3, [r4, #3]
 800caee:	0400      	lsls	r0, r0, #16
 800caf0:	4310      	orrs	r0, r2
 800caf2:	061b      	lsls	r3, r3, #24
 800caf4:	4318      	orrs	r0, r3
 800caf6:	7963      	ldrb	r3, [r4, #5]
 800caf8:	7921      	ldrb	r1, [r4, #4]
 800cafa:	79a2      	ldrb	r2, [r4, #6]
 800cafc:	021b      	lsls	r3, r3, #8
 800cafe:	430b      	orrs	r3, r1
 800cb00:	79e1      	ldrb	r1, [r4, #7]
 800cb02:	0412      	lsls	r2, r2, #16
 800cb04:	4313      	orrs	r3, r2
 800cb06:	0609      	lsls	r1, r1, #24
 800cb08:	4a7b      	ldr	r2, [pc, #492]	; (800ccf8 <app_Measurement+0x338>)
 800cb0a:	4319      	orrs	r1, r3
 800cb0c:	f00a febe 	bl	801788c <io_setOutput>
	while (cycleMeasure == _ERROR_XY) {
 800cb10:	783b      	ldrb	r3, [r7, #0]
 800cb12:	2b14      	cmp	r3, #20
 800cb14:	d100      	bne.n	800cb18 <app_Measurement+0x158>
 800cb16:	e1a1      	b.n	800ce5c <app_Measurement+0x49c>
	while (CALCULATORVALUE == cycleMeasure && (0 == GET_INPUT(measurementIndex))) {
 800cb18:	251b      	movs	r5, #27
 800cb1a:	ab04      	add	r3, sp, #16
 800cb1c:	18ed      	adds	r5, r5, r3
 800cb1e:	782b      	ldrb	r3, [r5, #0]
 800cb20:	2b12      	cmp	r3, #18
 800cb22:	d10a      	bne.n	800cb3a <app_Measurement+0x17a>
 800cb24:	9b04      	ldr	r3, [sp, #16]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d000      	beq.n	800cb2c <app_Measurement+0x16c>
 800cb2a:	e2db      	b.n	800d0e4 <app_Measurement+0x724>
 800cb2c:	2280      	movs	r2, #128	; 0x80
 800cb2e:	4b77      	ldr	r3, [pc, #476]	; (800cd0c <app_Measurement+0x34c>)
 800cb30:	0112      	lsls	r2, r2, #4
 800cb32:	691b      	ldr	r3, [r3, #16]
 800cb34:	4213      	tst	r3, r2
 800cb36:	d100      	bne.n	800cb3a <app_Measurement+0x17a>
 800cb38:	e207      	b.n	800cf4a <app_Measurement+0x58a>
	while (cycleMeasure == FINISH && (0 == GET_INPUT(measurementIndex))) {
 800cb3a:	2380      	movs	r3, #128	; 0x80
 800cb3c:	2180      	movs	r1, #128	; 0x80
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	0109      	lsls	r1, r1, #4
 800cb42:	782a      	ldrb	r2, [r5, #0]
 800cb44:	2a15      	cmp	r2, #21
 800cb46:	d000      	beq.n	800cb4a <app_Measurement+0x18a>
 800cb48:	e2da      	b.n	800d100 <app_Measurement+0x740>
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	2a01      	cmp	r2, #1
 800cb4e:	d000      	beq.n	800cb52 <app_Measurement+0x192>
 800cb50:	e2cd      	b.n	800d0ee <app_Measurement+0x72e>
 800cb52:	4a6e      	ldr	r2, [pc, #440]	; (800cd0c <app_Measurement+0x34c>)
 800cb54:	6912      	ldr	r2, [r2, #16]
 800cb56:	420a      	tst	r2, r1
 800cb58:	d0f3      	beq.n	800cb42 <app_Measurement+0x182>
	if (1 == GET_INPUT(measurementIndex) /*end of cycle measurement */) {
 800cb5a:	4b6c      	ldr	r3, [pc, #432]	; (800cd0c <app_Measurement+0x34c>)
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	051b      	lsls	r3, r3, #20
 800cb60:	0fdb      	lsrs	r3, r3, #31
 800cb62:	d100      	bne.n	800cb66 <app_Measurement+0x1a6>
 800cb64:	e14a      	b.n	800cdfc <app_Measurement+0x43c>
		moutput.out0 = _OFF;
 800cb66:	2200      	movs	r2, #0
 800cb68:	4b5e      	ldr	r3, [pc, #376]	; (800cce4 <app_Measurement+0x324>)
		io_setOutput(moutput, ucRegCoilsBuf);
 800cb6a:	7898      	ldrb	r0, [r3, #2]
		moutput.out0 = _OFF;
 800cb6c:	701a      	strb	r2, [r3, #0]
		moutput.out1 = _OFF;
 800cb6e:	705a      	strb	r2, [r3, #1]
		moutput.out4 = _OFF;
 800cb70:	711a      	strb	r2, [r3, #4]
		moutput.out7 = _OFF;
 800cb72:	71da      	strb	r2, [r3, #7]
		io_setOutput(moutput, ucRegCoilsBuf);
 800cb74:	78da      	ldrb	r2, [r3, #3]
 800cb76:	0400      	lsls	r0, r0, #16
 800cb78:	0612      	lsls	r2, r2, #24
 800cb7a:	7999      	ldrb	r1, [r3, #6]
 800cb7c:	4310      	orrs	r0, r2
 800cb7e:	795a      	ldrb	r2, [r3, #5]
 800cb80:	0409      	lsls	r1, r1, #16
 800cb82:	0212      	lsls	r2, r2, #8
 800cb84:	4311      	orrs	r1, r2
 800cb86:	4a5c      	ldr	r2, [pc, #368]	; (800ccf8 <app_Measurement+0x338>)
 800cb88:	f00a fe80 	bl	801788c <io_setOutput>
		if (cycleMeasure == WAITMEASUREX1Y1 && CALIBSET == calibStatus) // write to SD card if only measure Z
 800cb8c:	782b      	ldrb	r3, [r5, #0]
 800cb8e:	2b0b      	cmp	r3, #11
 800cb90:	d13b      	bne.n	800cc0a <app_Measurement+0x24a>
 800cb92:	9b05      	ldr	r3, [sp, #20]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d138      	bne.n	800cc0a <app_Measurement+0x24a>
			write_SDCard(mdata, fileName, measurementIndex);
 800cb98:	9b04      	ldr	r3, [sp, #16]
 800cb9a:	4950      	ldr	r1, [pc, #320]	; (800ccdc <app_Measurement+0x31c>)
 800cb9c:	9302      	str	r3, [sp, #8]
 800cb9e:	ab0f      	add	r3, sp, #60	; 0x3c
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	784b      	ldrb	r3, [r1, #1]
 800cba4:	780a      	ldrb	r2, [r1, #0]
 800cba6:	788f      	ldrb	r7, [r1, #2]
 800cba8:	021b      	lsls	r3, r3, #8
 800cbaa:	431a      	orrs	r2, r3
 800cbac:	78cb      	ldrb	r3, [r1, #3]
 800cbae:	043f      	lsls	r7, r7, #16
 800cbb0:	4317      	orrs	r7, r2
 800cbb2:	061b      	lsls	r3, r3, #24
 800cbb4:	431f      	orrs	r7, r3
 800cbb6:	794b      	ldrb	r3, [r1, #5]
 800cbb8:	790a      	ldrb	r2, [r1, #4]
 800cbba:	021b      	lsls	r3, r3, #8
 800cbbc:	431a      	orrs	r2, r3
 800cbbe:	798b      	ldrb	r3, [r1, #6]
 800cbc0:	7a8d      	ldrb	r5, [r1, #10]
 800cbc2:	041b      	lsls	r3, r3, #16
 800cbc4:	431a      	orrs	r2, r3
 800cbc6:	79cb      	ldrb	r3, [r1, #7]
 800cbc8:	042d      	lsls	r5, r5, #16
 800cbca:	061b      	lsls	r3, r3, #24
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	9306      	str	r3, [sp, #24]
 800cbd0:	7a4b      	ldrb	r3, [r1, #9]
 800cbd2:	7a0a      	ldrb	r2, [r1, #8]
 800cbd4:	021b      	lsls	r3, r3, #8
 800cbd6:	431a      	orrs	r2, r3
 800cbd8:	7acb      	ldrb	r3, [r1, #11]
 800cbda:	4315      	orrs	r5, r2
 800cbdc:	061b      	lsls	r3, r3, #24
 800cbde:	431d      	orrs	r5, r3
 800cbe0:	7b4b      	ldrb	r3, [r1, #13]
 800cbe2:	7b0a      	ldrb	r2, [r1, #12]
 800cbe4:	7b8c      	ldrb	r4, [r1, #14]
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	431a      	orrs	r2, r3
 800cbea:	7bcb      	ldrb	r3, [r1, #15]
 800cbec:	0424      	lsls	r4, r4, #16
 800cbee:	061b      	lsls	r3, r3, #24
 800cbf0:	4314      	orrs	r4, r2
 800cbf2:	431c      	orrs	r4, r3
 800cbf4:	2203      	movs	r2, #3
 800cbf6:	3110      	adds	r1, #16
 800cbf8:	4668      	mov	r0, sp
 800cbfa:	f00b fd1d 	bl	8018638 <memcpy>
 800cbfe:	0038      	movs	r0, r7
 800cc00:	002a      	movs	r2, r5
 800cc02:	0023      	movs	r3, r4
 800cc04:	9906      	ldr	r1, [sp, #24]
 800cc06:	f7fe fe35 	bl	800b874 <write_SDCard>
		if (cycleMeasure == FINISH && CALIBRESET == calibStatus) {
 800cc0a:	231b      	movs	r3, #27
 800cc0c:	aa04      	add	r2, sp, #16
 800cc0e:	189b      	adds	r3, r3, r2
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	2b15      	cmp	r3, #21
 800cc14:	d000      	beq.n	800cc18 <app_Measurement+0x258>
 800cc16:	e27a      	b.n	800d10e <app_Measurement+0x74e>
 800cc18:	9b05      	ldr	r3, [sp, #20]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d000      	beq.n	800cc20 <app_Measurement+0x260>
 800cc1e:	e276      	b.n	800d10e <app_Measurement+0x74e>
 800cc20:	2496      	movs	r4, #150	; 0x96
 800cc22:	00a4      	lsls	r4, r4, #2
			for (uint16_t i = 0; (i < 600) && (mbutton.set != _ON); i++) {
 800cc24:	4d3a      	ldr	r5, [pc, #232]	; (800cd10 <app_Measurement+0x350>)
 800cc26:	782b      	ldrb	r3, [r5, #0]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d00e      	beq.n	800cc4a <app_Measurement+0x28a>
				HAL_Delay(10);
 800cc2c:	200a      	movs	r0, #10
 800cc2e:	f001 ff9b 	bl	800eb68 <HAL_Delay>
			for (uint16_t i = 0; (i < 600) && (mbutton.set != _ON); i++) {
 800cc32:	3c01      	subs	r4, #1
				mbutton = io_getButton();
 800cc34:	a808      	add	r0, sp, #32
 800cc36:	f00a fdeb 	bl	8017810 <io_getButton>
			for (uint16_t i = 0; (i < 600) && (mbutton.set != _ON); i++) {
 800cc3a:	b2a4      	uxth	r4, r4
				mbutton = io_getButton();
 800cc3c:	2205      	movs	r2, #5
 800cc3e:	0028      	movs	r0, r5
 800cc40:	a908      	add	r1, sp, #32
 800cc42:	f00b fcf9 	bl	8018638 <memcpy>
			for (uint16_t i = 0; (i < 600) && (mbutton.set != _ON); i++) {
 800cc46:	2c00      	cmp	r4, #0
 800cc48:	d1ec      	bne.n	800cc24 <app_Measurement+0x264>
			if (_ON == mbutton.set) {
 800cc4a:	782b      	ldrb	r3, [r5, #0]
 800cc4c:	b2dd      	uxtb	r5, r3
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d000      	beq.n	800cc54 <app_Measurement+0x294>
 800cc52:	e0d3      	b.n	800cdfc <app_Measurement+0x43c>
				app_GetCalibValue(measurementIndex);
 800cc54:	9804      	ldr	r0, [sp, #16]
 800cc56:	f7fe ff3b 	bl	800bad0 <app_GetCalibValue>
				if ((0 == mcalibValue.X1) && (0 == mcalibValue.X2)
 800cc5a:	482e      	ldr	r0, [pc, #184]	; (800cd14 <app_Measurement+0x354>)
 800cc5c:	7843      	ldrb	r3, [r0, #1]
 800cc5e:	7802      	ldrb	r2, [r0, #0]
 800cc60:	021b      	lsls	r3, r3, #8
 800cc62:	7884      	ldrb	r4, [r0, #2]
 800cc64:	431a      	orrs	r2, r3
 800cc66:	78c3      	ldrb	r3, [r0, #3]
 800cc68:	0424      	lsls	r4, r4, #16
 800cc6a:	4314      	orrs	r4, r2
 800cc6c:	061b      	lsls	r3, r3, #24
 800cc6e:	7a41      	ldrb	r1, [r0, #9]
 800cc70:	431c      	orrs	r4, r3
 800cc72:	7a03      	ldrb	r3, [r0, #8]
 800cc74:	7a82      	ldrb	r2, [r0, #10]
 800cc76:	0209      	lsls	r1, r1, #8
 800cc78:	4319      	orrs	r1, r3
 800cc7a:	7ac3      	ldrb	r3, [r0, #11]
 800cc7c:	0412      	lsls	r2, r2, #16
 800cc7e:	4311      	orrs	r1, r2
 800cc80:	061b      	lsls	r3, r3, #24
 800cc82:	430b      	orrs	r3, r1
						&& (0 == mcalibValue.Y1) && (0 == mcalibValue.Y2)
 800cc84:	7941      	ldrb	r1, [r0, #5]
						&& (0 == mcalibValue.Z) && (ZERROR1 != mdata.mode)) {
 800cc86:	431c      	orrs	r4, r3
						&& (0 == mcalibValue.Y1) && (0 == mcalibValue.Y2)
 800cc88:	7903      	ldrb	r3, [r0, #4]
 800cc8a:	7982      	ldrb	r2, [r0, #6]
 800cc8c:	0209      	lsls	r1, r1, #8
 800cc8e:	4319      	orrs	r1, r3
 800cc90:	79c3      	ldrb	r3, [r0, #7]
 800cc92:	0412      	lsls	r2, r2, #16
 800cc94:	4311      	orrs	r1, r2
 800cc96:	061b      	lsls	r3, r3, #24
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	7b41      	ldrb	r1, [r0, #13]
						&& (0 == mcalibValue.Z) && (ZERROR1 != mdata.mode)) {
 800cc9c:	431c      	orrs	r4, r3
						&& (0 == mcalibValue.Y1) && (0 == mcalibValue.Y2)
 800cc9e:	7b03      	ldrb	r3, [r0, #12]
 800cca0:	7b82      	ldrb	r2, [r0, #14]
 800cca2:	0209      	lsls	r1, r1, #8
 800cca4:	4319      	orrs	r1, r3
 800cca6:	7bc3      	ldrb	r3, [r0, #15]
 800cca8:	0412      	lsls	r2, r2, #16
 800ccaa:	4311      	orrs	r1, r2
 800ccac:	061b      	lsls	r3, r3, #24
 800ccae:	430b      	orrs	r3, r1
						&& (0 == mcalibValue.Z) && (ZERROR1 != mdata.mode)) {
 800ccb0:	7c41      	ldrb	r1, [r0, #17]
 800ccb2:	431c      	orrs	r4, r3
 800ccb4:	7c03      	ldrb	r3, [r0, #16]
 800ccb6:	7c82      	ldrb	r2, [r0, #18]
 800ccb8:	0209      	lsls	r1, r1, #8
 800ccba:	4319      	orrs	r1, r3
 800ccbc:	7cc3      	ldrb	r3, [r0, #19]
 800ccbe:	0412      	lsls	r2, r2, #16
 800ccc0:	4311      	orrs	r1, r2
 800ccc2:	061b      	lsls	r3, r3, #24
 800ccc4:	430b      	orrs	r3, r1
 800ccc6:	431c      	orrs	r4, r3
 800ccc8:	d000      	beq.n	800cccc <app_Measurement+0x30c>
 800ccca:	e097      	b.n	800cdfc <app_Measurement+0x43c>
 800cccc:	4b03      	ldr	r3, [pc, #12]	; (800ccdc <app_Measurement+0x31c>)
 800ccce:	7c9b      	ldrb	r3, [r3, #18]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d100      	bne.n	800ccd6 <app_Measurement+0x316>
 800ccd4:	e092      	b.n	800cdfc <app_Measurement+0x43c>
 800ccd6:	e01f      	b.n	800cd18 <app_Measurement+0x358>
 800ccd8:	200005d3 	.word	0x200005d3
 800ccdc:	200005b7 	.word	0x200005b7
 800cce0:	2000034c 	.word	0x2000034c
 800cce4:	200005e7 	.word	0x200005e7
 800cce8:	20000350 	.word	0x20000350
 800ccec:	200005ef 	.word	0x200005ef
 800ccf0:	200005cd 	.word	0x200005cd
 800ccf4:	200005ca 	.word	0x200005ca
 800ccf8:	200005fc 	.word	0x200005fc
 800ccfc:	2000034a 	.word	0x2000034a
 800cd00:	0801bd76 	.word	0x0801bd76
 800cd04:	200005d0 	.word	0x200005d0
 800cd08:	20000484 	.word	0x20000484
 800cd0c:	48000c00 	.word	0x48000c00
 800cd10:	2000059e 	.word	0x2000059e
 800cd14:	200005a3 	.word	0x200005a3
	mcalibValue.X1 = mmeasureValue.X1;
 800cd18:	7871      	ldrb	r1, [r6, #1]
 800cd1a:	7833      	ldrb	r3, [r6, #0]
 800cd1c:	78b2      	ldrb	r2, [r6, #2]
 800cd1e:	0209      	lsls	r1, r1, #8
 800cd20:	4319      	orrs	r1, r3
 800cd22:	78f3      	ldrb	r3, [r6, #3]
 800cd24:	0412      	lsls	r2, r2, #16
 800cd26:	4311      	orrs	r1, r2
 800cd28:	061b      	lsls	r3, r3, #24
 800cd2a:	430b      	orrs	r3, r1
 800cd2c:	0a1a      	lsrs	r2, r3, #8
 800cd2e:	7003      	strb	r3, [r0, #0]
 800cd30:	7042      	strb	r2, [r0, #1]
 800cd32:	0c1a      	lsrs	r2, r3, #16
 800cd34:	0e1b      	lsrs	r3, r3, #24
 800cd36:	7082      	strb	r2, [r0, #2]
 800cd38:	70c3      	strb	r3, [r0, #3]
	mcalibValue.Y1 = mmeasureValue.Y1;
 800cd3a:	7971      	ldrb	r1, [r6, #5]
 800cd3c:	7933      	ldrb	r3, [r6, #4]
 800cd3e:	79b2      	ldrb	r2, [r6, #6]
 800cd40:	0209      	lsls	r1, r1, #8
 800cd42:	4319      	orrs	r1, r3
 800cd44:	79f3      	ldrb	r3, [r6, #7]
 800cd46:	0412      	lsls	r2, r2, #16
 800cd48:	4311      	orrs	r1, r2
 800cd4a:	061b      	lsls	r3, r3, #24
 800cd4c:	430b      	orrs	r3, r1
 800cd4e:	0a1a      	lsrs	r2, r3, #8
 800cd50:	7103      	strb	r3, [r0, #4]
 800cd52:	7142      	strb	r2, [r0, #5]
 800cd54:	0c1a      	lsrs	r2, r3, #16
 800cd56:	0e1b      	lsrs	r3, r3, #24
 800cd58:	7182      	strb	r2, [r0, #6]
 800cd5a:	71c3      	strb	r3, [r0, #7]
	mcalibValue.X2 = mmeasureValue.X2;
 800cd5c:	7a71      	ldrb	r1, [r6, #9]
 800cd5e:	7a33      	ldrb	r3, [r6, #8]
 800cd60:	7ab2      	ldrb	r2, [r6, #10]
 800cd62:	0209      	lsls	r1, r1, #8
 800cd64:	4319      	orrs	r1, r3
 800cd66:	7af3      	ldrb	r3, [r6, #11]
 800cd68:	0412      	lsls	r2, r2, #16
 800cd6a:	4311      	orrs	r1, r2
 800cd6c:	061b      	lsls	r3, r3, #24
 800cd6e:	430b      	orrs	r3, r1
 800cd70:	0a1a      	lsrs	r2, r3, #8
 800cd72:	7203      	strb	r3, [r0, #8]
 800cd74:	7242      	strb	r2, [r0, #9]
 800cd76:	0c1a      	lsrs	r2, r3, #16
 800cd78:	0e1b      	lsrs	r3, r3, #24
 800cd7a:	7282      	strb	r2, [r0, #10]
 800cd7c:	72c3      	strb	r3, [r0, #11]
	mcalibValue.Y2 = mmeasureValue.Y2;
 800cd7e:	7b71      	ldrb	r1, [r6, #13]
 800cd80:	7b33      	ldrb	r3, [r6, #12]
 800cd82:	7bb2      	ldrb	r2, [r6, #14]
 800cd84:	0209      	lsls	r1, r1, #8
 800cd86:	4319      	orrs	r1, r3
 800cd88:	7bf3      	ldrb	r3, [r6, #15]
 800cd8a:	0412      	lsls	r2, r2, #16
 800cd8c:	4311      	orrs	r1, r2
 800cd8e:	061b      	lsls	r3, r3, #24
 800cd90:	430b      	orrs	r3, r1
 800cd92:	0a1a      	lsrs	r2, r3, #8
 800cd94:	7303      	strb	r3, [r0, #12]
 800cd96:	7342      	strb	r2, [r0, #13]
 800cd98:	0c1a      	lsrs	r2, r3, #16
 800cd9a:	0e1b      	lsrs	r3, r3, #24
 800cd9c:	7382      	strb	r2, [r0, #14]
 800cd9e:	73c3      	strb	r3, [r0, #15]
	mcalibValue.Z = mmeasureValue.Z;
 800cda0:	7c33      	ldrb	r3, [r6, #16]
 800cda2:	7c71      	ldrb	r1, [r6, #17]
 800cda4:	7cb2      	ldrb	r2, [r6, #18]
 800cda6:	0209      	lsls	r1, r1, #8
 800cda8:	4319      	orrs	r1, r3
 800cdaa:	7cf3      	ldrb	r3, [r6, #19]
 800cdac:	0412      	lsls	r2, r2, #16
 800cdae:	4311      	orrs	r1, r2
 800cdb0:	061b      	lsls	r3, r3, #24
 800cdb2:	430b      	orrs	r3, r1
 800cdb4:	0a1a      	lsrs	r2, r3, #8
	FLASH_WriteDataCalib(&mcalibValue, measurementIndex);
 800cdb6:	9904      	ldr	r1, [sp, #16]
	mcalibValue.Z = mmeasureValue.Z;
 800cdb8:	7403      	strb	r3, [r0, #16]
 800cdba:	7442      	strb	r2, [r0, #17]
 800cdbc:	0c1a      	lsrs	r2, r3, #16
 800cdbe:	0e1b      	lsrs	r3, r3, #24
 800cdc0:	74c3      	strb	r3, [r0, #19]
 800cdc2:	7482      	strb	r2, [r0, #18]
	FLASH_WriteDataCalib(&mcalibValue, measurementIndex);
 800cdc4:	f005 ff1e 	bl	8012c04 <FLASH_WriteDataCalib>
					if (measurementIndex == MEASUREMENT_1) {
 800cdc8:	9b04      	ldr	r3, [sp, #16]
 800cdca:	49d3      	ldr	r1, [pc, #844]	; (800d118 <app_Measurement+0x758>)
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d000      	beq.n	800cdd2 <app_Measurement+0x412>
 800cdd0:	e19a      	b.n	800d108 <app_Measurement+0x748>
						mledStatus.led1 = _ON;
 800cdd2:	700b      	strb	r3, [r1, #0]
						calibStatus_1 = CALIBSET;
 800cdd4:	4bd1      	ldr	r3, [pc, #836]	; (800d11c <app_Measurement+0x75c>)
						calibStatus_2 = CALIBSET;
 800cdd6:	701c      	strb	r4, [r3, #0]
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800cdd8:	784a      	ldrb	r2, [r1, #1]
 800cdda:	780b      	ldrb	r3, [r1, #0]
 800cddc:	7888      	ldrb	r0, [r1, #2]
 800cdde:	0212      	lsls	r2, r2, #8
 800cde0:	4313      	orrs	r3, r2
 800cde2:	0400      	lsls	r0, r0, #16
 800cde4:	4318      	orrs	r0, r3
 800cde6:	49ce      	ldr	r1, [pc, #824]	; (800d120 <app_Measurement+0x760>)
 800cde8:	f00a fdae 	bl	8017948 <io_setLedStatus>
					mainScreenFlag = measurementIndex;
 800cdec:	9a04      	ldr	r2, [sp, #16]
 800cdee:	4bcd      	ldr	r3, [pc, #820]	; (800d124 <app_Measurement+0x764>)
					app_GotoMainScreen(calibStatus, measurementIndex,
 800cdf0:	2000      	movs	r0, #0
					mainScreenFlag = measurementIndex;
 800cdf2:	701a      	strb	r2, [r3, #0]
					app_GotoMainScreen(calibStatus, measurementIndex,
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	9904      	ldr	r1, [sp, #16]
			app_GotoMainScreen(calibStatus, measurementIndex,
 800cdf8:	f7fe fb3e 	bl	800b478 <app_GotoMainScreen>
}
 800cdfc:	b015      	add	sp, #84	; 0x54
 800cdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		meas2WrongPos = 0;
 800ce00:	4ac9      	ldr	r2, [pc, #804]	; (800d128 <app_Measurement+0x768>)
		moutput.out5 = _OFF;
 800ce02:	7163      	strb	r3, [r4, #5]
		meas2WrongPos = 0;
 800ce04:	7013      	strb	r3, [r2, #0]
		moutput.out6 = _OFF;
 800ce06:	71a3      	strb	r3, [r4, #6]
		io_setOutput(moutput, ucRegCoilsBuf);
 800ce08:	7863      	ldrb	r3, [r4, #1]
 800ce0a:	7822      	ldrb	r2, [r4, #0]
 800ce0c:	78a0      	ldrb	r0, [r4, #2]
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	431a      	orrs	r2, r3
 800ce12:	78e3      	ldrb	r3, [r4, #3]
 800ce14:	0400      	lsls	r0, r0, #16
 800ce16:	79e1      	ldrb	r1, [r4, #7]
 800ce18:	4310      	orrs	r0, r2
 800ce1a:	061b      	lsls	r3, r3, #24
 800ce1c:	4318      	orrs	r0, r3
 800ce1e:	4dc0      	ldr	r5, [pc, #768]	; (800d120 <app_Measurement+0x760>)
 800ce20:	7923      	ldrb	r3, [r4, #4]
 800ce22:	0609      	lsls	r1, r1, #24
 800ce24:	4319      	orrs	r1, r3
 800ce26:	002a      	movs	r2, r5
 800ce28:	f00a fd30 	bl	801788c <io_setOutput>
		calibStatus = calibStatus_2;
 800ce2c:	4bbf      	ldr	r3, [pc, #764]	; (800d12c <app_Measurement+0x76c>)
		strcpy(fileName, MEASUREMENT_2_FILE_NAME);
 800ce2e:	49c0      	ldr	r1, [pc, #768]	; (800d130 <app_Measurement+0x770>)
		calibStatus = calibStatus_2;
 800ce30:	781b      	ldrb	r3, [r3, #0]
		strcpy(fileName, MEASUREMENT_2_FILE_NAME);
 800ce32:	a80f      	add	r0, sp, #60	; 0x3c
		calibStatus = calibStatus_2;
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	9305      	str	r3, [sp, #20]
		strcpy(fileName, MEASUREMENT_2_FILE_NAME);
 800ce38:	f00c f852 	bl	8018ee0 <strcpy>
		if (calibStatus == CALIBSET) {
 800ce3c:	9b05      	ldr	r3, [sp, #20]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d000      	beq.n	800ce44 <app_Measurement+0x484>
 800ce42:	e622      	b.n	800ca8a <app_Measurement+0xca>
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce44:	2080      	movs	r0, #128	; 0x80
			mledStatus.led2 = _ON;
 800ce46:	4ab4      	ldr	r2, [pc, #720]	; (800d118 <app_Measurement+0x758>)
 800ce48:	3301      	adds	r3, #1
 800ce4a:	7053      	strb	r3, [r2, #1]
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce4c:	7813      	ldrb	r3, [r2, #0]
 800ce4e:	0040      	lsls	r0, r0, #1
 800ce50:	4303      	orrs	r3, r0
 800ce52:	e614      	b.n	800ca7e <app_Measurement+0xbe>
			moutput.out5 = _ON;
 800ce54:	2001      	movs	r0, #1
 800ce56:	7160      	strb	r0, [r4, #5]
			moutput.out6 = _ON;
 800ce58:	71a0      	strb	r0, [r4, #6]
 800ce5a:	e640      	b.n	800cade <app_Measurement+0x11e>
		io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce5c:	2380      	movs	r3, #128	; 0x80
		mledStatus.led1 = _ON;
 800ce5e:	2201      	movs	r2, #1
 800ce60:	4dad      	ldr	r5, [pc, #692]	; (800d118 <app_Measurement+0x758>)
		io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	78a8      	ldrb	r0, [r5, #2]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	0400      	lsls	r0, r0, #16
 800ce6a:	4318      	orrs	r0, r3
 800ce6c:	49ac      	ldr	r1, [pc, #688]	; (800d120 <app_Measurement+0x760>)
		mledStatus.led1 = _ON;
 800ce6e:	702a      	strb	r2, [r5, #0]
		mledStatus.led2 = _ON;
 800ce70:	706a      	strb	r2, [r5, #1]
		io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce72:	f00a fd69 	bl	8017948 <io_setLedStatus>
		HAL_Delay(500);
 800ce76:	20fa      	movs	r0, #250	; 0xfa
		io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce78:	2400      	movs	r4, #0
		HAL_Delay(500);
 800ce7a:	0040      	lsls	r0, r0, #1
 800ce7c:	f001 fe74 	bl	800eb68 <HAL_Delay>
		io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce80:	78a8      	ldrb	r0, [r5, #2]
 800ce82:	49a7      	ldr	r1, [pc, #668]	; (800d120 <app_Measurement+0x760>)
 800ce84:	0400      	lsls	r0, r0, #16
		mledStatus.led1 = _OFF;
 800ce86:	702c      	strb	r4, [r5, #0]
		mledStatus.led2 = _OFF;
 800ce88:	706c      	strb	r4, [r5, #1]
		io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ce8a:	f00a fd5d 	bl	8017948 <io_setLedStatus>
		if (io_getButton().reset == _ON) {
 800ce8e:	a80b      	add	r0, sp, #44	; 0x2c
 800ce90:	f00a fcbe 	bl	8017810 <io_getButton>
 800ce94:	ab04      	add	r3, sp, #16
 800ce96:	7f5b      	ldrb	r3, [r3, #29]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d000      	beq.n	800ce9e <app_Measurement+0x4de>
 800ce9c:	e638      	b.n	800cb10 <app_Measurement+0x150>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800ce9e:	4ba5      	ldr	r3, [pc, #660]	; (800d134 <app_Measurement+0x774>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	625c      	str	r4, [r3, #36]	; 0x24
	overflow = 0;
 800cea4:	4ba4      	ldr	r3, [pc, #656]	; (800d138 <app_Measurement+0x778>)
 800cea6:	601c      	str	r4, [r3, #0]
			while (io_getButton().reset == _ON && _time < TIMER_RESET_ERRORXY)
 800cea8:	a80d      	add	r0, sp, #52	; 0x34
 800ceaa:	f00a fcb1 	bl	8017810 <io_getButton>
 800ceae:	2225      	movs	r2, #37	; 0x25
 800ceb0:	ab04      	add	r3, sp, #16
 800ceb2:	189b      	adds	r3, r3, r2
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d102      	bne.n	800cec0 <app_Measurement+0x500>
 800ceba:	4ba0      	ldr	r3, [pc, #640]	; (800d13c <app_Measurement+0x77c>)
 800cebc:	429c      	cmp	r4, r3
 800cebe:	dd37      	ble.n	800cf30 <app_Measurement+0x570>
		if (_time > TIMER_RESET_ERRORXY) {
 800cec0:	4b9f      	ldr	r3, [pc, #636]	; (800d140 <app_Measurement+0x780>)
 800cec2:	429c      	cmp	r4, r3
 800cec4:	dc00      	bgt.n	800cec8 <app_Measurement+0x508>
 800cec6:	e623      	b.n	800cb10 <app_Measurement+0x150>
			if (calibStatus_1 == CALIBSET)
 800cec8:	4b94      	ldr	r3, [pc, #592]	; (800d11c <app_Measurement+0x75c>)
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800ceca:	4995      	ldr	r1, [pc, #596]	; (800d120 <app_Measurement+0x760>)
			if (calibStatus_1 == CALIBSET)
 800cecc:	781b      	ldrb	r3, [r3, #0]
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800cece:	2400      	movs	r4, #0
			if (calibStatus_1 == CALIBSET)
 800ced0:	425a      	negs	r2, r3
 800ced2:	4153      	adcs	r3, r2
 800ced4:	702b      	strb	r3, [r5, #0]
			if (calibStatus_2 == CALIBSET)
 800ced6:	4b95      	ldr	r3, [pc, #596]	; (800d12c <app_Measurement+0x76c>)
 800ced8:	7818      	ldrb	r0, [r3, #0]
 800ceda:	4243      	negs	r3, r0
 800cedc:	4158      	adcs	r0, r3
			io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800cede:	782b      	ldrb	r3, [r5, #0]
 800cee0:	7068      	strb	r0, [r5, #1]
 800cee2:	0200      	lsls	r0, r0, #8
 800cee4:	4318      	orrs	r0, r3
 800cee6:	78ab      	ldrb	r3, [r5, #2]
 800cee8:	041b      	lsls	r3, r3, #16
 800ceea:	4318      	orrs	r0, r3
 800ceec:	f00a fd2c 	bl	8017948 <io_setLedStatus>
			if (measurementIndex == MEASUREMENT_1) {
 800cef0:	9a04      	ldr	r2, [sp, #16]
 800cef2:	4b94      	ldr	r3, [pc, #592]	; (800d144 <app_Measurement+0x784>)
 800cef4:	2a01      	cmp	r2, #1
 800cef6:	d125      	bne.n	800cf44 <app_Measurement+0x584>
				moutput.out2 = _OFF;
 800cef8:	709c      	strb	r4, [r3, #2]
				moutput.out3 = _OFF;
 800cefa:	70dc      	strb	r4, [r3, #3]
			io_setOutput(moutput, ucRegCoilsBuf);
 800cefc:	785a      	ldrb	r2, [r3, #1]
 800cefe:	7819      	ldrb	r1, [r3, #0]
 800cf00:	7898      	ldrb	r0, [r3, #2]
 800cf02:	0212      	lsls	r2, r2, #8
 800cf04:	4311      	orrs	r1, r2
 800cf06:	78da      	ldrb	r2, [r3, #3]
 800cf08:	0400      	lsls	r0, r0, #16
 800cf0a:	4308      	orrs	r0, r1
 800cf0c:	0612      	lsls	r2, r2, #24
 800cf0e:	4310      	orrs	r0, r2
 800cf10:	795a      	ldrb	r2, [r3, #5]
 800cf12:	7919      	ldrb	r1, [r3, #4]
 800cf14:	799c      	ldrb	r4, [r3, #6]
 800cf16:	0212      	lsls	r2, r2, #8
 800cf18:	430a      	orrs	r2, r1
 800cf1a:	79d9      	ldrb	r1, [r3, #7]
 800cf1c:	0424      	lsls	r4, r4, #16
 800cf1e:	4322      	orrs	r2, r4
 800cf20:	0609      	lsls	r1, r1, #24
 800cf22:	4311      	orrs	r1, r2
 800cf24:	4a7e      	ldr	r2, [pc, #504]	; (800d120 <app_Measurement+0x760>)
 800cf26:	f00a fcb1 	bl	801788c <io_setOutput>
			cycleMeasure = ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	703b      	strb	r3, [r7, #0]
 800cf2e:	e5ef      	b.n	800cb10 <app_Measurement+0x150>
				_time = (overflow - 1) * MAX_PERIOD
 800cf30:	4b81      	ldr	r3, [pc, #516]	; (800d138 <app_Measurement+0x778>)
						+ __HAL_TIM_GET_COUNTER(&htim1);
 800cf32:	4980      	ldr	r1, [pc, #512]	; (800d134 <app_Measurement+0x774>)
				_time = (overflow - 1) * MAX_PERIOD
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68cc      	ldr	r4, [r1, #12]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	435c      	muls	r4, r3
						+ __HAL_TIM_GET_COUNTER(&htim1);
 800cf3c:	680a      	ldr	r2, [r1, #0]
 800cf3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cf40:	18a4      	adds	r4, r4, r2
 800cf42:	e7b1      	b.n	800cea8 <app_Measurement+0x4e8>
				moutput.out5 = _OFF;
 800cf44:	715c      	strb	r4, [r3, #5]
				moutput.out6 = _OFF;
 800cf46:	719c      	strb	r4, [r3, #6]
 800cf48:	e7d8      	b.n	800cefc <app_Measurement+0x53c>
		if (_ON == minput.in2)  //C = 5
 800cf4a:	4b7f      	ldr	r3, [pc, #508]	; (800d148 <app_Measurement+0x788>)
 800cf4c:	789a      	ldrb	r2, [r3, #2]
 800cf4e:	2a01      	cmp	r2, #1
 800cf50:	d000      	beq.n	800cf54 <app_Measurement+0x594>
 800cf52:	e5e4      	b.n	800cb1e <app_Measurement+0x15e>
			minput.in2 = _OFF;
 800cf54:	2200      	movs	r2, #0
 800cf56:	709a      	strb	r2, [r3, #2]
			cycleMeasure = FINISH;
 800cf58:	2315      	movs	r3, #21
			if (ZONLY == mdata.mode) {
 800cf5a:	4c7c      	ldr	r4, [pc, #496]	; (800d14c <app_Measurement+0x78c>)
			cycleMeasure = FINISH;
 800cf5c:	702b      	strb	r3, [r5, #0]
			if (ZONLY == mdata.mode) {
 800cf5e:	7ca3      	ldrb	r3, [r4, #18]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d000      	beq.n	800cf66 <app_Measurement+0x5a6>
 800cf64:	e0ae      	b.n	800d0c4 <app_Measurement+0x704>
				mdata.mode = MEASUREALL;
 800cf66:	3303      	adds	r3, #3
				mdata.mode = ZERROR2; // macro for LCD to print Z =... (Z cannot measure)
 800cf68:	74a3      	strb	r3, [r4, #18]
			app_CalculatorValue(cycleMeasure, mdata.mode, measurementIndex);
 800cf6a:	7828      	ldrb	r0, [r5, #0]
 800cf6c:	9a04      	ldr	r2, [sp, #16]
 800cf6e:	7ca1      	ldrb	r1, [r4, #18]
 800cf70:	b2c0      	uxtb	r0, r0
 800cf72:	f7fe fe85 	bl	800bc80 <app_CalculatorValue>
			if (moutput.out2 == _ON || moutput.out3 == _ON) {
 800cf76:	4d73      	ldr	r5, [pc, #460]	; (800d144 <app_Measurement+0x784>)
 800cf78:	4b75      	ldr	r3, [pc, #468]	; (800d150 <app_Measurement+0x790>)
 800cf7a:	78aa      	ldrb	r2, [r5, #2]
 800cf7c:	2a01      	cmp	r2, #1
 800cf7e:	d003      	beq.n	800cf88 <app_Measurement+0x5c8>
 800cf80:	78ea      	ldrb	r2, [r5, #3]
 800cf82:	2a01      	cmp	r2, #1
 800cf84:	d000      	beq.n	800cf88 <app_Measurement+0x5c8>
 800cf86:	e0a2      	b.n	800d0ce <app_Measurement+0x70e>
				meas1WrongPos = 1;
 800cf88:	2201      	movs	r2, #1
				HAL_TIM_Base_Start_IT(&htim3); //start blink led
 800cf8a:	4872      	ldr	r0, [pc, #456]	; (800d154 <app_Measurement+0x794>)
				meas1WrongPos = 1;
 800cf8c:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim3); //start blink led
 800cf8e:	f004 fa29 	bl	80113e4 <HAL_TIM_Base_Start_IT>
			if (moutput.out5 == _ON || moutput.out6 == _ON) {
 800cf92:	796a      	ldrb	r2, [r5, #5]
 800cf94:	4b64      	ldr	r3, [pc, #400]	; (800d128 <app_Measurement+0x768>)
 800cf96:	2a01      	cmp	r2, #1
 800cf98:	d003      	beq.n	800cfa2 <app_Measurement+0x5e2>
 800cf9a:	79aa      	ldrb	r2, [r5, #6]
 800cf9c:	2a01      	cmp	r2, #1
 800cf9e:	d000      	beq.n	800cfa2 <app_Measurement+0x5e2>
 800cfa0:	e098      	b.n	800d0d4 <app_Measurement+0x714>
				meas2WrongPos = 1;
 800cfa2:	2201      	movs	r2, #1
				HAL_TIM_Base_Start_IT(&htim3); //start blink led
 800cfa4:	486b      	ldr	r0, [pc, #428]	; (800d154 <app_Measurement+0x794>)
				meas2WrongPos = 1;
 800cfa6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim3); //start blink led
 800cfa8:	f004 fa1c 	bl	80113e4 <HAL_TIM_Base_Start_IT>
			if ((NONE != mdata.mode) && (CALIBSET == calibStatus)) {
 800cfac:	7ca3      	ldrb	r3, [r4, #18]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d03c      	beq.n	800d02c <app_Measurement+0x66c>
 800cfb2:	9b05      	ldr	r3, [sp, #20]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d139      	bne.n	800d02c <app_Measurement+0x66c>
				write_SDCard(mdata, fileName, measurementIndex);
 800cfb8:	9b04      	ldr	r3, [sp, #16]
 800cfba:	4668      	mov	r0, sp
 800cfbc:	9302      	str	r3, [sp, #8]
 800cfbe:	ab0f      	add	r3, sp, #60	; 0x3c
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	7862      	ldrb	r2, [r4, #1]
 800cfc4:	7821      	ldrb	r1, [r4, #0]
 800cfc6:	78a3      	ldrb	r3, [r4, #2]
 800cfc8:	0212      	lsls	r2, r2, #8
 800cfca:	4311      	orrs	r1, r2
 800cfcc:	78e2      	ldrb	r2, [r4, #3]
 800cfce:	041b      	lsls	r3, r3, #16
 800cfd0:	430b      	orrs	r3, r1
 800cfd2:	0612      	lsls	r2, r2, #24
 800cfd4:	431a      	orrs	r2, r3
 800cfd6:	9206      	str	r2, [sp, #24]
 800cfd8:	7962      	ldrb	r2, [r4, #5]
 800cfda:	7921      	ldrb	r1, [r4, #4]
 800cfdc:	79a3      	ldrb	r3, [r4, #6]
 800cfde:	0212      	lsls	r2, r2, #8
 800cfe0:	4311      	orrs	r1, r2
 800cfe2:	041b      	lsls	r3, r3, #16
 800cfe4:	430b      	orrs	r3, r1
 800cfe6:	0021      	movs	r1, r4
 800cfe8:	79e2      	ldrb	r2, [r4, #7]
 800cfea:	7aa7      	ldrb	r7, [r4, #10]
 800cfec:	0612      	lsls	r2, r2, #24
 800cfee:	431a      	orrs	r2, r3
 800cff0:	7a63      	ldrb	r3, [r4, #9]
 800cff2:	9207      	str	r2, [sp, #28]
 800cff4:	7a22      	ldrb	r2, [r4, #8]
 800cff6:	021b      	lsls	r3, r3, #8
 800cff8:	431a      	orrs	r2, r3
 800cffa:	7ae3      	ldrb	r3, [r4, #11]
 800cffc:	043f      	lsls	r7, r7, #16
 800cffe:	4317      	orrs	r7, r2
 800d000:	061b      	lsls	r3, r3, #24
 800d002:	431f      	orrs	r7, r3
 800d004:	7b63      	ldrb	r3, [r4, #13]
 800d006:	7b22      	ldrb	r2, [r4, #12]
 800d008:	7ba5      	ldrb	r5, [r4, #14]
 800d00a:	021b      	lsls	r3, r3, #8
 800d00c:	431a      	orrs	r2, r3
 800d00e:	7be3      	ldrb	r3, [r4, #15]
 800d010:	042d      	lsls	r5, r5, #16
 800d012:	061b      	lsls	r3, r3, #24
 800d014:	4315      	orrs	r5, r2
 800d016:	431d      	orrs	r5, r3
 800d018:	2203      	movs	r2, #3
 800d01a:	3110      	adds	r1, #16
 800d01c:	f00b fb0c 	bl	8018638 <memcpy>
 800d020:	003a      	movs	r2, r7
 800d022:	002b      	movs	r3, r5
 800d024:	9806      	ldr	r0, [sp, #24]
 800d026:	9907      	ldr	r1, [sp, #28]
 800d028:	f7fe fc24 	bl	800b874 <write_SDCard>
			screen_DataMeasureType1(mdata, calibStatus, measurementIndex,
 800d02c:	2300      	movs	r3, #0
 800d02e:	9303      	str	r3, [sp, #12]
 800d030:	9b04      	ldr	r3, [sp, #16]
 800d032:	4946      	ldr	r1, [pc, #280]	; (800d14c <app_Measurement+0x78c>)
 800d034:	9302      	str	r3, [sp, #8]
 800d036:	9b05      	ldr	r3, [sp, #20]
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	784a      	ldrb	r2, [r1, #1]
 800d03c:	7808      	ldrb	r0, [r1, #0]
 800d03e:	788b      	ldrb	r3, [r1, #2]
 800d040:	0212      	lsls	r2, r2, #8
 800d042:	4310      	orrs	r0, r2
 800d044:	78ca      	ldrb	r2, [r1, #3]
 800d046:	041b      	lsls	r3, r3, #16
 800d048:	4303      	orrs	r3, r0
 800d04a:	0612      	lsls	r2, r2, #24
 800d04c:	431a      	orrs	r2, r3
 800d04e:	794b      	ldrb	r3, [r1, #5]
 800d050:	9206      	str	r2, [sp, #24]
 800d052:	790a      	ldrb	r2, [r1, #4]
 800d054:	798f      	ldrb	r7, [r1, #6]
 800d056:	021b      	lsls	r3, r3, #8
 800d058:	431a      	orrs	r2, r3
 800d05a:	79cb      	ldrb	r3, [r1, #7]
 800d05c:	043f      	lsls	r7, r7, #16
 800d05e:	4317      	orrs	r7, r2
 800d060:	061b      	lsls	r3, r3, #24
 800d062:	431f      	orrs	r7, r3
 800d064:	7a4b      	ldrb	r3, [r1, #9]
 800d066:	7a0a      	ldrb	r2, [r1, #8]
 800d068:	7a8d      	ldrb	r5, [r1, #10]
 800d06a:	021b      	lsls	r3, r3, #8
 800d06c:	431a      	orrs	r2, r3
 800d06e:	7acb      	ldrb	r3, [r1, #11]
 800d070:	042d      	lsls	r5, r5, #16
 800d072:	4315      	orrs	r5, r2
 800d074:	061b      	lsls	r3, r3, #24
 800d076:	431d      	orrs	r5, r3
 800d078:	7b4b      	ldrb	r3, [r1, #13]
 800d07a:	7b0a      	ldrb	r2, [r1, #12]
 800d07c:	7b8c      	ldrb	r4, [r1, #14]
 800d07e:	021b      	lsls	r3, r3, #8
 800d080:	431a      	orrs	r2, r3
 800d082:	7bcb      	ldrb	r3, [r1, #15]
 800d084:	0424      	lsls	r4, r4, #16
 800d086:	061b      	lsls	r3, r3, #24
 800d088:	4314      	orrs	r4, r2
 800d08a:	431c      	orrs	r4, r3
 800d08c:	2203      	movs	r2, #3
 800d08e:	3110      	adds	r1, #16
 800d090:	4668      	mov	r0, sp
 800d092:	f00b fad1 	bl	8018638 <memcpy>
 800d096:	002a      	movs	r2, r5
 800d098:	0039      	movs	r1, r7
 800d09a:	0023      	movs	r3, r4
 800d09c:	9806      	ldr	r0, [sp, #24]
 800d09e:	f00a fcc5 	bl	8017a2c <screen_DataMeasureType1>
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800d0a2:	2280      	movs	r2, #128	; 0x80
 800d0a4:	0092      	lsls	r2, r2, #2
 800d0a6:	4b2c      	ldr	r3, [pc, #176]	; (800d158 <app_Measurement+0x798>)
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	4213      	tst	r3, r2
 800d0ac:	d000      	beq.n	800d0b0 <app_Measurement+0x6f0>
 800d0ae:	e533      	b.n	800cb18 <app_Measurement+0x158>
 800d0b0:	9b04      	ldr	r3, [sp, #16]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d111      	bne.n	800d0da <app_Measurement+0x71a>
 800d0b6:	2180      	movs	r1, #128	; 0x80
 800d0b8:	4b27      	ldr	r3, [pc, #156]	; (800d158 <app_Measurement+0x798>)
 800d0ba:	0109      	lsls	r1, r1, #4
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	420b      	tst	r3, r1
 800d0c0:	d0f1      	beq.n	800d0a6 <app_Measurement+0x6e6>
 800d0c2:	e529      	b.n	800cb18 <app_Measurement+0x158>
			} else if (ZERROR1 == mdata.mode) {
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d000      	beq.n	800d0ca <app_Measurement+0x70a>
 800d0c8:	e74f      	b.n	800cf6a <app_Measurement+0x5aa>
				mdata.mode = ZERROR2; // macro for LCD to print Z =... (Z cannot measure)
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	e74c      	b.n	800cf68 <app_Measurement+0x5a8>
				meas1WrongPos = 0;
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
 800d0d2:	e75e      	b.n	800cf92 <app_Measurement+0x5d2>
				meas2WrongPos = 0;
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	701a      	strb	r2, [r3, #0]
 800d0d8:	e768      	b.n	800cfac <app_Measurement+0x5ec>
			while (0 == GET_IN2 && (0 == GET_INPUT(measurementIndex)))
 800d0da:	2180      	movs	r1, #128	; 0x80
 800d0dc:	4b1e      	ldr	r3, [pc, #120]	; (800d158 <app_Measurement+0x798>)
 800d0de:	00c9      	lsls	r1, r1, #3
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	e7ec      	b.n	800d0be <app_Measurement+0x6fe>
	while (CALCULATORVALUE == cycleMeasure && (0 == GET_INPUT(measurementIndex))) {
 800d0e4:	2280      	movs	r2, #128	; 0x80
 800d0e6:	4b1c      	ldr	r3, [pc, #112]	; (800d158 <app_Measurement+0x798>)
 800d0e8:	00d2      	lsls	r2, r2, #3
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	e522      	b.n	800cb34 <app_Measurement+0x174>
	while (cycleMeasure == FINISH && (0 == GET_INPUT(measurementIndex))) {
 800d0ee:	4a1a      	ldr	r2, [pc, #104]	; (800d158 <app_Measurement+0x798>)
 800d0f0:	6912      	ldr	r2, [r2, #16]
 800d0f2:	421a      	tst	r2, r3
 800d0f4:	d100      	bne.n	800d0f8 <app_Measurement+0x738>
 800d0f6:	e524      	b.n	800cb42 <app_Measurement+0x182>
	if (1 == GET_INPUT(measurementIndex) /*end of cycle measurement */) {
 800d0f8:	4b17      	ldr	r3, [pc, #92]	; (800d158 <app_Measurement+0x798>)
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	055b      	lsls	r3, r3, #21
 800d0fe:	e52f      	b.n	800cb60 <app_Measurement+0x1a0>
 800d100:	9b04      	ldr	r3, [sp, #16]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d1f8      	bne.n	800d0f8 <app_Measurement+0x738>
 800d106:	e528      	b.n	800cb5a <app_Measurement+0x19a>
						calibStatus_2 = CALIBSET;
 800d108:	4b08      	ldr	r3, [pc, #32]	; (800d12c <app_Measurement+0x76c>)
						mledStatus.led2 = _ON;
 800d10a:	704d      	strb	r5, [r1, #1]
						calibStatus_2 = CALIBSET;
 800d10c:	e663      	b.n	800cdd6 <app_Measurement+0x416>
			app_GotoMainScreen(calibStatus, measurementIndex,
 800d10e:	2200      	movs	r2, #0
 800d110:	9904      	ldr	r1, [sp, #16]
 800d112:	9805      	ldr	r0, [sp, #20]
 800d114:	e670      	b.n	800cdf8 <app_Measurement+0x438>
 800d116:	46c0      	nop			; (mov r8, r8)
 800d118:	200005d0 	.word	0x200005d0
 800d11c:	2000034a 	.word	0x2000034a
 800d120:	200005fc 	.word	0x200005fc
 800d124:	2000059d 	.word	0x2000059d
 800d128:	200005cb 	.word	0x200005cb
 800d12c:	2000034b 	.word	0x2000034b
 800d130:	0801bd87 	.word	0x0801bd87
 800d134:	2000043c 	.word	0x2000043c
 800d138:	200005f4 	.word	0x200005f4
 800d13c:	001e847f 	.word	0x001e847f
 800d140:	001e8480 	.word	0x001e8480
 800d144:	200005e7 	.word	0x200005e7
 800d148:	200005cd 	.word	0x200005cd
 800d14c:	200005b7 	.word	0x200005b7
 800d150:	200005ca 	.word	0x200005ca
 800d154:	20000484 	.word	0x20000484
 800d158:	48000c00 	.word	0x48000c00

0800d15c <main>:
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;  // early enable to ensure clock is up and running when it comes to usage
 800d15c:	2301      	movs	r3, #1
{
 800d15e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d160:	4ce4      	ldr	r4, [pc, #912]	; (800d4f4 <main+0x398>)
	      ram_vector[i] = g_pfnVectors[i];
 800d162:	4de5      	ldr	r5, [pc, #916]	; (800d4f8 <main+0x39c>)
{
 800d164:	44a5      	add	sp, r4
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;  // early enable to ensure clock is up and running when it comes to usage
 800d166:	4ce5      	ldr	r4, [pc, #916]	; (800d4fc <main+0x3a0>)
	      ram_vector[i] = g_pfnVectors[i];
 800d168:	49e5      	ldr	r1, [pc, #916]	; (800d500 <main+0x3a4>)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;  // early enable to ensure clock is up and running when it comes to usage
 800d16a:	69a2      	ldr	r2, [r4, #24]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	61a3      	str	r3, [r4, #24]
	    for (uint32_t i = 0; i < VECTOR_TABLE_SIZE; i++) {//copy vector table
 800d170:	2300      	movs	r3, #0
	      ram_vector[i] = g_pfnVectors[i];
 800d172:	009a      	lsls	r2, r3, #2
 800d174:	5950      	ldr	r0, [r2, r5]
	    for (uint32_t i = 0; i < VECTOR_TABLE_SIZE; i++) {//copy vector table
 800d176:	3301      	adds	r3, #1
	      ram_vector[i] = g_pfnVectors[i];
 800d178:	5050      	str	r0, [r2, r1]
	    for (uint32_t i = 0; i < VECTOR_TABLE_SIZE; i++) {//copy vector table
 800d17a:	2b30      	cmp	r3, #48	; 0x30
 800d17c:	d1f9      	bne.n	800d172 <main+0x16>
	    SYSCFG->CFGR1 = (SYSCFG->CFGR1 & ~SYSCFG_CFGR1_MEM_MODE) | (SYSCFG_CFGR1_MEM_MODE__SRAM * SYSCFG_CFGR1_MEM_MODE_0);  // remap 0x0000000 to RAM
 800d17e:	4ae1      	ldr	r2, [pc, #900]	; (800d504 <main+0x3a8>)
 800d180:	3b2d      	subs	r3, #45	; 0x2d
 800d182:	6811      	ldr	r1, [r2, #0]
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin|OUT2_Pin|GPIO_PIN_8
 800d184:	4fe0      	ldr	r7, [pc, #896]	; (800d508 <main+0x3ac>)
	    SYSCFG->CFGR1 = (SYSCFG->CFGR1 & ~SYSCFG_CFGR1_MEM_MODE) | (SYSCFG_CFGR1_MEM_MODE__SRAM * SYSCFG_CFGR1_MEM_MODE_0);  // remap 0x0000000 to RAM
 800d186:	430b      	orrs	r3, r1
 800d188:	6013      	str	r3, [r2, #0]
  HAL_Init();
 800d18a:	f001 fccb 	bl	800eb24 <HAL_Init>
  SystemClock_Config();
 800d18e:	f7fe fcfd 	bl	800bb8c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d192:	2214      	movs	r2, #20
 800d194:	2100      	movs	r1, #0
 800d196:	a881      	add	r0, sp, #516	; 0x204
 800d198:	f00b fa57 	bl	801864a <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d19c:	2180      	movs	r1, #128	; 0x80
 800d19e:	6962      	ldr	r2, [r4, #20]
 800d1a0:	0389      	lsls	r1, r1, #14
 800d1a2:	430a      	orrs	r2, r1
 800d1a4:	6162      	str	r2, [r4, #20]
 800d1a6:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|OUT3_Pin
 800d1a8:	48d8      	ldr	r0, [pc, #864]	; (800d50c <main+0x3b0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d1aa:	400b      	ands	r3, r1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1ac:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d1ae:	9311      	str	r3, [sp, #68]	; 0x44
 800d1b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1b2:	6962      	ldr	r2, [r4, #20]
 800d1b4:	0309      	lsls	r1, r1, #12
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	6162      	str	r2, [r4, #20]
 800d1ba:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1bc:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1be:	400b      	ands	r3, r1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d1c0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1c2:	9312      	str	r3, [sp, #72]	; 0x48
 800d1c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d1c6:	6962      	ldr	r2, [r4, #20]
 800d1c8:	03c9      	lsls	r1, r1, #15
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	6162      	str	r2, [r4, #20]
 800d1ce:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 800d1d0:	2610      	movs	r6, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d1d2:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1d4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d1d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1da:	6962      	ldr	r2, [r4, #20]
 800d1dc:	0289      	lsls	r1, r1, #10
 800d1de:	430a      	orrs	r2, r1
 800d1e0:	6162      	str	r2, [r4, #20]
 800d1e2:	6963      	ldr	r3, [r4, #20]
 800d1e4:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1e6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1e8:	9314      	str	r3, [sp, #80]	; 0x50
 800d1ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1ec:	6962      	ldr	r2, [r4, #20]
 800d1ee:	02c9      	lsls	r1, r1, #11
 800d1f0:	430a      	orrs	r2, r1
 800d1f2:	6162      	str	r2, [r4, #20]
 800d1f4:	6963      	ldr	r3, [r4, #20]
 800d1f6:	400b      	ands	r3, r1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d1f8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1fa:	9315      	str	r3, [sp, #84]	; 0x54
 800d1fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d1fe:	6962      	ldr	r2, [r4, #20]
 800d200:	0349      	lsls	r1, r1, #13
 800d202:	430a      	orrs	r2, r1
 800d204:	6162      	str	r2, [r4, #20]
 800d206:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|OUT3_Pin
 800d208:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d20a:	400b      	ands	r3, r1
 800d20c:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|OUT3_Pin
 800d20e:	49c0      	ldr	r1, [pc, #768]	; (800d510 <main+0x3b4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d210:	9b16      	ldr	r3, [sp, #88]	; 0x58
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|OUT3_Pin
 800d212:	f001 ff73 	bl	800f0fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800d216:	2201      	movs	r2, #1
 800d218:	2140      	movs	r1, #64	; 0x40
 800d21a:	48bc      	ldr	r0, [pc, #752]	; (800d50c <main+0x3b0>)
 800d21c:	f001 ff6e 	bl	800f0fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800d220:	2090      	movs	r0, #144	; 0x90
 800d222:	2200      	movs	r2, #0
 800d224:	2110      	movs	r1, #16
 800d226:	05c0      	lsls	r0, r0, #23
 800d228:	f001 ff68 	bl	800f0fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, W5500_RS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800d22c:	21c8      	movs	r1, #200	; 0xc8
 800d22e:	2201      	movs	r2, #1
 800d230:	48b8      	ldr	r0, [pc, #736]	; (800d514 <main+0x3b8>)
 800d232:	0089      	lsls	r1, r1, #2
 800d234:	f001 ff62 	bl	800f0fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin|OUT2_Pin|GPIO_PIN_8
 800d238:	0039      	movs	r1, r7
 800d23a:	2200      	movs	r2, #0
 800d23c:	48b6      	ldr	r0, [pc, #728]	; (800d518 <main+0x3bc>)
 800d23e:	f001 ff5d 	bl	800f0fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800d242:	2180      	movs	r1, #128	; 0x80
 800d244:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d246:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800d248:	2201      	movs	r2, #1
 800d24a:	0049      	lsls	r1, r1, #1
 800d24c:	05c0      	lsls	r0, r0, #23
 800d24e:	f001 ff55 	bl	800f0fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800d252:	2200      	movs	r2, #0
 800d254:	2101      	movs	r1, #1
 800d256:	48b1      	ldr	r0, [pc, #708]	; (800d51c <main+0x3c0>)
 800d258:	f001 ff50 	bl	800f0fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800d25c:	4bb0      	ldr	r3, [pc, #704]	; (800d520 <main+0x3c4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d25e:	48ab      	ldr	r0, [pc, #684]	; (800d50c <main+0x3b0>)
 800d260:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800d262:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d264:	9483      	str	r4, [sp, #524]	; 0x20c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d266:	9484      	str	r4, [sp, #528]	; 0x210
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d268:	9582      	str	r5, [sp, #520]	; 0x208
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d26a:	f001 fe03 	bl	800ee74 <HAL_GPIO_Init>
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 800d26e:	2090      	movs	r0, #144	; 0x90
 800d270:	a981      	add	r1, sp, #516	; 0x204
 800d272:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d274:	9483      	str	r4, [sp, #524]	; 0x20c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d276:	9484      	str	r4, [sp, #528]	; 0x210
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 800d278:	9681      	str	r6, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d27a:	9582      	str	r5, [sp, #520]	; 0x208
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 800d27c:	f001 fdfa 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = W5500_INT_Pin|BT_SET_Pin|BT_RESERVED_Pin;
 800d280:	23d0      	movs	r3, #208	; 0xd0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d282:	48a4      	ldr	r0, [pc, #656]	; (800d514 <main+0x3b8>)
 800d284:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = W5500_INT_Pin|BT_SET_Pin|BT_RESERVED_Pin;
 800d286:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d288:	9482      	str	r4, [sp, #520]	; 0x208
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d28a:	9483      	str	r4, [sp, #524]	; 0x20c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d28c:	f001 fdf2 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = W5500_RS_Pin;
 800d290:	2320      	movs	r3, #32
  HAL_GPIO_Init(W5500_RS_GPIO_Port, &GPIO_InitStruct);
 800d292:	48a0      	ldr	r0, [pc, #640]	; (800d514 <main+0x3b8>)
 800d294:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = W5500_RS_Pin;
 800d296:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d298:	9483      	str	r4, [sp, #524]	; 0x20c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d29a:	9484      	str	r4, [sp, #528]	; 0x210
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d29c:	9582      	str	r5, [sp, #520]	; 0x208
  HAL_GPIO_Init(W5500_RS_GPIO_Port, &GPIO_InitStruct);
 800d29e:	f001 fde9 	bl	800ee74 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2a2:	489d      	ldr	r0, [pc, #628]	; (800d518 <main+0x3bc>)
 800d2a4:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|GPIO_PIN_8
 800d2a6:	9781      	str	r7, [sp, #516]	; 0x204
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2a8:	9483      	str	r4, [sp, #524]	; 0x20c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2aa:	9484      	str	r4, [sp, #528]	; 0x210
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d2ac:	9582      	str	r5, [sp, #520]	; 0x208
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2ae:	f001 fde1 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin;
 800d2b2:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2b4:	4898      	ldr	r0, [pc, #608]	; (800d518 <main+0x3bc>)
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin;
 800d2b6:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2b8:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin;
 800d2ba:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d2bc:	9482      	str	r4, [sp, #520]	; 0x208
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2be:	9483      	str	r4, [sp, #524]	; 0x20c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2c0:	f001 fdd8 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IN3_Pin|BT_PREV_Pin|BT_NEXT_Pin|BT_MENU_Pin
 800d2c4:	23f1      	movs	r3, #241	; 0xf1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2c6:	4895      	ldr	r0, [pc, #596]	; (800d51c <main+0x3c0>)
  GPIO_InitStruct.Pin = IN3_Pin|BT_PREV_Pin|BT_NEXT_Pin|BT_MENU_Pin
 800d2c8:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2ca:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = IN3_Pin|BT_PREV_Pin|BT_NEXT_Pin|BT_MENU_Pin
 800d2cc:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d2ce:	9482      	str	r4, [sp, #520]	; 0x208
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2d0:	9483      	str	r4, [sp, #524]	; 0x20c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2d2:	f001 fdcf 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IN2_Pin;
 800d2d6:	2380      	movs	r3, #128	; 0x80
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d2dc:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 800d2de:	488f      	ldr	r0, [pc, #572]	; (800d51c <main+0x3c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d2e0:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 800d2e2:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d2e4:	9382      	str	r3, [sp, #520]	; 0x208
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2e6:	9583      	str	r5, [sp, #524]	; 0x20c
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 800d2e8:	f001 fdc4 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IN1_Pin|IN0_Pin;
 800d2ec:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2ee:	488b      	ldr	r0, [pc, #556]	; (800d51c <main+0x3c0>)
  GPIO_InitStruct.Pin = IN1_Pin|IN0_Pin;
 800d2f0:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2f2:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = IN1_Pin|IN0_Pin;
 800d2f4:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d2f6:	9482      	str	r4, [sp, #520]	; 0x208
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2f8:	9583      	str	r5, [sp, #524]	; 0x20c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2fa:	f001 fdbb 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800d2fe:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d300:	2711      	movs	r7, #17
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800d302:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d304:	4883      	ldr	r0, [pc, #524]	; (800d514 <main+0x3b8>)
 800d306:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800d308:	9381      	str	r3, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d30a:	9782      	str	r7, [sp, #520]	; 0x208
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d30c:	9483      	str	r4, [sp, #524]	; 0x20c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d30e:	9484      	str	r4, [sp, #528]	; 0x210
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d310:	f001 fdb0 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin;
 800d314:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800d316:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LED3_Pin;
 800d318:	0052      	lsls	r2, r2, #1
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800d31a:	a981      	add	r1, sp, #516	; 0x204
 800d31c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED3_Pin;
 800d31e:	9281      	str	r2, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d320:	9782      	str	r7, [sp, #520]	; 0x208
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d322:	9483      	str	r4, [sp, #524]	; 0x20c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d324:	9484      	str	r4, [sp, #528]	; 0x210
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800d326:	f001 fda5 	bl	800ee74 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800d32a:	487c      	ldr	r0, [pc, #496]	; (800d51c <main+0x3c0>)
 800d32c:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d32e:	9483      	str	r4, [sp, #524]	; 0x20c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d330:	9484      	str	r4, [sp, #528]	; 0x210
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800d332:	9581      	str	r5, [sp, #516]	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d334:	9582      	str	r5, [sp, #520]	; 0x208
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800d336:	f001 fd9d 	bl	800ee74 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d33a:	23c4      	movs	r3, #196	; 0xc4
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 800d33c:	2204      	movs	r2, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d33e:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d340:	4876      	ldr	r0, [pc, #472]	; (800d51c <main+0x3c0>)
 800d342:	a981      	add	r1, sp, #516	; 0x204
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d344:	9382      	str	r3, [sp, #520]	; 0x208
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 800d346:	9281      	str	r2, [sp, #516]	; 0x204
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d348:	9583      	str	r5, [sp, #524]	; 0x20c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d34a:	f001 fd93 	bl	800ee74 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800d34e:	0022      	movs	r2, r4
 800d350:	0021      	movs	r1, r4
 800d352:	2006      	movs	r0, #6
 800d354:	f001 fc1a 	bl	800eb8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800d358:	2006      	movs	r0, #6
 800d35a:	f001 fc41 	bl	800ebe0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800d35e:	0022      	movs	r2, r4
 800d360:	0029      	movs	r1, r5
 800d362:	2007      	movs	r0, #7
 800d364:	f001 fc12 	bl	800eb8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800d368:	2007      	movs	r0, #7
 800d36a:	f001 fc39 	bl	800ebe0 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 800d36e:	486d      	ldr	r0, [pc, #436]	; (800d524 <main+0x3c8>)
 800d370:	4b6d      	ldr	r3, [pc, #436]	; (800d528 <main+0x3cc>)
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d372:	3f09      	subs	r7, #9
  hspi1.Instance = SPI1;
 800d374:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d376:	2382      	movs	r3, #130	; 0x82
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d37c:	23e0      	movs	r3, #224	; 0xe0
 800d37e:	00db      	lsls	r3, r3, #3
 800d380:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d382:	2380      	movs	r3, #128	; 0x80
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800d388:	3bfa      	subs	r3, #250	; 0xfa
 800d38a:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d38c:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d38e:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d390:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d392:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d394:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d396:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d398:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800d39a:	61c6      	str	r6, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 800d39c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d39e:	6347      	str	r7, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d3a0:	f003 fc00 	bl	8010ba4 <HAL_SPI_Init>
 800d3a4:	1e04      	subs	r4, r0, #0
 800d3a6:	d001      	beq.n	800d3ac <main+0x250>
 800d3a8:	b672      	cpsid	i
	while (1) {
 800d3aa:	e7fe      	b.n	800d3aa <main+0x24e>
  MX_SPI2_Init();
 800d3ac:	f7fd feca 	bl	800b144 <MX_SPI2_Init>
  huart2.Instance = USART2;
 800d3b0:	485e      	ldr	r0, [pc, #376]	; (800d52c <main+0x3d0>)
 800d3b2:	4b5f      	ldr	r3, [pc, #380]	; (800d530 <main+0x3d4>)
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800d3b4:	0022      	movs	r2, r4
  huart2.Instance = USART2;
 800d3b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 800d3b8:	2396      	movs	r3, #150	; 0x96
 800d3ba:	021b      	lsls	r3, r3, #8
 800d3bc:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d3be:	230c      	movs	r3, #12
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800d3c0:	0021      	movs	r1, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d3c2:	6143      	str	r3, [r0, #20]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800d3c4:	0023      	movs	r3, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d3c6:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d3c8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d3ca:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3cc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d3ce:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d3d0:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d3d2:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800d3d4:	f004 fece 	bl	8012174 <HAL_RS485Ex_Init>
 800d3d8:	1e04      	subs	r4, r0, #0
 800d3da:	d001      	beq.n	800d3e0 <main+0x284>
 800d3dc:	b672      	cpsid	i
	while (1) {
 800d3de:	e7fe      	b.n	800d3de <main+0x282>
  MX_FATFS_Init();
 800d3e0:	f005 fba6 	bl	8012b30 <MX_FATFS_Init>
  hrtc.Instance = RTC;
 800d3e4:	4853      	ldr	r0, [pc, #332]	; (800d534 <main+0x3d8>)
 800d3e6:	4b54      	ldr	r3, [pc, #336]	; (800d538 <main+0x3dc>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d3e8:	6044      	str	r4, [r0, #4]
  hrtc.Instance = RTC;
 800d3ea:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 800d3ec:	237f      	movs	r3, #127	; 0x7f
 800d3ee:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800d3f0:	3380      	adds	r3, #128	; 0x80
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d3f2:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d3f4:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d3f6:	6184      	str	r4, [r0, #24]
  hrtc.Init.SynchPrediv = 255;
 800d3f8:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d3fa:	f003 f951 	bl	80106a0 <HAL_RTC_Init>
 800d3fe:	1e04      	subs	r4, r0, #0
 800d400:	d001      	beq.n	800d406 <main+0x2aa>
 800d402:	b672      	cpsid	i
	while (1) {
 800d404:	e7fe      	b.n	800d404 <main+0x2a8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d406:	0032      	movs	r2, r6
 800d408:	0001      	movs	r1, r0
 800d40a:	a87d      	add	r0, sp, #500	; 0x1f4
 800d40c:	f00b f91d 	bl	801864a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d410:	003a      	movs	r2, r7
 800d412:	0021      	movs	r1, r4
 800d414:	a87b      	add	r0, sp, #492	; 0x1ec
 800d416:	f00b f918 	bl	801864a <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800d41a:	0032      	movs	r2, r6
 800d41c:	0021      	movs	r1, r4
 800d41e:	a881      	add	r0, sp, #516	; 0x204
 800d420:	f00b f913 	bl	801864a <memset>
  htim1.Instance = TIM1;
 800d424:	4e45      	ldr	r6, [pc, #276]	; (800d53c <main+0x3e0>)
 800d426:	4b46      	ldr	r3, [pc, #280]	; (800d540 <main+0x3e4>)
  htim1.Init.Period = 65535;
 800d428:	4f46      	ldr	r7, [pc, #280]	; (800d544 <main+0x3e8>)
  htim1.Instance = TIM1;
 800d42a:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = 47;
 800d42c:	232f      	movs	r3, #47	; 0x2f
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d42e:	0030      	movs	r0, r6
  htim1.Init.Prescaler = 47;
 800d430:	6073      	str	r3, [r6, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d432:	3351      	adds	r3, #81	; 0x51
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d434:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = 65535;
 800d436:	60f7      	str	r7, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d438:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 800d43a:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d43c:	61b3      	str	r3, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d43e:	f004 f915 	bl	801166c <HAL_TIM_Base_Init>
 800d442:	2800      	cmp	r0, #0
 800d444:	d001      	beq.n	800d44a <main+0x2ee>
 800d446:	b672      	cpsid	i
	while (1) {
 800d448:	e7fe      	b.n	800d448 <main+0x2ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d44a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d44c:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d44e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d450:	a97d      	add	r1, sp, #500	; 0x1f4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d452:	937d      	str	r3, [sp, #500]	; 0x1f4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d454:	f004 facc 	bl	80119f0 <HAL_TIM_ConfigClockSource>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d001      	beq.n	800d460 <main+0x304>
 800d45c:	b672      	cpsid	i
	while (1) {
 800d45e:	e7fe      	b.n	800d45e <main+0x302>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800d460:	0030      	movs	r0, r6
 800d462:	f004 f953 	bl	801170c <HAL_TIM_IC_Init>
 800d466:	2800      	cmp	r0, #0
 800d468:	d001      	beq.n	800d46e <main+0x312>
 800d46a:	b672      	cpsid	i
	while (1) {
 800d46c:	e7fe      	b.n	800d46c <main+0x310>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d46e:	907b      	str	r0, [sp, #492]	; 0x1ec
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d470:	907c      	str	r0, [sp, #496]	; 0x1f0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d472:	a97b      	add	r1, sp, #492	; 0x1ec
 800d474:	0030      	movs	r0, r6
 800d476:	f004 fc49 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 800d47a:	1e02      	subs	r2, r0, #0
 800d47c:	d001      	beq.n	800d482 <main+0x326>
 800d47e:	b672      	cpsid	i
	while (1) {
 800d480:	e7fe      	b.n	800d480 <main+0x324>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800d482:	2302      	movs	r3, #2
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800d484:	9083      	str	r0, [sp, #524]	; 0x20c
  sConfigIC.ICFilter = 0;
 800d486:	9084      	str	r0, [sp, #528]	; 0x210
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800d488:	a981      	add	r1, sp, #516	; 0x204
 800d48a:	0030      	movs	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800d48c:	9381      	str	r3, [sp, #516]	; 0x204
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800d48e:	9582      	str	r5, [sp, #520]	; 0x208
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800d490:	f004 f9fa 	bl	8011888 <HAL_TIM_IC_ConfigChannel>
 800d494:	2800      	cmp	r0, #0
 800d496:	d001      	beq.n	800d49c <main+0x340>
 800d498:	b672      	cpsid	i
	while (1) {
 800d49a:	e7fe      	b.n	800d49a <main+0x33e>
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800d49c:	2204      	movs	r2, #4
 800d49e:	0030      	movs	r0, r6
 800d4a0:	a981      	add	r1, sp, #516	; 0x204
 800d4a2:	f004 f9f1 	bl	8011888 <HAL_TIM_IC_ConfigChannel>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d001      	beq.n	800d4ae <main+0x352>
 800d4aa:	b672      	cpsid	i
	while (1) {
 800d4ac:	e7fe      	b.n	800d4ac <main+0x350>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d4ae:	2210      	movs	r2, #16
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	a87d      	add	r0, sp, #500	; 0x1f4
 800d4b4:	f00b f8c9 	bl	801864a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4b8:	2208      	movs	r2, #8
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	a87b      	add	r0, sp, #492	; 0x1ec
 800d4be:	f00b f8c4 	bl	801864a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d4c2:	221c      	movs	r2, #28
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	a881      	add	r0, sp, #516	; 0x204
 800d4c8:	f00b f8bf 	bl	801864a <memset>
  htim3.Instance = TIM3;
 800d4cc:	4d1e      	ldr	r5, [pc, #120]	; (800d548 <main+0x3ec>)
 800d4ce:	4b1f      	ldr	r3, [pc, #124]	; (800d54c <main+0x3f0>)
  htim3.Init.Period = 1000;
 800d4d0:	22fa      	movs	r2, #250	; 0xfa
  htim3.Instance = TIM3;
 800d4d2:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 47000;
 800d4d4:	4b1e      	ldr	r3, [pc, #120]	; (800d550 <main+0x3f4>)
  htim3.Init.Period = 1000;
 800d4d6:	0092      	lsls	r2, r2, #2
  htim3.Init.Prescaler = 47000;
 800d4d8:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4da:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d4dc:	0028      	movs	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4de:	60ab      	str	r3, [r5, #8]
  htim3.Init.Period = 1000;
 800d4e0:	60ea      	str	r2, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4e2:	612b      	str	r3, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4e4:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d4e6:	f004 f8c1 	bl	801166c <HAL_TIM_Base_Init>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d032      	beq.n	800d554 <main+0x3f8>
 800d4ee:	b672      	cpsid	i
	while (1) {
 800d4f0:	e7fe      	b.n	800d4f0 <main+0x394>
 800d4f2:	46c0      	nop			; (mov r8, r8)
 800d4f4:	fffffddc 	.word	0xfffffddc
 800d4f8:	08007900 	.word	0x08007900
 800d4fc:	40021000 	.word	0x40021000
 800d500:	20000000 	.word	0x20000000
 800d504:	40010000 	.word	0x40010000
 800d508:	00000307 	.word	0x00000307
 800d50c:	48001000 	.word	0x48001000
 800d510:	000071b7 	.word	0x000071b7
 800d514:	48000800 	.word	0x48000800
 800d518:	48000400 	.word	0x48000400
 800d51c:	48000c00 	.word	0x48000c00
 800d520:	000071f7 	.word	0x000071f7
 800d524:	20000374 	.word	0x20000374
 800d528:	40013000 	.word	0x40013000
 800d52c:	20000514 	.word	0x20000514
 800d530:	40004400 	.word	0x40004400
 800d534:	20000354 	.word	0x20000354
 800d538:	40002800 	.word	0x40002800
 800d53c:	2000043c 	.word	0x2000043c
 800d540:	40012c00 	.word	0x40012c00
 800d544:	0000ffff 	.word	0x0000ffff
 800d548:	20000484 	.word	0x20000484
 800d54c:	40000400 	.word	0x40000400
 800d550:	0000b798 	.word	0x0000b798
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d554:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d556:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d558:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d55a:	a97d      	add	r1, sp, #500	; 0x1f4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d55c:	937d      	str	r3, [sp, #500]	; 0x1f4
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d55e:	f004 fa47 	bl	80119f0 <HAL_TIM_ConfigClockSource>
 800d562:	2800      	cmp	r0, #0
 800d564:	d001      	beq.n	800d56a <main+0x40e>
 800d566:	b672      	cpsid	i
	while (1) {
 800d568:	e7fe      	b.n	800d568 <main+0x40c>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800d56a:	0028      	movs	r0, r5
 800d56c:	f004 f8a6 	bl	80116bc <HAL_TIM_OC_Init>
 800d570:	2800      	cmp	r0, #0
 800d572:	d001      	beq.n	800d578 <main+0x41c>
 800d574:	b672      	cpsid	i
	while (1) {
 800d576:	e7fe      	b.n	800d576 <main+0x41a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d578:	907b      	str	r0, [sp, #492]	; 0x1ec
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d57a:	907c      	str	r0, [sp, #496]	; 0x1f0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d57c:	a97b      	add	r1, sp, #492	; 0x1ec
 800d57e:	0028      	movs	r0, r5
 800d580:	f004 fbc4 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 800d584:	1e02      	subs	r2, r0, #0
 800d586:	d001      	beq.n	800d58c <main+0x430>
 800d588:	b672      	cpsid	i
	while (1) {
 800d58a:	e7fe      	b.n	800d58a <main+0x42e>
  sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
 800d58c:	2340      	movs	r3, #64	; 0x40
  sConfigOC.Pulse = 0;
 800d58e:	9082      	str	r0, [sp, #520]	; 0x208
  sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
 800d590:	9381      	str	r3, [sp, #516]	; 0x204
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d592:	9085      	str	r0, [sp, #532]	; 0x214
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800d594:	3b3e      	subs	r3, #62	; 0x3e
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d596:	0028      	movs	r0, r5
 800d598:	a981      	add	r1, sp, #516	; 0x204
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800d59a:	9383      	str	r3, [sp, #524]	; 0x20c
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d59c:	f004 f91e 	bl	80117dc <HAL_TIM_OC_ConfigChannel>
 800d5a0:	1e06      	subs	r6, r0, #0
 800d5a2:	d001      	beq.n	800d5a8 <main+0x44c>
 800d5a4:	b672      	cpsid	i
	while (1) {
 800d5a6:	e7fe      	b.n	800d5a6 <main+0x44a>
  HAL_TIM_MspPostInit(&htim3);
 800d5a8:	0028      	movs	r0, r5
 800d5aa:	f001 f98f 	bl	800e8cc <HAL_TIM_MspPostInit>
  MX_USB_DEVICE_Init();
 800d5ae:	f009 feb1 	bl	8017314 <MX_USB_DEVICE_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d5b2:	2208      	movs	r2, #8
 800d5b4:	0031      	movs	r1, r6
 800d5b6:	a881      	add	r0, sp, #516	; 0x204
 800d5b8:	f00b f847 	bl	801864a <memset>
  htim6.Instance = TIM6;
 800d5bc:	4cc3      	ldr	r4, [pc, #780]	; (800d8cc <main+0x770>)
 800d5be:	4bc4      	ldr	r3, [pc, #784]	; (800d8d0 <main+0x774>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d5c0:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 800d5c2:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 47;
 800d5c4:	232f      	movs	r3, #47	; 0x2f
 800d5c6:	6063      	str	r3, [r4, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d5c8:	3351      	adds	r3, #81	; 0x51
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d5ca:	60a6      	str	r6, [r4, #8]
  htim6.Init.Period = 65535;
 800d5cc:	60e7      	str	r7, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d5ce:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d5d0:	f004 f84c 	bl	801166c <HAL_TIM_Base_Init>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d001      	beq.n	800d5dc <main+0x480>
 800d5d8:	b672      	cpsid	i
	while (1) {
 800d5da:	e7fe      	b.n	800d5da <main+0x47e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5dc:	9081      	str	r0, [sp, #516]	; 0x204
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5de:	9082      	str	r0, [sp, #520]	; 0x208
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d5e0:	a981      	add	r1, sp, #516	; 0x204
 800d5e2:	0020      	movs	r0, r4
 800d5e4:	f004 fb92 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 800d5e8:	1e06      	subs	r6, r0, #0
 800d5ea:	d001      	beq.n	800d5f0 <main+0x494>
 800d5ec:	b672      	cpsid	i
	while (1) {
 800d5ee:	e7fe      	b.n	800d5ee <main+0x492>
	HAL_TIM_Base_Start_IT(&htim1);
 800d5f0:	4fb8      	ldr	r7, [pc, #736]	; (800d8d4 <main+0x778>)
 800d5f2:	0038      	movs	r0, r7
 800d5f4:	f003 fef6 	bl	80113e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800d5f8:	0031      	movs	r1, r6
 800d5fa:	0038      	movs	r0, r7
 800d5fc:	f004 fb10 	bl	8011c20 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 800d600:	2104      	movs	r1, #4
 800d602:	0038      	movs	r0, r7
 800d604:	f004 fb0c 	bl	8011c20 <HAL_TIM_IC_Start_IT>
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 800d608:	0031      	movs	r1, r6
 800d60a:	0028      	movs	r0, r5
 800d60c:	f004 faa4 	bl	8011b58 <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim6); //timer using for delay in LCD
 800d610:	0020      	movs	r0, r4
 800d612:	f003 feb9 	bl	8011388 <HAL_TIM_Base_Start>
	LCD_Init();
 800d616:	f006 ff27 	bl	8014468 <LCD_Init>
	W5500_init(); //if this line error -> check power of ethernet
 800d61a:	f7fd fdbb 	bl	800b194 <W5500_init>
	LCD_Clear();
 800d61e:	f006 fedf 	bl	80143e0 <LCD_Clear>
	temp = FLASH_ReadVDRLZ();
 800d622:	a80a      	add	r0, sp, #40	; 0x28
 800d624:	f005 fb2c 	bl	8012c80 <FLASH_ReadVDRLZ>
 800d628:	a90a      	add	r1, sp, #40	; 0x28
 800d62a:	2214      	movs	r2, #20
 800d62c:	a881      	add	r0, sp, #516	; 0x204
 800d62e:	f00b f803 	bl	8018638 <memcpy>
	if (temp.D == 0xFFFFFFFF && temp.L == 0xFFFFFFFF && isnanf(temp.R)
 800d632:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d634:	9d82      	ldr	r5, [sp, #520]	; 0x208
 800d636:	1c19      	adds	r1, r3, #0
 800d638:	1c18      	adds	r0, r3, #0
 800d63a:	9c84      	ldr	r4, [sp, #528]	; 0x210
 800d63c:	9302      	str	r3, [sp, #8]
 800d63e:	f7fb f975 	bl	800892c <__aeabi_fcmpun>
 800d642:	2800      	cmp	r0, #0
 800d644:	d01a      	beq.n	800d67c <main+0x520>
			&& temp.V == 0xFFFFFFFF && isnanf(temp.Z)) {
 800d646:	0023      	movs	r3, r4
 800d648:	9a81      	ldr	r2, [sp, #516]	; 0x204
 800d64a:	402b      	ands	r3, r5
 800d64c:	4013      	ands	r3, r2
 800d64e:	9202      	str	r2, [sp, #8]
 800d650:	3301      	adds	r3, #1
 800d652:	d113      	bne.n	800d67c <main+0x520>
 800d654:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800d656:	1c19      	adds	r1, r3, #0
 800d658:	1c18      	adds	r0, r3, #0
 800d65a:	9302      	str	r3, [sp, #8]
 800d65c:	f7fb f966 	bl	800892c <__aeabi_fcmpun>
 800d660:	2800      	cmp	r0, #0
 800d662:	d00b      	beq.n	800d67c <main+0x520>
		temp.V = 20;
 800d664:	2314      	movs	r3, #20
		temp.L = 15;
 800d666:	220f      	movs	r2, #15
		temp.V = 20;
 800d668:	9381      	str	r3, [sp, #516]	; 0x204
		temp.D = 50;
 800d66a:	331e      	adds	r3, #30
 800d66c:	9382      	str	r3, [sp, #520]	; 0x208
		temp.R = 1.2;
 800d66e:	4b9a      	ldr	r3, [pc, #616]	; (800d8d8 <main+0x77c>)
		FLASH_WriteVDRLZ(&temp);
 800d670:	a881      	add	r0, sp, #516	; 0x204
		temp.R = 1.2;
 800d672:	9383      	str	r3, [sp, #524]	; 0x20c
		temp.L = 15;
 800d674:	9284      	str	r2, [sp, #528]	; 0x210
		temp.Z = 1.2;
 800d676:	9385      	str	r3, [sp, #532]	; 0x214
		FLASH_WriteVDRLZ(&temp);
 800d678:	f005 faf0 	bl	8012c5c <FLASH_WriteVDRLZ>
	app_GetCalibValue(MEASUREMENT_1);
 800d67c:	2001      	movs	r0, #1
 800d67e:	f7fe fa27 	bl	800bad0 <app_GetCalibValue>
	if ((mcalibValue.X1 == 0) && (mcalibValue.X2 == 0) && (mcalibValue.Y1 == 0)
 800d682:	4c96      	ldr	r4, [pc, #600]	; (800d8dc <main+0x780>)
 800d684:	4d96      	ldr	r5, [pc, #600]	; (800d8e0 <main+0x784>)
 800d686:	7862      	ldrb	r2, [r4, #1]
 800d688:	7821      	ldrb	r1, [r4, #0]
 800d68a:	0212      	lsls	r2, r2, #8
 800d68c:	78a3      	ldrb	r3, [r4, #2]
 800d68e:	4311      	orrs	r1, r2
 800d690:	78e2      	ldrb	r2, [r4, #3]
 800d692:	041b      	lsls	r3, r3, #16
 800d694:	430b      	orrs	r3, r1
 800d696:	0612      	lsls	r2, r2, #24
 800d698:	7a60      	ldrb	r0, [r4, #9]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	7a22      	ldrb	r2, [r4, #8]
 800d69e:	7aa1      	ldrb	r1, [r4, #10]
 800d6a0:	0200      	lsls	r0, r0, #8
 800d6a2:	4310      	orrs	r0, r2
 800d6a4:	7ae2      	ldrb	r2, [r4, #11]
 800d6a6:	0409      	lsls	r1, r1, #16
 800d6a8:	4308      	orrs	r0, r1
 800d6aa:	0612      	lsls	r2, r2, #24
 800d6ac:	4302      	orrs	r2, r0
 800d6ae:	7960      	ldrb	r0, [r4, #5]
			&& (mcalibValue.Y2 == 0) && (mcalibValue.Z == 0)) {
 800d6b0:	4313      	orrs	r3, r2
	if ((mcalibValue.X1 == 0) && (mcalibValue.X2 == 0) && (mcalibValue.Y1 == 0)
 800d6b2:	7922      	ldrb	r2, [r4, #4]
 800d6b4:	79a1      	ldrb	r1, [r4, #6]
 800d6b6:	0200      	lsls	r0, r0, #8
 800d6b8:	4310      	orrs	r0, r2
 800d6ba:	79e2      	ldrb	r2, [r4, #7]
 800d6bc:	0409      	lsls	r1, r1, #16
 800d6be:	4308      	orrs	r0, r1
 800d6c0:	0612      	lsls	r2, r2, #24
 800d6c2:	4302      	orrs	r2, r0
			&& (mcalibValue.Y2 == 0) && (mcalibValue.Z == 0)) {
 800d6c4:	7b60      	ldrb	r0, [r4, #13]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	7b22      	ldrb	r2, [r4, #12]
 800d6ca:	7ba1      	ldrb	r1, [r4, #14]
 800d6cc:	0200      	lsls	r0, r0, #8
 800d6ce:	4310      	orrs	r0, r2
 800d6d0:	7be2      	ldrb	r2, [r4, #15]
 800d6d2:	0409      	lsls	r1, r1, #16
 800d6d4:	4308      	orrs	r0, r1
 800d6d6:	0612      	lsls	r2, r2, #24
 800d6d8:	4302      	orrs	r2, r0
 800d6da:	7c60      	ldrb	r0, [r4, #17]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	7c22      	ldrb	r2, [r4, #16]
 800d6e0:	7ca1      	ldrb	r1, [r4, #18]
 800d6e2:	0200      	lsls	r0, r0, #8
 800d6e4:	4310      	orrs	r0, r2
 800d6e6:	7ce2      	ldrb	r2, [r4, #19]
 800d6e8:	0409      	lsls	r1, r1, #16
 800d6ea:	4308      	orrs	r0, r1
 800d6ec:	0612      	lsls	r2, r2, #24
 800d6ee:	4302      	orrs	r2, r0
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	4e7c      	ldr	r6, [pc, #496]	; (800d8e4 <main+0x788>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d000      	beq.n	800d6fc <main+0x5a0>
 800d6fa:	e0d4      	b.n	800d8a6 <main+0x74a>
		mledStatus.led1 = _OFF;
 800d6fc:	702b      	strb	r3, [r5, #0]
		calibStatus_1 = CALIBRESET;
 800d6fe:	7032      	strb	r2, [r6, #0]
	app_GetCalibValue(MEASUREMENT_2);
 800d700:	2002      	movs	r0, #2
 800d702:	f7fe f9e5 	bl	800bad0 <app_GetCalibValue>
	if ((mcalibValue.X1 == 0) && (mcalibValue.X2 == 0) && (mcalibValue.Y1 == 0)
 800d706:	7862      	ldrb	r2, [r4, #1]
 800d708:	7821      	ldrb	r1, [r4, #0]
 800d70a:	0212      	lsls	r2, r2, #8
 800d70c:	78a3      	ldrb	r3, [r4, #2]
 800d70e:	4311      	orrs	r1, r2
 800d710:	78e2      	ldrb	r2, [r4, #3]
 800d712:	041b      	lsls	r3, r3, #16
 800d714:	430b      	orrs	r3, r1
 800d716:	0612      	lsls	r2, r2, #24
 800d718:	7a60      	ldrb	r0, [r4, #9]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	7a22      	ldrb	r2, [r4, #8]
 800d71e:	7aa1      	ldrb	r1, [r4, #10]
 800d720:	0200      	lsls	r0, r0, #8
 800d722:	4310      	orrs	r0, r2
 800d724:	7ae2      	ldrb	r2, [r4, #11]
 800d726:	0409      	lsls	r1, r1, #16
 800d728:	4308      	orrs	r0, r1
 800d72a:	0612      	lsls	r2, r2, #24
 800d72c:	4302      	orrs	r2, r0
 800d72e:	7960      	ldrb	r0, [r4, #5]
			&& (mcalibValue.Y2 == 0) && (mcalibValue.Z == 0)) {
 800d730:	4313      	orrs	r3, r2
	if ((mcalibValue.X1 == 0) && (mcalibValue.X2 == 0) && (mcalibValue.Y1 == 0)
 800d732:	7922      	ldrb	r2, [r4, #4]
 800d734:	79a1      	ldrb	r1, [r4, #6]
 800d736:	0200      	lsls	r0, r0, #8
 800d738:	4310      	orrs	r0, r2
 800d73a:	79e2      	ldrb	r2, [r4, #7]
 800d73c:	0409      	lsls	r1, r1, #16
 800d73e:	4308      	orrs	r0, r1
 800d740:	0612      	lsls	r2, r2, #24
 800d742:	4302      	orrs	r2, r0
			&& (mcalibValue.Y2 == 0) && (mcalibValue.Z == 0)) {
 800d744:	7b60      	ldrb	r0, [r4, #13]
 800d746:	4313      	orrs	r3, r2
 800d748:	7b22      	ldrb	r2, [r4, #12]
 800d74a:	7ba1      	ldrb	r1, [r4, #14]
 800d74c:	0200      	lsls	r0, r0, #8
 800d74e:	4310      	orrs	r0, r2
 800d750:	7be2      	ldrb	r2, [r4, #15]
 800d752:	0409      	lsls	r1, r1, #16
 800d754:	4308      	orrs	r0, r1
 800d756:	0612      	lsls	r2, r2, #24
 800d758:	4302      	orrs	r2, r0
 800d75a:	7c60      	ldrb	r0, [r4, #17]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	7c22      	ldrb	r2, [r4, #16]
 800d760:	7ca1      	ldrb	r1, [r4, #18]
 800d762:	0200      	lsls	r0, r0, #8
 800d764:	4310      	orrs	r0, r2
 800d766:	7ce2      	ldrb	r2, [r4, #19]
 800d768:	0409      	lsls	r1, r1, #16
 800d76a:	4308      	orrs	r0, r1
 800d76c:	0612      	lsls	r2, r2, #24
 800d76e:	4302      	orrs	r2, r0
 800d770:	4313      	orrs	r3, r2
 800d772:	2101      	movs	r1, #1
 800d774:	4a5c      	ldr	r2, [pc, #368]	; (800d8e8 <main+0x78c>)
 800d776:	2b00      	cmp	r3, #0
 800d778:	d000      	beq.n	800d77c <main+0x620>
 800d77a:	e098      	b.n	800d8ae <main+0x752>
		mledStatus.led2 = _OFF;
 800d77c:	706b      	strb	r3, [r5, #1]
		calibStatus_2 = CALIBRESET;
 800d77e:	7011      	strb	r1, [r2, #0]
	io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800d780:	786a      	ldrb	r2, [r5, #1]
 800d782:	782b      	ldrb	r3, [r5, #0]
 800d784:	78a8      	ldrb	r0, [r5, #2]
 800d786:	0212      	lsls	r2, r2, #8
 800d788:	4313      	orrs	r3, r2
 800d78a:	0400      	lsls	r0, r0, #16
 800d78c:	4957      	ldr	r1, [pc, #348]	; (800d8ec <main+0x790>)
 800d78e:	4318      	orrs	r0, r3
 800d790:	f00a f8da 	bl	8017948 <io_setLedStatus>
	app_GotoMainScreen(calibStatus_1, MEASUREMENT_1, NOT_SHOW_SET_CALIB);
 800d794:	2200      	movs	r2, #0
 800d796:	2101      	movs	r1, #1
 800d798:	7830      	ldrb	r0, [r6, #0]
 800d79a:	b2c0      	uxtb	r0, r0
 800d79c:	f7fd fe6c 	bl	800b478 <app_GotoMainScreen>
		minput = io_getInput();
 800d7a0:	f7fd fc5e 	bl	800b060 <io_getInput>
 800d7a4:	4b52      	ldr	r3, [pc, #328]	; (800d8f0 <main+0x794>)
 800d7a6:	0402      	lsls	r2, r0, #16
 800d7a8:	7018      	strb	r0, [r3, #0]
 800d7aa:	0200      	lsls	r0, r0, #8
 800d7ac:	0e12      	lsrs	r2, r2, #24
		mbutton = io_getButton();
 800d7ae:	4d51      	ldr	r5, [pc, #324]	; (800d8f4 <main+0x798>)
		minput = io_getInput();
 800d7b0:	0e00      	lsrs	r0, r0, #24
 800d7b2:	705a      	strb	r2, [r3, #1]
 800d7b4:	7098      	strb	r0, [r3, #2]
		mbutton = io_getButton();
 800d7b6:	a808      	add	r0, sp, #32
 800d7b8:	f00a f82a 	bl	8017810 <io_getButton>
 800d7bc:	2205      	movs	r2, #5
 800d7be:	0028      	movs	r0, r5
 800d7c0:	a908      	add	r1, sp, #32
 800d7c2:	f00a ff39 	bl	8018638 <memcpy>
		if (menuScreenFlag) {
 800d7c6:	4b4c      	ldr	r3, [pc, #304]	; (800d8f8 <main+0x79c>)
 800d7c8:	781a      	ldrb	r2, [r3, #0]
 800d7ca:	2a00      	cmp	r2, #0
 800d7cc:	d100      	bne.n	800d7d0 <main+0x674>
 800d7ce:	e098      	b.n	800d902 <main+0x7a6>
			menuScreenFlag = 0;
 800d7d0:	2700      	movs	r7, #0
 800d7d2:	701f      	strb	r7, [r3, #0]
	optionScreen_e_t optionIndex = measurement1Setting;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	ac81      	add	r4, sp, #516	; 0x204
	screen_OptionMenu(&optionIndex);
 800d7d8:	0020      	movs	r0, r4
	optionScreen_e_t optionIndex = measurement1Setting;
 800d7da:	7023      	strb	r3, [r4, #0]
	screen_OptionMenu(&optionIndex);
 800d7dc:	f00a fcb2 	bl	8018144 <screen_OptionMenu>
		mbutton = io_getButton();
 800d7e0:	a808      	add	r0, sp, #32
 800d7e2:	f00a f815 	bl	8017810 <io_getButton>
 800d7e6:	2205      	movs	r2, #5
 800d7e8:	0028      	movs	r0, r5
 800d7ea:	a908      	add	r1, sp, #32
 800d7ec:	f00a ff24 	bl	8018638 <memcpy>
		if (mbutton.next == _ON) {
 800d7f0:	78eb      	ldrb	r3, [r5, #3]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d110      	bne.n	800d818 <main+0x6bc>
			while (_ON == io_getButton().next)
 800d7f6:	ae1f      	add	r6, sp, #124	; 0x7c
 800d7f8:	0030      	movs	r0, r6
 800d7fa:	f00a f809 	bl	8017810 <io_getButton>
 800d7fe:	78f3      	ldrb	r3, [r6, #3]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d0f8      	beq.n	800d7f6 <main+0x69a>
				optionIndex = measurement2HisList;
 800d804:	2309      	movs	r3, #9
			if (inMeasHis) {
 800d806:	2f00      	cmp	r7, #0
 800d808:	d102      	bne.n	800d810 <main+0x6b4>
				optionIndex++;
 800d80a:	7823      	ldrb	r3, [r4, #0]
 800d80c:	3301      	adds	r3, #1
 800d80e:	b2db      	uxtb	r3, r3
			screen_OptionMenu(&optionIndex);
 800d810:	0020      	movs	r0, r4
 800d812:	7023      	strb	r3, [r4, #0]
 800d814:	f00a fc96 	bl	8018144 <screen_OptionMenu>
		if (mbutton.prev == _ON) {
 800d818:	792b      	ldrb	r3, [r5, #4]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d110      	bne.n	800d840 <main+0x6e4>
			while (_ON == io_getButton().prev)
 800d81e:	ae1d      	add	r6, sp, #116	; 0x74
 800d820:	0030      	movs	r0, r6
 800d822:	f009 fff5 	bl	8017810 <io_getButton>
 800d826:	7933      	ldrb	r3, [r6, #4]
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d0f8      	beq.n	800d81e <main+0x6c2>
				optionIndex = measurement1HisList;
 800d82c:	2308      	movs	r3, #8
			if (inMeasHis) {
 800d82e:	2f00      	cmp	r7, #0
 800d830:	d102      	bne.n	800d838 <main+0x6dc>
				optionIndex--;
 800d832:	7823      	ldrb	r3, [r4, #0]
 800d834:	3b01      	subs	r3, #1
 800d836:	b2db      	uxtb	r3, r3
			screen_OptionMenu(&optionIndex);
 800d838:	0020      	movs	r0, r4
 800d83a:	7023      	strb	r3, [r4, #0]
 800d83c:	f00a fc82 	bl	8018144 <screen_OptionMenu>
		if (mbutton.set == _ON) {
 800d840:	782b      	ldrb	r3, [r5, #0]
 800d842:	b2de      	uxtb	r6, r3
 800d844:	2b01      	cmp	r3, #1
 800d846:	d111      	bne.n	800d86c <main+0x710>
			while (_ON == io_getButton().set)
 800d848:	a81b      	add	r0, sp, #108	; 0x6c
 800d84a:	f009 ffe1 	bl	8017810 <io_getButton>
 800d84e:	2254      	movs	r2, #84	; 0x54
 800d850:	ab06      	add	r3, sp, #24
 800d852:	189b      	adds	r3, r3, r2
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d0f6      	beq.n	800d848 <main+0x6ec>
			if (optionIndex == measurementHis) {
 800d85a:	7823      	ldrb	r3, [r4, #0]
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	d106      	bne.n	800d86e <main+0x712>
				optionIndex = measurement1HisList;
 800d860:	3305      	adds	r3, #5
				screen_OptionMenu(&optionIndex);
 800d862:	0020      	movs	r0, r4
				optionIndex = measurement1HisList;
 800d864:	7023      	strb	r3, [r4, #0]
				screen_OptionMenu(&optionIndex);
 800d866:	f00a fc6d 	bl	8018144 <screen_OptionMenu>
				inMeasHis = 1;
 800d86a:	0037      	movs	r7, r6
 800d86c:	2600      	movs	r6, #0
		if (mbutton.menu == _ON) {
 800d86e:	78ab      	ldrb	r3, [r5, #2]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d120      	bne.n	800d8b6 <main+0x75a>
			while (_ON == io_getButton().menu)
 800d874:	ae19      	add	r6, sp, #100	; 0x64
 800d876:	0030      	movs	r0, r6
 800d878:	f009 ffca 	bl	8017810 <io_getButton>
 800d87c:	78b3      	ldrb	r3, [r6, #2]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d0f8      	beq.n	800d874 <main+0x718>
			optionIndex = measurement1Setting; //go to mainscreen
 800d882:	2301      	movs	r3, #1
 800d884:	7023      	strb	r3, [r4, #0]
	return optionIndex;
 800d886:	7823      	ldrb	r3, [r4, #0]
	switch (optionMenu) {
 800d888:	1e58      	subs	r0, r3, #1
	return optionIndex;
 800d88a:	9303      	str	r3, [sp, #12]
	switch (optionMenu) {
 800d88c:	2808      	cmp	r0, #8
 800d88e:	d838      	bhi.n	800d902 <main+0x7a6>
 800d890:	f7fa f8e0 	bl	8007a54 <__gnu_thumb1_case_uhi>
 800d894:	0014028b 	.word	0x0014028b
 800d898:	00a20037 	.word	0x00a20037
 800d89c:	05fc0322 	.word	0x05fc0322
 800d8a0:	00340037 	.word	0x00340037
 800d8a4:	00a0      	.short	0x00a0
		calibStatus_1 = CALIBSET;
 800d8a6:	2300      	movs	r3, #0
		mledStatus.led1 = _ON;
 800d8a8:	702a      	strb	r2, [r5, #0]
		calibStatus_1 = CALIBSET;
 800d8aa:	7033      	strb	r3, [r6, #0]
 800d8ac:	e728      	b.n	800d700 <main+0x5a4>
		calibStatus_2 = CALIBSET;
 800d8ae:	2300      	movs	r3, #0
		mledStatus.led2 = _ON;
 800d8b0:	7069      	strb	r1, [r5, #1]
		calibStatus_2 = CALIBSET;
 800d8b2:	7013      	strb	r3, [r2, #0]
 800d8b4:	e764      	b.n	800d780 <main+0x624>
	} while (exit == 0);
 800d8b6:	2e00      	cmp	r6, #0
 800d8b8:	d092      	beq.n	800d7e0 <main+0x684>
 800d8ba:	e7e4      	b.n	800d886 <main+0x72a>
		app_GotoMainScreen(calibStatus_2, MEASUREMENT_2, NOT_SHOW_SET_CALIB);
 800d8bc:	2200      	movs	r2, #0
 800d8be:	2102      	movs	r1, #2
 800d8c0:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <main+0x78c>)
 800d8c2:	7818      	ldrb	r0, [r3, #0]
 800d8c4:	b2c0      	uxtb	r0, r0
	app_GotoMainScreen(calibStatus_1, MEASUREMENT_1, NOT_SHOW_SET_CALIB);
 800d8c6:	f7fd fdd7 	bl	800b478 <app_GotoMainScreen>
}
 800d8ca:	e01a      	b.n	800d902 <main+0x7a6>
 800d8cc:	200004cc 	.word	0x200004cc
 800d8d0:	40001000 	.word	0x40001000
 800d8d4:	2000043c 	.word	0x2000043c
 800d8d8:	3f99999a 	.word	0x3f99999a
 800d8dc:	200005a3 	.word	0x200005a3
 800d8e0:	200005d0 	.word	0x200005d0
 800d8e4:	2000034a 	.word	0x2000034a
 800d8e8:	2000034b 	.word	0x2000034b
 800d8ec:	200005fc 	.word	0x200005fc
 800d8f0:	200005cd 	.word	0x200005cd
 800d8f4:	2000059e 	.word	0x2000059e
 800d8f8:	200005cc 	.word	0x200005cc
		app_HisValue(MEASUREMENT_1);
 800d8fc:	2001      	movs	r0, #1
		app_HisValue(MEASUREMENT_2);
 800d8fe:	f7fd fe75 	bl	800b5ec <app_HisValue>
		if (_ON == minput.in0) {
 800d902:	4ba1      	ldr	r3, [pc, #644]	; (800db88 <main+0xa2c>)
 800d904:	781a      	ldrb	r2, [r3, #0]
 800d906:	2a01      	cmp	r2, #1
 800d908:	d001      	beq.n	800d90e <main+0x7b2>
 800d90a:	f000 fdd5 	bl	800e4b8 <main+0x135c>
			minput.in0 = _OFF;
 800d90e:	2200      	movs	r2, #0
			app_Measurement(MEASUREMENT_1); //measurement 1
 800d910:	2001      	movs	r0, #1
			minput.in0 = _OFF;
 800d912:	701a      	strb	r2, [r3, #0]
			app_Measurement(MEASUREMENT_2); //measurement 2
 800d914:	f7ff f854 	bl	800c9c0 <app_Measurement>
		if (_ON == mbutton.reset || GET_IN3 == 0) { //reset datacalib
 800d918:	4b9c      	ldr	r3, [pc, #624]	; (800db8c <main+0xa30>)
 800d91a:	785b      	ldrb	r3, [r3, #1]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d004      	beq.n	800d92a <main+0x7ce>
 800d920:	4b9b      	ldr	r3, [pc, #620]	; (800db90 <main+0xa34>)
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	05db      	lsls	r3, r3, #23
 800d926:	d500      	bpl.n	800d92a <main+0x7ce>
 800d928:	e73a      	b.n	800d7a0 <main+0x644>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800d92a:	2300      	movs	r3, #0
 800d92c:	4c99      	ldr	r4, [pc, #612]	; (800db94 <main+0xa38>)
	overflow = 0;
 800d92e:	4d9a      	ldr	r5, [pc, #616]	; (800db98 <main+0xa3c>)
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800d930:	6822      	ldr	r2, [r4, #0]
 800d932:	6253      	str	r3, [r2, #36]	; 0x24
	overflow = 0;
 800d934:	602b      	str	r3, [r5, #0]
			while (io_getButton().reset == _ON)
 800d936:	ae17      	add	r6, sp, #92	; 0x5c
 800d938:	0030      	movs	r0, r6
 800d93a:	f009 ff69 	bl	8017810 <io_getButton>
 800d93e:	7873      	ldrb	r3, [r6, #1]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d0f8      	beq.n	800d936 <main+0x7da>
					(overflow - 1) * MAX_PERIOD + __HAL_TIM_GET_COUNTER(&htim1);
 800d944:	6822      	ldr	r2, [r4, #0]
 800d946:	682b      	ldr	r3, [r5, #0]
 800d948:	6a51      	ldr	r1, [r2, #36]	; 0x24
			if (GET_IN3 == 0
 800d94a:	4a91      	ldr	r2, [pc, #580]	; (800db90 <main+0xa34>)
 800d94c:	6912      	ldr	r2, [r2, #16]
 800d94e:	05d2      	lsls	r2, r2, #23
 800d950:	d50a      	bpl.n	800d968 <main+0x80c>
					(overflow - 1) * MAX_PERIOD + __HAL_TIM_GET_COUNTER(&htim1);
 800d952:	1e5a      	subs	r2, r3, #1
 800d954:	68e3      	ldr	r3, [r4, #12]
 800d956:	4353      	muls	r3, r2
							&& __time < TIMER_RESET_CALIB)) {
 800d958:	4a90      	ldr	r2, [pc, #576]	; (800db9c <main+0xa40>)
					(overflow - 1) * MAX_PERIOD + __HAL_TIM_GET_COUNTER(&htim1);
 800d95a:	185b      	adds	r3, r3, r1
							&& __time < TIMER_RESET_CALIB)) {
 800d95c:	1899      	adds	r1, r3, r2
					|| (__time >= TIMER_CLEAR_MEAS_WRONG_POS
 800d95e:	4a90      	ldr	r2, [pc, #576]	; (800dba0 <main+0xa44>)
 800d960:	4291      	cmp	r1, r2
 800d962:	d901      	bls.n	800d968 <main+0x80c>
 800d964:	f000 fde8 	bl	800e538 <main+0x13dc>
				if (mainScreenFlag == MEASUREMENT_1 && meas1WrongPos == 1) {
 800d968:	4b8e      	ldr	r3, [pc, #568]	; (800dba4 <main+0xa48>)
 800d96a:	781a      	ldrb	r2, [r3, #0]
 800d96c:	2a01      	cmp	r2, #1
 800d96e:	d001      	beq.n	800d974 <main+0x818>
 800d970:	f000 fdac 	bl	800e4cc <main+0x1370>
 800d974:	4a8c      	ldr	r2, [pc, #560]	; (800dba8 <main+0xa4c>)
 800d976:	7811      	ldrb	r1, [r2, #0]
 800d978:	2901      	cmp	r1, #1
 800d97a:	d001      	beq.n	800d980 <main+0x824>
 800d97c:	f000 fda6 	bl	800e4cc <main+0x1370>
					meas1WrongPos = 0;
 800d980:	2400      	movs	r4, #0
					moutput.out2 = _OFF;
 800d982:	4b8a      	ldr	r3, [pc, #552]	; (800dbac <main+0xa50>)
					meas1WrongPos = 0;
 800d984:	7014      	strb	r4, [r2, #0]
					io_setOutput(moutput, ucRegCoilsBuf);
 800d986:	7858      	ldrb	r0, [r3, #1]
 800d988:	781a      	ldrb	r2, [r3, #0]
 800d98a:	0200      	lsls	r0, r0, #8
 800d98c:	4310      	orrs	r0, r2
 800d98e:	795a      	ldrb	r2, [r3, #5]
 800d990:	7919      	ldrb	r1, [r3, #4]
 800d992:	799e      	ldrb	r6, [r3, #6]
 800d994:	0212      	lsls	r2, r2, #8
 800d996:	430a      	orrs	r2, r1
 800d998:	79d9      	ldrb	r1, [r3, #7]
 800d99a:	4d85      	ldr	r5, [pc, #532]	; (800dbb0 <main+0xa54>)
 800d99c:	0436      	lsls	r6, r6, #16
 800d99e:	4332      	orrs	r2, r6
 800d9a0:	0609      	lsls	r1, r1, #24
 800d9a2:	4311      	orrs	r1, r2
 800d9a4:	002a      	movs	r2, r5
					moutput.out2 = _OFF;
 800d9a6:	709c      	strb	r4, [r3, #2]
					moutput.out3 = _OFF;
 800d9a8:	70dc      	strb	r4, [r3, #3]
					io_setOutput(moutput, ucRegCoilsBuf);
 800d9aa:	f009 ff6f 	bl	801788c <io_setOutput>
					if (calibStatus_1 == CALIBSET)
 800d9ae:	4b81      	ldr	r3, [pc, #516]	; (800dbb4 <main+0xa58>)
 800d9b0:	4981      	ldr	r1, [pc, #516]	; (800dbb8 <main+0xa5c>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800d9b4:	7888      	ldrb	r0, [r1, #2]
					if (calibStatus_1 == CALIBSET)
 800d9b6:	425a      	negs	r2, r3
 800d9b8:	4153      	adcs	r3, r2
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800d9ba:	784a      	ldrb	r2, [r1, #1]
 800d9bc:	700b      	strb	r3, [r1, #0]
 800d9be:	0212      	lsls	r2, r2, #8
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	0400      	lsls	r0, r0, #16
 800d9c4:	0029      	movs	r1, r5
 800d9c6:	4318      	orrs	r0, r3
 800d9c8:	f009 ffbe 	bl	8017948 <io_setLedStatus>
					app_GotoMainScreen(CALIBSET, MEASUREMENT_1,
 800d9cc:	0022      	movs	r2, r4
 800d9ce:	2101      	movs	r1, #1
					app_GotoMainScreen(CALIBSET, MEASUREMENT_2,
 800d9d0:	0020      	movs	r0, r4
 800d9d2:	e6e3      	b.n	800d79c <main+0x640>
		app_HisValue(MEASUREMENT_2);
 800d9d4:	2002      	movs	r0, #2
 800d9d6:	e792      	b.n	800d8fe <main+0x7a2>
	VDRLZ_Input buffer = FLASH_ReadVDRLZ();
 800d9d8:	0020      	movs	r0, r4
 800d9da:	f005 f951 	bl	8012c80 <FLASH_ReadVDRLZ>
	VDRLZ_CycleSet cycle = V_set;
 800d9de:	2300      	movs	r3, #0
		if (cycle == V_set) {
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d000      	beq.n	800d9e6 <main+0x88a>
 800d9e4:	e0ea      	b.n	800dbbc <main+0xa60>
			screen_setVDRLZ(buffer, V_set);
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800d9ea:	9881      	ldr	r0, [sp, #516]	; 0x204
 800d9ec:	9302      	str	r3, [sp, #8]
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	9982      	ldr	r1, [sp, #520]	; 0x208
 800d9f2:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800d9f4:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800d9f6:	f00a fc4d 	bl	8018294 <screen_setVDRLZ>
				mbutton = io_getButton();
 800d9fa:	4c64      	ldr	r4, [pc, #400]	; (800db8c <main+0xa30>)
 800d9fc:	a808      	add	r0, sp, #32
 800d9fe:	f009 ff07 	bl	8017810 <io_getButton>
 800da02:	2205      	movs	r2, #5
 800da04:	0020      	movs	r0, r4
 800da06:	a908      	add	r1, sp, #32
 800da08:	f00a fe16 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800da0c:	7823      	ldrb	r3, [r4, #0]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d116      	bne.n	800da40 <main+0x8e4>
					while (_ON == io_getButton().set)
 800da12:	ad4d      	add	r5, sp, #308	; 0x134
 800da14:	0028      	movs	r0, r5
 800da16:	f009 fefb 	bl	8017810 <io_getButton>
 800da1a:	782b      	ldrb	r3, [r5, #0]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d0f8      	beq.n	800da12 <main+0x8b6>
					buffer.V += 1;
 800da20:	9b81      	ldr	r3, [sp, #516]	; 0x204
					screen_setVDRLZ(buffer, V_set);
 800da22:	9982      	ldr	r1, [sp, #520]	; 0x208
					buffer.V += 1;
 800da24:	1c58      	adds	r0, r3, #1
					screen_setVDRLZ(buffer, V_set);
 800da26:	2300      	movs	r3, #0
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800da2c:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800da2e:	9302      	str	r3, [sp, #8]
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	9b84      	ldr	r3, [sp, #528]	; 0x210
					buffer.V += 1;
 800da34:	9081      	str	r0, [sp, #516]	; 0x204
					screen_setVDRLZ(buffer, V_set);
 800da36:	f00a fc2d 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800da3a:	2064      	movs	r0, #100	; 0x64
 800da3c:	f001 f894 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.reset) {
 800da40:	7863      	ldrb	r3, [r4, #1]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d116      	bne.n	800da74 <main+0x918>
					while (_ON == io_getButton().reset)
 800da46:	ad4b      	add	r5, sp, #300	; 0x12c
 800da48:	0028      	movs	r0, r5
 800da4a:	f009 fee1 	bl	8017810 <io_getButton>
 800da4e:	786b      	ldrb	r3, [r5, #1]
 800da50:	2b01      	cmp	r3, #1
 800da52:	d0f8      	beq.n	800da46 <main+0x8ea>
					buffer.V -= 1;
 800da54:	9b81      	ldr	r3, [sp, #516]	; 0x204
					screen_setVDRLZ(buffer, V_set);
 800da56:	9982      	ldr	r1, [sp, #520]	; 0x208
					buffer.V -= 1;
 800da58:	1e58      	subs	r0, r3, #1
					screen_setVDRLZ(buffer, V_set);
 800da5a:	2300      	movs	r3, #0
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800da60:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800da62:	9302      	str	r3, [sp, #8]
 800da64:	9300      	str	r3, [sp, #0]
 800da66:	9b84      	ldr	r3, [sp, #528]	; 0x210
					buffer.V -= 1;
 800da68:	9081      	str	r0, [sp, #516]	; 0x204
					screen_setVDRLZ(buffer, V_set);
 800da6a:	f00a fc13 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800da6e:	2064      	movs	r0, #100	; 0x64
 800da70:	f001 f87a 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800da74:	78e3      	ldrb	r3, [r4, #3]
 800da76:	b2dd      	uxtb	r5, r3
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d114      	bne.n	800daa6 <main+0x94a>
					while (_ON == io_getButton().next)
 800da7c:	ae49      	add	r6, sp, #292	; 0x124
 800da7e:	0030      	movs	r0, r6
 800da80:	f009 fec6 	bl	8017810 <io_getButton>
 800da84:	78f3      	ldrb	r3, [r6, #3]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d0f8      	beq.n	800da7c <main+0x920>
				if (_ON == mbutton.menu) {
 800da8a:	78a3      	ldrb	r3, [r4, #2]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d10c      	bne.n	800daaa <main+0x94e>
					while (_ON == io_getButton().menu)
 800da90:	ac47      	add	r4, sp, #284	; 0x11c
 800da92:	0020      	movs	r0, r4
 800da94:	f009 febc 	bl	8017810 <io_getButton>
 800da98:	78a3      	ldrb	r3, [r4, #2]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d0f8      	beq.n	800da90 <main+0x934>
		if (cycle == D_set) {
 800da9e:	2d01      	cmp	r5, #1
 800daa0:	d000      	beq.n	800daa4 <main+0x948>
 800daa2:	e17f      	b.n	800dda4 <main+0xc48>
 800daa4:	e004      	b.n	800dab0 <main+0x954>
 800daa6:	2500      	movs	r5, #0
 800daa8:	e7ef      	b.n	800da8a <main+0x92e>
			} while (cycle == V_set);
 800daaa:	2d00      	cmp	r5, #0
 800daac:	d0a5      	beq.n	800d9fa <main+0x89e>
 800daae:	2500      	movs	r5, #0
			screen_setVDRLZ(buffer, D_set);
 800dab0:	2301      	movs	r3, #1
 800dab2:	9301      	str	r3, [sp, #4]
 800dab4:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800dab6:	9881      	ldr	r0, [sp, #516]	; 0x204
 800dab8:	9302      	str	r3, [sp, #8]
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dabe:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800dac0:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800dac2:	f00a fbe7 	bl	8018294 <screen_setVDRLZ>
				mbutton = io_getButton();
 800dac6:	4e31      	ldr	r6, [pc, #196]	; (800db8c <main+0xa30>)
 800dac8:	a808      	add	r0, sp, #32
 800daca:	f009 fea1 	bl	8017810 <io_getButton>
 800dace:	2205      	movs	r2, #5
 800dad0:	0030      	movs	r0, r6
 800dad2:	a908      	add	r1, sp, #32
 800dad4:	f00a fdb0 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800dad8:	7833      	ldrb	r3, [r6, #0]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d116      	bne.n	800db0c <main+0x9b0>
					while (_ON == io_getButton().set)
 800dade:	ac45      	add	r4, sp, #276	; 0x114
 800dae0:	0020      	movs	r0, r4
 800dae2:	f009 fe95 	bl	8017810 <io_getButton>
 800dae6:	7823      	ldrb	r3, [r4, #0]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d0f8      	beq.n	800dade <main+0x982>
					buffer.D += 1;
 800daec:	9b82      	ldr	r3, [sp, #520]	; 0x208
					screen_setVDRLZ(buffer, D_set);
 800daee:	9881      	ldr	r0, [sp, #516]	; 0x204
					buffer.D += 1;
 800daf0:	1c59      	adds	r1, r3, #1
					screen_setVDRLZ(buffer, D_set);
 800daf2:	2301      	movs	r3, #1
 800daf4:	9301      	str	r3, [sp, #4]
 800daf6:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800daf8:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800dafa:	9302      	str	r3, [sp, #8]
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	9b84      	ldr	r3, [sp, #528]	; 0x210
					buffer.D += 1;
 800db00:	9182      	str	r1, [sp, #520]	; 0x208
					screen_setVDRLZ(buffer, D_set);
 800db02:	f00a fbc7 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800db06:	2064      	movs	r0, #100	; 0x64
 800db08:	f001 f82e 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.reset) {
 800db0c:	7873      	ldrb	r3, [r6, #1]
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d116      	bne.n	800db40 <main+0x9e4>
					while (_ON == io_getButton().reset)
 800db12:	ac43      	add	r4, sp, #268	; 0x10c
 800db14:	0020      	movs	r0, r4
 800db16:	f009 fe7b 	bl	8017810 <io_getButton>
 800db1a:	7863      	ldrb	r3, [r4, #1]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d0f8      	beq.n	800db12 <main+0x9b6>
					buffer.D -= 1;
 800db20:	9b82      	ldr	r3, [sp, #520]	; 0x208
					screen_setVDRLZ(buffer, D_set);
 800db22:	9881      	ldr	r0, [sp, #516]	; 0x204
					buffer.D -= 1;
 800db24:	1e59      	subs	r1, r3, #1
					screen_setVDRLZ(buffer, D_set);
 800db26:	2301      	movs	r3, #1
 800db28:	9301      	str	r3, [sp, #4]
 800db2a:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800db2c:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800db2e:	9302      	str	r3, [sp, #8]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	9b84      	ldr	r3, [sp, #528]	; 0x210
					buffer.D -= 1;
 800db34:	9182      	str	r1, [sp, #520]	; 0x208
					screen_setVDRLZ(buffer, D_set);
 800db36:	f00a fbad 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800db3a:	2064      	movs	r0, #100	; 0x64
 800db3c:	f001 f814 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800db40:	2401      	movs	r4, #1
 800db42:	78f3      	ldrb	r3, [r6, #3]
 800db44:	42a3      	cmp	r3, r4
 800db46:	d107      	bne.n	800db58 <main+0x9fc>
					while (_ON == io_getButton().next)
 800db48:	ac41      	add	r4, sp, #260	; 0x104
 800db4a:	0020      	movs	r0, r4
 800db4c:	f009 fe60 	bl	8017810 <io_getButton>
 800db50:	78e3      	ldrb	r3, [r4, #3]
 800db52:	2b01      	cmp	r3, #1
 800db54:	d0f8      	beq.n	800db48 <main+0x9ec>
					cycle = L_set;
 800db56:	2403      	movs	r4, #3
				if (_ON == mbutton.prev) {
 800db58:	7933      	ldrb	r3, [r6, #4]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d107      	bne.n	800db6e <main+0xa12>
					while (_ON == io_getButton().prev)
 800db5e:	ac3f      	add	r4, sp, #252	; 0xfc
 800db60:	0020      	movs	r0, r4
 800db62:	f009 fe55 	bl	8017810 <io_getButton>
 800db66:	7923      	ldrb	r3, [r4, #4]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d0f8      	beq.n	800db5e <main+0xa02>
					cycle = V_set;
 800db6c:	2400      	movs	r4, #0
				if (_ON == mbutton.menu) {
 800db6e:	78b3      	ldrb	r3, [r6, #2]
 800db70:	b2de      	uxtb	r6, r3
 800db72:	2b01      	cmp	r3, #1
 800db74:	d000      	beq.n	800db78 <main+0xa1c>
 800db76:	e11e      	b.n	800ddb6 <main+0xc5a>
					while (_ON == io_getButton().menu)
 800db78:	ad3d      	add	r5, sp, #244	; 0xf4
 800db7a:	0028      	movs	r0, r5
 800db7c:	f009 fe48 	bl	8017810 <io_getButton>
 800db80:	78ab      	ldrb	r3, [r5, #2]
 800db82:	2b01      	cmp	r3, #1
 800db84:	d0f8      	beq.n	800db78 <main+0xa1c>
 800db86:	e01e      	b.n	800dbc6 <main+0xa6a>
 800db88:	200005cd 	.word	0x200005cd
 800db8c:	2000059e 	.word	0x2000059e
 800db90:	48000c00 	.word	0x48000c00
 800db94:	2000043c 	.word	0x2000043c
 800db98:	200005f4 	.word	0x200005f4
 800db9c:	ffe17b80 	.word	0xffe17b80
 800dba0:	007a11ff 	.word	0x007a11ff
 800dba4:	2000059d 	.word	0x2000059d
 800dba8:	200005ca 	.word	0x200005ca
 800dbac:	200005e7 	.word	0x200005e7
 800dbb0:	200005fc 	.word	0x200005fc
 800dbb4:	2000034a 	.word	0x2000034a
 800dbb8:	200005d0 	.word	0x200005d0
		if (cycle == D_set) {
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d100      	bne.n	800dbc2 <main+0xa66>
 800dbc0:	e775      	b.n	800daae <main+0x952>
 800dbc2:	2600      	movs	r6, #0
 800dbc4:	001c      	movs	r4, r3
		if (cycle == R_set) {
 800dbc6:	2c02      	cmp	r4, #2
 800dbc8:	d001      	beq.n	800dbce <main+0xa72>
 800dbca:	f000 fcf0 	bl	800e5ae <main+0x1452>
			screen_setVDRLZ(buffer, R_set);
 800dbce:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800dbd0:	9881      	ldr	r0, [sp, #516]	; 0x204
 800dbd2:	9302      	str	r3, [sp, #8]
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dbd8:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800dbda:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800dbdc:	9401      	str	r4, [sp, #4]
 800dbde:	f00a fb59 	bl	8018294 <screen_setVDRLZ>
				mbutton = io_getButton();
 800dbe2:	4db9      	ldr	r5, [pc, #740]	; (800dec8 <main+0xd6c>)
 800dbe4:	a808      	add	r0, sp, #32
 800dbe6:	f009 fe13 	bl	8017810 <io_getButton>
 800dbea:	2205      	movs	r2, #5
 800dbec:	0028      	movs	r0, r5
 800dbee:	a908      	add	r1, sp, #32
 800dbf0:	f00a fd22 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800dbf4:	782b      	ldrb	r3, [r5, #0]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d11e      	bne.n	800dc38 <main+0xadc>
					while (_ON == io_getButton().set)
 800dbfa:	ad3b      	add	r5, sp, #236	; 0xec
 800dbfc:	0028      	movs	r0, r5
 800dbfe:	f009 fe07 	bl	8017810 <io_getButton>
 800dc02:	782b      	ldrb	r3, [r5, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d0f8      	beq.n	800dbfa <main+0xa9e>
					buffer.R += 0.1;
 800dc08:	9883      	ldr	r0, [sp, #524]	; 0x20c
 800dc0a:	f7fc fcf9 	bl	800a600 <__aeabi_f2d>
 800dc0e:	4aaf      	ldr	r2, [pc, #700]	; (800decc <main+0xd70>)
 800dc10:	4baf      	ldr	r3, [pc, #700]	; (800ded0 <main+0xd74>)
 800dc12:	f7fa ff0f 	bl	8008a34 <__aeabi_dadd>
 800dc16:	f7fc fd3b 	bl	800a690 <__aeabi_d2f>
					screen_setVDRLZ(buffer, R_set);
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	9b85      	ldr	r3, [sp, #532]	; 0x214
					buffer.R += 0.1;
 800dc20:	9083      	str	r0, [sp, #524]	; 0x20c
					screen_setVDRLZ(buffer, R_set);
 800dc22:	9302      	str	r3, [sp, #8]
 800dc24:	9881      	ldr	r0, [sp, #516]	; 0x204
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dc2a:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800dc2c:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800dc2e:	f00a fb31 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800dc32:	2064      	movs	r0, #100	; 0x64
 800dc34:	f000 ff98 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.reset) {
 800dc38:	4ba3      	ldr	r3, [pc, #652]	; (800dec8 <main+0xd6c>)
 800dc3a:	785b      	ldrb	r3, [r3, #1]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d11e      	bne.n	800dc7e <main+0xb22>
					while (_ON == io_getButton().reset)
 800dc40:	ad39      	add	r5, sp, #228	; 0xe4
 800dc42:	0028      	movs	r0, r5
 800dc44:	f009 fde4 	bl	8017810 <io_getButton>
 800dc48:	786b      	ldrb	r3, [r5, #1]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d0f8      	beq.n	800dc40 <main+0xae4>
					buffer.R -= 0.1;
 800dc4e:	9883      	ldr	r0, [sp, #524]	; 0x20c
 800dc50:	f7fc fcd6 	bl	800a600 <__aeabi_f2d>
 800dc54:	4a9d      	ldr	r2, [pc, #628]	; (800decc <main+0xd70>)
 800dc56:	4b9e      	ldr	r3, [pc, #632]	; (800ded0 <main+0xd74>)
 800dc58:	f7fc f896 	bl	8009d88 <__aeabi_dsub>
 800dc5c:	f7fc fd18 	bl	800a690 <__aeabi_d2f>
					screen_setVDRLZ(buffer, R_set);
 800dc60:	2302      	movs	r3, #2
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	9b85      	ldr	r3, [sp, #532]	; 0x214
					buffer.R -= 0.1;
 800dc66:	9083      	str	r0, [sp, #524]	; 0x20c
					screen_setVDRLZ(buffer, R_set);
 800dc68:	9302      	str	r3, [sp, #8]
 800dc6a:	9881      	ldr	r0, [sp, #516]	; 0x204
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dc70:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800dc72:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800dc74:	f00a fb0e 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800dc78:	2064      	movs	r0, #100	; 0x64
 800dc7a:	f000 ff75 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800dc7e:	4f92      	ldr	r7, [pc, #584]	; (800dec8 <main+0xd6c>)
 800dc80:	0025      	movs	r5, r4
 800dc82:	78fb      	ldrb	r3, [r7, #3]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d107      	bne.n	800dc98 <main+0xb3c>
					while (_ON == io_getButton().next)
 800dc88:	ad37      	add	r5, sp, #220	; 0xdc
 800dc8a:	0028      	movs	r0, r5
 800dc8c:	f009 fdc0 	bl	8017810 <io_getButton>
 800dc90:	78eb      	ldrb	r3, [r5, #3]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d0f8      	beq.n	800dc88 <main+0xb2c>
					cycle = Z_set;
 800dc96:	9d03      	ldr	r5, [sp, #12]
				if (_ON == mbutton.prev) {
 800dc98:	793b      	ldrb	r3, [r7, #4]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d107      	bne.n	800dcae <main+0xb52>
					while (_ON == io_getButton().prev)
 800dc9e:	ad35      	add	r5, sp, #212	; 0xd4
 800dca0:	0028      	movs	r0, r5
 800dca2:	f009 fdb5 	bl	8017810 <io_getButton>
 800dca6:	792b      	ldrb	r3, [r5, #4]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d0f8      	beq.n	800dc9e <main+0xb42>
					cycle = L_set;
 800dcac:	2503      	movs	r5, #3
				if (_ON == mbutton.menu) {
 800dcae:	78bb      	ldrb	r3, [r7, #2]
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	9202      	str	r2, [sp, #8]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d000      	beq.n	800dcba <main+0xb5e>
 800dcb8:	e082      	b.n	800ddc0 <main+0xc64>
					while (_ON == io_getButton().menu)
 800dcba:	ae33      	add	r6, sp, #204	; 0xcc
 800dcbc:	0030      	movs	r0, r6
 800dcbe:	f009 fda7 	bl	8017810 <io_getButton>
 800dcc2:	78b3      	ldrb	r3, [r6, #2]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d0f8      	beq.n	800dcba <main+0xb5e>
		if (cycle == L_set) {
 800dcc8:	2d03      	cmp	r5, #3
 800dcca:	d000      	beq.n	800dcce <main+0xb72>
 800dccc:	e084      	b.n	800ddd8 <main+0xc7c>
			screen_setVDRLZ(buffer, L_set);
 800dcce:	2303      	movs	r3, #3
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800dcd4:	9881      	ldr	r0, [sp, #516]	; 0x204
 800dcd6:	9304      	str	r3, [sp, #16]
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dcdc:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800dcde:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800dce0:	f00a fad8 	bl	8018294 <screen_setVDRLZ>
					cycle = R_set;
 800dce4:	2602      	movs	r6, #2
				mbutton = io_getButton();
 800dce6:	4c78      	ldr	r4, [pc, #480]	; (800dec8 <main+0xd6c>)
 800dce8:	a808      	add	r0, sp, #32
 800dcea:	f009 fd91 	bl	8017810 <io_getButton>
 800dcee:	2205      	movs	r2, #5
 800dcf0:	0020      	movs	r0, r4
 800dcf2:	a908      	add	r1, sp, #32
 800dcf4:	f00a fca0 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800dcf8:	7823      	ldrb	r3, [r4, #0]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d116      	bne.n	800dd2c <main+0xbd0>
					while (_ON == io_getButton().set)
 800dcfe:	ad31      	add	r5, sp, #196	; 0xc4
 800dd00:	0028      	movs	r0, r5
 800dd02:	f009 fd85 	bl	8017810 <io_getButton>
 800dd06:	782b      	ldrb	r3, [r5, #0]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d0f8      	beq.n	800dcfe <main+0xba2>
					screen_setVDRLZ(buffer, L_set);
 800dd0c:	2203      	movs	r2, #3
					buffer.L += 1;
 800dd0e:	9b84      	ldr	r3, [sp, #528]	; 0x210
					screen_setVDRLZ(buffer, L_set);
 800dd10:	9201      	str	r2, [sp, #4]
 800dd12:	9a85      	ldr	r2, [sp, #532]	; 0x214
 800dd14:	9881      	ldr	r0, [sp, #516]	; 0x204
					buffer.L += 1;
 800dd16:	3301      	adds	r3, #1
					screen_setVDRLZ(buffer, L_set);
 800dd18:	9204      	str	r2, [sp, #16]
 800dd1a:	9200      	str	r2, [sp, #0]
 800dd1c:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dd1e:	9a83      	ldr	r2, [sp, #524]	; 0x20c
					buffer.L += 1;
 800dd20:	9384      	str	r3, [sp, #528]	; 0x210
					screen_setVDRLZ(buffer, L_set);
 800dd22:	f00a fab7 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800dd26:	2064      	movs	r0, #100	; 0x64
 800dd28:	f000 ff1e 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.reset) {
 800dd2c:	7863      	ldrb	r3, [r4, #1]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d116      	bne.n	800dd60 <main+0xc04>
					while (_ON == io_getButton().reset)
 800dd32:	ad2f      	add	r5, sp, #188	; 0xbc
 800dd34:	0028      	movs	r0, r5
 800dd36:	f009 fd6b 	bl	8017810 <io_getButton>
 800dd3a:	786b      	ldrb	r3, [r5, #1]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d0f8      	beq.n	800dd32 <main+0xbd6>
					screen_setVDRLZ(buffer, L_set);
 800dd40:	2203      	movs	r2, #3
					buffer.L -= 1;
 800dd42:	9b84      	ldr	r3, [sp, #528]	; 0x210
					screen_setVDRLZ(buffer, L_set);
 800dd44:	9201      	str	r2, [sp, #4]
 800dd46:	9a85      	ldr	r2, [sp, #532]	; 0x214
 800dd48:	9881      	ldr	r0, [sp, #516]	; 0x204
					buffer.L -= 1;
 800dd4a:	3b01      	subs	r3, #1
					screen_setVDRLZ(buffer, L_set);
 800dd4c:	9204      	str	r2, [sp, #16]
 800dd4e:	9200      	str	r2, [sp, #0]
 800dd50:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dd52:	9a83      	ldr	r2, [sp, #524]	; 0x20c
					buffer.L -= 1;
 800dd54:	9384      	str	r3, [sp, #528]	; 0x210
					screen_setVDRLZ(buffer, L_set);
 800dd56:	f00a fa9d 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800dd5a:	2064      	movs	r0, #100	; 0x64
 800dd5c:	f000 ff04 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800dd60:	78e2      	ldrb	r2, [r4, #3]
 800dd62:	2303      	movs	r3, #3
 800dd64:	2a01      	cmp	r2, #1
 800dd66:	d107      	bne.n	800dd78 <main+0xc1c>
					while (_ON == io_getButton().next)
 800dd68:	ad2d      	add	r5, sp, #180	; 0xb4
 800dd6a:	0028      	movs	r0, r5
 800dd6c:	f009 fd50 	bl	8017810 <io_getButton>
 800dd70:	78eb      	ldrb	r3, [r5, #3]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d0f8      	beq.n	800dd68 <main+0xc0c>
					cycle = R_set;
 800dd76:	0033      	movs	r3, r6
				if (_ON == mbutton.prev) {
 800dd78:	7922      	ldrb	r2, [r4, #4]
 800dd7a:	b2d7      	uxtb	r7, r2
 800dd7c:	2a01      	cmp	r2, #1
 800dd7e:	d107      	bne.n	800dd90 <main+0xc34>
					while (_ON == io_getButton().prev)
 800dd80:	ad2b      	add	r5, sp, #172	; 0xac
 800dd82:	0028      	movs	r0, r5
 800dd84:	f009 fd44 	bl	8017810 <io_getButton>
 800dd88:	792b      	ldrb	r3, [r5, #4]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d0f8      	beq.n	800dd80 <main+0xc24>
					cycle = D_set;
 800dd8e:	003b      	movs	r3, r7
				if (_ON == mbutton.menu) {
 800dd90:	78a2      	ldrb	r2, [r4, #2]
 800dd92:	2a01      	cmp	r2, #1
 800dd94:	d119      	bne.n	800ddca <main+0xc6e>
					while (_ON == io_getButton().menu)
 800dd96:	ac29      	add	r4, sp, #164	; 0xa4
 800dd98:	0020      	movs	r0, r4
 800dd9a:	f009 fd39 	bl	8017810 <io_getButton>
 800dd9e:	78a3      	ldrb	r3, [r4, #2]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d0f8      	beq.n	800dd96 <main+0xc3a>
	FLASH_WriteVDRLZ(&buffer);
 800dda4:	a881      	add	r0, sp, #516	; 0x204
 800dda6:	f004 ff59 	bl	8012c5c <FLASH_WriteVDRLZ>
	app_GotoMainScreen(calibStatus_1, MEASUREMENT_1, NOT_SHOW_SET_CALIB);
 800ddaa:	4b4a      	ldr	r3, [pc, #296]	; (800ded4 <main+0xd78>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	7818      	ldrb	r0, [r3, #0]
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	b2c0      	uxtb	r0, r0
 800ddb4:	e587      	b.n	800d8c6 <main+0x76a>
			} while (cycle == D_set);
 800ddb6:	2c01      	cmp	r4, #1
 800ddb8:	d100      	bne.n	800ddbc <main+0xc60>
 800ddba:	e684      	b.n	800dac6 <main+0x96a>
 800ddbc:	002e      	movs	r6, r5
 800ddbe:	e702      	b.n	800dbc6 <main+0xa6a>
			} while (cycle == R_set);
 800ddc0:	2d02      	cmp	r5, #2
 800ddc2:	d100      	bne.n	800ddc6 <main+0xc6a>
 800ddc4:	e70d      	b.n	800dbe2 <main+0xa86>
 800ddc6:	9602      	str	r6, [sp, #8]
 800ddc8:	e77e      	b.n	800dcc8 <main+0xb6c>
			} while (cycle == L_set);
 800ddca:	2b03      	cmp	r3, #3
 800ddcc:	d08b      	beq.n	800dce6 <main+0xb8a>
	} while (exit == 0);
 800ddce:	9a02      	ldr	r2, [sp, #8]
 800ddd0:	2a00      	cmp	r2, #0
 800ddd2:	d100      	bne.n	800ddd6 <main+0xc7a>
 800ddd4:	e604      	b.n	800d9e0 <main+0x884>
 800ddd6:	e7e5      	b.n	800dda4 <main+0xc48>
		if (cycle == Z_set) {
 800ddd8:	2d04      	cmp	r5, #4
 800ddda:	d001      	beq.n	800dde0 <main+0xc84>
					cycle = R_set;
 800dddc:	002b      	movs	r3, r5
 800ddde:	e7f6      	b.n	800ddce <main+0xc72>
			screen_setVDRLZ(buffer, Z_set);
 800dde0:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800dde2:	9881      	ldr	r0, [sp, #516]	; 0x204
 800dde4:	9304      	str	r3, [sp, #16]
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	9982      	ldr	r1, [sp, #520]	; 0x208
 800ddea:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800ddec:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800ddee:	9501      	str	r5, [sp, #4]
 800ddf0:	f00a fa50 	bl	8018294 <screen_setVDRLZ>
				mbutton = io_getButton();
 800ddf4:	4e34      	ldr	r6, [pc, #208]	; (800dec8 <main+0xd6c>)
 800ddf6:	a808      	add	r0, sp, #32
 800ddf8:	f009 fd0a 	bl	8017810 <io_getButton>
 800ddfc:	2205      	movs	r2, #5
 800ddfe:	0030      	movs	r0, r6
 800de00:	a908      	add	r1, sp, #32
 800de02:	f00a fc19 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800de06:	7833      	ldrb	r3, [r6, #0]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d11e      	bne.n	800de4a <main+0xcee>
					while (_ON == io_getButton().set)
 800de0c:	ae27      	add	r6, sp, #156	; 0x9c
 800de0e:	0030      	movs	r0, r6
 800de10:	f009 fcfe 	bl	8017810 <io_getButton>
 800de14:	7833      	ldrb	r3, [r6, #0]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d0f8      	beq.n	800de0c <main+0xcb0>
					buffer.Z += 0.1;
 800de1a:	9885      	ldr	r0, [sp, #532]	; 0x214
 800de1c:	f7fc fbf0 	bl	800a600 <__aeabi_f2d>
 800de20:	4a2a      	ldr	r2, [pc, #168]	; (800decc <main+0xd70>)
 800de22:	4b2b      	ldr	r3, [pc, #172]	; (800ded0 <main+0xd74>)
 800de24:	f7fa fe06 	bl	8008a34 <__aeabi_dadd>
 800de28:	f7fc fc32 	bl	800a690 <__aeabi_d2f>
					screen_setVDRLZ(buffer, Z_set);
 800de2c:	2304      	movs	r3, #4
					buffer.Z += 0.1;
 800de2e:	9085      	str	r0, [sp, #532]	; 0x214
					screen_setVDRLZ(buffer, Z_set);
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800de34:	9881      	ldr	r0, [sp, #516]	; 0x204
 800de36:	9304      	str	r3, [sp, #16]
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	9982      	ldr	r1, [sp, #520]	; 0x208
 800de3c:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800de3e:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800de40:	f00a fa28 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800de44:	2064      	movs	r0, #100	; 0x64
 800de46:	f000 fe8f 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.reset) {
 800de4a:	4b1f      	ldr	r3, [pc, #124]	; (800dec8 <main+0xd6c>)
 800de4c:	785b      	ldrb	r3, [r3, #1]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d11e      	bne.n	800de90 <main+0xd34>
					while (_ON == io_getButton().reset)
 800de52:	ae25      	add	r6, sp, #148	; 0x94
 800de54:	0030      	movs	r0, r6
 800de56:	f009 fcdb 	bl	8017810 <io_getButton>
 800de5a:	7873      	ldrb	r3, [r6, #1]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d0f8      	beq.n	800de52 <main+0xcf6>
					buffer.Z -= 0.1;
 800de60:	9885      	ldr	r0, [sp, #532]	; 0x214
 800de62:	f7fc fbcd 	bl	800a600 <__aeabi_f2d>
 800de66:	4a19      	ldr	r2, [pc, #100]	; (800decc <main+0xd70>)
 800de68:	4b19      	ldr	r3, [pc, #100]	; (800ded0 <main+0xd74>)
 800de6a:	f7fb ff8d 	bl	8009d88 <__aeabi_dsub>
 800de6e:	f7fc fc0f 	bl	800a690 <__aeabi_d2f>
					screen_setVDRLZ(buffer, Z_set);
 800de72:	2304      	movs	r3, #4
					buffer.Z -= 0.1;
 800de74:	9085      	str	r0, [sp, #532]	; 0x214
					screen_setVDRLZ(buffer, Z_set);
 800de76:	9301      	str	r3, [sp, #4]
 800de78:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800de7a:	9881      	ldr	r0, [sp, #516]	; 0x204
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	9982      	ldr	r1, [sp, #520]	; 0x208
 800de82:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800de84:	9b84      	ldr	r3, [sp, #528]	; 0x210
 800de86:	f00a fa05 	bl	8018294 <screen_setVDRLZ>
					HAL_Delay(TIME_WAIT);
 800de8a:	2064      	movs	r0, #100	; 0x64
 800de8c:	f000 fe6c 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.prev) {
 800de90:	4e0d      	ldr	r6, [pc, #52]	; (800dec8 <main+0xd6c>)
 800de92:	002b      	movs	r3, r5
 800de94:	7932      	ldrb	r2, [r6, #4]
 800de96:	2a01      	cmp	r2, #1
 800de98:	d107      	bne.n	800deaa <main+0xd4e>
					while (_ON == io_getButton().prev)
 800de9a:	af23      	add	r7, sp, #140	; 0x8c
 800de9c:	0038      	movs	r0, r7
 800de9e:	f009 fcb7 	bl	8017810 <io_getButton>
 800dea2:	793b      	ldrb	r3, [r7, #4]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d0f8      	beq.n	800de9a <main+0xd3e>
					cycle = R_set;
 800dea8:	0023      	movs	r3, r4
				if (_ON == mbutton.menu) {
 800deaa:	78b2      	ldrb	r2, [r6, #2]
 800deac:	2a01      	cmp	r2, #1
 800deae:	d107      	bne.n	800dec0 <main+0xd64>
					while (_ON == io_getButton().menu)
 800deb0:	ac21      	add	r4, sp, #132	; 0x84
 800deb2:	0020      	movs	r0, r4
 800deb4:	f009 fcac 	bl	8017810 <io_getButton>
 800deb8:	78a3      	ldrb	r3, [r4, #2]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d0f8      	beq.n	800deb0 <main+0xd54>
 800debe:	e771      	b.n	800dda4 <main+0xc48>
			} while (cycle == Z_set);
 800dec0:	2b04      	cmp	r3, #4
 800dec2:	d097      	beq.n	800ddf4 <main+0xc98>
 800dec4:	e783      	b.n	800ddce <main+0xc72>
 800dec6:	46c0      	nop			; (mov r8, r8)
 800dec8:	2000059e 	.word	0x2000059e
 800decc:	9999999a 	.word	0x9999999a
 800ded0:	3fb99999 	.word	0x3fb99999
 800ded4:	2000034a 	.word	0x2000034a
	Time mtime = rtc_Now();
 800ded8:	0020      	movs	r0, r4
 800deda:	f009 fd85 	bl	80179e8 <rtc_Now>
 800dede:	7863      	ldrb	r3, [r4, #1]
 800dee0:	7827      	ldrb	r7, [r4, #0]
 800dee2:	9302      	str	r3, [sp, #8]
 800dee4:	78a3      	ldrb	r3, [r4, #2]
 800dee6:	9303      	str	r3, [sp, #12]
 800dee8:	78e3      	ldrb	r3, [r4, #3]
 800deea:	9305      	str	r3, [sp, #20]
 800deec:	7923      	ldrb	r3, [r4, #4]
	CycleTime cycle = SET_YEAR;
 800deee:	2400      	movs	r4, #0
	Time mtime = rtc_Now();
 800def0:	9304      	str	r3, [sp, #16]
	LCD_Clear();
 800def2:	f006 fa75 	bl	80143e0 <LCD_Clear>
		if (SET_YEAR == cycle) {
 800def6:	2300      	movs	r3, #0
 800def8:	0025      	movs	r5, r4
 800defa:	9306      	str	r3, [sp, #24]
 800defc:	429c      	cmp	r4, r3
 800defe:	d175      	bne.n	800dfec <main+0xe90>
			screen_setDateTime(mtime, SET_YEAR);
 800df00:	9a02      	ldr	r2, [sp, #8]
 800df02:	ab81      	add	r3, sp, #516	; 0x204
 800df04:	705a      	strb	r2, [r3, #1]
 800df06:	9a03      	ldr	r2, [sp, #12]
 800df08:	701f      	strb	r7, [r3, #0]
 800df0a:	709a      	strb	r2, [r3, #2]
 800df0c:	9a05      	ldr	r2, [sp, #20]
 800df0e:	70da      	strb	r2, [r3, #3]
 800df10:	9a04      	ldr	r2, [sp, #16]
 800df12:	711a      	strb	r2, [r3, #4]
 800df14:	9881      	ldr	r0, [sp, #516]	; 0x204
 800df16:	0022      	movs	r2, r4
 800df18:	9982      	ldr	r1, [sp, #520]	; 0x208
 800df1a:	f00a f897 	bl	801804c <screen_setDateTime>
				mbutton = io_getButton();
 800df1e:	4dc8      	ldr	r5, [pc, #800]	; (800e240 <main+0x10e4>)
 800df20:	a808      	add	r0, sp, #32
 800df22:	f009 fc75 	bl	8017810 <io_getButton>
 800df26:	2205      	movs	r2, #5
 800df28:	0028      	movs	r0, r5
 800df2a:	a908      	add	r1, sp, #32
 800df2c:	f00a fb84 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800df30:	782b      	ldrb	r3, [r5, #0]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d11d      	bne.n	800df72 <main+0xe16>
					while (_ON == io_getButton().set)
 800df36:	ad7b      	add	r5, sp, #492	; 0x1ec
 800df38:	0028      	movs	r0, r5
 800df3a:	f009 fc69 	bl	8017810 <io_getButton>
 800df3e:	782b      	ldrb	r3, [r5, #0]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d0f8      	beq.n	800df36 <main+0xdda>
					mtime.year++;
 800df44:	3701      	adds	r7, #1
 800df46:	b2ff      	uxtb	r7, r7
					if (99 < mtime.year)
 800df48:	2f63      	cmp	r7, #99	; 0x63
 800df4a:	d900      	bls.n	800df4e <main+0xdf2>
						mtime.year = 0;
 800df4c:	2700      	movs	r7, #0
					screen_setDateTime(mtime, SET_YEAR);
 800df4e:	9a02      	ldr	r2, [sp, #8]
 800df50:	ab81      	add	r3, sp, #516	; 0x204
 800df52:	705a      	strb	r2, [r3, #1]
 800df54:	9a03      	ldr	r2, [sp, #12]
 800df56:	701f      	strb	r7, [r3, #0]
 800df58:	709a      	strb	r2, [r3, #2]
 800df5a:	9a05      	ldr	r2, [sp, #20]
 800df5c:	70da      	strb	r2, [r3, #3]
 800df5e:	9a04      	ldr	r2, [sp, #16]
 800df60:	711a      	strb	r2, [r3, #4]
 800df62:	9881      	ldr	r0, [sp, #516]	; 0x204
 800df64:	2200      	movs	r2, #0
 800df66:	9982      	ldr	r1, [sp, #520]	; 0x208
 800df68:	f00a f870 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800df6c:	2064      	movs	r0, #100	; 0x64
 800df6e:	f000 fdfb 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800df72:	4bb3      	ldr	r3, [pc, #716]	; (800e240 <main+0x10e4>)
 800df74:	78db      	ldrb	r3, [r3, #3]
 800df76:	b2dd      	uxtb	r5, r3
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d13c      	bne.n	800dff6 <main+0xe9a>
					while (_ON == io_getButton().next)
 800df7c:	ae79      	add	r6, sp, #484	; 0x1e4
 800df7e:	0030      	movs	r0, r6
 800df80:	f009 fc46 	bl	8017810 <io_getButton>
 800df84:	78f3      	ldrb	r3, [r6, #3]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d0f8      	beq.n	800df7c <main+0xe20>
				if (_ON == mbutton.reset) {
 800df8a:	4bad      	ldr	r3, [pc, #692]	; (800e240 <main+0x10e4>)
 800df8c:	785b      	ldrb	r3, [r3, #1]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d11f      	bne.n	800dfd2 <main+0xe76>
					while (_ON == io_getButton().reset)
 800df92:	ae77      	add	r6, sp, #476	; 0x1dc
 800df94:	0030      	movs	r0, r6
 800df96:	f009 fc3b 	bl	8017810 <io_getButton>
 800df9a:	7873      	ldrb	r3, [r6, #1]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d0f8      	beq.n	800df92 <main+0xe36>
					mtime.year--;
 800dfa0:	3f01      	subs	r7, #1
 800dfa2:	b2fb      	uxtb	r3, r7
					if (99 < mtime.year)
 800dfa4:	1c1a      	adds	r2, r3, #0
 800dfa6:	2b63      	cmp	r3, #99	; 0x63
 800dfa8:	d900      	bls.n	800dfac <main+0xe50>
 800dfaa:	2263      	movs	r2, #99	; 0x63
					screen_setDateTime(mtime, SET_YEAR);
 800dfac:	ab81      	add	r3, sp, #516	; 0x204
 800dfae:	701a      	strb	r2, [r3, #0]
 800dfb0:	b2d7      	uxtb	r7, r2
 800dfb2:	9a02      	ldr	r2, [sp, #8]
 800dfb4:	705a      	strb	r2, [r3, #1]
 800dfb6:	9a03      	ldr	r2, [sp, #12]
 800dfb8:	709a      	strb	r2, [r3, #2]
 800dfba:	9a05      	ldr	r2, [sp, #20]
 800dfbc:	70da      	strb	r2, [r3, #3]
 800dfbe:	9a04      	ldr	r2, [sp, #16]
 800dfc0:	711a      	strb	r2, [r3, #4]
 800dfc2:	9881      	ldr	r0, [sp, #516]	; 0x204
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	9982      	ldr	r1, [sp, #520]	; 0x208
 800dfc8:	f00a f840 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800dfcc:	2064      	movs	r0, #100	; 0x64
 800dfce:	f000 fdcb 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.menu) {
 800dfd2:	4b9b      	ldr	r3, [pc, #620]	; (800e240 <main+0x10e4>)
 800dfd4:	789b      	ldrb	r3, [r3, #2]
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	9206      	str	r2, [sp, #24]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d10d      	bne.n	800dffa <main+0xe9e>
					while (_ON == io_getButton().menu)
 800dfde:	ac75      	add	r4, sp, #468	; 0x1d4
 800dfe0:	0020      	movs	r0, r4
 800dfe2:	f009 fc15 	bl	8017810 <io_getButton>
 800dfe6:	78a3      	ldrb	r3, [r4, #2]
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d0f8      	beq.n	800dfde <main+0xe82>
		if (SET_MONTH == cycle) {
 800dfec:	2d01      	cmp	r5, #1
 800dfee:	d000      	beq.n	800dff2 <main+0xe96>
 800dff0:	e093      	b.n	800e11a <main+0xfbe>
 800dff2:	9c06      	ldr	r4, [sp, #24]
 800dff4:	e003      	b.n	800dffe <main+0xea2>
 800dff6:	2500      	movs	r5, #0
 800dff8:	e7c7      	b.n	800df8a <main+0xe2e>
			} while (SET_YEAR == cycle);
 800dffa:	2d00      	cmp	r5, #0
 800dffc:	d08f      	beq.n	800df1e <main+0xdc2>
			screen_setDateTime(mtime, SET_MONTH);
 800dffe:	9a02      	ldr	r2, [sp, #8]
 800e000:	ab81      	add	r3, sp, #516	; 0x204
 800e002:	705a      	strb	r2, [r3, #1]
 800e004:	9a03      	ldr	r2, [sp, #12]
 800e006:	701f      	strb	r7, [r3, #0]
 800e008:	709a      	strb	r2, [r3, #2]
 800e00a:	9a05      	ldr	r2, [sp, #20]
 800e00c:	70da      	strb	r2, [r3, #3]
 800e00e:	9a04      	ldr	r2, [sp, #16]
 800e010:	711a      	strb	r2, [r3, #4]
 800e012:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e014:	2201      	movs	r2, #1
 800e016:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e018:	f00a f818 	bl	801804c <screen_setDateTime>
				mbutton = io_getButton();
 800e01c:	4d88      	ldr	r5, [pc, #544]	; (800e240 <main+0x10e4>)
 800e01e:	a808      	add	r0, sp, #32
 800e020:	f009 fbf6 	bl	8017810 <io_getButton>
 800e024:	2205      	movs	r2, #5
 800e026:	0028      	movs	r0, r5
 800e028:	a908      	add	r1, sp, #32
 800e02a:	f00a fb05 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800e02e:	782b      	ldrb	r3, [r5, #0]
 800e030:	b2de      	uxtb	r6, r3
 800e032:	2b01      	cmp	r3, #1
 800e034:	d11f      	bne.n	800e076 <main+0xf1a>
					while (_ON == io_getButton().set)
 800e036:	ad73      	add	r5, sp, #460	; 0x1cc
 800e038:	0028      	movs	r0, r5
 800e03a:	f009 fbe9 	bl	8017810 <io_getButton>
 800e03e:	782b      	ldrb	r3, [r5, #0]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d0f8      	beq.n	800e036 <main+0xeda>
					mtime.month++;
 800e044:	9b02      	ldr	r3, [sp, #8]
 800e046:	3301      	adds	r3, #1
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	9302      	str	r3, [sp, #8]
					if (12 < mtime.month)
 800e04c:	2b0c      	cmp	r3, #12
 800e04e:	d900      	bls.n	800e052 <main+0xef6>
						mtime.month = 1;
 800e050:	9602      	str	r6, [sp, #8]
					screen_setDateTime(mtime, SET_MONTH);
 800e052:	9a02      	ldr	r2, [sp, #8]
 800e054:	ab81      	add	r3, sp, #516	; 0x204
 800e056:	705a      	strb	r2, [r3, #1]
 800e058:	9a03      	ldr	r2, [sp, #12]
 800e05a:	701f      	strb	r7, [r3, #0]
 800e05c:	709a      	strb	r2, [r3, #2]
 800e05e:	9a05      	ldr	r2, [sp, #20]
 800e060:	70da      	strb	r2, [r3, #3]
 800e062:	9a04      	ldr	r2, [sp, #16]
 800e064:	711a      	strb	r2, [r3, #4]
 800e066:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e068:	2201      	movs	r2, #1
 800e06a:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e06c:	f009 ffee 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e070:	2064      	movs	r0, #100	; 0x64
 800e072:	f000 fd79 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800e076:	2501      	movs	r5, #1
 800e078:	4e71      	ldr	r6, [pc, #452]	; (800e240 <main+0x10e4>)
 800e07a:	78f3      	ldrb	r3, [r6, #3]
 800e07c:	42ab      	cmp	r3, r5
 800e07e:	d107      	bne.n	800e090 <main+0xf34>
					while (_ON == io_getButton().next)
 800e080:	ad71      	add	r5, sp, #452	; 0x1c4
 800e082:	0028      	movs	r0, r5
 800e084:	f009 fbc4 	bl	8017810 <io_getButton>
 800e088:	78eb      	ldrb	r3, [r5, #3]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d0f8      	beq.n	800e080 <main+0xf24>
					cycle = SET_DAY;
 800e08e:	2502      	movs	r5, #2
				if (_ON == mbutton.reset) {
 800e090:	7873      	ldrb	r3, [r6, #1]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d120      	bne.n	800e0d8 <main+0xf7c>
					while (_ON == io_getButton().reset)
 800e096:	ae6f      	add	r6, sp, #444	; 0x1bc
 800e098:	0030      	movs	r0, r6
 800e09a:	f009 fbb9 	bl	8017810 <io_getButton>
 800e09e:	7873      	ldrb	r3, [r6, #1]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d0f8      	beq.n	800e096 <main+0xf3a>
					mtime.month--;
 800e0a4:	9b02      	ldr	r3, [sp, #8]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	b2db      	uxtb	r3, r3
					if (12 < mtime.month)
 800e0aa:	1c1a      	adds	r2, r3, #0
 800e0ac:	2b0c      	cmp	r3, #12
 800e0ae:	d900      	bls.n	800e0b2 <main+0xf56>
 800e0b0:	220c      	movs	r2, #12
 800e0b2:	b2d3      	uxtb	r3, r2
 800e0b4:	9302      	str	r3, [sp, #8]
					screen_setDateTime(mtime, SET_MONTH);
 800e0b6:	ab81      	add	r3, sp, #516	; 0x204
 800e0b8:	705a      	strb	r2, [r3, #1]
 800e0ba:	9a03      	ldr	r2, [sp, #12]
 800e0bc:	701f      	strb	r7, [r3, #0]
 800e0be:	709a      	strb	r2, [r3, #2]
 800e0c0:	9a05      	ldr	r2, [sp, #20]
 800e0c2:	70da      	strb	r2, [r3, #3]
 800e0c4:	9a04      	ldr	r2, [sp, #16]
 800e0c6:	711a      	strb	r2, [r3, #4]
 800e0c8:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e0ce:	f009 ffbd 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e0d2:	2064      	movs	r0, #100	; 0x64
 800e0d4:	f000 fd48 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.prev) {
 800e0d8:	4e59      	ldr	r6, [pc, #356]	; (800e240 <main+0x10e4>)
 800e0da:	7933      	ldrb	r3, [r6, #4]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d107      	bne.n	800e0f0 <main+0xf94>
					while (_ON == io_getButton().prev)
 800e0e0:	ad6d      	add	r5, sp, #436	; 0x1b4
 800e0e2:	0028      	movs	r0, r5
 800e0e4:	f009 fb94 	bl	8017810 <io_getButton>
 800e0e8:	792b      	ldrb	r3, [r5, #4]
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d0f8      	beq.n	800e0e0 <main+0xf84>
					cycle = SET_YEAR;
 800e0ee:	2500      	movs	r5, #0
				if (_ON == mbutton.menu) {
 800e0f0:	78b3      	ldrb	r3, [r6, #2]
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	9206      	str	r2, [sp, #24]
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d10b      	bne.n	800e112 <main+0xfb6>
					while (_ON == io_getButton().menu)
 800e0fa:	ac6b      	add	r4, sp, #428	; 0x1ac
 800e0fc:	0020      	movs	r0, r4
 800e0fe:	f009 fb87 	bl	8017810 <io_getButton>
 800e102:	78a3      	ldrb	r3, [r4, #2]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d0f8      	beq.n	800e0fa <main+0xf9e>
		if (SET_DAY == cycle) {
 800e108:	2d02      	cmp	r5, #2
 800e10a:	d009      	beq.n	800e120 <main+0xfc4>
					cycle = SET_HOUR;
 800e10c:	002c      	movs	r4, r5
 800e10e:	9e06      	ldr	r6, [sp, #24]
 800e110:	e1b8      	b.n	800e484 <main+0x1328>
			} while (SET_MONTH == cycle);
 800e112:	2d01      	cmp	r5, #1
 800e114:	d082      	beq.n	800e01c <main+0xec0>
 800e116:	9406      	str	r4, [sp, #24]
 800e118:	e7f6      	b.n	800e108 <main+0xfac>
		if (SET_DAY == cycle) {
 800e11a:	2d02      	cmp	r5, #2
 800e11c:	d000      	beq.n	800e120 <main+0xfc4>
 800e11e:	e091      	b.n	800e244 <main+0x10e8>
			screen_setDateTime(mtime, SET_DAY);
 800e120:	9a02      	ldr	r2, [sp, #8]
 800e122:	ab81      	add	r3, sp, #516	; 0x204
 800e124:	705a      	strb	r2, [r3, #1]
 800e126:	9a03      	ldr	r2, [sp, #12]
 800e128:	701f      	strb	r7, [r3, #0]
 800e12a:	709a      	strb	r2, [r3, #2]
 800e12c:	9a05      	ldr	r2, [sp, #20]
					screen_setDateTime(mtime, SET_DAY);
 800e12e:	2502      	movs	r5, #2
			screen_setDateTime(mtime, SET_DAY);
 800e130:	70da      	strb	r2, [r3, #3]
 800e132:	9a04      	ldr	r2, [sp, #16]
 800e134:	711a      	strb	r2, [r3, #4]
 800e136:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e138:	2202      	movs	r2, #2
 800e13a:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e13c:	f009 ff86 	bl	801804c <screen_setDateTime>
				mbutton = io_getButton();
 800e140:	4c3f      	ldr	r4, [pc, #252]	; (800e240 <main+0x10e4>)
 800e142:	a808      	add	r0, sp, #32
 800e144:	f009 fb64 	bl	8017810 <io_getButton>
 800e148:	2205      	movs	r2, #5
 800e14a:	0020      	movs	r0, r4
 800e14c:	a908      	add	r1, sp, #32
 800e14e:	f00a fa73 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800e152:	7823      	ldrb	r3, [r4, #0]
 800e154:	b2de      	uxtb	r6, r3
 800e156:	2b01      	cmp	r3, #1
 800e158:	d11f      	bne.n	800e19a <main+0x103e>
					while (_ON == io_getButton().set)
 800e15a:	ac69      	add	r4, sp, #420	; 0x1a4
 800e15c:	0020      	movs	r0, r4
 800e15e:	f009 fb57 	bl	8017810 <io_getButton>
 800e162:	7823      	ldrb	r3, [r4, #0]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d0f8      	beq.n	800e15a <main+0xffe>
					mtime.day++;
 800e168:	9b03      	ldr	r3, [sp, #12]
 800e16a:	3301      	adds	r3, #1
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	9303      	str	r3, [sp, #12]
					if (31 < mtime.day)
 800e170:	2b1f      	cmp	r3, #31
 800e172:	d900      	bls.n	800e176 <main+0x101a>
						mtime.day = 1;
 800e174:	9603      	str	r6, [sp, #12]
					screen_setDateTime(mtime, SET_DAY);
 800e176:	9a02      	ldr	r2, [sp, #8]
 800e178:	ab81      	add	r3, sp, #516	; 0x204
 800e17a:	705a      	strb	r2, [r3, #1]
 800e17c:	9a03      	ldr	r2, [sp, #12]
 800e17e:	701f      	strb	r7, [r3, #0]
 800e180:	709a      	strb	r2, [r3, #2]
 800e182:	9a05      	ldr	r2, [sp, #20]
 800e184:	70da      	strb	r2, [r3, #3]
 800e186:	9a04      	ldr	r2, [sp, #16]
 800e188:	711a      	strb	r2, [r3, #4]
 800e18a:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e18c:	002a      	movs	r2, r5
 800e18e:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e190:	f009 ff5c 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e194:	2064      	movs	r0, #100	; 0x64
 800e196:	f000 fce7 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800e19a:	4e29      	ldr	r6, [pc, #164]	; (800e240 <main+0x10e4>)
 800e19c:	002c      	movs	r4, r5
 800e19e:	78f3      	ldrb	r3, [r6, #3]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d107      	bne.n	800e1b4 <main+0x1058>
					while (_ON == io_getButton().next)
 800e1a4:	ac67      	add	r4, sp, #412	; 0x19c
 800e1a6:	0020      	movs	r0, r4
 800e1a8:	f009 fb32 	bl	8017810 <io_getButton>
 800e1ac:	78e3      	ldrb	r3, [r4, #3]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d0f8      	beq.n	800e1a4 <main+0x1048>
					cycle = SET_HOUR;
 800e1b2:	2403      	movs	r4, #3
				if (_ON == mbutton.reset) {
 800e1b4:	7873      	ldrb	r3, [r6, #1]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d120      	bne.n	800e1fc <main+0x10a0>
					while (_ON == io_getButton().reset)
 800e1ba:	ae65      	add	r6, sp, #404	; 0x194
 800e1bc:	0030      	movs	r0, r6
 800e1be:	f009 fb27 	bl	8017810 <io_getButton>
 800e1c2:	7873      	ldrb	r3, [r6, #1]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d0f8      	beq.n	800e1ba <main+0x105e>
					mtime.day--;
 800e1c8:	9b03      	ldr	r3, [sp, #12]
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	b2db      	uxtb	r3, r3
					if (31 < mtime.day)
 800e1ce:	1c1a      	adds	r2, r3, #0
 800e1d0:	2b1f      	cmp	r3, #31
 800e1d2:	d900      	bls.n	800e1d6 <main+0x107a>
 800e1d4:	221f      	movs	r2, #31
 800e1d6:	b2d3      	uxtb	r3, r2
 800e1d8:	9303      	str	r3, [sp, #12]
					screen_setDateTime(mtime, SET_DAY);
 800e1da:	ab81      	add	r3, sp, #516	; 0x204
 800e1dc:	709a      	strb	r2, [r3, #2]
 800e1de:	9a05      	ldr	r2, [sp, #20]
 800e1e0:	9902      	ldr	r1, [sp, #8]
 800e1e2:	70da      	strb	r2, [r3, #3]
 800e1e4:	9a04      	ldr	r2, [sp, #16]
 800e1e6:	701f      	strb	r7, [r3, #0]
 800e1e8:	711a      	strb	r2, [r3, #4]
 800e1ea:	7059      	strb	r1, [r3, #1]
 800e1ec:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e1ee:	002a      	movs	r2, r5
 800e1f0:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e1f2:	f009 ff2b 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e1f6:	2064      	movs	r0, #100	; 0x64
 800e1f8:	f000 fcb6 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.prev) {
 800e1fc:	4e10      	ldr	r6, [pc, #64]	; (800e240 <main+0x10e4>)
 800e1fe:	7933      	ldrb	r3, [r6, #4]
 800e200:	b2da      	uxtb	r2, r3
 800e202:	9207      	str	r2, [sp, #28]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d107      	bne.n	800e218 <main+0x10bc>
					while (_ON == io_getButton().prev)
 800e208:	ac63      	add	r4, sp, #396	; 0x18c
 800e20a:	0020      	movs	r0, r4
 800e20c:	f009 fb00 	bl	8017810 <io_getButton>
 800e210:	7923      	ldrb	r3, [r4, #4]
 800e212:	2b01      	cmp	r3, #1
 800e214:	d0f8      	beq.n	800e208 <main+0x10ac>
					cycle = SET_MONTH;
 800e216:	9c07      	ldr	r4, [sp, #28]
				if (_ON == mbutton.menu) {
 800e218:	78b3      	ldrb	r3, [r6, #2]
 800e21a:	b2de      	uxtb	r6, r3
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d10b      	bne.n	800e238 <main+0x10dc>
					while (_ON == io_getButton().menu)
 800e220:	ad61      	add	r5, sp, #388	; 0x184
 800e222:	0028      	movs	r0, r5
 800e224:	f009 faf4 	bl	8017810 <io_getButton>
 800e228:	78ab      	ldrb	r3, [r5, #2]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d0f8      	beq.n	800e220 <main+0x10c4>
		if (SET_HOUR == cycle) {
 800e22e:	2c03      	cmp	r4, #3
 800e230:	d000      	beq.n	800e234 <main+0x10d8>
 800e232:	e127      	b.n	800e484 <main+0x1328>
 800e234:	9606      	str	r6, [sp, #24]
 800e236:	e008      	b.n	800e24a <main+0x10ee>
			} while (SET_DAY == cycle);
 800e238:	2c02      	cmp	r4, #2
 800e23a:	d081      	beq.n	800e140 <main+0xfe4>
 800e23c:	9e06      	ldr	r6, [sp, #24]
 800e23e:	e7f6      	b.n	800e22e <main+0x10d2>
 800e240:	2000059e 	.word	0x2000059e
		if (SET_HOUR == cycle) {
 800e244:	2d03      	cmp	r5, #3
 800e246:	d000      	beq.n	800e24a <main+0x10ee>
 800e248:	e760      	b.n	800e10c <main+0xfb0>
			screen_setDateTime(mtime, SET_HOUR);
 800e24a:	9a02      	ldr	r2, [sp, #8]
 800e24c:	ab81      	add	r3, sp, #516	; 0x204
 800e24e:	705a      	strb	r2, [r3, #1]
 800e250:	9a03      	ldr	r2, [sp, #12]
 800e252:	701f      	strb	r7, [r3, #0]
 800e254:	709a      	strb	r2, [r3, #2]
 800e256:	9a05      	ldr	r2, [sp, #20]
					screen_setDateTime(mtime, SET_HOUR);
 800e258:	2503      	movs	r5, #3
			screen_setDateTime(mtime, SET_HOUR);
 800e25a:	70da      	strb	r2, [r3, #3]
 800e25c:	9a04      	ldr	r2, [sp, #16]
 800e25e:	711a      	strb	r2, [r3, #4]
 800e260:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e262:	2203      	movs	r2, #3
 800e264:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e266:	f009 fef1 	bl	801804c <screen_setDateTime>
				mbutton = io_getButton();
 800e26a:	4cd4      	ldr	r4, [pc, #848]	; (800e5bc <main+0x1460>)
 800e26c:	a808      	add	r0, sp, #32
 800e26e:	f009 facf 	bl	8017810 <io_getButton>
 800e272:	2205      	movs	r2, #5
 800e274:	0020      	movs	r0, r4
 800e276:	a908      	add	r1, sp, #32
 800e278:	f00a f9de 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800e27c:	7823      	ldrb	r3, [r4, #0]
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d120      	bne.n	800e2c4 <main+0x1168>
					while (_ON == io_getButton().set)
 800e282:	ac5f      	add	r4, sp, #380	; 0x17c
 800e284:	0020      	movs	r0, r4
 800e286:	f009 fac3 	bl	8017810 <io_getButton>
 800e28a:	7823      	ldrb	r3, [r4, #0]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d0f8      	beq.n	800e282 <main+0x1126>
					mtime.hour += 1;
 800e290:	9b05      	ldr	r3, [sp, #20]
 800e292:	3301      	adds	r3, #1
 800e294:	b2db      	uxtb	r3, r3
 800e296:	9305      	str	r3, [sp, #20]
					if (23 < mtime.hour)
 800e298:	2b17      	cmp	r3, #23
 800e29a:	d901      	bls.n	800e2a0 <main+0x1144>
						mtime.hour = 0;
 800e29c:	2300      	movs	r3, #0
 800e29e:	9305      	str	r3, [sp, #20]
					screen_setDateTime(mtime, SET_HOUR);
 800e2a0:	9a02      	ldr	r2, [sp, #8]
 800e2a2:	ab81      	add	r3, sp, #516	; 0x204
 800e2a4:	705a      	strb	r2, [r3, #1]
 800e2a6:	9a03      	ldr	r2, [sp, #12]
 800e2a8:	701f      	strb	r7, [r3, #0]
 800e2aa:	709a      	strb	r2, [r3, #2]
 800e2ac:	9a05      	ldr	r2, [sp, #20]
 800e2ae:	70da      	strb	r2, [r3, #3]
 800e2b0:	9a04      	ldr	r2, [sp, #16]
 800e2b2:	711a      	strb	r2, [r3, #4]
 800e2b4:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e2b6:	002a      	movs	r2, r5
 800e2b8:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e2ba:	f009 fec7 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e2be:	2064      	movs	r0, #100	; 0x64
 800e2c0:	f000 fc52 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.next) {
 800e2c4:	4ebd      	ldr	r6, [pc, #756]	; (800e5bc <main+0x1460>)
 800e2c6:	002c      	movs	r4, r5
 800e2c8:	78f3      	ldrb	r3, [r6, #3]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d107      	bne.n	800e2de <main+0x1182>
					while (_ON == io_getButton().next)
 800e2ce:	ac5d      	add	r4, sp, #372	; 0x174
 800e2d0:	0020      	movs	r0, r4
 800e2d2:	f009 fa9d 	bl	8017810 <io_getButton>
 800e2d6:	78e3      	ldrb	r3, [r4, #3]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d0f8      	beq.n	800e2ce <main+0x1172>
					cycle = SET_MINUTE;
 800e2dc:	2404      	movs	r4, #4
				if (_ON == mbutton.reset) {
 800e2de:	7873      	ldrb	r3, [r6, #1]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d120      	bne.n	800e326 <main+0x11ca>
					while (_ON == io_getButton().reset)
 800e2e4:	ae5b      	add	r6, sp, #364	; 0x16c
 800e2e6:	0030      	movs	r0, r6
 800e2e8:	f009 fa92 	bl	8017810 <io_getButton>
 800e2ec:	7873      	ldrb	r3, [r6, #1]
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d0f8      	beq.n	800e2e4 <main+0x1188>
					mtime.hour--;
 800e2f2:	9b05      	ldr	r3, [sp, #20]
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	b2db      	uxtb	r3, r3
					if (23 < mtime.hour)
 800e2f8:	1c1a      	adds	r2, r3, #0
 800e2fa:	2b17      	cmp	r3, #23
 800e2fc:	d900      	bls.n	800e300 <main+0x11a4>
 800e2fe:	2217      	movs	r2, #23
					screen_setDateTime(mtime, SET_HOUR);
 800e300:	9902      	ldr	r1, [sp, #8]
 800e302:	b2d3      	uxtb	r3, r2
 800e304:	9305      	str	r3, [sp, #20]
 800e306:	ab81      	add	r3, sp, #516	; 0x204
 800e308:	7059      	strb	r1, [r3, #1]
 800e30a:	70da      	strb	r2, [r3, #3]
 800e30c:	9903      	ldr	r1, [sp, #12]
 800e30e:	9a04      	ldr	r2, [sp, #16]
 800e310:	701f      	strb	r7, [r3, #0]
 800e312:	711a      	strb	r2, [r3, #4]
 800e314:	7099      	strb	r1, [r3, #2]
 800e316:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e318:	002a      	movs	r2, r5
 800e31a:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e31c:	f009 fe96 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e320:	2064      	movs	r0, #100	; 0x64
 800e322:	f000 fc21 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.prev) {
 800e326:	4ea5      	ldr	r6, [pc, #660]	; (800e5bc <main+0x1460>)
 800e328:	7933      	ldrb	r3, [r6, #4]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d107      	bne.n	800e33e <main+0x11e2>
					while (_ON == io_getButton().prev)
 800e32e:	ac59      	add	r4, sp, #356	; 0x164
 800e330:	0020      	movs	r0, r4
 800e332:	f009 fa6d 	bl	8017810 <io_getButton>
 800e336:	7923      	ldrb	r3, [r4, #4]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d0f8      	beq.n	800e32e <main+0x11d2>
					cycle = SET_DAY;
 800e33c:	2402      	movs	r4, #2
				if (_ON == mbutton.menu) {
 800e33e:	78b3      	ldrb	r3, [r6, #2]
 800e340:	b2de      	uxtb	r6, r3
 800e342:	2b01      	cmp	r3, #1
 800e344:	d10a      	bne.n	800e35c <main+0x1200>
					while (_OFF == io_getButton().menu)
 800e346:	ad57      	add	r5, sp, #348	; 0x15c
 800e348:	0028      	movs	r0, r5
 800e34a:	f009 fa61 	bl	8017810 <io_getButton>
 800e34e:	78ab      	ldrb	r3, [r5, #2]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d0f8      	beq.n	800e346 <main+0x11ea>
		if (SET_MINUTE == cycle) {
 800e354:	2c04      	cmp	r4, #4
 800e356:	d000      	beq.n	800e35a <main+0x11fe>
 800e358:	e082      	b.n	800e460 <main+0x1304>
 800e35a:	e005      	b.n	800e368 <main+0x120c>
			} while (SET_HOUR == cycle);
 800e35c:	2c03      	cmp	r4, #3
 800e35e:	d084      	beq.n	800e26a <main+0x110e>
		if (SET_MINUTE == cycle) {
 800e360:	2c04      	cmp	r4, #4
 800e362:	d000      	beq.n	800e366 <main+0x120a>
 800e364:	e6d3      	b.n	800e10e <main+0xfb2>
 800e366:	9e06      	ldr	r6, [sp, #24]
			screen_setDateTime(mtime, SET_MINUTE);
 800e368:	9a02      	ldr	r2, [sp, #8]
 800e36a:	ab81      	add	r3, sp, #516	; 0x204
 800e36c:	705a      	strb	r2, [r3, #1]
 800e36e:	9a03      	ldr	r2, [sp, #12]
 800e370:	701f      	strb	r7, [r3, #0]
 800e372:	709a      	strb	r2, [r3, #2]
 800e374:	9a05      	ldr	r2, [sp, #20]
 800e376:	70da      	strb	r2, [r3, #3]
 800e378:	9a04      	ldr	r2, [sp, #16]
 800e37a:	711a      	strb	r2, [r3, #4]
 800e37c:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e37e:	2204      	movs	r2, #4
 800e380:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e382:	f009 fe63 	bl	801804c <screen_setDateTime>
				mbutton = io_getButton();
 800e386:	4c8d      	ldr	r4, [pc, #564]	; (800e5bc <main+0x1460>)
 800e388:	a808      	add	r0, sp, #32
 800e38a:	f009 fa41 	bl	8017810 <io_getButton>
 800e38e:	2205      	movs	r2, #5
 800e390:	0020      	movs	r0, r4
 800e392:	a908      	add	r1, sp, #32
 800e394:	f00a f950 	bl	8018638 <memcpy>
				if (_ON == mbutton.set) {
 800e398:	7823      	ldrb	r3, [r4, #0]
 800e39a:	b2dd      	uxtb	r5, r3
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d121      	bne.n	800e3e4 <main+0x1288>
					while (_ON == io_getButton().set)
 800e3a0:	ac55      	add	r4, sp, #340	; 0x154
 800e3a2:	0020      	movs	r0, r4
 800e3a4:	f009 fa34 	bl	8017810 <io_getButton>
 800e3a8:	7823      	ldrb	r3, [r4, #0]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d0f8      	beq.n	800e3a0 <main+0x1244>
					mtime.minute++;
 800e3ae:	9b04      	ldr	r3, [sp, #16]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	9304      	str	r3, [sp, #16]
					if (59 < mtime.minute)
 800e3b6:	2b3b      	cmp	r3, #59	; 0x3b
 800e3b8:	d900      	bls.n	800e3bc <main+0x1260>
						mtime.minute = 1;
 800e3ba:	9504      	str	r5, [sp, #16]
					mtime.second = 0;
 800e3bc:	2200      	movs	r2, #0
 800e3be:	ab81      	add	r3, sp, #516	; 0x204
 800e3c0:	715a      	strb	r2, [r3, #5]
					screen_setDateTime(mtime, SET_MINUTE);
 800e3c2:	9a02      	ldr	r2, [sp, #8]
 800e3c4:	701f      	strb	r7, [r3, #0]
 800e3c6:	705a      	strb	r2, [r3, #1]
 800e3c8:	9a03      	ldr	r2, [sp, #12]
 800e3ca:	709a      	strb	r2, [r3, #2]
 800e3cc:	9a05      	ldr	r2, [sp, #20]
 800e3ce:	70da      	strb	r2, [r3, #3]
 800e3d0:	9a04      	ldr	r2, [sp, #16]
 800e3d2:	711a      	strb	r2, [r3, #4]
 800e3d4:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e3d6:	2204      	movs	r2, #4
 800e3d8:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e3da:	f009 fe37 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e3de:	2064      	movs	r0, #100	; 0x64
 800e3e0:	f000 fbc2 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.prev) {
 800e3e4:	4d75      	ldr	r5, [pc, #468]	; (800e5bc <main+0x1460>)
 800e3e6:	2404      	movs	r4, #4
 800e3e8:	792b      	ldrb	r3, [r5, #4]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d107      	bne.n	800e3fe <main+0x12a2>
					while (_ON == io_getButton().prev)
 800e3ee:	ac53      	add	r4, sp, #332	; 0x14c
 800e3f0:	0020      	movs	r0, r4
 800e3f2:	f009 fa0d 	bl	8017810 <io_getButton>
 800e3f6:	7923      	ldrb	r3, [r4, #4]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d0f8      	beq.n	800e3ee <main+0x1292>
					cycle = SET_HOUR;
 800e3fc:	2403      	movs	r4, #3
				if (_ON == mbutton.reset) {
 800e3fe:	786b      	ldrb	r3, [r5, #1]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d122      	bne.n	800e44a <main+0x12ee>
					while (_ON == io_getButton().reset)
 800e404:	ad51      	add	r5, sp, #324	; 0x144
 800e406:	0028      	movs	r0, r5
 800e408:	f009 fa02 	bl	8017810 <io_getButton>
 800e40c:	786b      	ldrb	r3, [r5, #1]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d0f8      	beq.n	800e404 <main+0x12a8>
					mtime.minute--;
 800e412:	9b04      	ldr	r3, [sp, #16]
 800e414:	3b01      	subs	r3, #1
 800e416:	b2db      	uxtb	r3, r3
					if (59 < mtime.minute)
 800e418:	1c1a      	adds	r2, r3, #0
 800e41a:	2b3b      	cmp	r3, #59	; 0x3b
 800e41c:	d900      	bls.n	800e420 <main+0x12c4>
 800e41e:	223b      	movs	r2, #59	; 0x3b
					mtime.second = 0;
 800e420:	2100      	movs	r1, #0
 800e422:	b2d3      	uxtb	r3, r2
 800e424:	9304      	str	r3, [sp, #16]
 800e426:	ab81      	add	r3, sp, #516	; 0x204
 800e428:	7159      	strb	r1, [r3, #5]
					screen_setDateTime(mtime, SET_MINUTE);
 800e42a:	9902      	ldr	r1, [sp, #8]
 800e42c:	711a      	strb	r2, [r3, #4]
 800e42e:	7059      	strb	r1, [r3, #1]
 800e430:	9903      	ldr	r1, [sp, #12]
 800e432:	701f      	strb	r7, [r3, #0]
 800e434:	7099      	strb	r1, [r3, #2]
 800e436:	9905      	ldr	r1, [sp, #20]
 800e438:	2204      	movs	r2, #4
 800e43a:	70d9      	strb	r1, [r3, #3]
 800e43c:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e43e:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e440:	f009 fe04 	bl	801804c <screen_setDateTime>
					HAL_Delay(TIME_WAIT);
 800e444:	2064      	movs	r0, #100	; 0x64
 800e446:	f000 fb8f 	bl	800eb68 <HAL_Delay>
				if (_ON == mbutton.menu) {
 800e44a:	4b5c      	ldr	r3, [pc, #368]	; (800e5bc <main+0x1460>)
 800e44c:	789b      	ldrb	r3, [r3, #2]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d115      	bne.n	800e47e <main+0x1322>
					while (_ON == io_getButton().menu)
 800e452:	ac4f      	add	r4, sp, #316	; 0x13c
 800e454:	0020      	movs	r0, r4
 800e456:	f009 f9db 	bl	8017810 <io_getButton>
 800e45a:	78a3      	ldrb	r3, [r4, #2]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d0f8      	beq.n	800e452 <main+0x12f6>
	rtc_SetDateTime(mtime);
 800e460:	9a02      	ldr	r2, [sp, #8]
 800e462:	ab81      	add	r3, sp, #516	; 0x204
 800e464:	705a      	strb	r2, [r3, #1]
 800e466:	9a03      	ldr	r2, [sp, #12]
 800e468:	701f      	strb	r7, [r3, #0]
 800e46a:	709a      	strb	r2, [r3, #2]
 800e46c:	9a05      	ldr	r2, [sp, #20]
 800e46e:	70da      	strb	r2, [r3, #3]
 800e470:	9a04      	ldr	r2, [sp, #16]
 800e472:	711a      	strb	r2, [r3, #4]
 800e474:	9881      	ldr	r0, [sp, #516]	; 0x204
 800e476:	9982      	ldr	r1, [sp, #520]	; 0x208
 800e478:	f009 fa90 	bl	801799c <rtc_SetDateTime>
	app_GotoMainScreen(calibStatus_1, MEASUREMENT_1, NOT_SHOW_SET_CALIB); // main screen
 800e47c:	e495      	b.n	800ddaa <main+0xc4e>
			} while (SET_MINUTE == cycle);
 800e47e:	2c04      	cmp	r4, #4
 800e480:	d081      	beq.n	800e386 <main+0x122a>
 800e482:	2403      	movs	r4, #3
	} while (0 == exit);
 800e484:	2e00      	cmp	r6, #0
 800e486:	d100      	bne.n	800e48a <main+0x132e>
 800e488:	e535      	b.n	800def6 <main+0xd9a>
 800e48a:	e7e9      	b.n	800e460 <main+0x1304>
	screen_showIP(&net_info);
 800e48c:	484c      	ldr	r0, [pc, #304]	; (800e5c0 <main+0x1464>)
 800e48e:	f009 fecb 	bl	8018228 <screen_showIP>
		mbutton = io_getButton();
 800e492:	a808      	add	r0, sp, #32
 800e494:	f009 f9bc 	bl	8017810 <io_getButton>
 800e498:	2205      	movs	r2, #5
 800e49a:	0028      	movs	r0, r5
 800e49c:	a908      	add	r1, sp, #32
 800e49e:	f00a f8cb 	bl	8018638 <memcpy>
		if (mbutton.menu == _ON) {
 800e4a2:	78ab      	ldrb	r3, [r5, #2]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d1f4      	bne.n	800e492 <main+0x1336>
			while (_ON == io_getButton().menu)
 800e4a8:	ac7d      	add	r4, sp, #500	; 0x1f4
 800e4aa:	0020      	movs	r0, r4
 800e4ac:	f009 f9b0 	bl	8017810 <io_getButton>
 800e4b0:	78a3      	ldrb	r3, [r4, #2]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d0f8      	beq.n	800e4a8 <main+0x134c>
 800e4b6:	e478      	b.n	800ddaa <main+0xc4e>
		else if (_ON == minput.in1) {
 800e4b8:	785a      	ldrb	r2, [r3, #1]
 800e4ba:	2a01      	cmp	r2, #1
 800e4bc:	d001      	beq.n	800e4c2 <main+0x1366>
 800e4be:	f7ff fa2b 	bl	800d918 <main+0x7bc>
			minput.in1 = _OFF;
 800e4c2:	2200      	movs	r2, #0
			app_Measurement(MEASUREMENT_2); //measurement 2
 800e4c4:	2002      	movs	r0, #2
			minput.in1 = _OFF;
 800e4c6:	705a      	strb	r2, [r3, #1]
			app_Measurement(MEASUREMENT_2); //measurement 2
 800e4c8:	f7ff fa24 	bl	800d914 <main+0x7b8>
				} else if (mainScreenFlag == MEASUREMENT_2
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	b2de      	uxtb	r6, r3
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	d001      	beq.n	800e4d8 <main+0x137c>
 800e4d4:	f7ff f964 	bl	800d7a0 <main+0x644>
						&& meas2WrongPos == 1) {
 800e4d8:	4b3a      	ldr	r3, [pc, #232]	; (800e5c4 <main+0x1468>)
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	2a01      	cmp	r2, #1
 800e4de:	d001      	beq.n	800e4e4 <main+0x1388>
 800e4e0:	f7ff f95e 	bl	800d7a0 <main+0x644>
					meas2WrongPos = 0;
 800e4e4:	2400      	movs	r4, #0
 800e4e6:	701c      	strb	r4, [r3, #0]
					moutput.out5 = _OFF;
 800e4e8:	4b37      	ldr	r3, [pc, #220]	; (800e5c8 <main+0x146c>)
					io_setOutput(moutput, ucRegCoilsBuf);
 800e4ea:	4d38      	ldr	r5, [pc, #224]	; (800e5cc <main+0x1470>)
 800e4ec:	785a      	ldrb	r2, [r3, #1]
 800e4ee:	7819      	ldrb	r1, [r3, #0]
 800e4f0:	7898      	ldrb	r0, [r3, #2]
 800e4f2:	0212      	lsls	r2, r2, #8
 800e4f4:	4311      	orrs	r1, r2
 800e4f6:	78da      	ldrb	r2, [r3, #3]
 800e4f8:	0400      	lsls	r0, r0, #16
 800e4fa:	4308      	orrs	r0, r1
 800e4fc:	0612      	lsls	r2, r2, #24
 800e4fe:	79d9      	ldrb	r1, [r3, #7]
 800e500:	4310      	orrs	r0, r2
 800e502:	791a      	ldrb	r2, [r3, #4]
 800e504:	0609      	lsls	r1, r1, #24
 800e506:	4311      	orrs	r1, r2
 800e508:	002a      	movs	r2, r5
					moutput.out5 = _OFF;
 800e50a:	715c      	strb	r4, [r3, #5]
					moutput.out6 = _OFF;
 800e50c:	719c      	strb	r4, [r3, #6]
					io_setOutput(moutput, ucRegCoilsBuf);
 800e50e:	f009 f9bd 	bl	801788c <io_setOutput>
					if (calibStatus_2 == CALIBSET)
 800e512:	4b2f      	ldr	r3, [pc, #188]	; (800e5d0 <main+0x1474>)
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800e514:	0029      	movs	r1, r5
					if (calibStatus_2 == CALIBSET)
 800e516:	7818      	ldrb	r0, [r3, #0]
 800e518:	4b2e      	ldr	r3, [pc, #184]	; (800e5d4 <main+0x1478>)
 800e51a:	4242      	negs	r2, r0
 800e51c:	4150      	adcs	r0, r2
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800e51e:	781a      	ldrb	r2, [r3, #0]
 800e520:	7058      	strb	r0, [r3, #1]
 800e522:	789b      	ldrb	r3, [r3, #2]
 800e524:	0200      	lsls	r0, r0, #8
 800e526:	4310      	orrs	r0, r2
 800e528:	041b      	lsls	r3, r3, #16
 800e52a:	4318      	orrs	r0, r3
 800e52c:	f009 fa0c 	bl	8017948 <io_setLedStatus>
					app_GotoMainScreen(CALIBSET, MEASUREMENT_2,
 800e530:	0022      	movs	r2, r4
 800e532:	0031      	movs	r1, r6
 800e534:	f7ff fa4c 	bl	800d9d0 <main+0x874>
			} else if (__time >= TIMER_RESET_CALIB /*10sec*/) { //long press button in 10sec
 800e538:	4a27      	ldr	r2, [pc, #156]	; (800e5d8 <main+0x147c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	dc01      	bgt.n	800e542 <main+0x13e6>
 800e53e:	f7ff f92f 	bl	800d7a0 <main+0x644>
				MeasureValue vl = { 0, 0, 0, 0, 0 };
 800e542:	2214      	movs	r2, #20
 800e544:	2100      	movs	r1, #0
 800e546:	a881      	add	r0, sp, #516	; 0x204
 800e548:	f00a f87f 	bl	801864a <memset>
				if (mainScreenFlag == MEASUREMENT_1) {
 800e54c:	4b23      	ldr	r3, [pc, #140]	; (800e5dc <main+0x1480>)
 800e54e:	4c21      	ldr	r4, [pc, #132]	; (800e5d4 <main+0x1478>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	4d1e      	ldr	r5, [pc, #120]	; (800e5cc <main+0x1470>)
 800e554:	b2df      	uxtb	r7, r3
 800e556:	2b01      	cmp	r3, #1
 800e558:	d114      	bne.n	800e584 <main+0x1428>
					mledStatus.led1 = _OFF;
 800e55a:	2600      	movs	r6, #0
					FLASH_WriteDataCalib(&vl, MEASUREMENT_1);
 800e55c:	2101      	movs	r1, #1
 800e55e:	a881      	add	r0, sp, #516	; 0x204
 800e560:	f004 fb50 	bl	8012c04 <FLASH_WriteDataCalib>
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800e564:	7863      	ldrb	r3, [r4, #1]
 800e566:	78a0      	ldrb	r0, [r4, #2]
 800e568:	021b      	lsls	r3, r3, #8
 800e56a:	0400      	lsls	r0, r0, #16
 800e56c:	4318      	orrs	r0, r3
 800e56e:	0029      	movs	r1, r5
					mledStatus.led1 = _OFF;
 800e570:	7026      	strb	r6, [r4, #0]
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800e572:	f009 f9e9 	bl	8017948 <io_setLedStatus>
					app_GotoMainScreen(CALIBRESET, MEASUREMENT_1,
 800e576:	2101      	movs	r1, #1
					calibStatus_1 = CALIBRESET;
 800e578:	4b19      	ldr	r3, [pc, #100]	; (800e5e0 <main+0x1484>)
					app_GotoMainScreen(CALIBRESET, MEASUREMENT_1,
 800e57a:	0032      	movs	r2, r6
 800e57c:	0008      	movs	r0, r1
					calibStatus_1 = CALIBRESET;
 800e57e:	701f      	strb	r7, [r3, #0]
					app_GotoMainScreen(CALIBRESET, MEASUREMENT_1,
 800e580:	f7ff f90c 	bl	800d79c <main+0x640>
					mledStatus.led2 = _OFF;
 800e584:	2600      	movs	r6, #0
					FLASH_WriteDataCalib(&vl, MEASUREMENT_2);
 800e586:	2102      	movs	r1, #2
 800e588:	a881      	add	r0, sp, #516	; 0x204
 800e58a:	f004 fb3b 	bl	8012c04 <FLASH_WriteDataCalib>
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800e58e:	78a0      	ldrb	r0, [r4, #2]
 800e590:	7823      	ldrb	r3, [r4, #0]
 800e592:	0400      	lsls	r0, r0, #16
 800e594:	4318      	orrs	r0, r3
 800e596:	0029      	movs	r1, r5
					mledStatus.led2 = _OFF;
 800e598:	7066      	strb	r6, [r4, #1]
					io_setLedStatus(mledStatus, ucRegCoilsBuf);
 800e59a:	f009 f9d5 	bl	8017948 <io_setLedStatus>
					calibStatus_2 = CALIBRESET;
 800e59e:	2201      	movs	r2, #1
 800e5a0:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <main+0x1474>)
					app_GotoMainScreen(CALIBRESET, MEASUREMENT_2,
 800e5a2:	2102      	movs	r1, #2
					calibStatus_2 = CALIBRESET;
 800e5a4:	701a      	strb	r2, [r3, #0]
					app_GotoMainScreen(CALIBRESET, MEASUREMENT_2,
 800e5a6:	2001      	movs	r0, #1
 800e5a8:	0032      	movs	r2, r6
 800e5aa:	f7ff f8f7 	bl	800d79c <main+0x640>
		if (cycle == L_set) {
 800e5ae:	0025      	movs	r5, r4
 800e5b0:	9602      	str	r6, [sp, #8]
 800e5b2:	2c03      	cmp	r4, #3
 800e5b4:	d000      	beq.n	800e5b8 <main+0x145c>
 800e5b6:	e411      	b.n	800dddc <main+0xc80>
 800e5b8:	f7ff fb89 	bl	800dcce <main+0xb72>
 800e5bc:	2000059e 	.word	0x2000059e
 800e5c0:	200000cc 	.word	0x200000cc
 800e5c4:	200005cb 	.word	0x200005cb
 800e5c8:	200005e7 	.word	0x200005e7
 800e5cc:	200005fc 	.word	0x200005fc
 800e5d0:	2000034b 	.word	0x2000034b
 800e5d4:	200005d0 	.word	0x200005d0
 800e5d8:	0098967f 	.word	0x0098967f
 800e5dc:	2000059d 	.word	0x2000059d
 800e5e0:	2000034a 	.word	0x2000034a

0800e5e4 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == IN2_Pin) {
 800e5e4:	2380      	movs	r3, #128	; 0x80
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800e5e6:	0001      	movs	r1, r0
 800e5e8:	b510      	push	{r4, lr}
	if (GPIO_Pin == IN2_Pin) {
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4298      	cmp	r0, r3
 800e5ee:	d10c      	bne.n	800e60a <HAL_GPIO_EXTI_Callback+0x26>
		minput.in2 = _ON;
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <HAL_GPIO_EXTI_Callback+0x4c>)
		overflow = 0; // reset
 800e5f4:	490f      	ldr	r1, [pc, #60]	; (800e634 <HAL_GPIO_EXTI_Callback+0x50>)
		minput.in2 = _ON;
 800e5f6:	709a      	strb	r2, [r3, #2]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	4b0f      	ldr	r3, [pc, #60]	; (800e638 <HAL_GPIO_EXTI_Callback+0x54>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	625a      	str	r2, [r3, #36]	; 0x24
		overflow = 0; // reset
 800e600:	600a      	str	r2, [r1, #0]
		previousCapture = __HAL_TIM_GET_COUNTER(&htim1);
 800e602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e604:	4b0d      	ldr	r3, [pc, #52]	; (800e63c <HAL_GPIO_EXTI_Callback+0x58>)
 800e606:	601a      	str	r2, [r3, #0]
}
 800e608:	bd10      	pop	{r4, pc}
	if (GPIO_Pin == SD_Detect_Pin) {
 800e60a:	2804      	cmp	r0, #4
 800e60c:	d1fc      	bne.n	800e608 <HAL_GPIO_EXTI_Callback+0x24>
		if (HAL_GPIO_ReadPin(SD_Detect_GPIO_Port, SD_Detect_Pin)
 800e60e:	480c      	ldr	r0, [pc, #48]	; (800e640 <HAL_GPIO_EXTI_Callback+0x5c>)
 800e610:	f000 fd6e 	bl	800f0f0 <HAL_GPIO_ReadPin>
 800e614:	2800      	cmp	r0, #0
 800e616:	d104      	bne.n	800e622 <HAL_GPIO_EXTI_Callback+0x3e>
			MX_SPI2_Init();
 800e618:	f7fc fd94 	bl	800b144 <MX_SPI2_Init>
			MX_FATFS_Init();
 800e61c:	f004 fa88 	bl	8012b30 <MX_FATFS_Init>
 800e620:	e7f2      	b.n	800e608 <HAL_GPIO_EXTI_Callback+0x24>
			HAL_SPI_DeInit(&hspi2);
 800e622:	4808      	ldr	r0, [pc, #32]	; (800e644 <HAL_GPIO_EXTI_Callback+0x60>)
 800e624:	f002 fb36 	bl	8010c94 <HAL_SPI_DeInit>
			MX_FATFS_DeInit();
 800e628:	f004 fa92 	bl	8012b50 <MX_FATFS_DeInit>
}
 800e62c:	e7ec      	b.n	800e608 <HAL_GPIO_EXTI_Callback+0x24>
 800e62e:	46c0      	nop			; (mov r8, r8)
 800e630:	200005cd 	.word	0x200005cd
 800e634:	200005f4 	.word	0x200005f4
 800e638:	2000043c 	.word	0x2000043c
 800e63c:	200005f8 	.word	0x200005f8
 800e640:	48000c00 	.word	0x48000c00
 800e644:	200003d8 	.word	0x200003d8

0800e648 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800e648:	b530      	push	{r4, r5, lr}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800e64a:	7f03      	ldrb	r3, [r0, #28]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d114      	bne.n	800e67a <HAL_TIM_IC_CaptureCallback+0x32>
		uint32_t currentCapture = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800e650:	4c12      	ldr	r4, [pc, #72]	; (800e69c <HAL_TIM_IC_CaptureCallback+0x54>)
		msensor.s0 = _ON;
 800e652:	4913      	ldr	r1, [pc, #76]	; (800e6a0 <HAL_TIM_IC_CaptureCallback+0x58>)
		uint32_t currentCapture = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 800e654:	6822      	ldr	r2, [r4, #0]
 800e656:	4813      	ldr	r0, [pc, #76]	; (800e6a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800e658:	6b52      	ldr	r2, [r2, #52]	; 0x34
		msensor.s0 = _ON;
 800e65a:	700b      	strb	r3, [r1, #0]
		if (overflow)
 800e65c:	4b12      	ldr	r3, [pc, #72]	; (800e6a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800e65e:	4913      	ldr	r1, [pc, #76]	; (800e6ac <HAL_TIM_IC_CaptureCallback+0x64>)
 800e660:	681d      	ldr	r5, [r3, #0]
		if (overflow)
 800e662:	2d00      	cmp	r5, #0
 800e664:	d016      	beq.n	800e694 <HAL_TIM_IC_CaptureCallback+0x4c>
			captureTime_Y = ((overflow - 1) * MAX_PERIOD) + currentCapture
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	68e4      	ldr	r4, [r4, #12]
 800e66a:	3b01      	subs	r3, #1
					+ (MAX_PERIOD - previousCapture);
 800e66c:	6809      	ldr	r1, [r1, #0]
			captureTime_Y = ((overflow - 1) * MAX_PERIOD) + currentCapture
 800e66e:	4363      	muls	r3, r4
					+ (MAX_PERIOD - previousCapture);
 800e670:	1a52      	subs	r2, r2, r1
 800e672:	1912      	adds	r2, r2, r4
 800e674:	189b      	adds	r3, r3, r2
			captureTime_Y = ((overflow - 1) * MAX_PERIOD) + currentCapture
 800e676:	6003      	str	r3, [r0, #0]
}
 800e678:	bd30      	pop	{r4, r5, pc}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d1fc      	bne.n	800e678 <HAL_TIM_IC_CaptureCallback+0x30>
		msensor.s1 = _ON;
 800e67e:	2101      	movs	r1, #1
		uint32_t currentCapture = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 800e680:	4c06      	ldr	r4, [pc, #24]	; (800e69c <HAL_TIM_IC_CaptureCallback+0x54>)
 800e682:	480b      	ldr	r0, [pc, #44]	; (800e6b0 <HAL_TIM_IC_CaptureCallback+0x68>)
 800e684:	6823      	ldr	r3, [r4, #0]
 800e686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		msensor.s1 = _ON;
 800e688:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <HAL_TIM_IC_CaptureCallback+0x58>)
 800e68a:	7059      	strb	r1, [r3, #1]
		if (overflow)
 800e68c:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800e68e:	4907      	ldr	r1, [pc, #28]	; (800e6ac <HAL_TIM_IC_CaptureCallback+0x64>)
 800e690:	681d      	ldr	r5, [r3, #0]
 800e692:	e7e6      	b.n	800e662 <HAL_TIM_IC_CaptureCallback+0x1a>
			captureTime_Y = currentCapture - previousCapture;
 800e694:	680b      	ldr	r3, [r1, #0]
 800e696:	1ad2      	subs	r2, r2, r3
 800e698:	6002      	str	r2, [r0, #0]
}
 800e69a:	e7ed      	b.n	800e678 <HAL_TIM_IC_CaptureCallback+0x30>
 800e69c:	2000043c 	.word	0x2000043c
 800e6a0:	200005ef 	.word	0x200005ef
 800e6a4:	2000034c 	.word	0x2000034c
 800e6a8:	200005f4 	.word	0x200005f4
 800e6ac:	200005f8 	.word	0x200005f8
 800e6b0:	20000350 	.word	0x20000350

0800e6b4 <Error_Handler>:
 800e6b4:	b672      	cpsid	i
	while (1) {
 800e6b6:	e7fe      	b.n	800e6b6 <Error_Handler+0x2>

0800e6b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e6b8:	2001      	movs	r0, #1
 800e6ba:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <HAL_MspInit+0x2c>)
{
 800e6bc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e6be:	6999      	ldr	r1, [r3, #24]
 800e6c0:	4301      	orrs	r1, r0
 800e6c2:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6c4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e6c6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6c8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e6ca:	4002      	ands	r2, r0
 800e6cc:	9200      	str	r2, [sp, #0]
 800e6ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6d0:	69da      	ldr	r2, [r3, #28]
 800e6d2:	430a      	orrs	r2, r1
 800e6d4:	61da      	str	r2, [r3, #28]
 800e6d6:	69db      	ldr	r3, [r3, #28]
 800e6d8:	400b      	ands	r3, r1
 800e6da:	9301      	str	r3, [sp, #4]
 800e6dc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e6de:	b002      	add	sp, #8
 800e6e0:	4770      	bx	lr
 800e6e2:	46c0      	nop			; (mov r8, r8)
 800e6e4:	40021000 	.word	0x40021000

0800e6e8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800e6e8:	4b05      	ldr	r3, [pc, #20]	; (800e700 <HAL_RTC_MspInit+0x18>)
 800e6ea:	6802      	ldr	r2, [r0, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d105      	bne.n	800e6fc <HAL_RTC_MspInit+0x14>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e6f0:	2380      	movs	r3, #128	; 0x80
 800e6f2:	4a04      	ldr	r2, [pc, #16]	; (800e704 <HAL_RTC_MspInit+0x1c>)
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	6a11      	ldr	r1, [r2, #32]
 800e6f8:	430b      	orrs	r3, r1
 800e6fa:	6213      	str	r3, [r2, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e6fc:	4770      	bx	lr
 800e6fe:	46c0      	nop			; (mov r8, r8)
 800e700:	40002800 	.word	0x40002800
 800e704:	40021000 	.word	0x40021000

0800e708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e708:	b510      	push	{r4, lr}
 800e70a:	0004      	movs	r4, r0
 800e70c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e70e:	2214      	movs	r2, #20
 800e710:	2100      	movs	r1, #0
 800e712:	a805      	add	r0, sp, #20
 800e714:	f009 ff99 	bl	801864a <memset>
  if(hspi->Instance==SPI1)
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	4a22      	ldr	r2, [pc, #136]	; (800e7a4 <HAL_SPI_MspInit+0x9c>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d11f      	bne.n	800e760 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e720:	2080      	movs	r0, #128	; 0x80
 800e722:	4b21      	ldr	r3, [pc, #132]	; (800e7a8 <HAL_SPI_MspInit+0xa0>)
 800e724:	0140      	lsls	r0, r0, #5
 800e726:	6999      	ldr	r1, [r3, #24]
 800e728:	4301      	orrs	r1, r0
 800e72a:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e72c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e72e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e730:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e732:	4002      	ands	r2, r0
 800e734:	9201      	str	r2, [sp, #4]
 800e736:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e738:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e73a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e73c:	430a      	orrs	r2, r1
 800e73e:	615a      	str	r2, [r3, #20]
 800e740:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e742:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e744:	400b      	ands	r3, r1
 800e746:	9302      	str	r3, [sp, #8]
 800e748:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin;
 800e74a:	23e0      	movs	r3, #224	; 0xe0
 800e74c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e74e:	3bde      	subs	r3, #222	; 0xde
 800e750:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e752:	3301      	adds	r3, #1
 800e754:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e756:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e758:	f000 fb8c 	bl	800ee74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e75c:	b00a      	add	sp, #40	; 0x28
 800e75e:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800e760:	4a12      	ldr	r2, [pc, #72]	; (800e7ac <HAL_SPI_MspInit+0xa4>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d1fa      	bne.n	800e75c <HAL_SPI_MspInit+0x54>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e766:	2080      	movs	r0, #128	; 0x80
 800e768:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <HAL_SPI_MspInit+0xa0>)
 800e76a:	01c0      	lsls	r0, r0, #7
 800e76c:	69d9      	ldr	r1, [r3, #28]
 800e76e:	4301      	orrs	r1, r0
 800e770:	61d9      	str	r1, [r3, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e772:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e774:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e776:	0349      	lsls	r1, r1, #13
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e778:	4002      	ands	r2, r0
 800e77a:	9203      	str	r2, [sp, #12]
 800e77c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e77e:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e780:	480b      	ldr	r0, [pc, #44]	; (800e7b0 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e782:	430a      	orrs	r2, r1
 800e784:	615a      	str	r2, [r3, #20]
 800e786:	695b      	ldr	r3, [r3, #20]
 800e788:	400b      	ands	r3, r1
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800e78e:	231a      	movs	r3, #26
 800e790:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e792:	3b18      	subs	r3, #24
 800e794:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e796:	3301      	adds	r3, #1
 800e798:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800e79a:	3b02      	subs	r3, #2
 800e79c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e79e:	a905      	add	r1, sp, #20
 800e7a0:	e7da      	b.n	800e758 <HAL_SPI_MspInit+0x50>
 800e7a2:	46c0      	nop			; (mov r8, r8)
 800e7a4:	40013000 	.word	0x40013000
 800e7a8:	40021000 	.word	0x40021000
 800e7ac:	40003800 	.word	0x40003800
 800e7b0:	48000c00 	.word	0x48000c00

0800e7b4 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 800e7b4:	6803      	ldr	r3, [r0, #0]
 800e7b6:	4a0d      	ldr	r2, [pc, #52]	; (800e7ec <HAL_SPI_MspDeInit+0x38>)
{
 800e7b8:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d10a      	bne.n	800e7d4 <HAL_SPI_MspDeInit+0x20>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800e7be:	4a0c      	ldr	r2, [pc, #48]	; (800e7f0 <HAL_SPI_MspDeInit+0x3c>)
 800e7c0:	490c      	ldr	r1, [pc, #48]	; (800e7f4 <HAL_SPI_MspDeInit+0x40>)
 800e7c2:	6993      	ldr	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin);
 800e7c4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_DISABLE();
 800e7c6:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOA, W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin);
 800e7c8:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI1_CLK_DISABLE();
 800e7ca:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, W5500_SCK_Pin|W5500_MISO_Pin|W5500_MOSI_Pin);
 800e7cc:	05c0      	lsls	r0, r0, #23
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOD, SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin);
 800e7ce:	f000 fc15 	bl	800effc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800e7d2:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800e7d4:	4a08      	ldr	r2, [pc, #32]	; (800e7f8 <HAL_SPI_MspDeInit+0x44>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d1fb      	bne.n	800e7d2 <HAL_SPI_MspDeInit+0x1e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800e7da:	4a05      	ldr	r2, [pc, #20]	; (800e7f0 <HAL_SPI_MspDeInit+0x3c>)
 800e7dc:	4907      	ldr	r1, [pc, #28]	; (800e7fc <HAL_SPI_MspDeInit+0x48>)
 800e7de:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOD, SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin);
 800e7e0:	4807      	ldr	r0, [pc, #28]	; (800e800 <HAL_SPI_MspDeInit+0x4c>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 800e7e2:	400b      	ands	r3, r1
 800e7e4:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOD, SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin);
 800e7e6:	211a      	movs	r1, #26
 800e7e8:	e7f1      	b.n	800e7ce <HAL_SPI_MspDeInit+0x1a>
 800e7ea:	46c0      	nop			; (mov r8, r8)
 800e7ec:	40013000 	.word	0x40013000
 800e7f0:	40021000 	.word	0x40021000
 800e7f4:	ffffefff 	.word	0xffffefff
 800e7f8:	40003800 	.word	0x40003800
 800e7fc:	ffffbfff 	.word	0xffffbfff
 800e800:	48000c00 	.word	0x48000c00

0800e804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e804:	b510      	push	{r4, lr}
 800e806:	0004      	movs	r4, r0
 800e808:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e80a:	2214      	movs	r2, #20
 800e80c:	2100      	movs	r1, #0
 800e80e:	a805      	add	r0, sp, #20
 800e810:	f009 ff1b 	bl	801864a <memset>
  if(htim_base->Instance==TIM1)
 800e814:	6823      	ldr	r3, [r4, #0]
 800e816:	4a28      	ldr	r2, [pc, #160]	; (800e8b8 <HAL_TIM_Base_MspInit+0xb4>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d12d      	bne.n	800e878 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e81c:	2080      	movs	r0, #128	; 0x80
 800e81e:	4b27      	ldr	r3, [pc, #156]	; (800e8bc <HAL_TIM_Base_MspInit+0xb8>)
 800e820:	0100      	lsls	r0, r0, #4
 800e822:	6999      	ldr	r1, [r3, #24]
 800e824:	4301      	orrs	r1, r0
 800e826:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e828:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e82a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e82c:	0389      	lsls	r1, r1, #14
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e82e:	4002      	ands	r2, r0
 800e830:	9201      	str	r2, [sp, #4]
 800e832:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e834:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = SENSOR_X_Pin|SENSOR_Y_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e836:	4822      	ldr	r0, [pc, #136]	; (800e8c0 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e838:	430a      	orrs	r2, r1
 800e83a:	615a      	str	r2, [r3, #20]
 800e83c:	695b      	ldr	r3, [r3, #20]
 800e83e:	400b      	ands	r3, r1
 800e840:	9302      	str	r3, [sp, #8]
 800e842:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SENSOR_X_Pin|SENSOR_Y_Pin;
 800e844:	23a0      	movs	r3, #160	; 0xa0
 800e846:	011b      	lsls	r3, r3, #4
 800e848:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e84a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e84c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e84e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e850:	f000 fb10 	bl	800ee74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 800e854:	2200      	movs	r2, #0
 800e856:	2101      	movs	r1, #1
 800e858:	200d      	movs	r0, #13
 800e85a:	f000 f997 	bl	800eb8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800e85e:	200d      	movs	r0, #13
 800e860:	f000 f9be 	bl	800ebe0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800e864:	2200      	movs	r2, #0
 800e866:	200e      	movs	r0, #14
 800e868:	0011      	movs	r1, r2
 800e86a:	f000 f98f 	bl	800eb8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800e86e:	200e      	movs	r0, #14
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e870:	f000 f9b6 	bl	800ebe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800e874:	b00a      	add	sp, #40	; 0x28
 800e876:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 800e878:	4a12      	ldr	r2, [pc, #72]	; (800e8c4 <HAL_TIM_Base_MspInit+0xc0>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d10e      	bne.n	800e89c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e87e:	2102      	movs	r1, #2
 800e880:	4b0e      	ldr	r3, [pc, #56]	; (800e8bc <HAL_TIM_Base_MspInit+0xb8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800e882:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e884:	69da      	ldr	r2, [r3, #28]
 800e886:	430a      	orrs	r2, r1
 800e888:	61da      	str	r2, [r3, #28]
 800e88a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800e88c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e88e:	400b      	ands	r3, r1
 800e890:	9303      	str	r3, [sp, #12]
 800e892:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800e894:	f000 f97a 	bl	800eb8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e898:	2010      	movs	r0, #16
 800e89a:	e7e9      	b.n	800e870 <HAL_TIM_Base_MspInit+0x6c>
  else if(htim_base->Instance==TIM6)
 800e89c:	4a0a      	ldr	r2, [pc, #40]	; (800e8c8 <HAL_TIM_Base_MspInit+0xc4>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d1e8      	bne.n	800e874 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e8a2:	2010      	movs	r0, #16
 800e8a4:	4a05      	ldr	r2, [pc, #20]	; (800e8bc <HAL_TIM_Base_MspInit+0xb8>)
 800e8a6:	69d1      	ldr	r1, [r2, #28]
 800e8a8:	4301      	orrs	r1, r0
 800e8aa:	61d1      	str	r1, [r2, #28]
 800e8ac:	69d3      	ldr	r3, [r2, #28]
 800e8ae:	4003      	ands	r3, r0
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	9b04      	ldr	r3, [sp, #16]
}
 800e8b4:	e7de      	b.n	800e874 <HAL_TIM_Base_MspInit+0x70>
 800e8b6:	46c0      	nop			; (mov r8, r8)
 800e8b8:	40012c00 	.word	0x40012c00
 800e8bc:	40021000 	.word	0x40021000
 800e8c0:	48001000 	.word	0x48001000
 800e8c4:	40000400 	.word	0x40000400
 800e8c8:	40001000 	.word	0x40001000

0800e8cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	0004      	movs	r4, r0
 800e8d0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8d2:	2214      	movs	r2, #20
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	a801      	add	r0, sp, #4
 800e8d8:	f009 feb7 	bl	801864a <memset>
  if(htim->Instance==TIM3)
 800e8dc:	4b0b      	ldr	r3, [pc, #44]	; (800e90c <HAL_TIM_MspPostInit+0x40>)
 800e8de:	6822      	ldr	r2, [r4, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d111      	bne.n	800e908 <HAL_TIM_MspPostInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e8e4:	2080      	movs	r0, #128	; 0x80
 800e8e6:	4a0a      	ldr	r2, [pc, #40]	; (800e910 <HAL_TIM_MspPostInit+0x44>)
 800e8e8:	0380      	lsls	r0, r0, #14
 800e8ea:	6951      	ldr	r1, [r2, #20]
 800e8ec:	4301      	orrs	r1, r0
 800e8ee:	6151      	str	r1, [r2, #20]
 800e8f0:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e8f2:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e8f4:	4003      	ands	r3, r0
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e8fa:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e8fc:	4805      	ldr	r0, [pc, #20]	; (800e914 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e8fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e900:	3b06      	subs	r3, #6
 800e902:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e904:	f000 fab6 	bl	800ee74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e908:	b006      	add	sp, #24
 800e90a:	bd10      	pop	{r4, pc}
 800e90c:	40000400 	.word	0x40000400
 800e910:	40021000 	.word	0x40021000
 800e914:	48001000 	.word	0x48001000

0800e918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e918:	b510      	push	{r4, lr}
 800e91a:	0004      	movs	r4, r0
 800e91c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e91e:	2214      	movs	r2, #20
 800e920:	2100      	movs	r1, #0
 800e922:	a803      	add	r0, sp, #12
 800e924:	f009 fe91 	bl	801864a <memset>
  if(huart->Instance==USART2)
 800e928:	4b11      	ldr	r3, [pc, #68]	; (800e970 <HAL_UART_MspInit+0x58>)
 800e92a:	6822      	ldr	r2, [r4, #0]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d11d      	bne.n	800e96c <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e930:	2280      	movs	r2, #128	; 0x80
 800e932:	4b10      	ldr	r3, [pc, #64]	; (800e974 <HAL_UART_MspInit+0x5c>)
 800e934:	0292      	lsls	r2, r2, #10
 800e936:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e938:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800e93a:	4311      	orrs	r1, r2
 800e93c:	61d9      	str	r1, [r3, #28]
 800e93e:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e940:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800e942:	4011      	ands	r1, r2
 800e944:	9101      	str	r1, [sp, #4]
 800e946:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e948:	6959      	ldr	r1, [r3, #20]
 800e94a:	4311      	orrs	r1, r2
 800e94c:	6159      	str	r1, [r3, #20]
 800e94e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e950:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e952:	401a      	ands	r2, r3
 800e954:	9202      	str	r2, [sp, #8]
 800e956:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800e958:	230e      	movs	r3, #14
 800e95a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e95c:	3b0c      	subs	r3, #12
 800e95e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e960:	3301      	adds	r3, #1
 800e962:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800e964:	3b02      	subs	r3, #2
 800e966:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e968:	f000 fa84 	bl	800ee74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e96c:	b008      	add	sp, #32
 800e96e:	bd10      	pop	{r4, pc}
 800e970:	40004400 	.word	0x40004400
 800e974:	40021000 	.word	0x40021000

0800e978 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e978:	e7fe      	b.n	800e978 <NMI_Handler>

0800e97a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e97a:	e7fe      	b.n	800e97a <HardFault_Handler>

0800e97c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800e97c:	4770      	bx	lr

0800e97e <PendSV_Handler>:
 800e97e:	4770      	bx	lr

0800e980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e980:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e982:	f000 f8df 	bl	800eb44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e986:	bd10      	pop	{r4, pc}

0800e988 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800e988:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_Detect_Pin);
 800e98a:	2004      	movs	r0, #4
 800e98c:	f000 fbc4 	bl	800f118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800e990:	bd10      	pop	{r4, pc}

0800e992 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IN2_Pin);
 800e992:	2080      	movs	r0, #128	; 0x80
{
 800e994:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(IN2_Pin);
 800e996:	0080      	lsls	r0, r0, #2
 800e998:	f000 fbbe 	bl	800f118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800e99c:	bd10      	pop	{r4, pc}
	...

0800e9a0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800e9a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e9a2:	4802      	ldr	r0, [pc, #8]	; (800e9ac <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 800e9a4:	f002 fd6d 	bl	8011482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800e9a8:	bd10      	pop	{r4, pc}
 800e9aa:	46c0      	nop			; (mov r8, r8)
 800e9ac:	2000043c 	.word	0x2000043c

0800e9b0 <TIM1_CC_IRQHandler>:
 800e9b0:	b510      	push	{r4, lr}
 800e9b2:	f7ff fff5 	bl	800e9a0 <TIM1_BRK_UP_TRG_COM_IRQHandler>
 800e9b6:	bd10      	pop	{r4, pc}

0800e9b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800e9b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800e9ba:	4802      	ldr	r0, [pc, #8]	; (800e9c4 <TIM3_IRQHandler+0xc>)
 800e9bc:	f002 fd61 	bl	8011482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800e9c0:	bd10      	pop	{r4, pc}
 800e9c2:	46c0      	nop			; (mov r8, r8)
 800e9c4:	20000484 	.word	0x20000484

0800e9c8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800e9c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800e9ca:	4802      	ldr	r0, [pc, #8]	; (800e9d4 <USB_IRQHandler+0xc>)
 800e9cc:	f000 fc40 	bl	800f250 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800e9d0:	bd10      	pop	{r4, pc}
 800e9d2:	46c0      	nop			; (mov r8, r8)
 800e9d4:	20001060 	.word	0x20001060

0800e9d8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800e9d8:	2001      	movs	r0, #1
 800e9da:	4770      	bx	lr

0800e9dc <_kill>:

int _kill(int pid, int sig)
{
 800e9dc:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e9de:	f009 fdf1 	bl	80185c4 <__errno>
 800e9e2:	2316      	movs	r3, #22
 800e9e4:	6003      	str	r3, [r0, #0]
  return -1;
 800e9e6:	2001      	movs	r0, #1
}
 800e9e8:	4240      	negs	r0, r0
 800e9ea:	bd10      	pop	{r4, pc}

0800e9ec <_exit>:

void _exit (int status)
{
 800e9ec:	b510      	push	{r4, lr}
  errno = EINVAL;
 800e9ee:	f009 fde9 	bl	80185c4 <__errno>
 800e9f2:	2316      	movs	r3, #22
 800e9f4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800e9f6:	e7fe      	b.n	800e9f6 <_exit+0xa>

0800e9f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e9f8:	b570      	push	{r4, r5, r6, lr}
 800e9fa:	000e      	movs	r6, r1
 800e9fc:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e9fe:	2500      	movs	r5, #0
 800ea00:	42a5      	cmp	r5, r4
 800ea02:	db01      	blt.n	800ea08 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800ea04:	0020      	movs	r0, r4
 800ea06:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800ea08:	e000      	b.n	800ea0c <_read+0x14>
 800ea0a:	bf00      	nop
 800ea0c:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea0e:	3501      	adds	r5, #1
 800ea10:	e7f6      	b.n	800ea00 <_read+0x8>

0800ea12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ea12:	b570      	push	{r4, r5, r6, lr}
 800ea14:	000e      	movs	r6, r1
 800ea16:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea18:	2500      	movs	r5, #0
 800ea1a:	42a5      	cmp	r5, r4
 800ea1c:	db01      	blt.n	800ea22 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800ea1e:	0020      	movs	r0, r4
 800ea20:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800ea22:	5d70      	ldrb	r0, [r6, r5]
 800ea24:	e000      	b.n	800ea28 <_write+0x16>
 800ea26:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea28:	3501      	adds	r5, #1
 800ea2a:	e7f6      	b.n	800ea1a <_write+0x8>

0800ea2c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800ea2c:	2001      	movs	r0, #1
}
 800ea2e:	4240      	negs	r0, r0
 800ea30:	4770      	bx	lr

0800ea32 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800ea32:	2380      	movs	r3, #128	; 0x80
 800ea34:	019b      	lsls	r3, r3, #6
  return 0;
}
 800ea36:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800ea38:	604b      	str	r3, [r1, #4]
}
 800ea3a:	4770      	bx	lr

0800ea3c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	4770      	bx	lr

0800ea40 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800ea40:	2000      	movs	r0, #0
 800ea42:	4770      	bx	lr

0800ea44 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ea44:	4a0b      	ldr	r2, [pc, #44]	; (800ea74 <_sbrk+0x30>)
 800ea46:	490c      	ldr	r1, [pc, #48]	; (800ea78 <_sbrk+0x34>)
{
 800ea48:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ea4a:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ea4c:	4a0b      	ldr	r2, [pc, #44]	; (800ea7c <_sbrk+0x38>)
{
 800ea4e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800ea50:	6810      	ldr	r0, [r2, #0]
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d101      	bne.n	800ea5a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800ea56:	480a      	ldr	r0, [pc, #40]	; (800ea80 <_sbrk+0x3c>)
 800ea58:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ea5a:	6810      	ldr	r0, [r2, #0]
 800ea5c:	18c3      	adds	r3, r0, r3
 800ea5e:	428b      	cmp	r3, r1
 800ea60:	d906      	bls.n	800ea70 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800ea62:	f009 fdaf 	bl	80185c4 <__errno>
 800ea66:	230c      	movs	r3, #12
 800ea68:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800ea6a:	2001      	movs	r0, #1
 800ea6c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800ea6e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800ea70:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800ea72:	e7fc      	b.n	800ea6e <_sbrk+0x2a>
 800ea74:	00000400 	.word	0x00000400
 800ea78:	20004000 	.word	0x20004000
 800ea7c:	20000608 	.word	0x20000608
 800ea80:	200015c8 	.word	0x200015c8

0800ea84 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800ea84:	4770      	bx	lr
	...

0800ea88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ea88:	480d      	ldr	r0, [pc, #52]	; (800eac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ea8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ea8c:	f7ff fffa 	bl	800ea84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ea90:	480c      	ldr	r0, [pc, #48]	; (800eac4 <LoopForever+0x6>)
  ldr r1, =_edata
 800ea92:	490d      	ldr	r1, [pc, #52]	; (800eac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ea94:	4a0d      	ldr	r2, [pc, #52]	; (800eacc <LoopForever+0xe>)
  movs r3, #0
 800ea96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ea98:	e002      	b.n	800eaa0 <LoopCopyDataInit>

0800ea9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ea9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ea9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ea9e:	3304      	adds	r3, #4

0800eaa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eaa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eaa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eaa4:	d3f9      	bcc.n	800ea9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eaa6:	4a0a      	ldr	r2, [pc, #40]	; (800ead0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800eaa8:	4c0a      	ldr	r4, [pc, #40]	; (800ead4 <LoopForever+0x16>)
  movs r3, #0
 800eaaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eaac:	e001      	b.n	800eab2 <LoopFillZerobss>

0800eaae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eaae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eab0:	3204      	adds	r2, #4

0800eab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800eab4:	d3fb      	bcc.n	800eaae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800eab6:	f009 fd9b 	bl	80185f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800eaba:	f7fe fb4f 	bl	800d15c <main>

0800eabe <LoopForever>:

LoopForever:
    b LoopForever
 800eabe:	e7fe      	b.n	800eabe <LoopForever>
  ldr   r0, =_estack
 800eac0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800eac4:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800eac8:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 800eacc:	0801cc48 	.word	0x0801cc48
  ldr r2, =_sbss
 800ead0:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 800ead4:	200015c8 	.word	0x200015c8

0800ead8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ead8:	e7fe      	b.n	800ead8 <ADC1_COMP_IRQHandler>
	...

0800eadc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800eae0:	20fa      	movs	r0, #250	; 0xfa
 800eae2:	4b0d      	ldr	r3, [pc, #52]	; (800eb18 <HAL_InitTick+0x3c>)
 800eae4:	0080      	lsls	r0, r0, #2
 800eae6:	7819      	ldrb	r1, [r3, #0]
 800eae8:	f7f8 ffbe 	bl	8007a68 <__udivsi3>
 800eaec:	4b0b      	ldr	r3, [pc, #44]	; (800eb1c <HAL_InitTick+0x40>)
 800eaee:	0001      	movs	r1, r0
 800eaf0:	6818      	ldr	r0, [r3, #0]
 800eaf2:	f7f8 ffb9 	bl	8007a68 <__udivsi3>
 800eaf6:	f000 f88d 	bl	800ec14 <HAL_SYSTICK_Config>
 800eafa:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800eafc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800eafe:	2c00      	cmp	r4, #0
 800eb00:	d109      	bne.n	800eb16 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800eb02:	2d03      	cmp	r5, #3
 800eb04:	d807      	bhi.n	800eb16 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800eb06:	3802      	subs	r0, #2
 800eb08:	0022      	movs	r2, r4
 800eb0a:	0029      	movs	r1, r5
 800eb0c:	f000 f83e 	bl	800eb8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800eb10:	0020      	movs	r0, r4
 800eb12:	4b03      	ldr	r3, [pc, #12]	; (800eb20 <HAL_InitTick+0x44>)
 800eb14:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800eb16:	bd70      	pop	{r4, r5, r6, pc}
 800eb18:	200000e8 	.word	0x200000e8
 800eb1c:	200000e4 	.word	0x200000e4
 800eb20:	200000ec 	.word	0x200000ec

0800eb24 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800eb24:	2310      	movs	r3, #16
 800eb26:	4a06      	ldr	r2, [pc, #24]	; (800eb40 <HAL_Init+0x1c>)
{
 800eb28:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800eb2a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800eb2c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800eb2e:	430b      	orrs	r3, r1
 800eb30:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800eb32:	f7ff ffd3 	bl	800eadc <HAL_InitTick>
  HAL_MspInit();
 800eb36:	f7ff fdbf 	bl	800e6b8 <HAL_MspInit>
}
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	bd10      	pop	{r4, pc}
 800eb3e:	46c0      	nop			; (mov r8, r8)
 800eb40:	40022000 	.word	0x40022000

0800eb44 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800eb44:	4a03      	ldr	r2, [pc, #12]	; (800eb54 <HAL_IncTick+0x10>)
 800eb46:	4b04      	ldr	r3, [pc, #16]	; (800eb58 <HAL_IncTick+0x14>)
 800eb48:	6811      	ldr	r1, [r2, #0]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	185b      	adds	r3, r3, r1
 800eb4e:	6013      	str	r3, [r2, #0]
}
 800eb50:	4770      	bx	lr
 800eb52:	46c0      	nop			; (mov r8, r8)
 800eb54:	2000060c 	.word	0x2000060c
 800eb58:	200000e8 	.word	0x200000e8

0800eb5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800eb5c:	4b01      	ldr	r3, [pc, #4]	; (800eb64 <HAL_GetTick+0x8>)
 800eb5e:	6818      	ldr	r0, [r3, #0]
}
 800eb60:	4770      	bx	lr
 800eb62:	46c0      	nop			; (mov r8, r8)
 800eb64:	2000060c 	.word	0x2000060c

0800eb68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eb68:	b570      	push	{r4, r5, r6, lr}
 800eb6a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800eb6c:	f7ff fff6 	bl	800eb5c <HAL_GetTick>
 800eb70:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eb72:	1c63      	adds	r3, r4, #1
 800eb74:	d002      	beq.n	800eb7c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800eb76:	4b04      	ldr	r3, [pc, #16]	; (800eb88 <HAL_Delay+0x20>)
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800eb7c:	f7ff ffee 	bl	800eb5c <HAL_GetTick>
 800eb80:	1b40      	subs	r0, r0, r5
 800eb82:	42a0      	cmp	r0, r4
 800eb84:	d3fa      	bcc.n	800eb7c <HAL_Delay+0x14>
  {
  }
}
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	200000e8 	.word	0x200000e8

0800eb8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800eb8c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb8e:	25ff      	movs	r5, #255	; 0xff
 800eb90:	2403      	movs	r4, #3
 800eb92:	002a      	movs	r2, r5
 800eb94:	4004      	ands	r4, r0
 800eb96:	00e4      	lsls	r4, r4, #3
 800eb98:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eb9a:	0189      	lsls	r1, r1, #6
 800eb9c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb9e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eba0:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eba2:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800eba4:	2800      	cmp	r0, #0
 800eba6:	db0a      	blt.n	800ebbe <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eba8:	24c0      	movs	r4, #192	; 0xc0
 800ebaa:	4b0b      	ldr	r3, [pc, #44]	; (800ebd8 <HAL_NVIC_SetPriority+0x4c>)
 800ebac:	0880      	lsrs	r0, r0, #2
 800ebae:	0080      	lsls	r0, r0, #2
 800ebb0:	18c0      	adds	r0, r0, r3
 800ebb2:	00a4      	lsls	r4, r4, #2
 800ebb4:	5903      	ldr	r3, [r0, r4]
 800ebb6:	401a      	ands	r2, r3
 800ebb8:	4311      	orrs	r1, r2
 800ebba:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800ebbc:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ebbe:	200f      	movs	r0, #15
 800ebc0:	4003      	ands	r3, r0
 800ebc2:	3b08      	subs	r3, #8
 800ebc4:	4805      	ldr	r0, [pc, #20]	; (800ebdc <HAL_NVIC_SetPriority+0x50>)
 800ebc6:	089b      	lsrs	r3, r3, #2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	181b      	adds	r3, r3, r0
 800ebcc:	69d8      	ldr	r0, [r3, #28]
 800ebce:	4002      	ands	r2, r0
 800ebd0:	4311      	orrs	r1, r2
 800ebd2:	61d9      	str	r1, [r3, #28]
 800ebd4:	e7f2      	b.n	800ebbc <HAL_NVIC_SetPriority+0x30>
 800ebd6:	46c0      	nop			; (mov r8, r8)
 800ebd8:	e000e100 	.word	0xe000e100
 800ebdc:	e000ed00 	.word	0xe000ed00

0800ebe0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	db05      	blt.n	800ebf0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ebe4:	231f      	movs	r3, #31
 800ebe6:	4018      	ands	r0, r3
 800ebe8:	3b1e      	subs	r3, #30
 800ebea:	4083      	lsls	r3, r0
 800ebec:	4a01      	ldr	r2, [pc, #4]	; (800ebf4 <HAL_NVIC_EnableIRQ+0x14>)
 800ebee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ebf0:	4770      	bx	lr
 800ebf2:	46c0      	nop			; (mov r8, r8)
 800ebf4:	e000e100 	.word	0xe000e100

0800ebf8 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ebf8:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ebfc:	4b03      	ldr	r3, [pc, #12]	; (800ec0c <HAL_NVIC_SystemReset+0x14>)
 800ebfe:	4a04      	ldr	r2, [pc, #16]	; (800ec10 <HAL_NVIC_SystemReset+0x18>)
 800ec00:	60da      	str	r2, [r3, #12]
 800ec02:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ec06:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800ec08:	e7fd      	b.n	800ec06 <HAL_NVIC_SystemReset+0xe>
 800ec0a:	46c0      	nop			; (mov r8, r8)
 800ec0c:	e000ed00 	.word	0xe000ed00
 800ec10:	05fa0004 	.word	0x05fa0004

0800ec14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ec14:	2280      	movs	r2, #128	; 0x80
 800ec16:	1e43      	subs	r3, r0, #1
 800ec18:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800ec1a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d20d      	bcs.n	800ec3c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec20:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ec22:	4a07      	ldr	r2, [pc, #28]	; (800ec40 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec24:	4807      	ldr	r0, [pc, #28]	; (800ec44 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ec26:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec28:	6a03      	ldr	r3, [r0, #32]
 800ec2a:	0609      	lsls	r1, r1, #24
 800ec2c:	021b      	lsls	r3, r3, #8
 800ec2e:	0a1b      	lsrs	r3, r3, #8
 800ec30:	430b      	orrs	r3, r1
 800ec32:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ec34:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ec36:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ec38:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ec3a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ec3c:	4770      	bx	lr
 800ec3e:	46c0      	nop			; (mov r8, r8)
 800ec40:	e000e010 	.word	0xe000e010
 800ec44:	e000ed00 	.word	0xe000ed00

0800ec48 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ec48:	4a0c      	ldr	r2, [pc, #48]	; (800ec7c <FLASH_SetErrorCode+0x34>)
 800ec4a:	2110      	movs	r1, #16
 800ec4c:	68d0      	ldr	r0, [r2, #12]
{
 800ec4e:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ec50:	0003      	movs	r3, r0
 800ec52:	400b      	ands	r3, r1
 800ec54:	4208      	tst	r0, r1
 800ec56:	d005      	beq.n	800ec64 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ec58:	2302      	movs	r3, #2
 800ec5a:	4809      	ldr	r0, [pc, #36]	; (800ec80 <FLASH_SetErrorCode+0x38>)
 800ec5c:	69c4      	ldr	r4, [r0, #28]
 800ec5e:	4323      	orrs	r3, r4
 800ec60:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800ec62:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ec64:	2004      	movs	r0, #4
 800ec66:	68d1      	ldr	r1, [r2, #12]
 800ec68:	4201      	tst	r1, r0
 800ec6a:	d005      	beq.n	800ec78 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	4c04      	ldr	r4, [pc, #16]	; (800ec80 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 800ec70:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800ec72:	69e5      	ldr	r5, [r4, #28]
 800ec74:	4329      	orrs	r1, r5
 800ec76:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ec78:	60d3      	str	r3, [r2, #12]
}  
 800ec7a:	bd30      	pop	{r4, r5, pc}
 800ec7c:	40022000 	.word	0x40022000
 800ec80:	20000610 	.word	0x20000610

0800ec84 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ec84:	4b06      	ldr	r3, [pc, #24]	; (800eca0 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 800ec86:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ec88:	691a      	ldr	r2, [r3, #16]
 800ec8a:	0612      	lsls	r2, r2, #24
 800ec8c:	d506      	bpl.n	800ec9c <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ec8e:	4a05      	ldr	r2, [pc, #20]	; (800eca4 <HAL_FLASH_Unlock+0x20>)
 800ec90:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ec92:	4a05      	ldr	r2, [pc, #20]	; (800eca8 <HAL_FLASH_Unlock+0x24>)
 800ec94:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ec96:	6918      	ldr	r0, [r3, #16]
 800ec98:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 800ec9a:	0fc0      	lsrs	r0, r0, #31
}
 800ec9c:	4770      	bx	lr
 800ec9e:	46c0      	nop			; (mov r8, r8)
 800eca0:	40022000 	.word	0x40022000
 800eca4:	45670123 	.word	0x45670123
 800eca8:	cdef89ab 	.word	0xcdef89ab

0800ecac <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ecac:	2380      	movs	r3, #128	; 0x80
 800ecae:	4a03      	ldr	r2, [pc, #12]	; (800ecbc <HAL_FLASH_Lock+0x10>)
}
 800ecb0:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ecb2:	6911      	ldr	r1, [r2, #16]
 800ecb4:	430b      	orrs	r3, r1
 800ecb6:	6113      	str	r3, [r2, #16]
}
 800ecb8:	4770      	bx	lr
 800ecba:	46c0      	nop			; (mov r8, r8)
 800ecbc:	40022000 	.word	0x40022000

0800ecc0 <FLASH_WaitForLastOperation>:
{
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ecc4:	f7ff ff4a 	bl	800eb5c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ecc8:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800ecca:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800eccc:	4b10      	ldr	r3, [pc, #64]	; (800ed10 <FLASH_WaitForLastOperation+0x50>)
 800ecce:	68da      	ldr	r2, [r3, #12]
 800ecd0:	4232      	tst	r2, r6
 800ecd2:	d111      	bne.n	800ecf8 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	68d9      	ldr	r1, [r3, #12]
 800ecd8:	4211      	tst	r1, r2
 800ecda:	d000      	beq.n	800ecde <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ecdc:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800ecde:	68d9      	ldr	r1, [r3, #12]
 800ece0:	2210      	movs	r2, #16
 800ece2:	0008      	movs	r0, r1
 800ece4:	4010      	ands	r0, r2
 800ece6:	4211      	tst	r1, r2
 800ece8:	d102      	bne.n	800ecf0 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ecea:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800ecec:	075b      	lsls	r3, r3, #29
 800ecee:	d508      	bpl.n	800ed02 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800ecf0:	f7ff ffaa 	bl	800ec48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	e004      	b.n	800ed02 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800ecf8:	1c62      	adds	r2, r4, #1
 800ecfa:	d0e8      	beq.n	800ecce <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ecfc:	2c00      	cmp	r4, #0
 800ecfe:	d101      	bne.n	800ed04 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 800ed00:	2003      	movs	r0, #3
}
 800ed02:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ed04:	f7ff ff2a 	bl	800eb5c <HAL_GetTick>
 800ed08:	1b40      	subs	r0, r0, r5
 800ed0a:	42a0      	cmp	r0, r4
 800ed0c:	d9de      	bls.n	800eccc <FLASH_WaitForLastOperation+0xc>
 800ed0e:	e7f7      	b.n	800ed00 <FLASH_WaitForLastOperation+0x40>
 800ed10:	40022000 	.word	0x40022000

0800ed14 <HAL_FLASH_Program>:
{
 800ed14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed16:	b085      	sub	sp, #20
 800ed18:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 800ed1a:	4b1c      	ldr	r3, [pc, #112]	; (800ed8c <HAL_FLASH_Program+0x78>)
{
 800ed1c:	9101      	str	r1, [sp, #4]
 800ed1e:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 800ed20:	7e1a      	ldrb	r2, [r3, #24]
{
 800ed22:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800ed24:	2002      	movs	r0, #2
 800ed26:	2a01      	cmp	r2, #1
 800ed28:	d02e      	beq.n	800ed88 <HAL_FLASH_Program+0x74>
 800ed2a:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed2c:	4818      	ldr	r0, [pc, #96]	; (800ed90 <HAL_FLASH_Program+0x7c>)
  __HAL_LOCK(&pFlash);
 800ed2e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed30:	f7ff ffc6 	bl	800ecc0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d124      	bne.n	800ed82 <HAL_FLASH_Program+0x6e>
      nbiterations = 1U;
 800ed38:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ed3a:	2c01      	cmp	r4, #1
 800ed3c:	d002      	beq.n	800ed44 <HAL_FLASH_Program+0x30>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ed3e:	2c02      	cmp	r4, #2
 800ed40:	d000      	beq.n	800ed44 <HAL_FLASH_Program+0x30>
      nbiterations = 4U;
 800ed42:	2604      	movs	r6, #4
 800ed44:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800ed46:	9802      	ldr	r0, [sp, #8]
 800ed48:	9903      	ldr	r1, [sp, #12]
 800ed4a:	0122      	lsls	r2, r4, #4
 800ed4c:	f7f9 f802 	bl	8007d54 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed50:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ed52:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed54:	4b0d      	ldr	r3, [pc, #52]	; (800ed8c <HAL_FLASH_Program+0x78>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ed56:	4d0f      	ldr	r5, [pc, #60]	; (800ed94 <HAL_FLASH_Program+0x80>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed58:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ed5a:	692b      	ldr	r3, [r5, #16]
 800ed5c:	9a01      	ldr	r2, [sp, #4]
 800ed5e:	433b      	orrs	r3, r7
 800ed60:	612b      	str	r3, [r5, #16]
 800ed62:	0063      	lsls	r3, r4, #1
 800ed64:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800ed66:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 800ed68:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed6a:	4809      	ldr	r0, [pc, #36]	; (800ed90 <HAL_FLASH_Program+0x7c>)
 800ed6c:	f7ff ffa8 	bl	800ecc0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ed70:	692b      	ldr	r3, [r5, #16]
 800ed72:	43bb      	bics	r3, r7
 800ed74:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d103      	bne.n	800ed82 <HAL_FLASH_Program+0x6e>
    for (index = 0U; index < nbiterations; index++)
 800ed7a:	19e4      	adds	r4, r4, r7
 800ed7c:	b2e3      	uxtb	r3, r4
 800ed7e:	429e      	cmp	r6, r3
 800ed80:	d8e1      	bhi.n	800ed46 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 800ed82:	2200      	movs	r2, #0
 800ed84:	4b01      	ldr	r3, [pc, #4]	; (800ed8c <HAL_FLASH_Program+0x78>)
 800ed86:	761a      	strb	r2, [r3, #24]
}
 800ed88:	b005      	add	sp, #20
 800ed8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed8c:	20000610 	.word	0x20000610
 800ed90:	0000c350 	.word	0x0000c350
 800ed94:	40022000 	.word	0x40022000

0800ed98 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ed98:	2200      	movs	r2, #0
 800ed9a:	4b06      	ldr	r3, [pc, #24]	; (800edb4 <FLASH_MassErase+0x1c>)
 800ed9c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800ed9e:	4b06      	ldr	r3, [pc, #24]	; (800edb8 <FLASH_MassErase+0x20>)
 800eda0:	3204      	adds	r2, #4
 800eda2:	6919      	ldr	r1, [r3, #16]
 800eda4:	430a      	orrs	r2, r1
 800eda6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800eda8:	2240      	movs	r2, #64	; 0x40
 800edaa:	6919      	ldr	r1, [r3, #16]
 800edac:	430a      	orrs	r2, r1
 800edae:	611a      	str	r2, [r3, #16]
}
 800edb0:	4770      	bx	lr
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	20000610 	.word	0x20000610
 800edb8:	40022000 	.word	0x40022000

0800edbc <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800edbc:	2200      	movs	r2, #0
 800edbe:	4b06      	ldr	r3, [pc, #24]	; (800edd8 <FLASH_PageErase+0x1c>)
 800edc0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800edc2:	4b06      	ldr	r3, [pc, #24]	; (800eddc <FLASH_PageErase+0x20>)
 800edc4:	3202      	adds	r2, #2
 800edc6:	6919      	ldr	r1, [r3, #16]
 800edc8:	430a      	orrs	r2, r1
 800edca:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800edcc:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 800edce:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800edd0:	6919      	ldr	r1, [r3, #16]
 800edd2:	430a      	orrs	r2, r1
 800edd4:	611a      	str	r2, [r3, #16]
}
 800edd6:	4770      	bx	lr
 800edd8:	20000610 	.word	0x20000610
 800eddc:	40022000 	.word	0x40022000

0800ede0 <HAL_FLASHEx_Erase>:
{
 800ede0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800ede2:	4f21      	ldr	r7, [pc, #132]	; (800ee68 <HAL_FLASHEx_Erase+0x88>)
{
 800ede4:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800ede6:	7e3b      	ldrb	r3, [r7, #24]
{
 800ede8:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800edea:	2002      	movs	r0, #2
 800edec:	2b01      	cmp	r3, #1
 800edee:	d00c      	beq.n	800ee0a <HAL_FLASHEx_Erase+0x2a>
 800edf0:	2301      	movs	r3, #1
 800edf2:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800edf4:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800edf6:	481d      	ldr	r0, [pc, #116]	; (800ee6c <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d112      	bne.n	800ee22 <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800edfc:	f7ff ff60 	bl	800ecc0 <FLASH_WaitForLastOperation>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d003      	beq.n	800ee0c <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 800ee04:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800ee06:	2300      	movs	r3, #0
 800ee08:	763b      	strb	r3, [r7, #24]
}
 800ee0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 800ee0c:	f7ff ffc4 	bl	800ed98 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ee10:	4816      	ldr	r0, [pc, #88]	; (800ee6c <HAL_FLASHEx_Erase+0x8c>)
 800ee12:	f7ff ff55 	bl	800ecc0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800ee16:	2104      	movs	r1, #4
 800ee18:	4a15      	ldr	r2, [pc, #84]	; (800ee70 <HAL_FLASHEx_Erase+0x90>)
 800ee1a:	6913      	ldr	r3, [r2, #16]
 800ee1c:	438b      	bics	r3, r1
 800ee1e:	6113      	str	r3, [r2, #16]
 800ee20:	e7f1      	b.n	800ee06 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800ee22:	f7ff ff4d 	bl	800ecc0 <FLASH_WaitForLastOperation>
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d1ec      	bne.n	800ee04 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	425b      	negs	r3, r3
 800ee2e:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800ee30:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ee32:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800ee34:	68a3      	ldr	r3, [r4, #8]
 800ee36:	6862      	ldr	r2, [r4, #4]
 800ee38:	02db      	lsls	r3, r3, #11
 800ee3a:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 800ee3c:	42ab      	cmp	r3, r5
 800ee3e:	d9e2      	bls.n	800ee06 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800ee40:	0028      	movs	r0, r5
 800ee42:	f7ff ffbb 	bl	800edbc <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ee46:	4809      	ldr	r0, [pc, #36]	; (800ee6c <HAL_FLASHEx_Erase+0x8c>)
 800ee48:	f7ff ff3a 	bl	800ecc0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ee4c:	2102      	movs	r1, #2
 800ee4e:	4a08      	ldr	r2, [pc, #32]	; (800ee70 <HAL_FLASHEx_Erase+0x90>)
 800ee50:	6913      	ldr	r3, [r2, #16]
 800ee52:	438b      	bics	r3, r1
 800ee54:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d001      	beq.n	800ee5e <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 800ee5a:	6035      	str	r5, [r6, #0]
            break;
 800ee5c:	e7d3      	b.n	800ee06 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800ee5e:	2380      	movs	r3, #128	; 0x80
 800ee60:	011b      	lsls	r3, r3, #4
 800ee62:	18ed      	adds	r5, r5, r3
 800ee64:	e7e6      	b.n	800ee34 <HAL_FLASHEx_Erase+0x54>
 800ee66:	46c0      	nop			; (mov r8, r8)
 800ee68:	20000610 	.word	0x20000610
 800ee6c:	0000c350 	.word	0x0000c350
 800ee70:	40022000 	.word	0x40022000

0800ee74 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ee74:	4a5a      	ldr	r2, [pc, #360]	; (800efe0 <HAL_GPIO_Init+0x16c>)
{
 800ee76:	b5f0      	push	{r4, r5, r6, r7, lr}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ee78:	1882      	adds	r2, r0, r2
 800ee7a:	1e54      	subs	r4, r2, #1
 800ee7c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00u;
 800ee7e:	2300      	movs	r3, #0
{
 800ee80:	b089      	sub	sp, #36	; 0x24
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ee82:	3204      	adds	r2, #4
{
 800ee84:	9103      	str	r1, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ee86:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ee88:	9a03      	ldr	r2, [sp, #12]
 800ee8a:	6812      	ldr	r2, [r2, #0]
 800ee8c:	0014      	movs	r4, r2
 800ee8e:	40dc      	lsrs	r4, r3
 800ee90:	d101      	bne.n	800ee96 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  } 
}
 800ee92:	b009      	add	sp, #36	; 0x24
 800ee94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ee96:	2101      	movs	r1, #1
 800ee98:	000d      	movs	r5, r1
 800ee9a:	0014      	movs	r4, r2
 800ee9c:	409d      	lsls	r5, r3
 800ee9e:	402c      	ands	r4, r5
 800eea0:	468c      	mov	ip, r1
 800eea2:	9402      	str	r4, [sp, #8]
    if (iocurrent != 0x00u)
 800eea4:	422a      	tst	r2, r5
 800eea6:	d100      	bne.n	800eeaa <HAL_GPIO_Init+0x36>
 800eea8:	e098      	b.n	800efdc <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800eeaa:	2403      	movs	r4, #3
 800eeac:	9a03      	ldr	r2, [sp, #12]
 800eeae:	005e      	lsls	r6, r3, #1
 800eeb0:	6852      	ldr	r2, [r2, #4]
 800eeb2:	9201      	str	r2, [sp, #4]
 800eeb4:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800eeb6:	40b4      	lsls	r4, r6
 800eeb8:	43e1      	mvns	r1, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800eeba:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800eebc:	9104      	str	r1, [sp, #16]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800eebe:	4564      	cmp	r4, ip
 800eec0:	d82a      	bhi.n	800ef18 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 800eec2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800eec4:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 800eec6:	9903      	ldr	r1, [sp, #12]
 800eec8:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800eeca:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800eecc:	40b4      	lsls	r4, r6
 800eece:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800eed0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800eed2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800eed4:	43ac      	bics	r4, r5
 800eed6:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800eed8:	090c      	lsrs	r4, r1, #4
 800eeda:	4661      	mov	r1, ip
 800eedc:	400c      	ands	r4, r1
 800eede:	409c      	lsls	r4, r3
 800eee0:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800eee2:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800eee4:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800eee6:	9904      	ldr	r1, [sp, #16]
 800eee8:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800eeea:	9903      	ldr	r1, [sp, #12]
 800eeec:	688c      	ldr	r4, [r1, #8]
 800eeee:	40b4      	lsls	r4, r6
 800eef0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800eef2:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eef4:	2a02      	cmp	r2, #2
 800eef6:	d111      	bne.n	800ef1c <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800eef8:	2507      	movs	r5, #7
 800eefa:	210f      	movs	r1, #15
 800eefc:	401d      	ands	r5, r3
 800eefe:	00ad      	lsls	r5, r5, #2
 800ef00:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 800ef02:	08dc      	lsrs	r4, r3, #3
 800ef04:	00a4      	lsls	r4, r4, #2
 800ef06:	1904      	adds	r4, r0, r4
 800ef08:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ef0a:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ef0c:	9903      	ldr	r1, [sp, #12]
 800ef0e:	6909      	ldr	r1, [r1, #16]
 800ef10:	40a9      	lsls	r1, r5
 800ef12:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800ef14:	6227      	str	r7, [r4, #32]
 800ef16:	e001      	b.n	800ef1c <HAL_GPIO_Init+0xa8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ef18:	2a03      	cmp	r2, #3
 800ef1a:	d1e3      	bne.n	800eee4 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ef1c:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 800ef1e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800ef20:	9904      	ldr	r1, [sp, #16]
 800ef22:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ef24:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 800ef26:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ef28:	22c0      	movs	r2, #192	; 0xc0
 800ef2a:	9901      	ldr	r1, [sp, #4]
 800ef2c:	0292      	lsls	r2, r2, #10
 800ef2e:	4211      	tst	r1, r2
 800ef30:	d054      	beq.n	800efdc <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef32:	2601      	movs	r6, #1
 800ef34:	4a2b      	ldr	r2, [pc, #172]	; (800efe4 <HAL_GPIO_Init+0x170>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ef36:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef38:	6994      	ldr	r4, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ef3a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef3c:	4334      	orrs	r4, r6
 800ef3e:	6194      	str	r4, [r2, #24]
 800ef40:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800ef42:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef44:	4032      	ands	r2, r6
 800ef46:	9207      	str	r2, [sp, #28]
 800ef48:	9a07      	ldr	r2, [sp, #28]
        temp = SYSCFG->EXTICR[position >> 2u];
 800ef4a:	4a27      	ldr	r2, [pc, #156]	; (800efe8 <HAL_GPIO_Init+0x174>)
 800ef4c:	00a4      	lsls	r4, r4, #2
 800ef4e:	18a4      	adds	r4, r4, r2
 800ef50:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ef52:	403d      	ands	r5, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 800ef54:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ef56:	220f      	movs	r2, #15
 800ef58:	00ad      	lsls	r5, r5, #2
 800ef5a:	40aa      	lsls	r2, r5
 800ef5c:	4661      	mov	r1, ip
 800ef5e:	4391      	bics	r1, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ef60:	2290      	movs	r2, #144	; 0x90
 800ef62:	05d2      	lsls	r2, r2, #23
 800ef64:	4694      	mov	ip, r2
 800ef66:	2200      	movs	r2, #0
 800ef68:	4560      	cmp	r0, ip
 800ef6a:	d00d      	beq.n	800ef88 <HAL_GPIO_Init+0x114>
 800ef6c:	4a1f      	ldr	r2, [pc, #124]	; (800efec <HAL_GPIO_Init+0x178>)
 800ef6e:	4694      	mov	ip, r2
 800ef70:	0032      	movs	r2, r6
 800ef72:	4560      	cmp	r0, ip
 800ef74:	d008      	beq.n	800ef88 <HAL_GPIO_Init+0x114>
 800ef76:	4e1e      	ldr	r6, [pc, #120]	; (800eff0 <HAL_GPIO_Init+0x17c>)
 800ef78:	1892      	adds	r2, r2, r2
 800ef7a:	42b0      	cmp	r0, r6
 800ef7c:	d004      	beq.n	800ef88 <HAL_GPIO_Init+0x114>
 800ef7e:	4e1d      	ldr	r6, [pc, #116]	; (800eff4 <HAL_GPIO_Init+0x180>)
 800ef80:	003a      	movs	r2, r7
 800ef82:	42b0      	cmp	r0, r6
 800ef84:	d000      	beq.n	800ef88 <HAL_GPIO_Init+0x114>
 800ef86:	9a05      	ldr	r2, [sp, #20]
 800ef88:	40aa      	lsls	r2, r5
 800ef8a:	430a      	orrs	r2, r1
        temp &= ~(iocurrent);
 800ef8c:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ef8e:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 800ef90:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 800ef92:	4a19      	ldr	r2, [pc, #100]	; (800eff8 <HAL_GPIO_Init+0x184>)
        temp &= ~(iocurrent);
 800ef94:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 800ef96:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ef98:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800ef9a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ef9c:	02c9      	lsls	r1, r1, #11
 800ef9e:	d401      	bmi.n	800efa4 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 800efa0:	0035      	movs	r5, r6
 800efa2:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800efa4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800efa6:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800efa8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800efaa:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800efac:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800efae:	0289      	lsls	r1, r1, #10
 800efb0:	d401      	bmi.n	800efb6 <HAL_GPIO_Init+0x142>
        temp &= ~(iocurrent);
 800efb2:	0035      	movs	r5, r6
 800efb4:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 800efb6:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800efb8:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800efba:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800efbc:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800efbe:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800efc0:	0389      	lsls	r1, r1, #14
 800efc2:	d401      	bmi.n	800efc8 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800efc4:	0035      	movs	r5, r6
 800efc6:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800efc8:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800efca:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800efcc:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800efce:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800efd0:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800efd2:	03c9      	lsls	r1, r1, #15
 800efd4:	d401      	bmi.n	800efda <HAL_GPIO_Init+0x166>
        temp &= ~(iocurrent);
 800efd6:	4025      	ands	r5, r4
 800efd8:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800efda:	6016      	str	r6, [r2, #0]
    position++;
 800efdc:	3301      	adds	r3, #1
 800efde:	e753      	b.n	800ee88 <HAL_GPIO_Init+0x14>
 800efe0:	b7fff000 	.word	0xb7fff000
 800efe4:	40021000 	.word	0x40021000
 800efe8:	40010000 	.word	0x40010000
 800efec:	48000400 	.word	0x48000400
 800eff0:	48000800 	.word	0x48000800
 800eff4:	48000c00 	.word	0x48000c00
 800eff8:	40010400 	.word	0x40010400

0800effc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800effc:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800effe:	4a36      	ldr	r2, [pc, #216]	; (800f0d8 <HAL_GPIO_DeInit+0xdc>)
{
 800f000:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800f002:	1882      	adds	r2, r0, r2
{
 800f004:	9101      	str	r1, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800f006:	1e51      	subs	r1, r2, #1
 800f008:	418a      	sbcs	r2, r1
  uint32_t position = 0x00u;
 800f00a:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800f00c:	3204      	adds	r2, #4
 800f00e:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0x00u)
 800f010:	9a01      	ldr	r2, [sp, #4]
 800f012:	40da      	lsrs	r2, r3
 800f014:	d101      	bne.n	800f01a <HAL_GPIO_DeInit+0x1e>

    }

    position++;
  }
}
 800f016:	b005      	add	sp, #20
 800f018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f01a:	2701      	movs	r7, #1
 800f01c:	003a      	movs	r2, r7
 800f01e:	409a      	lsls	r2, r3
 800f020:	9c01      	ldr	r4, [sp, #4]
 800f022:	9200      	str	r2, [sp, #0]
 800f024:	4014      	ands	r4, r2
    if (iocurrent != 0x00u)
 800f026:	9900      	ldr	r1, [sp, #0]
 800f028:	9a01      	ldr	r2, [sp, #4]
 800f02a:	420a      	tst	r2, r1
 800f02c:	d051      	beq.n	800f0d2 <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800f02e:	492b      	ldr	r1, [pc, #172]	; (800f0dc <HAL_GPIO_DeInit+0xe0>)
 800f030:	089a      	lsrs	r2, r3, #2
 800f032:	0092      	lsls	r2, r2, #2
 800f034:	1852      	adds	r2, r2, r1
 800f036:	6891      	ldr	r1, [r2, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800f038:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800f03a:	000e      	movs	r6, r1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800f03c:	2103      	movs	r1, #3
 800f03e:	400d      	ands	r5, r1
 800f040:	00ad      	lsls	r5, r5, #2
 800f042:	310c      	adds	r1, #12
 800f044:	40a9      	lsls	r1, r5
 800f046:	9102      	str	r1, [sp, #8]
 800f048:	4031      	ands	r1, r6
 800f04a:	000e      	movs	r6, r1
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800f04c:	2190      	movs	r1, #144	; 0x90
 800f04e:	05c9      	lsls	r1, r1, #23
 800f050:	468c      	mov	ip, r1
 800f052:	2100      	movs	r1, #0
 800f054:	4560      	cmp	r0, ip
 800f056:	d00d      	beq.n	800f074 <HAL_GPIO_DeInit+0x78>
 800f058:	4921      	ldr	r1, [pc, #132]	; (800f0e0 <HAL_GPIO_DeInit+0xe4>)
 800f05a:	468c      	mov	ip, r1
 800f05c:	0039      	movs	r1, r7
 800f05e:	4560      	cmp	r0, ip
 800f060:	d008      	beq.n	800f074 <HAL_GPIO_DeInit+0x78>
 800f062:	4f20      	ldr	r7, [pc, #128]	; (800f0e4 <HAL_GPIO_DeInit+0xe8>)
 800f064:	1849      	adds	r1, r1, r1
 800f066:	42b8      	cmp	r0, r7
 800f068:	d004      	beq.n	800f074 <HAL_GPIO_DeInit+0x78>
 800f06a:	4f1f      	ldr	r7, [pc, #124]	; (800f0e8 <HAL_GPIO_DeInit+0xec>)
 800f06c:	3101      	adds	r1, #1
 800f06e:	42b8      	cmp	r0, r7
 800f070:	d000      	beq.n	800f074 <HAL_GPIO_DeInit+0x78>
 800f072:	9903      	ldr	r1, [sp, #12]
 800f074:	40a9      	lsls	r1, r5
 800f076:	42b1      	cmp	r1, r6
 800f078:	d110      	bne.n	800f09c <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800f07a:	491c      	ldr	r1, [pc, #112]	; (800f0ec <HAL_GPIO_DeInit+0xf0>)
 800f07c:	680d      	ldr	r5, [r1, #0]
 800f07e:	43a5      	bics	r5, r4
 800f080:	600d      	str	r5, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800f082:	684d      	ldr	r5, [r1, #4]
 800f084:	43a5      	bics	r5, r4
 800f086:	604d      	str	r5, [r1, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800f088:	68cd      	ldr	r5, [r1, #12]
 800f08a:	43a5      	bics	r5, r4
 800f08c:	60cd      	str	r5, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800f08e:	688d      	ldr	r5, [r1, #8]
 800f090:	43a5      	bics	r5, r4
 800f092:	608d      	str	r5, [r1, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800f094:	6891      	ldr	r1, [r2, #8]
 800f096:	9c02      	ldr	r4, [sp, #8]
 800f098:	43a1      	bics	r1, r4
 800f09a:	6091      	str	r1, [r2, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800f09c:	2103      	movs	r1, #3
 800f09e:	005c      	lsls	r4, r3, #1
 800f0a0:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800f0a2:	2407      	movs	r4, #7
 800f0a4:	260f      	movs	r6, #15
 800f0a6:	401c      	ands	r4, r3
 800f0a8:	00a4      	lsls	r4, r4, #2
 800f0aa:	40a6      	lsls	r6, r4
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800f0ac:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f0ae:	9c00      	ldr	r4, [sp, #0]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800f0b0:	438a      	bics	r2, r1
 800f0b2:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800f0b4:	08da      	lsrs	r2, r3, #3
 800f0b6:	0092      	lsls	r2, r2, #2
 800f0b8:	1882      	adds	r2, r0, r2
 800f0ba:	6a15      	ldr	r5, [r2, #32]
 800f0bc:	43b5      	bics	r5, r6
 800f0be:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800f0c0:	68c2      	ldr	r2, [r0, #12]
 800f0c2:	438a      	bics	r2, r1
 800f0c4:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f0c6:	6842      	ldr	r2, [r0, #4]
 800f0c8:	43a2      	bics	r2, r4
 800f0ca:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800f0cc:	6882      	ldr	r2, [r0, #8]
 800f0ce:	438a      	bics	r2, r1
 800f0d0:	6082      	str	r2, [r0, #8]
    position++;
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	e79c      	b.n	800f010 <HAL_GPIO_DeInit+0x14>
 800f0d6:	46c0      	nop			; (mov r8, r8)
 800f0d8:	b7fff000 	.word	0xb7fff000
 800f0dc:	40010000 	.word	0x40010000
 800f0e0:	48000400 	.word	0x48000400
 800f0e4:	48000800 	.word	0x48000800
 800f0e8:	48000c00 	.word	0x48000c00
 800f0ec:	40010400 	.word	0x40010400

0800f0f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f0f0:	6900      	ldr	r0, [r0, #16]
 800f0f2:	4008      	ands	r0, r1
 800f0f4:	1e43      	subs	r3, r0, #1
 800f0f6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800f0f8:	b2c0      	uxtb	r0, r0
  }
 800f0fa:	4770      	bx	lr

0800f0fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f0fc:	2a00      	cmp	r2, #0
 800f0fe:	d001      	beq.n	800f104 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f100:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f102:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f104:	6281      	str	r1, [r0, #40]	; 0x28
}
 800f106:	e7fc      	b.n	800f102 <HAL_GPIO_WritePin+0x6>

0800f108 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f108:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f10a:	0013      	movs	r3, r2
 800f10c:	400b      	ands	r3, r1
 800f10e:	041b      	lsls	r3, r3, #16
 800f110:	4391      	bics	r1, r2
 800f112:	4319      	orrs	r1, r3
 800f114:	6181      	str	r1, [r0, #24]
}
 800f116:	4770      	bx	lr

0800f118 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f118:	4b04      	ldr	r3, [pc, #16]	; (800f12c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800f11a:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f11c:	695a      	ldr	r2, [r3, #20]
 800f11e:	4210      	tst	r0, r2
 800f120:	d002      	beq.n	800f128 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f122:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f124:	f7ff fa5e 	bl	800e5e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800f128:	bd10      	pop	{r4, pc}
 800f12a:	46c0      	nop			; (mov r8, r8)
 800f12c:	40010400 	.word	0x40010400

0800f130 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f132:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 800f134:	2501      	movs	r5, #1
{
 800f136:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800f138:	2800      	cmp	r0, #0
 800f13a:	d032      	beq.n	800f1a2 <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f13c:	4d30      	ldr	r5, [pc, #192]	; (800f200 <HAL_PCD_Init+0xd0>)
 800f13e:	5d43      	ldrb	r3, [r0, r5]
 800f140:	b2da      	uxtb	r2, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d104      	bne.n	800f150 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f146:	23aa      	movs	r3, #170	; 0xaa
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f14c:	f008 f9f2 	bl	8017534 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f150:	2303      	movs	r3, #3
 800f152:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f154:	6820      	ldr	r0, [r4, #0]
 800f156:	f003 f859 	bl	801220c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f15a:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f15c:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f15e:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f160:	6860      	ldr	r0, [r4, #4]
 800f162:	4283      	cmp	r3, r0
 800f164:	d320      	bcc.n	800f1a8 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f166:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f168:	2628      	movs	r6, #40	; 0x28
 800f16a:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f16c:	4290      	cmp	r0, r2
 800f16e:	d833      	bhi.n	800f1d8 <HAL_PCD_Init+0xa8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800f170:	0023      	movs	r3, r4
 800f172:	466a      	mov	r2, sp
 800f174:	3310      	adds	r3, #16
 800f176:	cb43      	ldmia	r3!, {r0, r1, r6}
 800f178:	c243      	stmia	r2!, {r0, r1, r6}
 800f17a:	cb03      	ldmia	r3!, {r0, r1}
 800f17c:	c203      	stmia	r2!, {r0, r1}
 800f17e:	68a2      	ldr	r2, [r4, #8]
 800f180:	68e3      	ldr	r3, [r4, #12]
 800f182:	6861      	ldr	r1, [r4, #4]
 800f184:	6820      	ldr	r0, [r4, #0]
 800f186:	f003 f84b 	bl	8012220 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800f18a:	2300      	movs	r3, #0
 800f18c:	1d62      	adds	r2, r4, #5
 800f18e:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 800f190:	2201      	movs	r2, #1
 800f192:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 800f194:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 800f196:	69e3      	ldr	r3, [r4, #28]
 800f198:	4293      	cmp	r3, r2
 800f19a:	d102      	bne.n	800f1a2 <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f19c:	0020      	movs	r0, r4
 800f19e:	f000 fe49 	bl	800fe34 <HAL_PCDEx_ActivateLPM>
}
 800f1a2:	0028      	movs	r0, r5
 800f1a4:	b007      	add	sp, #28
 800f1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 800f1a8:	2629      	movs	r6, #41	; 0x29
 800f1aa:	2228      	movs	r2, #40	; 0x28
 800f1ac:	46b4      	mov	ip, r6
 800f1ae:	435a      	muls	r2, r3
 800f1b0:	18a2      	adds	r2, r4, r2
 800f1b2:	4494      	add	ip, r2
 800f1b4:	4666      	mov	r6, ip
 800f1b6:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 800f1b8:	2628      	movs	r6, #40	; 0x28
 800f1ba:	46b4      	mov	ip, r6
 800f1bc:	4494      	add	ip, r2
 800f1be:	4666      	mov	r6, ip
 800f1c0:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f1c2:	262b      	movs	r6, #43	; 0x2b
 800f1c4:	46b4      	mov	ip, r6
 800f1c6:	4494      	add	ip, r2
 800f1c8:	4666      	mov	r6, ip
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1ca:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f1cc:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1ce:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 800f1d0:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f1d2:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800f1d4:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1d6:	e7c4      	b.n	800f162 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800f1d8:	0033      	movs	r3, r6
 800f1da:	4353      	muls	r3, r2
 800f1dc:	18e3      	adds	r3, r4, r3
 800f1de:	001f      	movs	r7, r3
 800f1e0:	376a      	adds	r7, #106	; 0x6a
 800f1e2:	37ff      	adds	r7, #255	; 0xff
 800f1e4:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 800f1e6:	3f01      	subs	r7, #1
 800f1e8:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f1ea:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f1ec:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f1ee:	3f6c      	subs	r7, #108	; 0x6c
 800f1f0:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f1f2:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f1f4:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1f6:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f1f8:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1fa:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f1fc:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1fe:	e7b5      	b.n	800f16c <HAL_PCD_Init+0x3c>
 800f200:	000002a9 	.word	0x000002a9

0800f204 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f204:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800f206:	25aa      	movs	r5, #170	; 0xaa
 800f208:	00ad      	lsls	r5, r5, #2
 800f20a:	5d43      	ldrb	r3, [r0, r5]
{
 800f20c:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800f20e:	2002      	movs	r0, #2
 800f210:	2b01      	cmp	r3, #1
 800f212:	d009      	beq.n	800f228 <HAL_PCD_Start+0x24>
 800f214:	2301      	movs	r3, #1
 800f216:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 800f218:	6820      	ldr	r0, [r4, #0]
 800f21a:	f002 ffed 	bl	80121f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f21e:	6820      	ldr	r0, [r4, #0]
 800f220:	f003 fa01 	bl	8012626 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f224:	2000      	movs	r0, #0
 800f226:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800f228:	bd70      	pop	{r4, r5, r6, pc}

0800f22a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f22a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800f22c:	25aa      	movs	r5, #170	; 0xaa
 800f22e:	00ad      	lsls	r5, r5, #2
 800f230:	5d43      	ldrb	r3, [r0, r5]
{
 800f232:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800f234:	2002      	movs	r0, #2
 800f236:	2b01      	cmp	r3, #1
 800f238:	d008      	beq.n	800f24c <HAL_PCD_SetAddress+0x22>
 800f23a:	2301      	movs	r3, #1
 800f23c:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 800f23e:	1d63      	adds	r3, r4, #5
 800f240:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f242:	6820      	ldr	r0, [r4, #0]
 800f244:	f003 f9e8 	bl	8012618 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f248:	2000      	movs	r0, #0
 800f24a:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800f24c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f250 <HAL_PCD_IRQHandler>:
{
 800f250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f252:	0004      	movs	r4, r0
 800f254:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800f256:	6800      	ldr	r0, [r0, #0]
 800f258:	f003 f9ed 	bl	8012636 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800f25c:	2380      	movs	r3, #128	; 0x80
 800f25e:	0005      	movs	r5, r0
 800f260:	021b      	lsls	r3, r3, #8
 800f262:	401d      	ands	r5, r3
 800f264:	4218      	tst	r0, r3
 800f266:	d101      	bne.n	800f26c <HAL_PCD_IRQHandler+0x1c>
 800f268:	f000 fc21 	bl	800faae <HAL_PCD_IRQHandler+0x85e>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f26c:	6820      	ldr	r0, [r4, #0]
 800f26e:	1d82      	adds	r2, r0, #6
 800f270:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 800f272:	b21b      	sxth	r3, r3
 800f274:	2b00      	cmp	r3, #0
 800f276:	db01      	blt.n	800f27c <HAL_PCD_IRQHandler+0x2c>
}
 800f278:	b005      	add	sp, #20
 800f27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800f27c:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 800f27e:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800f280:	4019      	ands	r1, r3
 800f282:	9101      	str	r1, [sp, #4]

    if (epindex == 0U)
 800f284:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 800f286:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 800f288:	420b      	tst	r3, r1
 800f28a:	d000      	beq.n	800f28e <HAL_PCD_IRQHandler+0x3e>
 800f28c:	e0c4      	b.n	800f418 <HAL_PCD_IRQHandler+0x1c8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800f28e:	2310      	movs	r3, #16
 800f290:	0011      	movs	r1, r2
 800f292:	4019      	ands	r1, r3
 800f294:	421a      	tst	r2, r3
 800f296:	d12a      	bne.n	800f2ee <HAL_PCD_IRQHandler+0x9e>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800f298:	8803      	ldrh	r3, [r0, #0]
 800f29a:	4ab9      	ldr	r2, [pc, #740]	; (800f580 <HAL_PCD_IRQHandler+0x330>)
 800f29c:	4013      	ands	r3, r2
 800f29e:	2280      	movs	r2, #128	; 0x80
 800f2a0:	0212      	lsls	r2, r2, #8
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f2a6:	0003      	movs	r3, r0
 800f2a8:	3350      	adds	r3, #80	; 0x50
 800f2aa:	881a      	ldrh	r2, [r3, #0]
 800f2ac:	0023      	movs	r3, r4
 800f2ae:	3328      	adds	r3, #40	; 0x28
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	00db      	lsls	r3, r3, #3
 800f2b4:	18c3      	adds	r3, r0, r3
 800f2b6:	189b      	adds	r3, r3, r2
 800f2b8:	4ab2      	ldr	r2, [pc, #712]	; (800f584 <HAL_PCD_IRQHandler+0x334>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800f2ba:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f2bc:	189b      	adds	r3, r3, r2
 800f2be:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 800f2c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f2c2:	059b      	lsls	r3, r3, #22
 800f2c4:	0d9b      	lsrs	r3, r3, #22
 800f2c6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800f2c8:	18d3      	adds	r3, r2, r3
 800f2ca:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800f2cc:	f008 f964 	bl	8017598 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800f2d0:	1d63      	adds	r3, r4, #5
 800f2d2:	7fda      	ldrb	r2, [r3, #31]
 800f2d4:	2a00      	cmp	r2, #0
 800f2d6:	d0c9      	beq.n	800f26c <HAL_PCD_IRQHandler+0x1c>
 800f2d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d1c6      	bne.n	800f26c <HAL_PCD_IRQHandler+0x1c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800f2de:	2280      	movs	r2, #128	; 0x80
 800f2e0:	7fd9      	ldrb	r1, [r3, #31]
 800f2e2:	4311      	orrs	r1, r2
 800f2e4:	6822      	ldr	r2, [r4, #0]
 800f2e6:	324c      	adds	r2, #76	; 0x4c
 800f2e8:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 800f2ea:	77d8      	strb	r0, [r3, #31]
 800f2ec:	e7be      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800f2ee:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800f2f0:	2180      	movs	r1, #128	; 0x80
 800f2f2:	0016      	movs	r6, r2
 800f2f4:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800f2f6:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800f2f8:	400e      	ands	r6, r1
 800f2fa:	420a      	tst	r2, r1
 800f2fc:	d022      	beq.n	800f344 <HAL_PCD_IRQHandler+0xf4>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f2fe:	0003      	movs	r3, r0
 800f300:	3350      	adds	r3, #80	; 0x50
 800f302:	8819      	ldrh	r1, [r3, #0]
 800f304:	23b4      	movs	r3, #180	; 0xb4
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	5ce3      	ldrb	r3, [r4, r3]
 800f30a:	4a9f      	ldr	r2, [pc, #636]	; (800f588 <HAL_PCD_IRQHandler+0x338>)
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	18c3      	adds	r3, r0, r3
 800f310:	185b      	adds	r3, r3, r1
 800f312:	189b      	adds	r3, r3, r2
 800f314:	0022      	movs	r2, r4

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800f316:	21ac      	movs	r1, #172	; 0xac
 800f318:	881b      	ldrh	r3, [r3, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f31a:	3269      	adds	r2, #105	; 0x69
 800f31c:	059b      	lsls	r3, r3, #22
 800f31e:	0d9b      	lsrs	r3, r3, #22
 800f320:	32ff      	adds	r2, #255	; 0xff
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800f322:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f324:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800f326:	1861      	adds	r1, r4, r1
 800f328:	88d2      	ldrh	r2, [r2, #6]
 800f32a:	f003 fbe5 	bl	8012af8 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800f32e:	6822      	ldr	r2, [r4, #0]
 800f330:	4996      	ldr	r1, [pc, #600]	; (800f58c <HAL_PCD_IRQHandler+0x33c>)
 800f332:	8813      	ldrh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800f334:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800f336:	400b      	ands	r3, r1
 800f338:	2180      	movs	r1, #128	; 0x80
 800f33a:	430b      	orrs	r3, r1
 800f33c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800f33e:	f008 f915 	bl	801756c <HAL_PCD_SetupStageCallback>
 800f342:	e793      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800f344:	b21b      	sxth	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	db00      	blt.n	800f34c <HAL_PCD_IRQHandler+0xfc>
 800f34a:	e78f      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800f34c:	8803      	ldrh	r3, [r0, #0]
 800f34e:	4a8f      	ldr	r2, [pc, #572]	; (800f58c <HAL_PCD_IRQHandler+0x33c>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f350:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800f352:	4013      	ands	r3, r2
 800f354:	2280      	movs	r2, #128	; 0x80
 800f356:	4313      	orrs	r3, r2
 800f358:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f35a:	0003      	movs	r3, r0
 800f35c:	3350      	adds	r3, #80	; 0x50
 800f35e:	8819      	ldrh	r1, [r3, #0]
 800f360:	23b4      	movs	r3, #180	; 0xb4
 800f362:	005b      	lsls	r3, r3, #1
 800f364:	5ce3      	ldrb	r3, [r4, r3]
 800f366:	4a88      	ldr	r2, [pc, #544]	; (800f588 <HAL_PCD_IRQHandler+0x338>)
 800f368:	00db      	lsls	r3, r3, #3
 800f36a:	18c3      	adds	r3, r0, r3
 800f36c:	185b      	adds	r3, r3, r1
 800f36e:	189b      	adds	r3, r3, r2
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	3569      	adds	r5, #105	; 0x69
 800f374:	059b      	lsls	r3, r3, #22
 800f376:	0d9b      	lsrs	r3, r3, #22
 800f378:	35ff      	adds	r5, #255	; 0xff
 800f37a:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00d      	beq.n	800f39c <HAL_PCD_IRQHandler+0x14c>
 800f380:	6969      	ldr	r1, [r5, #20]
 800f382:	2900      	cmp	r1, #0
 800f384:	d00a      	beq.n	800f39c <HAL_PCD_IRQHandler+0x14c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800f386:	88ea      	ldrh	r2, [r5, #6]
 800f388:	f003 fbb6 	bl	8012af8 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800f38c:	696b      	ldr	r3, [r5, #20]
 800f38e:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800f390:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 800f392:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800f394:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800f396:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800f398:	f008 f8f1 	bl	801757e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800f39c:	6821      	ldr	r1, [r4, #0]
 800f39e:	880a      	ldrh	r2, [r1, #0]
 800f3a0:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800f3a2:	0512      	lsls	r2, r2, #20
 800f3a4:	d500      	bpl.n	800f3a8 <HAL_PCD_IRQHandler+0x158>
 800f3a6:	e761      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
 800f3a8:	22c0      	movs	r2, #192	; 0xc0
 800f3aa:	0192      	lsls	r2, r2, #6
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d100      	bne.n	800f3b4 <HAL_PCD_IRQHandler+0x164>
 800f3b2:	e75b      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800f3b4:	000b      	movs	r3, r1
 800f3b6:	4a74      	ldr	r2, [pc, #464]	; (800f588 <HAL_PCD_IRQHandler+0x338>)
 800f3b8:	3350      	adds	r3, #80	; 0x50
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	188a      	adds	r2, r1, r2
 800f3be:	18d3      	adds	r3, r2, r3
 800f3c0:	881a      	ldrh	r2, [r3, #0]
 800f3c2:	0592      	lsls	r2, r2, #22
 800f3c4:	0d92      	lsrs	r2, r2, #22
 800f3c6:	801a      	strh	r2, [r3, #0]
 800f3c8:	692a      	ldr	r2, [r5, #16]
 800f3ca:	2a3e      	cmp	r2, #62	; 0x3e
 800f3cc:	d90c      	bls.n	800f3e8 <HAL_PCD_IRQHandler+0x198>
 800f3ce:	251f      	movs	r5, #31
 800f3d0:	0950      	lsrs	r0, r2, #5
 800f3d2:	402a      	ands	r2, r5
 800f3d4:	4255      	negs	r5, r2
 800f3d6:	416a      	adcs	r2, r5
 800f3d8:	1a80      	subs	r0, r0, r2
 800f3da:	881a      	ldrh	r2, [r3, #0]
 800f3dc:	0280      	lsls	r0, r0, #10
 800f3de:	4310      	orrs	r0, r2
 800f3e0:	4a6b      	ldr	r2, [pc, #428]	; (800f590 <HAL_PCD_IRQHandler+0x340>)
 800f3e2:	4302      	orrs	r2, r0
 800f3e4:	b292      	uxth	r2, r2
 800f3e6:	e005      	b.n	800f3f4 <HAL_PCD_IRQHandler+0x1a4>
 800f3e8:	2a00      	cmp	r2, #0
 800f3ea:	d10e      	bne.n	800f40a <HAL_PCD_IRQHandler+0x1ba>
 800f3ec:	2080      	movs	r0, #128	; 0x80
 800f3ee:	881a      	ldrh	r2, [r3, #0]
 800f3f0:	0200      	lsls	r0, r0, #8
 800f3f2:	4302      	orrs	r2, r0
 800f3f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800f3f6:	880b      	ldrh	r3, [r1, #0]
 800f3f8:	4a66      	ldr	r2, [pc, #408]	; (800f594 <HAL_PCD_IRQHandler+0x344>)
 800f3fa:	401a      	ands	r2, r3
 800f3fc:	23c0      	movs	r3, #192	; 0xc0
 800f3fe:	019b      	lsls	r3, r3, #6
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f400:	4053      	eors	r3, r2
 800f402:	4a65      	ldr	r2, [pc, #404]	; (800f598 <HAL_PCD_IRQHandler+0x348>)
 800f404:	4313      	orrs	r3, r2
 800f406:	800b      	strh	r3, [r1, #0]

  return HAL_OK;
 800f408:	e730      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800f40a:	2501      	movs	r5, #1
 800f40c:	0850      	lsrs	r0, r2, #1
 800f40e:	402a      	ands	r2, r5
 800f410:	1880      	adds	r0, r0, r2
 800f412:	0280      	lsls	r0, r0, #10
 800f414:	881a      	ldrh	r2, [r3, #0]
 800f416:	e7e4      	b.n	800f3e2 <HAL_PCD_IRQHandler+0x192>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800f418:	9b01      	ldr	r3, [sp, #4]
 800f41a:	009f      	lsls	r7, r3, #2
 800f41c:	19c2      	adds	r2, r0, r7
 800f41e:	8813      	ldrh	r3, [r2, #0]
 800f420:	b299      	uxth	r1, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800f422:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800f424:	9102      	str	r1, [sp, #8]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800f426:	2b00      	cmp	r3, #0
 800f428:	db00      	blt.n	800f42c <HAL_PCD_IRQHandler+0x1dc>
 800f42a:	e0f7      	b.n	800f61c <HAL_PCD_IRQHandler+0x3cc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800f42c:	8813      	ldrh	r3, [r2, #0]
 800f42e:	4957      	ldr	r1, [pc, #348]	; (800f58c <HAL_PCD_IRQHandler+0x33c>)
 800f430:	400b      	ands	r3, r1
 800f432:	2180      	movs	r1, #128	; 0x80
 800f434:	430b      	orrs	r3, r1
 800f436:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 800f438:	2328      	movs	r3, #40	; 0x28
 800f43a:	9a01      	ldr	r2, [sp, #4]
 800f43c:	4353      	muls	r3, r2
 800f43e:	18e3      	adds	r3, r4, r3
 800f440:	001a      	movs	r2, r3
 800f442:	001d      	movs	r5, r3
 800f444:	3275      	adds	r2, #117	; 0x75
 800f446:	32ff      	adds	r2, #255	; 0xff
 800f448:	7812      	ldrb	r2, [r2, #0]
 800f44a:	3569      	adds	r5, #105	; 0x69
 800f44c:	35ff      	adds	r5, #255	; 0xff
 800f44e:	2a00      	cmp	r2, #0
 800f450:	d11a      	bne.n	800f488 <HAL_PCD_IRQHandler+0x238>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f452:	0002      	movs	r2, r0
 800f454:	3250      	adds	r2, #80	; 0x50
 800f456:	8811      	ldrh	r1, [r2, #0]
 800f458:	782a      	ldrb	r2, [r5, #0]
 800f45a:	00d2      	lsls	r2, r2, #3
 800f45c:	1852      	adds	r2, r2, r1
 800f45e:	494a      	ldr	r1, [pc, #296]	; (800f588 <HAL_PCD_IRQHandler+0x338>)
 800f460:	1812      	adds	r2, r2, r0
 800f462:	1852      	adds	r2, r2, r1
 800f464:	8812      	ldrh	r2, [r2, #0]
 800f466:	0592      	lsls	r2, r2, #22
 800f468:	0d95      	lsrs	r5, r2, #22
          if (count != 0U)
 800f46a:	2a00      	cmp	r2, #0
 800f46c:	d100      	bne.n	800f470 <HAL_PCD_IRQHandler+0x220>
 800f46e:	e0b4      	b.n	800f5da <HAL_PCD_IRQHandler+0x38a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800f470:	001a      	movs	r2, r3
 800f472:	326f      	adds	r2, #111	; 0x6f
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f474:	337d      	adds	r3, #125	; 0x7d
 800f476:	33ff      	adds	r3, #255	; 0xff
 800f478:	0019      	movs	r1, r3
 800f47a:	32ff      	adds	r2, #255	; 0xff
 800f47c:	002b      	movs	r3, r5
 800f47e:	8812      	ldrh	r2, [r2, #0]
 800f480:	6809      	ldr	r1, [r1, #0]
 800f482:	f003 fb39 	bl	8012af8 <USB_ReadPMA>
 800f486:	e0a8      	b.n	800f5da <HAL_PCD_IRQHandler+0x38a>
          if (ep->type == EP_TYPE_BULK)
 800f488:	0019      	movs	r1, r3
 800f48a:	316c      	adds	r1, #108	; 0x6c
 800f48c:	31ff      	adds	r1, #255	; 0xff
 800f48e:	7809      	ldrb	r1, [r1, #0]
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800f490:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 800f492:	2902      	cmp	r1, #2
 800f494:	d000      	beq.n	800f498 <HAL_PCD_IRQHandler+0x248>
 800f496:	e085      	b.n	800f5a4 <HAL_PCD_IRQHandler+0x354>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f498:	2680      	movs	r6, #128	; 0x80
 800f49a:	01f6      	lsls	r6, r6, #7
 800f49c:	46b4      	mov	ip, r6
 800f49e:	4665      	mov	r5, ip
 800f4a0:	9e02      	ldr	r6, [sp, #8]
    if (ep->xfer_len >= count)
 800f4a2:	3381      	adds	r3, #129	; 0x81
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f4a4:	402e      	ands	r6, r5
 800f4a6:	9603      	str	r6, [sp, #12]
 800f4a8:	0006      	movs	r6, r0
 800f4aa:	3650      	adds	r6, #80	; 0x50
 800f4ac:	9600      	str	r6, [sp, #0]
 800f4ae:	4666      	mov	r6, ip
 800f4b0:	9d02      	ldr	r5, [sp, #8]
    if (ep->xfer_len >= count)
 800f4b2:	33ff      	adds	r3, #255	; 0xff
 800f4b4:	6819      	ldr	r1, [r3, #0]
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f4b6:	4235      	tst	r5, r6
 800f4b8:	d030      	beq.n	800f51c <HAL_PCD_IRQHandler+0x2cc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f4ba:	9d00      	ldr	r5, [sp, #0]
 800f4bc:	882e      	ldrh	r6, [r5, #0]
 800f4be:	00d5      	lsls	r5, r2, #3
 800f4c0:	1976      	adds	r6, r6, r5
 800f4c2:	4d30      	ldr	r5, [pc, #192]	; (800f584 <HAL_PCD_IRQHandler+0x334>)
 800f4c4:	1836      	adds	r6, r6, r0
 800f4c6:	1976      	adds	r6, r6, r5
 800f4c8:	8835      	ldrh	r5, [r6, #0]
 800f4ca:	05ad      	lsls	r5, r5, #22
 800f4cc:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 800f4ce:	428d      	cmp	r5, r1
 800f4d0:	d90d      	bls.n	800f4ee <HAL_PCD_IRQHandler+0x29e>
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f4d6:	0091      	lsls	r1, r2, #2
 800f4d8:	1841      	adds	r1, r0, r1
 800f4da:	880b      	ldrh	r3, [r1, #0]
 800f4dc:	4e2d      	ldr	r6, [pc, #180]	; (800f594 <HAL_PCD_IRQHandler+0x344>)
 800f4de:	401e      	ands	r6, r3
 800f4e0:	2380      	movs	r3, #128	; 0x80
 800f4e2:	019b      	lsls	r3, r3, #6
 800f4e4:	4073      	eors	r3, r6
 800f4e6:	4e2c      	ldr	r6, [pc, #176]	; (800f598 <HAL_PCD_IRQHandler+0x348>)
 800f4e8:	4333      	orrs	r3, r6
 800f4ea:	800b      	strh	r3, [r1, #0]
 800f4ec:	e002      	b.n	800f4f4 <HAL_PCD_IRQHandler+0x2a4>
      ep->xfer_len -= count;
 800f4ee:	1b49      	subs	r1, r1, r5
 800f4f0:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 800f4f2:	d0f0      	beq.n	800f4d6 <HAL_PCD_IRQHandler+0x286>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f4f4:	9b02      	ldr	r3, [sp, #8]
 800f4f6:	065b      	lsls	r3, r3, #25
 800f4f8:	d507      	bpl.n	800f50a <HAL_PCD_IRQHandler+0x2ba>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f4fa:	0092      	lsls	r2, r2, #2
 800f4fc:	1882      	adds	r2, r0, r2
 800f4fe:	8813      	ldrh	r3, [r2, #0]
 800f500:	4926      	ldr	r1, [pc, #152]	; (800f59c <HAL_PCD_IRQHandler+0x34c>)
 800f502:	400b      	ands	r3, r1
 800f504:	4926      	ldr	r1, [pc, #152]	; (800f5a0 <HAL_PCD_IRQHandler+0x350>)
 800f506:	430b      	orrs	r3, r1
 800f508:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 800f50a:	2d00      	cmp	r5, #0
 800f50c:	d065      	beq.n	800f5da <HAL_PCD_IRQHandler+0x38a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f50e:	2328      	movs	r3, #40	; 0x28
 800f510:	9a01      	ldr	r2, [sp, #4]
 800f512:	4353      	muls	r3, r2
 800f514:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f516:	001a      	movs	r2, r3
 800f518:	3271      	adds	r2, #113	; 0x71
 800f51a:	e7ab      	b.n	800f474 <HAL_PCD_IRQHandler+0x224>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f51c:	9d00      	ldr	r5, [sp, #0]
 800f51e:	882e      	ldrh	r6, [r5, #0]
 800f520:	00d5      	lsls	r5, r2, #3
 800f522:	1976      	adds	r6, r6, r5
 800f524:	4d18      	ldr	r5, [pc, #96]	; (800f588 <HAL_PCD_IRQHandler+0x338>)
 800f526:	1836      	adds	r6, r6, r0
 800f528:	1976      	adds	r6, r6, r5
 800f52a:	8835      	ldrh	r5, [r6, #0]
 800f52c:	05ad      	lsls	r5, r5, #22
 800f52e:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 800f530:	428d      	cmp	r5, r1
 800f532:	d90d      	bls.n	800f550 <HAL_PCD_IRQHandler+0x300>
 800f534:	9903      	ldr	r1, [sp, #12]
 800f536:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f538:	0091      	lsls	r1, r2, #2
 800f53a:	1841      	adds	r1, r0, r1
 800f53c:	880b      	ldrh	r3, [r1, #0]
 800f53e:	4e15      	ldr	r6, [pc, #84]	; (800f594 <HAL_PCD_IRQHandler+0x344>)
 800f540:	401e      	ands	r6, r3
 800f542:	2380      	movs	r3, #128	; 0x80
 800f544:	019b      	lsls	r3, r3, #6
 800f546:	4073      	eors	r3, r6
 800f548:	4e13      	ldr	r6, [pc, #76]	; (800f598 <HAL_PCD_IRQHandler+0x348>)
 800f54a:	4333      	orrs	r3, r6
 800f54c:	800b      	strh	r3, [r1, #0]
 800f54e:	e002      	b.n	800f556 <HAL_PCD_IRQHandler+0x306>
      ep->xfer_len -= count;
 800f550:	1b49      	subs	r1, r1, r5
 800f552:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 800f554:	d0f0      	beq.n	800f538 <HAL_PCD_IRQHandler+0x2e8>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f556:	9b02      	ldr	r3, [sp, #8]
 800f558:	065b      	lsls	r3, r3, #25
 800f55a:	d407      	bmi.n	800f56c <HAL_PCD_IRQHandler+0x31c>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f55c:	0092      	lsls	r2, r2, #2
 800f55e:	1882      	adds	r2, r0, r2
 800f560:	8813      	ldrh	r3, [r2, #0]
 800f562:	490e      	ldr	r1, [pc, #56]	; (800f59c <HAL_PCD_IRQHandler+0x34c>)
 800f564:	400b      	ands	r3, r1
 800f566:	490e      	ldr	r1, [pc, #56]	; (800f5a0 <HAL_PCD_IRQHandler+0x350>)
 800f568:	430b      	orrs	r3, r1
 800f56a:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 800f56c:	2d00      	cmp	r5, #0
 800f56e:	d034      	beq.n	800f5da <HAL_PCD_IRQHandler+0x38a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f570:	2328      	movs	r3, #40	; 0x28
 800f572:	9a01      	ldr	r2, [sp, #4]
 800f574:	4353      	muls	r3, r2
 800f576:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f578:	001a      	movs	r2, r3
 800f57a:	3273      	adds	r2, #115	; 0x73
 800f57c:	e77a      	b.n	800f474 <HAL_PCD_IRQHandler+0x224>
 800f57e:	46c0      	nop			; (mov r8, r8)
 800f580:	ffff8f0f 	.word	0xffff8f0f
 800f584:	00000402 	.word	0x00000402
 800f588:	00000406 	.word	0x00000406
 800f58c:	00000f8f 	.word	0x00000f8f
 800f590:	ffff8000 	.word	0xffff8000
 800f594:	ffffbf8f 	.word	0xffffbf8f
 800f598:	00008080 	.word	0x00008080
 800f59c:	ffff8f8f 	.word	0xffff8f8f
 800f5a0:	000080c0 	.word	0x000080c0
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f5a4:	0092      	lsls	r2, r2, #2
 800f5a6:	1882      	adds	r2, r0, r2
 800f5a8:	8816      	ldrh	r6, [r2, #0]
 800f5aa:	49c8      	ldr	r1, [pc, #800]	; (800f8cc <HAL_PCD_IRQHandler+0x67c>)
 800f5ac:	4031      	ands	r1, r6
 800f5ae:	4ec8      	ldr	r6, [pc, #800]	; (800f8d0 <HAL_PCD_IRQHandler+0x680>)
 800f5b0:	4331      	orrs	r1, r6
 800f5b2:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800f5b4:	782a      	ldrb	r2, [r5, #0]
 800f5b6:	0091      	lsls	r1, r2, #2
 800f5b8:	1841      	adds	r1, r0, r1
 800f5ba:	880d      	ldrh	r5, [r1, #0]
 800f5bc:	0001      	movs	r1, r0
 800f5be:	3150      	adds	r1, #80	; 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f5c0:	8809      	ldrh	r1, [r1, #0]
 800f5c2:	00d2      	lsls	r2, r2, #3
 800f5c4:	1852      	adds	r2, r2, r1
 800f5c6:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800f5c8:	046d      	lsls	r5, r5, #17
 800f5ca:	d563      	bpl.n	800f694 <HAL_PCD_IRQHandler+0x444>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f5cc:	49c1      	ldr	r1, [pc, #772]	; (800f8d4 <HAL_PCD_IRQHandler+0x684>)
 800f5ce:	1852      	adds	r2, r2, r1
 800f5d0:	8812      	ldrh	r2, [r2, #0]
 800f5d2:	0592      	lsls	r2, r2, #22
 800f5d4:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 800f5d6:	2a00      	cmp	r2, #0
 800f5d8:	d19d      	bne.n	800f516 <HAL_PCD_IRQHandler+0x2c6>
        ep->xfer_count += count;
 800f5da:	2328      	movs	r3, #40	; 0x28
 800f5dc:	9901      	ldr	r1, [sp, #4]
 800f5de:	4359      	muls	r1, r3
 800f5e0:	1862      	adds	r2, r4, r1
 800f5e2:	0016      	movs	r6, r2
 800f5e4:	3685      	adds	r6, #133	; 0x85
 800f5e6:	36ff      	adds	r6, #255	; 0xff
 800f5e8:	6830      	ldr	r0, [r6, #0]
        ep->xfer_buff += count;
 800f5ea:	3e08      	subs	r6, #8
        ep->xfer_count += count;
 800f5ec:	1940      	adds	r0, r0, r5
 800f5ee:	60b0      	str	r0, [r6, #8]
        ep->xfer_buff += count;
 800f5f0:	6830      	ldr	r0, [r6, #0]
 800f5f2:	1940      	adds	r0, r0, r5
 800f5f4:	6030      	str	r0, [r6, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800f5f6:	0010      	movs	r0, r2
 800f5f8:	3081      	adds	r0, #129	; 0x81
 800f5fa:	30ff      	adds	r0, #255	; 0xff
 800f5fc:	6800      	ldr	r0, [r0, #0]
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d003      	beq.n	800f60a <HAL_PCD_IRQHandler+0x3ba>
 800f602:	32fc      	adds	r2, #252	; 0xfc
 800f604:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f606:	4295      	cmp	r5, r2
 800f608:	d24c      	bcs.n	800f6a4 <HAL_PCD_IRQHandler+0x454>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800f60a:	9a01      	ldr	r2, [sp, #4]
 800f60c:	0020      	movs	r0, r4
 800f60e:	4353      	muls	r3, r2
 800f610:	18e3      	adds	r3, r4, r3
 800f612:	3369      	adds	r3, #105	; 0x69
 800f614:	33ff      	adds	r3, #255	; 0xff
 800f616:	7819      	ldrb	r1, [r3, #0]
 800f618:	f007 ffb1 	bl	801757e <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800f61c:	2280      	movs	r2, #128	; 0x80
 800f61e:	9b02      	ldr	r3, [sp, #8]
 800f620:	4213      	tst	r3, r2
 800f622:	d100      	bne.n	800f626 <HAL_PCD_IRQHandler+0x3d6>
 800f624:	e622      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800f626:	6820      	ldr	r0, [r4, #0]
 800f628:	49ab      	ldr	r1, [pc, #684]	; (800f8d8 <HAL_PCD_IRQHandler+0x688>)
 800f62a:	19c2      	adds	r2, r0, r7
 800f62c:	8813      	ldrh	r3, [r2, #0]
 800f62e:	9d01      	ldr	r5, [sp, #4]
 800f630:	400b      	ands	r3, r1
 800f632:	49aa      	ldr	r1, [pc, #680]	; (800f8dc <HAL_PCD_IRQHandler+0x68c>)
 800f634:	430b      	orrs	r3, r1
 800f636:	b29b      	uxth	r3, r3
 800f638:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 800f63a:	2328      	movs	r3, #40	; 0x28
 800f63c:	435d      	muls	r5, r3
 800f63e:	1965      	adds	r5, r4, r5
 800f640:	002a      	movs	r2, r5
 800f642:	322b      	adds	r2, #43	; 0x2b
 800f644:	7811      	ldrb	r1, [r2, #0]
 800f646:	18ea      	adds	r2, r5, r3
 800f648:	2901      	cmp	r1, #1
 800f64a:	d15a      	bne.n	800f702 <HAL_PCD_IRQHandler+0x4b2>
          ep->xfer_len = 0U;
 800f64c:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 800f64e:	0029      	movs	r1, r5
          ep->xfer_len = 0U;
 800f650:	642b      	str	r3, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 800f652:	3134      	adds	r1, #52	; 0x34
 800f654:	7809      	ldrb	r1, [r1, #0]
 800f656:	4299      	cmp	r1, r3
 800f658:	d037      	beq.n	800f6ca <HAL_PCD_IRQHandler+0x47a>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f65a:	2140      	movs	r1, #64	; 0x40
 800f65c:	9e02      	ldr	r6, [sp, #8]
 800f65e:	9f02      	ldr	r7, [sp, #8]
 800f660:	400e      	ands	r6, r1
 800f662:	3529      	adds	r5, #41	; 0x29
 800f664:	420f      	tst	r7, r1
 800f666:	d035      	beq.n	800f6d4 <HAL_PCD_IRQHandler+0x484>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f668:	7829      	ldrb	r1, [r5, #0]
 800f66a:	4299      	cmp	r1, r3
 800f66c:	d121      	bne.n	800f6b2 <HAL_PCD_IRQHandler+0x462>
 800f66e:	0003      	movs	r3, r0
 800f670:	3350      	adds	r3, #80	; 0x50
 800f672:	8819      	ldrh	r1, [r3, #0]
 800f674:	7813      	ldrb	r3, [r2, #0]
 800f676:	4d97      	ldr	r5, [pc, #604]	; (800f8d4 <HAL_PCD_IRQHandler+0x684>)
 800f678:	00db      	lsls	r3, r3, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f67a:	1940      	adds	r0, r0, r5
 800f67c:	1840      	adds	r0, r0, r1
 800f67e:	1818      	adds	r0, r3, r0
 800f680:	8803      	ldrh	r3, [r0, #0]
 800f682:	4996      	ldr	r1, [pc, #600]	; (800f8dc <HAL_PCD_IRQHandler+0x68c>)
 800f684:	059b      	lsls	r3, r3, #22
 800f686:	0d9b      	lsrs	r3, r3, #22
 800f688:	8003      	strh	r3, [r0, #0]
 800f68a:	8803      	ldrh	r3, [r0, #0]
 800f68c:	430b      	orrs	r3, r1
 800f68e:	b29b      	uxth	r3, r3
 800f690:	8003      	strh	r3, [r0, #0]
 800f692:	e01a      	b.n	800f6ca <HAL_PCD_IRQHandler+0x47a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f694:	4992      	ldr	r1, [pc, #584]	; (800f8e0 <HAL_PCD_IRQHandler+0x690>)
 800f696:	1852      	adds	r2, r2, r1
 800f698:	8812      	ldrh	r2, [r2, #0]
 800f69a:	0592      	lsls	r2, r2, #22
 800f69c:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 800f69e:	2a00      	cmp	r2, #0
 800f6a0:	d09b      	beq.n	800f5da <HAL_PCD_IRQHandler+0x38a>
 800f6a2:	e769      	b.n	800f578 <HAL_PCD_IRQHandler+0x328>
        ep = &hpcd->OUT_ep[epindex];
 800f6a4:	3169      	adds	r1, #105	; 0x69
 800f6a6:	31ff      	adds	r1, #255	; 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f6a8:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 800f6aa:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f6ac:	f002 ffdc 	bl	8012668 <USB_EPStartXfer>
 800f6b0:	e7b4      	b.n	800f61c <HAL_PCD_IRQHandler+0x3cc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f6b2:	2901      	cmp	r1, #1
 800f6b4:	d109      	bne.n	800f6ca <HAL_PCD_IRQHandler+0x47a>
 800f6b6:	0001      	movs	r1, r0
 800f6b8:	4e86      	ldr	r6, [pc, #536]	; (800f8d4 <HAL_PCD_IRQHandler+0x684>)
 800f6ba:	3150      	adds	r1, #80	; 0x50
 800f6bc:	880d      	ldrh	r5, [r1, #0]
 800f6be:	7811      	ldrb	r1, [r2, #0]
 800f6c0:	1980      	adds	r0, r0, r6
 800f6c2:	00c9      	lsls	r1, r1, #3
 800f6c4:	1940      	adds	r0, r0, r5
 800f6c6:	1809      	adds	r1, r1, r0
 800f6c8:	800b      	strh	r3, [r1, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f6ca:	7811      	ldrb	r1, [r2, #0]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f6cc:	0020      	movs	r0, r4
 800f6ce:	f007 ff63 	bl	8017598 <HAL_PCD_DataInStageCallback>
 800f6d2:	e5cb      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f6d4:	782b      	ldrb	r3, [r5, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d106      	bne.n	800f6e8 <HAL_PCD_IRQHandler+0x498>
 800f6da:	0003      	movs	r3, r0
 800f6dc:	3350      	adds	r3, #80	; 0x50
 800f6de:	8819      	ldrh	r1, [r3, #0]
 800f6e0:	7813      	ldrb	r3, [r2, #0]
 800f6e2:	4d7f      	ldr	r5, [pc, #508]	; (800f8e0 <HAL_PCD_IRQHandler+0x690>)
 800f6e4:	00db      	lsls	r3, r3, #3
 800f6e6:	e7c8      	b.n	800f67a <HAL_PCD_IRQHandler+0x42a>
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d1ee      	bne.n	800f6ca <HAL_PCD_IRQHandler+0x47a>
 800f6ec:	0003      	movs	r3, r0
 800f6ee:	4d7c      	ldr	r5, [pc, #496]	; (800f8e0 <HAL_PCD_IRQHandler+0x690>)
 800f6f0:	3350      	adds	r3, #80	; 0x50
 800f6f2:	8819      	ldrh	r1, [r3, #0]
 800f6f4:	7813      	ldrb	r3, [r2, #0]
 800f6f6:	1940      	adds	r0, r0, r5
 800f6f8:	00db      	lsls	r3, r3, #3
 800f6fa:	1840      	adds	r0, r0, r1
 800f6fc:	181b      	adds	r3, r3, r0
 800f6fe:	801e      	strh	r6, [r3, #0]
 800f700:	e7e3      	b.n	800f6ca <HAL_PCD_IRQHandler+0x47a>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f702:	7812      	ldrb	r2, [r2, #0]
          if ((wEPVal & USB_EP_KIND) == 0U)
 800f704:	9f02      	ldr	r7, [sp, #8]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f706:	9203      	str	r2, [sp, #12]
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f708:	00d2      	lsls	r2, r2, #3
 800f70a:	9200      	str	r2, [sp, #0]
          if ((wEPVal & USB_EP_KIND) == 0U)
 800f70c:	2280      	movs	r2, #128	; 0x80
 800f70e:	9902      	ldr	r1, [sp, #8]
 800f710:	0052      	lsls	r2, r2, #1
            if (ep->xfer_len > TxPctSize)
 800f712:	6c2e      	ldr	r6, [r5, #64]	; 0x40
          if ((wEPVal & USB_EP_KIND) == 0U)
 800f714:	4017      	ands	r7, r2
 800f716:	4211      	tst	r1, r2
 800f718:	d11e      	bne.n	800f758 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f71a:	0002      	movs	r2, r0
 800f71c:	3250      	adds	r2, #80	; 0x50
 800f71e:	8812      	ldrh	r2, [r2, #0]
 800f720:	9900      	ldr	r1, [sp, #0]
 800f722:	1882      	adds	r2, r0, r2
 800f724:	1852      	adds	r2, r2, r1
 800f726:	496b      	ldr	r1, [pc, #428]	; (800f8d4 <HAL_PCD_IRQHandler+0x684>)
 800f728:	1852      	adds	r2, r2, r1
 800f72a:	8812      	ldrh	r2, [r2, #0]
 800f72c:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 800f72e:	0d92      	lsrs	r2, r2, #22
 800f730:	42b2      	cmp	r2, r6
 800f732:	d302      	bcc.n	800f73a <HAL_PCD_IRQHandler+0x4ea>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f734:	9903      	ldr	r1, [sp, #12]
 800f736:	642f      	str	r7, [r5, #64]	; 0x40
 800f738:	e7c8      	b.n	800f6cc <HAL_PCD_IRQHandler+0x47c>
              ep->xfer_buff += TxPctSize;
 800f73a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
              ep->xfer_len -= TxPctSize;
 800f73c:	1ab6      	subs	r6, r6, r2
              ep->xfer_buff += TxPctSize;
 800f73e:	1889      	adds	r1, r1, r2
 800f740:	63e9      	str	r1, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 800f742:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800f744:	642e      	str	r6, [r5, #64]	; 0x40
 800f746:	188a      	adds	r2, r1, r2
        ep = &hpcd->IN_ep[epindex];
 800f748:	9901      	ldr	r1, [sp, #4]
              ep->xfer_count += TxPctSize;
 800f74a:	646a      	str	r2, [r5, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800f74c:	3101      	adds	r1, #1
 800f74e:	4359      	muls	r1, r3
 800f750:	1861      	adds	r1, r4, r1
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f752:	f002 ff89 	bl	8012668 <USB_EPStartXfer>
 800f756:	e589      	b.n	800f26c <HAL_PCD_IRQHandler+0x1c>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f758:	2240      	movs	r2, #64	; 0x40
 800f75a:	0003      	movs	r3, r0
 800f75c:	9f02      	ldr	r7, [sp, #8]
 800f75e:	9902      	ldr	r1, [sp, #8]
 800f760:	4017      	ands	r7, r2
 800f762:	3350      	adds	r3, #80	; 0x50
 800f764:	4211      	tst	r1, r2
 800f766:	d100      	bne.n	800f76a <HAL_PCD_IRQHandler+0x51a>
 800f768:	e0df      	b.n	800f92a <HAL_PCD_IRQHandler+0x6da>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f76a:	495a      	ldr	r1, [pc, #360]	; (800f8d4 <HAL_PCD_IRQHandler+0x684>)
 800f76c:	881a      	ldrh	r2, [r3, #0]
 800f76e:	1847      	adds	r7, r0, r1
 800f770:	9900      	ldr	r1, [sp, #0]
 800f772:	18ba      	adds	r2, r7, r2
 800f774:	5a52      	ldrh	r2, [r2, r1]
 800f776:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len > TxPctSize)
 800f778:	0d92      	lsrs	r2, r2, #22
 800f77a:	4694      	mov	ip, r2
      ep->xfer_len = 0U;
 800f77c:	2200      	movs	r2, #0
    if (ep->xfer_len > TxPctSize)
 800f77e:	45b4      	cmp	ip, r6
 800f780:	d201      	bcs.n	800f786 <HAL_PCD_IRQHandler+0x536>
      ep->xfer_len -= TxPctSize;
 800f782:	4662      	mov	r2, ip
 800f784:	1ab2      	subs	r2, r6, r2
 800f786:	2628      	movs	r6, #40	; 0x28
 800f788:	9901      	ldr	r1, [sp, #4]
 800f78a:	434e      	muls	r6, r1
 800f78c:	19a6      	adds	r6, r4, r6
 800f78e:	6432      	str	r2, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800f790:	2680      	movs	r6, #128	; 0x80
 800f792:	9902      	ldr	r1, [sp, #8]
 800f794:	01f6      	lsls	r6, r6, #7
 800f796:	4031      	ands	r1, r6
 800f798:	000e      	movs	r6, r1
 800f79a:	2a00      	cmp	r2, #0
 800f79c:	d14a      	bne.n	800f834 <HAL_PCD_IRQHandler+0x5e4>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f79e:	2129      	movs	r1, #41	; 0x29
 800f7a0:	468c      	mov	ip, r1
 800f7a2:	44ac      	add	ip, r5
 800f7a4:	4661      	mov	r1, ip
 800f7a6:	7809      	ldrb	r1, [r1, #0]
 800f7a8:	2900      	cmp	r1, #0
 800f7aa:	d12e      	bne.n	800f80a <HAL_PCD_IRQHandler+0x5ba>
 800f7ac:	881a      	ldrh	r2, [r3, #0]
 800f7ae:	494b      	ldr	r1, [pc, #300]	; (800f8dc <HAL_PCD_IRQHandler+0x68c>)
 800f7b0:	18bf      	adds	r7, r7, r2
 800f7b2:	9a00      	ldr	r2, [sp, #0]
 800f7b4:	18bf      	adds	r7, r7, r2
 800f7b6:	883a      	ldrh	r2, [r7, #0]
 800f7b8:	0592      	lsls	r2, r2, #22
 800f7ba:	0d92      	lsrs	r2, r2, #22
 800f7bc:	803a      	strh	r2, [r7, #0]
 800f7be:	883a      	ldrh	r2, [r7, #0]
 800f7c0:	430a      	orrs	r2, r1
 800f7c2:	b292      	uxth	r2, r2
 800f7c4:	803a      	strh	r2, [r7, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f7c6:	4a46      	ldr	r2, [pc, #280]	; (800f8e0 <HAL_PCD_IRQHandler+0x690>)
 800f7c8:	881b      	ldrh	r3, [r3, #0]
 800f7ca:	1880      	adds	r0, r0, r2
 800f7cc:	18c0      	adds	r0, r0, r3
 800f7ce:	9b00      	ldr	r3, [sp, #0]
 800f7d0:	18c0      	adds	r0, r0, r3
 800f7d2:	8803      	ldrh	r3, [r0, #0]
 800f7d4:	059b      	lsls	r3, r3, #22
 800f7d6:	0d9b      	lsrs	r3, r3, #22
 800f7d8:	8003      	strh	r3, [r0, #0]
 800f7da:	8803      	ldrh	r3, [r0, #0]
 800f7dc:	430b      	orrs	r3, r1
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	8003      	strh	r3, [r0, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f7e2:	0020      	movs	r0, r4
 800f7e4:	9903      	ldr	r1, [sp, #12]
 800f7e6:	f007 fed7 	bl	8017598 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f7ea:	2e00      	cmp	r6, #0
 800f7ec:	d100      	bne.n	800f7f0 <HAL_PCD_IRQHandler+0x5a0>
 800f7ee:	e0db      	b.n	800f9a8 <HAL_PCD_IRQHandler+0x758>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f7f0:	002b      	movs	r3, r5
 800f7f2:	3328      	adds	r3, #40	; 0x28
 800f7f4:	781a      	ldrb	r2, [r3, #0]
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	0092      	lsls	r2, r2, #2
 800f7fa:	189a      	adds	r2, r3, r2
 800f7fc:	8813      	ldrh	r3, [r2, #0]
 800f7fe:	4933      	ldr	r1, [pc, #204]	; (800f8cc <HAL_PCD_IRQHandler+0x67c>)
 800f800:	400b      	ands	r3, r1
 800f802:	4938      	ldr	r1, [pc, #224]	; (800f8e4 <HAL_PCD_IRQHandler+0x694>)
 800f804:	430b      	orrs	r3, r1
 800f806:	8013      	strh	r3, [r2, #0]
 800f808:	e0ce      	b.n	800f9a8 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f80a:	000b      	movs	r3, r1
 800f80c:	2901      	cmp	r1, #1
 800f80e:	d1e8      	bne.n	800f7e2 <HAL_PCD_IRQHandler+0x592>
 800f810:	334f      	adds	r3, #79	; 0x4f
 800f812:	469c      	mov	ip, r3
 800f814:	4484      	add	ip, r0
 800f816:	4663      	mov	r3, ip
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	9900      	ldr	r1, [sp, #0]
 800f81c:	18fb      	adds	r3, r7, r3
 800f81e:	185b      	adds	r3, r3, r1
 800f820:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f822:	4663      	mov	r3, ip
 800f824:	492e      	ldr	r1, [pc, #184]	; (800f8e0 <HAL_PCD_IRQHandler+0x690>)
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	1840      	adds	r0, r0, r1
 800f82a:	18c0      	adds	r0, r0, r3
 800f82c:	9b00      	ldr	r3, [sp, #0]
 800f82e:	18c0      	adds	r0, r0, r3
 800f830:	8002      	strh	r2, [r0, #0]
 800f832:	e7d6      	b.n	800f7e2 <HAL_PCD_IRQHandler+0x592>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f834:	2900      	cmp	r1, #0
 800f836:	d008      	beq.n	800f84a <HAL_PCD_IRQHandler+0x5fa>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f838:	9b03      	ldr	r3, [sp, #12]
 800f83a:	0099      	lsls	r1, r3, #2
 800f83c:	1841      	adds	r1, r0, r1
 800f83e:	880a      	ldrh	r2, [r1, #0]
 800f840:	4b22      	ldr	r3, [pc, #136]	; (800f8cc <HAL_PCD_IRQHandler+0x67c>)
 800f842:	4013      	ands	r3, r2
 800f844:	4a27      	ldr	r2, [pc, #156]	; (800f8e4 <HAL_PCD_IRQHandler+0x694>)
 800f846:	4313      	orrs	r3, r2
 800f848:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800f84a:	2328      	movs	r3, #40	; 0x28
 800f84c:	9a01      	ldr	r2, [sp, #4]
 800f84e:	4353      	muls	r3, r2
 800f850:	18e3      	adds	r3, r4, r3
 800f852:	001e      	movs	r6, r3
 800f854:	364c      	adds	r6, #76	; 0x4c
 800f856:	7832      	ldrb	r2, [r6, #0]
 800f858:	2a01      	cmp	r2, #1
 800f85a:	d000      	beq.n	800f85e <HAL_PCD_IRQHandler+0x60e>
 800f85c:	e0a4      	b.n	800f9a8 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 800f85e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800f860:	6c99      	ldr	r1, [r3, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 800f862:	4462      	add	r2, ip
 800f864:	9202      	str	r2, [sp, #8]
 800f866:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800f868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f86a:	4462      	add	r2, ip
 800f86c:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800f86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f870:	4291      	cmp	r1, r2
 800f872:	d321      	bcc.n	800f8b8 <HAL_PCD_IRQHandler+0x668>
          ep->xfer_len_db -= len;
 800f874:	1a89      	subs	r1, r1, r2
 800f876:	6499      	str	r1, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f878:	002b      	movs	r3, r5
 800f87a:	3329      	adds	r3, #41	; 0x29
 800f87c:	7819      	ldrb	r1, [r3, #0]
 800f87e:	b293      	uxth	r3, r2
 800f880:	2900      	cmp	r1, #0
 800f882:	d148      	bne.n	800f916 <HAL_PCD_IRQHandler+0x6c6>
 800f884:	0001      	movs	r1, r0
 800f886:	3150      	adds	r1, #80	; 0x50
 800f888:	8809      	ldrh	r1, [r1, #0]
 800f88a:	187f      	adds	r7, r7, r1
 800f88c:	9900      	ldr	r1, [sp, #0]
 800f88e:	187f      	adds	r7, r7, r1
 800f890:	8839      	ldrh	r1, [r7, #0]
 800f892:	0589      	lsls	r1, r1, #22
 800f894:	0d89      	lsrs	r1, r1, #22
 800f896:	8039      	strh	r1, [r7, #0]
 800f898:	2a3e      	cmp	r2, #62	; 0x3e
 800f89a:	d925      	bls.n	800f8e8 <HAL_PCD_IRQHandler+0x698>
 800f89c:	261f      	movs	r6, #31
 800f89e:	0951      	lsrs	r1, r2, #5
 800f8a0:	4032      	ands	r2, r6
 800f8a2:	4256      	negs	r6, r2
 800f8a4:	4172      	adcs	r2, r6
 800f8a6:	1a89      	subs	r1, r1, r2
 800f8a8:	883a      	ldrh	r2, [r7, #0]
 800f8aa:	0289      	lsls	r1, r1, #10
 800f8ac:	4311      	orrs	r1, r2
 800f8ae:	4a0b      	ldr	r2, [pc, #44]	; (800f8dc <HAL_PCD_IRQHandler+0x68c>)
 800f8b0:	4311      	orrs	r1, r2
 800f8b2:	b289      	uxth	r1, r1
 800f8b4:	8039      	strh	r1, [r7, #0]
 800f8b6:	e01e      	b.n	800f8f6 <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 800f8b8:	2900      	cmp	r1, #0
 800f8ba:	d102      	bne.n	800f8c2 <HAL_PCD_IRQHandler+0x672>
    if (ep->xfer_len > TxPctSize)
 800f8bc:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800f8be:	7031      	strb	r1, [r6, #0]
 800f8c0:	e7da      	b.n	800f878 <HAL_PCD_IRQHandler+0x628>
          ep->xfer_fill_db = 0U;
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	7032      	strb	r2, [r6, #0]
          ep->xfer_len_db = 0U;
 800f8c6:	649a      	str	r2, [r3, #72]	; 0x48
 800f8c8:	000a      	movs	r2, r1
 800f8ca:	e7d5      	b.n	800f878 <HAL_PCD_IRQHandler+0x628>
 800f8cc:	ffff8f8f 	.word	0xffff8f8f
 800f8d0:	000080c0 	.word	0x000080c0
 800f8d4:	00000402 	.word	0x00000402
 800f8d8:	ffff8f0f 	.word	0xffff8f0f
 800f8dc:	ffff8000 	.word	0xffff8000
 800f8e0:	00000406 	.word	0x00000406
 800f8e4:	0000c080 	.word	0x0000c080
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f8e8:	2a00      	cmp	r2, #0
 800f8ea:	d10d      	bne.n	800f908 <HAL_PCD_IRQHandler+0x6b8>
 800f8ec:	883a      	ldrh	r2, [r7, #0]
 800f8ee:	49ba      	ldr	r1, [pc, #744]	; (800fbd8 <HAL_PCD_IRQHandler+0x988>)
 800f8f0:	430a      	orrs	r2, r1
 800f8f2:	b292      	uxth	r2, r2
 800f8f4:	803a      	strh	r2, [r7, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f8f6:	2128      	movs	r1, #40	; 0x28
 800f8f8:	9a01      	ldr	r2, [sp, #4]
 800f8fa:	4351      	muls	r1, r2
 800f8fc:	1861      	adds	r1, r4, r1
 800f8fe:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f900:	9902      	ldr	r1, [sp, #8]
 800f902:	f002 fe9c 	bl	801263e <USB_WritePMA>
 800f906:	e04f      	b.n	800f9a8 <HAL_PCD_IRQHandler+0x758>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f908:	2601      	movs	r6, #1
 800f90a:	0851      	lsrs	r1, r2, #1
 800f90c:	4032      	ands	r2, r6
 800f90e:	1889      	adds	r1, r1, r2
 800f910:	0289      	lsls	r1, r1, #10
 800f912:	883a      	ldrh	r2, [r7, #0]
 800f914:	e7cc      	b.n	800f8b0 <HAL_PCD_IRQHandler+0x660>
 800f916:	2901      	cmp	r1, #1
 800f918:	d1ed      	bne.n	800f8f6 <HAL_PCD_IRQHandler+0x6a6>
 800f91a:	0002      	movs	r2, r0
 800f91c:	3250      	adds	r2, #80	; 0x50
 800f91e:	8812      	ldrh	r2, [r2, #0]
 800f920:	18bf      	adds	r7, r7, r2
 800f922:	9a00      	ldr	r2, [sp, #0]
 800f924:	18bf      	adds	r7, r7, r2
 800f926:	803b      	strh	r3, [r7, #0]
 800f928:	e7e5      	b.n	800f8f6 <HAL_PCD_IRQHandler+0x6a6>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f92a:	49ac      	ldr	r1, [pc, #688]	; (800fbdc <HAL_PCD_IRQHandler+0x98c>)
 800f92c:	881a      	ldrh	r2, [r3, #0]
 800f92e:	468c      	mov	ip, r1
 800f930:	9900      	ldr	r1, [sp, #0]
 800f932:	4484      	add	ip, r0
 800f934:	4462      	add	r2, ip
 800f936:	5a52      	ldrh	r2, [r2, r1]
 800f938:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len >= TxPctSize)
 800f93a:	0d92      	lsrs	r2, r2, #22
 800f93c:	42b2      	cmp	r2, r6
 800f93e:	d800      	bhi.n	800f942 <HAL_PCD_IRQHandler+0x6f2>
      ep->xfer_len -= TxPctSize;
 800f940:	1ab7      	subs	r7, r6, r2
 800f942:	2628      	movs	r6, #40	; 0x28
 800f944:	9901      	ldr	r1, [sp, #4]
 800f946:	434e      	muls	r6, r1
 800f948:	19a6      	adds	r6, r4, r6
 800f94a:	6437      	str	r7, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800f94c:	2680      	movs	r6, #128	; 0x80
 800f94e:	9902      	ldr	r1, [sp, #8]
 800f950:	01f6      	lsls	r6, r6, #7
 800f952:	4031      	ands	r1, r6
 800f954:	000e      	movs	r6, r1
 800f956:	2f00      	cmp	r7, #0
 800f958:	d140      	bne.n	800f9dc <HAL_PCD_IRQHandler+0x78c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f95a:	002a      	movs	r2, r5
 800f95c:	3229      	adds	r2, #41	; 0x29
 800f95e:	7812      	ldrb	r2, [r2, #0]
 800f960:	2a00      	cmp	r2, #0
 800f962:	d12b      	bne.n	800f9bc <HAL_PCD_IRQHandler+0x76c>
 800f964:	499e      	ldr	r1, [pc, #632]	; (800fbe0 <HAL_PCD_IRQHandler+0x990>)
 800f966:	881a      	ldrh	r2, [r3, #0]
 800f968:	1840      	adds	r0, r0, r1
 800f96a:	1880      	adds	r0, r0, r2
 800f96c:	9a00      	ldr	r2, [sp, #0]
 800f96e:	499a      	ldr	r1, [pc, #616]	; (800fbd8 <HAL_PCD_IRQHandler+0x988>)
 800f970:	1880      	adds	r0, r0, r2
 800f972:	8802      	ldrh	r2, [r0, #0]
 800f974:	0592      	lsls	r2, r2, #22
 800f976:	0d92      	lsrs	r2, r2, #22
 800f978:	8002      	strh	r2, [r0, #0]
 800f97a:	8802      	ldrh	r2, [r0, #0]
 800f97c:	430a      	orrs	r2, r1
 800f97e:	b292      	uxth	r2, r2
 800f980:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f982:	881b      	ldrh	r3, [r3, #0]
 800f984:	9a00      	ldr	r2, [sp, #0]
 800f986:	4463      	add	r3, ip
 800f988:	189b      	adds	r3, r3, r2
 800f98a:	881a      	ldrh	r2, [r3, #0]
 800f98c:	0592      	lsls	r2, r2, #22
 800f98e:	0d92      	lsrs	r2, r2, #22
 800f990:	801a      	strh	r2, [r3, #0]
 800f992:	881a      	ldrh	r2, [r3, #0]
 800f994:	430a      	orrs	r2, r1
 800f996:	b292      	uxth	r2, r2
 800f998:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f99a:	0020      	movs	r0, r4
 800f99c:	9903      	ldr	r1, [sp, #12]
 800f99e:	f007 fdfb 	bl	8017598 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f9a2:	2e00      	cmp	r6, #0
 800f9a4:	d100      	bne.n	800f9a8 <HAL_PCD_IRQHandler+0x758>
 800f9a6:	e723      	b.n	800f7f0 <HAL_PCD_IRQHandler+0x5a0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f9a8:	3528      	adds	r5, #40	; 0x28
 800f9aa:	7829      	ldrb	r1, [r5, #0]
 800f9ac:	6823      	ldr	r3, [r4, #0]
 800f9ae:	0089      	lsls	r1, r1, #2
 800f9b0:	1859      	adds	r1, r3, r1
 800f9b2:	880b      	ldrh	r3, [r1, #0]
 800f9b4:	4a8b      	ldr	r2, [pc, #556]	; (800fbe4 <HAL_PCD_IRQHandler+0x994>)
 800f9b6:	401a      	ands	r2, r3
 800f9b8:	2330      	movs	r3, #48	; 0x30
 800f9ba:	e521      	b.n	800f400 <HAL_PCD_IRQHandler+0x1b0>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f9bc:	2a01      	cmp	r2, #1
 800f9be:	d1ec      	bne.n	800f99a <HAL_PCD_IRQHandler+0x74a>
 800f9c0:	0003      	movs	r3, r0
 800f9c2:	4987      	ldr	r1, [pc, #540]	; (800fbe0 <HAL_PCD_IRQHandler+0x990>)
 800f9c4:	3350      	adds	r3, #80	; 0x50
 800f9c6:	881a      	ldrh	r2, [r3, #0]
 800f9c8:	1840      	adds	r0, r0, r1
 800f9ca:	1880      	adds	r0, r0, r2
 800f9cc:	9a00      	ldr	r2, [sp, #0]
 800f9ce:	1880      	adds	r0, r0, r2
 800f9d0:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f9d2:	881b      	ldrh	r3, [r3, #0]
 800f9d4:	4463      	add	r3, ip
 800f9d6:	189b      	adds	r3, r3, r2
 800f9d8:	801f      	strh	r7, [r3, #0]
 800f9da:	e7de      	b.n	800f99a <HAL_PCD_IRQHandler+0x74a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	d108      	bne.n	800f9f2 <HAL_PCD_IRQHandler+0x7a2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f9e0:	9b03      	ldr	r3, [sp, #12]
 800f9e2:	0099      	lsls	r1, r3, #2
 800f9e4:	1841      	adds	r1, r0, r1
 800f9e6:	880e      	ldrh	r6, [r1, #0]
 800f9e8:	4b7f      	ldr	r3, [pc, #508]	; (800fbe8 <HAL_PCD_IRQHandler+0x998>)
 800f9ea:	4033      	ands	r3, r6
 800f9ec:	4e7f      	ldr	r6, [pc, #508]	; (800fbec <HAL_PCD_IRQHandler+0x99c>)
 800f9ee:	4333      	orrs	r3, r6
 800f9f0:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800f9f2:	2328      	movs	r3, #40	; 0x28
 800f9f4:	9901      	ldr	r1, [sp, #4]
 800f9f6:	434b      	muls	r3, r1
 800f9f8:	18e3      	adds	r3, r4, r3
 800f9fa:	001f      	movs	r7, r3
 800f9fc:	374c      	adds	r7, #76	; 0x4c
 800f9fe:	7839      	ldrb	r1, [r7, #0]
 800fa00:	2901      	cmp	r1, #1
 800fa02:	d1d1      	bne.n	800f9a8 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 800fa04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800fa06:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 800fa08:	1889      	adds	r1, r1, r2
 800fa0a:	9102      	str	r1, [sp, #8]
 800fa0c:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800fa0e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800fa10:	1889      	adds	r1, r1, r2
 800fa12:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800fa14:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800fa16:	428e      	cmp	r6, r1
 800fa18:	d321      	bcc.n	800fa5e <HAL_PCD_IRQHandler+0x80e>
          ep->xfer_len_db -= len;
 800fa1a:	1a76      	subs	r6, r6, r1
 800fa1c:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800fa1e:	002b      	movs	r3, r5
 800fa20:	3329      	adds	r3, #41	; 0x29
 800fa22:	781a      	ldrb	r2, [r3, #0]
 800fa24:	b28b      	uxth	r3, r1
 800fa26:	2a00      	cmp	r2, #0
 800fa28:	d137      	bne.n	800fa9a <HAL_PCD_IRQHandler+0x84a>
 800fa2a:	0002      	movs	r2, r0
 800fa2c:	3250      	adds	r2, #80	; 0x50
 800fa2e:	8812      	ldrh	r2, [r2, #0]
 800fa30:	9e00      	ldr	r6, [sp, #0]
 800fa32:	4462      	add	r2, ip
 800fa34:	1992      	adds	r2, r2, r6
 800fa36:	8816      	ldrh	r6, [r2, #0]
 800fa38:	05b6      	lsls	r6, r6, #22
 800fa3a:	0db6      	lsrs	r6, r6, #22
 800fa3c:	8016      	strh	r6, [r2, #0]
 800fa3e:	293e      	cmp	r1, #62	; 0x3e
 800fa40:	d917      	bls.n	800fa72 <HAL_PCD_IRQHandler+0x822>
 800fa42:	271f      	movs	r7, #31
 800fa44:	094e      	lsrs	r6, r1, #5
 800fa46:	4039      	ands	r1, r7
 800fa48:	424f      	negs	r7, r1
 800fa4a:	4179      	adcs	r1, r7
 800fa4c:	1a76      	subs	r6, r6, r1
 800fa4e:	8811      	ldrh	r1, [r2, #0]
 800fa50:	02b6      	lsls	r6, r6, #10
 800fa52:	430e      	orrs	r6, r1
 800fa54:	4960      	ldr	r1, [pc, #384]	; (800fbd8 <HAL_PCD_IRQHandler+0x988>)
 800fa56:	430e      	orrs	r6, r1
 800fa58:	b2b6      	uxth	r6, r6
 800fa5a:	8016      	strh	r6, [r2, #0]
 800fa5c:	e010      	b.n	800fa80 <HAL_PCD_IRQHandler+0x830>
        else if (ep->xfer_len_db == 0U)
 800fa5e:	2e00      	cmp	r6, #0
 800fa60:	d102      	bne.n	800fa68 <HAL_PCD_IRQHandler+0x818>
    if (ep->xfer_len >= TxPctSize)
 800fa62:	0011      	movs	r1, r2
          ep->xfer_fill_db = 0U;
 800fa64:	703e      	strb	r6, [r7, #0]
 800fa66:	e7da      	b.n	800fa1e <HAL_PCD_IRQHandler+0x7ce>
          ep->xfer_len_db = 0U;
 800fa68:	2200      	movs	r2, #0
          ep->xfer_fill_db = 0;
 800fa6a:	0031      	movs	r1, r6
          ep->xfer_len_db = 0U;
 800fa6c:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800fa6e:	703a      	strb	r2, [r7, #0]
 800fa70:	e7d5      	b.n	800fa1e <HAL_PCD_IRQHandler+0x7ce>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800fa72:	2900      	cmp	r1, #0
 800fa74:	d10a      	bne.n	800fa8c <HAL_PCD_IRQHandler+0x83c>
 800fa76:	8811      	ldrh	r1, [r2, #0]
 800fa78:	4e57      	ldr	r6, [pc, #348]	; (800fbd8 <HAL_PCD_IRQHandler+0x988>)
 800fa7a:	4331      	orrs	r1, r6
 800fa7c:	b289      	uxth	r1, r1
 800fa7e:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800fa80:	2128      	movs	r1, #40	; 0x28
 800fa82:	9a01      	ldr	r2, [sp, #4]
 800fa84:	4351      	muls	r1, r2
 800fa86:	1861      	adds	r1, r4, r1
 800fa88:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 800fa8a:	e739      	b.n	800f900 <HAL_PCD_IRQHandler+0x6b0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800fa8c:	2701      	movs	r7, #1
 800fa8e:	084e      	lsrs	r6, r1, #1
 800fa90:	4039      	ands	r1, r7
 800fa92:	1876      	adds	r6, r6, r1
 800fa94:	02b6      	lsls	r6, r6, #10
 800fa96:	8811      	ldrh	r1, [r2, #0]
 800fa98:	e7dd      	b.n	800fa56 <HAL_PCD_IRQHandler+0x806>
 800fa9a:	2a01      	cmp	r2, #1
 800fa9c:	d1f0      	bne.n	800fa80 <HAL_PCD_IRQHandler+0x830>
 800fa9e:	0002      	movs	r2, r0
 800faa0:	3250      	adds	r2, #80	; 0x50
 800faa2:	8812      	ldrh	r2, [r2, #0]
 800faa4:	9900      	ldr	r1, [sp, #0]
 800faa6:	4462      	add	r2, ip
 800faa8:	1852      	adds	r2, r2, r1
 800faaa:	8013      	strh	r3, [r2, #0]
 800faac:	e7e8      	b.n	800fa80 <HAL_PCD_IRQHandler+0x830>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800faae:	0543      	lsls	r3, r0, #21
 800fab0:	d50e      	bpl.n	800fad0 <HAL_PCD_IRQHandler+0x880>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	494e      	ldr	r1, [pc, #312]	; (800fbf0 <HAL_PCD_IRQHandler+0x9a0>)
 800fab6:	3306      	adds	r3, #6
 800fab8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800faba:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800fabc:	400a      	ands	r2, r1
 800fabe:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800fac0:	f007 fd7c 	bl	80175bc <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800fac4:	0029      	movs	r1, r5
 800fac6:	0020      	movs	r0, r4
 800fac8:	f7ff fbaf 	bl	800f22a <HAL_PCD_SetAddress>
    return;
 800facc:	f7ff fbd4 	bl	800f278 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800fad0:	0443      	lsls	r3, r0, #17
 800fad2:	d507      	bpl.n	800fae4 <HAL_PCD_IRQHandler+0x894>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	4947      	ldr	r1, [pc, #284]	; (800fbf4 <HAL_PCD_IRQHandler+0x9a4>)
 800fad8:	3306      	adds	r3, #6
 800fada:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800fadc:	400a      	ands	r2, r1
 800fade:	87da      	strh	r2, [r3, #62]	; 0x3e
    return;
 800fae0:	f7ff fbca 	bl	800f278 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800fae4:	2380      	movs	r3, #128	; 0x80
 800fae6:	0001      	movs	r1, r0
 800fae8:	019b      	lsls	r3, r3, #6
 800faea:	4019      	ands	r1, r3
 800faec:	4218      	tst	r0, r3
 800faee:	d004      	beq.n	800fafa <HAL_PCD_IRQHandler+0x8aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800faf0:	6823      	ldr	r3, [r4, #0]
 800faf2:	4941      	ldr	r1, [pc, #260]	; (800fbf8 <HAL_PCD_IRQHandler+0x9a8>)
 800faf4:	3306      	adds	r3, #6
 800faf6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800faf8:	e7f0      	b.n	800fadc <HAL_PCD_IRQHandler+0x88c>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800fafa:	04c3      	lsls	r3, r0, #19
 800fafc:	d51a      	bpl.n	800fb34 <HAL_PCD_IRQHandler+0x8e4>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800fafe:	2004      	movs	r0, #4
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	3302      	adds	r3, #2
 800fb04:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800fb06:	4382      	bics	r2, r0
 800fb08:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800fb0a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800fb0c:	1800      	adds	r0, r0, r0
 800fb0e:	4382      	bics	r2, r0
 800fb10:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 800fb12:	23b8      	movs	r3, #184	; 0xb8
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	5ce2      	ldrb	r2, [r4, r3]
 800fb18:	2a01      	cmp	r2, #1
 800fb1a:	d103      	bne.n	800fb24 <HAL_PCD_IRQHandler+0x8d4>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fb1c:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 800fb1e:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fb20:	f000 f99c 	bl	800fe5c <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 800fb24:	0020      	movs	r0, r4
 800fb26:	f007 fd6d 	bl	8017604 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800fb2a:	6823      	ldr	r3, [r4, #0]
 800fb2c:	4933      	ldr	r1, [pc, #204]	; (800fbfc <HAL_PCD_IRQHandler+0x9ac>)
 800fb2e:	3306      	adds	r3, #6
 800fb30:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800fb32:	e7d3      	b.n	800fadc <HAL_PCD_IRQHandler+0x88c>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800fb34:	0503      	lsls	r3, r0, #20
 800fb36:	d513      	bpl.n	800fb60 <HAL_PCD_IRQHandler+0x910>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fb38:	2108      	movs	r1, #8
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	1c9a      	adds	r2, r3, #2
 800fb3e:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800fb40:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fb42:	4301      	orrs	r1, r0
 800fb44:	87d1      	strh	r1, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800fb46:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800fb48:	482d      	ldr	r0, [pc, #180]	; (800fc00 <HAL_PCD_IRQHandler+0x9b0>)
 800fb4a:	4001      	ands	r1, r0
 800fb4c:	87d9      	strh	r1, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fb4e:	2304      	movs	r3, #4
 800fb50:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 800fb52:	430b      	orrs	r3, r1
 800fb54:	87d3      	strh	r3, [r2, #62]	; 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 800fb56:	0020      	movs	r0, r4
 800fb58:	f007 fd42 	bl	80175e0 <HAL_PCD_SuspendCallback>
 800fb5c:	f7ff fb8c 	bl	800f278 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800fb60:	2580      	movs	r5, #128	; 0x80
 800fb62:	4228      	tst	r0, r5
 800fb64:	d021      	beq.n	800fbaa <HAL_PCD_IRQHandler+0x95a>
    if (hpcd->LPM_State == LPM_L0)
 800fb66:	20b8      	movs	r0, #184	; 0xb8
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800fb68:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 800fb6a:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800fb6c:	1d99      	adds	r1, r3, #6
 800fb6e:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800fb70:	43aa      	bics	r2, r5
 800fb72:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 800fb74:	5c22      	ldrb	r2, [r4, r0]
 800fb76:	2a00      	cmp	r2, #0
 800fb78:	d1ed      	bne.n	800fb56 <HAL_PCD_IRQHandler+0x906>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fb7a:	1c99      	adds	r1, r3, #2
 800fb7c:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
 800fb7e:	3204      	adds	r2, #4
 800fb80:	432a      	orrs	r2, r5
 800fb82:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fb84:	2208      	movs	r2, #8
 800fb86:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fb88:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fb8a:	432a      	orrs	r2, r5
 800fb8c:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 800fb8e:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fb90:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 800fb92:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fb94:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fb96:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fb98:	089b      	lsrs	r3, r3, #2
 800fb9a:	4013      	ands	r3, r2
 800fb9c:	22b9      	movs	r2, #185	; 0xb9
 800fb9e:	0092      	lsls	r2, r2, #2
 800fba0:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fba2:	f000 f95b 	bl	800fe5c <HAL_PCDEx_LPM_Callback>
 800fba6:	f7ff fb67 	bl	800f278 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800fbaa:	0583      	lsls	r3, r0, #22
 800fbac:	d50a      	bpl.n	800fbc4 <HAL_PCD_IRQHandler+0x974>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	4914      	ldr	r1, [pc, #80]	; (800fc04 <HAL_PCD_IRQHandler+0x9b4>)
 800fbb2:	3306      	adds	r3, #6
 800fbb4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 800fbb6:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800fbb8:	400a      	ands	r2, r1
 800fbba:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 800fbbc:	f007 fcf7 	bl	80175ae <HAL_PCD_SOFCallback>
    return;
 800fbc0:	f7ff fb5a 	bl	800f278 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800fbc4:	05c3      	lsls	r3, r0, #23
 800fbc6:	d401      	bmi.n	800fbcc <HAL_PCD_IRQHandler+0x97c>
 800fbc8:	f7ff fb56 	bl	800f278 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	490e      	ldr	r1, [pc, #56]	; (800fc08 <HAL_PCD_IRQHandler+0x9b8>)
 800fbd0:	3306      	adds	r3, #6
 800fbd2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800fbd4:	e782      	b.n	800fadc <HAL_PCD_IRQHandler+0x88c>
 800fbd6:	46c0      	nop			; (mov r8, r8)
 800fbd8:	ffff8000 	.word	0xffff8000
 800fbdc:	00000406 	.word	0x00000406
 800fbe0:	00000402 	.word	0x00000402
 800fbe4:	ffff8fbf 	.word	0xffff8fbf
 800fbe8:	ffff8f8f 	.word	0xffff8f8f
 800fbec:	0000c080 	.word	0x0000c080
 800fbf0:	fffffbff 	.word	0xfffffbff
 800fbf4:	ffffbfff 	.word	0xffffbfff
 800fbf8:	ffffdfff 	.word	0xffffdfff
 800fbfc:	ffffefff 	.word	0xffffefff
 800fc00:	fffff7ff 	.word	0xfffff7ff
 800fc04:	fffffdff 	.word	0xfffffdff
 800fc08:	fffffeff 	.word	0xfffffeff

0800fc0c <HAL_PCD_EP_Open>:
{
 800fc0c:	b570      	push	{r4, r5, r6, lr}
 800fc0e:	0005      	movs	r5, r0
 800fc10:	2007      	movs	r0, #7
 800fc12:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800fc14:	b249      	sxtb	r1, r1
 800fc16:	2428      	movs	r4, #40	; 0x28
 800fc18:	2900      	cmp	r1, #0
 800fc1a:	da1a      	bge.n	800fc52 <HAL_PCD_EP_Open+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc1c:	0021      	movs	r1, r4
 800fc1e:	1c46      	adds	r6, r0, #1
 800fc20:	4371      	muls	r1, r6
    ep->is_in = 1U;
 800fc22:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc24:	1869      	adds	r1, r5, r1
    ep->is_in = 1U;
 800fc26:	704e      	strb	r6, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fc28:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 800fc2a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800fc2c:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d101      	bne.n	800fc36 <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 800fc32:	2300      	movs	r3, #0
 800fc34:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800fc36:	24aa      	movs	r4, #170	; 0xaa
 800fc38:	00a4      	lsls	r4, r4, #2
 800fc3a:	5d2b      	ldrb	r3, [r5, r4]
 800fc3c:	2002      	movs	r0, #2
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d006      	beq.n	800fc50 <HAL_PCD_EP_Open+0x44>
 800fc42:	2301      	movs	r3, #1
 800fc44:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fc46:	6828      	ldr	r0, [r5, #0]
 800fc48:	f002 fafe 	bl	8012248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	5528      	strb	r0, [r5, r4]
}
 800fc50:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc52:	4344      	muls	r4, r0
 800fc54:	0021      	movs	r1, r4
    ep->is_in = 0U;
 800fc56:	2600      	movs	r6, #0
 800fc58:	192c      	adds	r4, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc5a:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800fc5c:	346a      	adds	r4, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc5e:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800fc60:	34ff      	adds	r4, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc62:	1869      	adds	r1, r5, r1
    ep->is_in = 0U;
 800fc64:	7026      	strb	r6, [r4, #0]
 800fc66:	e7df      	b.n	800fc28 <HAL_PCD_EP_Open+0x1c>

0800fc68 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800fc68:	2207      	movs	r2, #7
 800fc6a:	400a      	ands	r2, r1
 800fc6c:	b249      	sxtb	r1, r1
{
 800fc6e:	b570      	push	{r4, r5, r6, lr}
 800fc70:	2328      	movs	r3, #40	; 0x28
 800fc72:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800fc74:	2900      	cmp	r1, #0
 800fc76:	da14      	bge.n	800fca2 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc78:	0019      	movs	r1, r3
 800fc7a:	1c50      	adds	r0, r2, #1
 800fc7c:	4341      	muls	r1, r0
    ep->is_in = 1U;
 800fc7e:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc80:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800fc82:	7048      	strb	r0, [r1, #1]
  __HAL_LOCK(hpcd);
 800fc84:	25aa      	movs	r5, #170	; 0xaa
  ep->num = ep_addr & EP_ADDR_MSK;
 800fc86:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800fc88:	00ad      	lsls	r5, r5, #2
 800fc8a:	5d63      	ldrb	r3, [r4, r5]
 800fc8c:	2002      	movs	r0, #2
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d006      	beq.n	800fca0 <HAL_PCD_EP_Close+0x38>
 800fc92:	2301      	movs	r3, #1
 800fc94:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800fc96:	6820      	ldr	r0, [r4, #0]
 800fc98:	f002 fbea 	bl	8012470 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	5560      	strb	r0, [r4, r5]
}
 800fca0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fca2:	4353      	muls	r3, r2
 800fca4:	0019      	movs	r1, r3
 800fca6:	3169      	adds	r1, #105	; 0x69
 800fca8:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800fcaa:	18c3      	adds	r3, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fcac:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 800fcae:	2000      	movs	r0, #0
 800fcb0:	336a      	adds	r3, #106	; 0x6a
 800fcb2:	33ff      	adds	r3, #255	; 0xff
 800fcb4:	7018      	strb	r0, [r3, #0]
 800fcb6:	e7e5      	b.n	800fc84 <HAL_PCD_EP_Close+0x1c>

0800fcb8 <HAL_PCD_EP_Receive>:
{
 800fcb8:	b570      	push	{r4, r5, r6, lr}
 800fcba:	2407      	movs	r4, #7
}
 800fcbc:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 800fcbe:	3421      	adds	r4, #33	; 0x21
 800fcc0:	434c      	muls	r4, r1
 800fcc2:	1905      	adds	r5, r0, r4
 800fcc4:	002e      	movs	r6, r5
 800fcc6:	367d      	adds	r6, #125	; 0x7d
 800fcc8:	36ff      	adds	r6, #255	; 0xff
 800fcca:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 800fccc:	002a      	movs	r2, r5
 800fcce:	3281      	adds	r2, #129	; 0x81
 800fcd0:	32ff      	adds	r2, #255	; 0xff
 800fcd2:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 800fcd4:	002b      	movs	r3, r5
 800fcd6:	2600      	movs	r6, #0
 800fcd8:	3385      	adds	r3, #133	; 0x85
 800fcda:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 800fcdc:	3569      	adds	r5, #105	; 0x69
  ep->xfer_count = 0U;
 800fcde:	601e      	str	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fce0:	35ff      	adds	r5, #255	; 0xff
  ep->is_in = 0U;
 800fce2:	3b1b      	subs	r3, #27
 800fce4:	701e      	strb	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fce6:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fce8:	0021      	movs	r1, r4
 800fcea:	3169      	adds	r1, #105	; 0x69
 800fcec:	31ff      	adds	r1, #255	; 0xff
 800fcee:	1841      	adds	r1, r0, r1
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fcf0:	6800      	ldr	r0, [r0, #0]
 800fcf2:	f002 fcb9 	bl	8012668 <USB_EPStartXfer>
}
 800fcf6:	0030      	movs	r0, r6
 800fcf8:	bd70      	pop	{r4, r5, r6, pc}

0800fcfa <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800fcfa:	2307      	movs	r3, #7
 800fcfc:	400b      	ands	r3, r1
 800fcfe:	2128      	movs	r1, #40	; 0x28
 800fd00:	4359      	muls	r1, r3
 800fd02:	1840      	adds	r0, r0, r1
 800fd04:	3085      	adds	r0, #133	; 0x85
 800fd06:	30ff      	adds	r0, #255	; 0xff
 800fd08:	6800      	ldr	r0, [r0, #0]
}
 800fd0a:	4770      	bx	lr

0800fd0c <HAL_PCD_EP_Transmit>:
{
 800fd0c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800fd0e:	2628      	movs	r6, #40	; 0x28
}
 800fd10:	2407      	movs	r4, #7
 800fd12:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 800fd14:	0034      	movs	r4, r6
 800fd16:	434c      	muls	r4, r1
 800fd18:	1904      	adds	r4, r0, r4
  ep->xfer_fill_db = 1U;
 800fd1a:	0025      	movs	r5, r4
  ep->xfer_buff = pBuf;
 800fd1c:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800fd1e:	2201      	movs	r2, #1
 800fd20:	354c      	adds	r5, #76	; 0x4c
  ep->xfer_len = len;
 800fd22:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800fd24:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 800fd26:	2500      	movs	r5, #0
  ep->xfer_len_db = len;
 800fd28:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->is_in = 1U;
 800fd2a:	0023      	movs	r3, r4
  ep->xfer_count = 0U;
 800fd2c:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800fd2e:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800fd30:	19a4      	adds	r4, r4, r6
  ep->is_in = 1U;
 800fd32:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fd34:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd36:	1889      	adds	r1, r1, r2
 800fd38:	4371      	muls	r1, r6
 800fd3a:	1841      	adds	r1, r0, r1
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fd3c:	6800      	ldr	r0, [r0, #0]
 800fd3e:	f002 fc93 	bl	8012668 <USB_EPStartXfer>
}
 800fd42:	0028      	movs	r0, r5
 800fd44:	bd70      	pop	{r4, r5, r6, pc}

0800fd46 <HAL_PCD_EP_SetStall>:
{
 800fd46:	b570      	push	{r4, r5, r6, lr}
 800fd48:	0004      	movs	r4, r0
 800fd4a:	2207      	movs	r2, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fd4c:	6863      	ldr	r3, [r4, #4]
    return HAL_ERROR;
 800fd4e:	2001      	movs	r0, #1
 800fd50:	400a      	ands	r2, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d818      	bhi.n	800fd88 <HAL_PCD_EP_SetStall+0x42>
  if ((0x80U & ep_addr) == 0x80U)
 800fd56:	b248      	sxtb	r0, r1
 800fd58:	2328      	movs	r3, #40	; 0x28
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	da15      	bge.n	800fd8a <HAL_PCD_EP_SetStall+0x44>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd5e:	0019      	movs	r1, r3
 800fd60:	1c50      	adds	r0, r2, #1
 800fd62:	4341      	muls	r1, r0
    ep->is_in = 1U;
 800fd64:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd66:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800fd68:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 1U;
 800fd6a:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 800fd6c:	25aa      	movs	r5, #170	; 0xaa
  ep->is_stall = 1U;
 800fd6e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fd70:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800fd72:	00ad      	lsls	r5, r5, #2
 800fd74:	5d62      	ldrb	r2, [r4, r5]
 800fd76:	2002      	movs	r0, #2
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d005      	beq.n	800fd88 <HAL_PCD_EP_SetStall+0x42>
 800fd7c:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800fd7e:	6820      	ldr	r0, [r4, #0]
 800fd80:	f002 fbf2 	bl	8012568 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800fd84:	2000      	movs	r0, #0
 800fd86:	5560      	strb	r0, [r4, r5]
}
 800fd88:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800fd8a:	434b      	muls	r3, r1
 800fd8c:	0019      	movs	r1, r3
    ep->is_in = 0U;
 800fd8e:	2000      	movs	r0, #0
 800fd90:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 800fd92:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800fd94:	336a      	adds	r3, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr];
 800fd96:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800fd98:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 800fd9a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800fd9c:	7018      	strb	r0, [r3, #0]
 800fd9e:	e7e4      	b.n	800fd6a <HAL_PCD_EP_SetStall+0x24>

0800fda0 <HAL_PCD_EP_ClrStall>:
{
 800fda0:	b570      	push	{r4, r5, r6, lr}
 800fda2:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800fda4:	230f      	movs	r3, #15
 800fda6:	6862      	ldr	r2, [r4, #4]
    return HAL_ERROR;
 800fda8:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800fdaa:	400b      	ands	r3, r1
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d81b      	bhi.n	800fde8 <HAL_PCD_EP_ClrStall+0x48>
  if ((0x80U & ep_addr) == 0x80U)
 800fdb0:	2207      	movs	r2, #7
 800fdb2:	400a      	ands	r2, r1
 800fdb4:	b249      	sxtb	r1, r1
 800fdb6:	2328      	movs	r3, #40	; 0x28
 800fdb8:	2900      	cmp	r1, #0
 800fdba:	da16      	bge.n	800fdea <HAL_PCD_EP_ClrStall+0x4a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fdbc:	0019      	movs	r1, r3
 800fdbe:	1810      	adds	r0, r2, r0
 800fdc0:	4341      	muls	r1, r0
    ep->is_in = 1U;
 800fdc2:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fdc4:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800fdc6:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 800fdc8:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 800fdca:	26aa      	movs	r6, #170	; 0xaa
  ep->is_stall = 0U;
 800fdcc:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fdce:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800fdd0:	00b6      	lsls	r6, r6, #2
 800fdd2:	5da3      	ldrb	r3, [r4, r6]
 800fdd4:	2002      	movs	r0, #2
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d006      	beq.n	800fde8 <HAL_PCD_EP_ClrStall+0x48>
 800fdda:	2301      	movs	r3, #1
 800fddc:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800fdde:	6820      	ldr	r0, [r4, #0]
 800fde0:	f002 fbe0 	bl	80125a4 <USB_EPClearStall>
  return HAL_OK;
 800fde4:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 800fde6:	55a5      	strb	r5, [r4, r6]
}
 800fde8:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdea:	4353      	muls	r3, r2
 800fdec:	0019      	movs	r1, r3
    ep->is_in = 0U;
 800fdee:	2000      	movs	r0, #0
 800fdf0:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdf2:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800fdf4:	336a      	adds	r3, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdf6:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800fdf8:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdfa:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800fdfc:	7018      	strb	r0, [r3, #0]
 800fdfe:	e7e3      	b.n	800fdc8 <HAL_PCD_EP_ClrStall+0x28>

0800fe00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800fe00:	b510      	push	{r4, lr}
 800fe02:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800fe04:	0621      	lsls	r1, r4, #24
 800fe06:	d50c      	bpl.n	800fe22 <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fe08:	2107      	movs	r1, #7
 800fe0a:	4021      	ands	r1, r4
 800fe0c:	2428      	movs	r4, #40	; 0x28
 800fe0e:	3101      	adds	r1, #1
 800fe10:	4361      	muls	r1, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fe12:	1840      	adds	r0, r0, r1
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800fe14:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800fe16:	2a00      	cmp	r2, #0
 800fe18:	d108      	bne.n	800fe2c <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 800fe1a:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800fe1c:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800fe1e:	2000      	movs	r0, #0
 800fe20:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800fe22:	2128      	movs	r1, #40	; 0x28
 800fe24:	4361      	muls	r1, r4
 800fe26:	3169      	adds	r1, #105	; 0x69
 800fe28:	31ff      	adds	r1, #255	; 0xff
 800fe2a:	e7f2      	b.n	800fe12 <HAL_PCDEx_PMAConfig+0x12>
    ep->doublebuffer = 1U;
 800fe2c:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800fe2e:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800fe30:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800fe32:	e7f4      	b.n	800fe1e <HAL_PCDEx_PMAConfig+0x1e>

0800fe34 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800fe34:	6803      	ldr	r3, [r0, #0]
{
 800fe36:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 800fe38:	20ba      	movs	r0, #186	; 0xba
 800fe3a:	2101      	movs	r1, #1
{
 800fe3c:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 800fe3e:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 800fe40:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 800fe42:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 800fe44:	2000      	movs	r0, #0
 800fe46:	00a4      	lsls	r4, r4, #2
 800fe48:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800fe4a:	3354      	adds	r3, #84	; 0x54
 800fe4c:	881a      	ldrh	r2, [r3, #0]
 800fe4e:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800fe50:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800fe52:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800fe54:	8819      	ldrh	r1, [r3, #0]
 800fe56:	430a      	orrs	r2, r1
 800fe58:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 800fe5a:	bd10      	pop	{r4, pc}

0800fe5c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fe5c:	4770      	bx	lr
	...

0800fe60 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 800fe60:	2380      	movs	r3, #128	; 0x80
 800fe62:	4a03      	ldr	r2, [pc, #12]	; (800fe70 <HAL_PWR_EnableBkUpAccess+0x10>)
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	6811      	ldr	r1, [r2, #0]
 800fe68:	430b      	orrs	r3, r1
 800fe6a:	6013      	str	r3, [r2, #0]
}
 800fe6c:	4770      	bx	lr
 800fe6e:	46c0      	nop			; (mov r8, r8)
 800fe70:	40007000 	.word	0x40007000

0800fe74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fe74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe76:	0004      	movs	r4, r0
 800fe78:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d04e      	beq.n	800ff1c <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fe7e:	6803      	ldr	r3, [r0, #0]
 800fe80:	07db      	lsls	r3, r3, #31
 800fe82:	d433      	bmi.n	800feec <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fe84:	6823      	ldr	r3, [r4, #0]
 800fe86:	079b      	lsls	r3, r3, #30
 800fe88:	d500      	bpl.n	800fe8c <HAL_RCC_OscConfig+0x18>
 800fe8a:	e08a      	b.n	800ffa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	071b      	lsls	r3, r3, #28
 800fe90:	d500      	bpl.n	800fe94 <HAL_RCC_OscConfig+0x20>
 800fe92:	e0ca      	b.n	801002a <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fe94:	6823      	ldr	r3, [r4, #0]
 800fe96:	075b      	lsls	r3, r3, #29
 800fe98:	d500      	bpl.n	800fe9c <HAL_RCC_OscConfig+0x28>
 800fe9a:	e0ed      	b.n	8010078 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	06db      	lsls	r3, r3, #27
 800fea0:	d51a      	bpl.n	800fed8 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800fea2:	6962      	ldr	r2, [r4, #20]
 800fea4:	2304      	movs	r3, #4
 800fea6:	4dbc      	ldr	r5, [pc, #752]	; (8010198 <HAL_RCC_OscConfig+0x324>)
 800fea8:	2a01      	cmp	r2, #1
 800feaa:	d000      	beq.n	800feae <HAL_RCC_OscConfig+0x3a>
 800feac:	e158      	b.n	8010160 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800feae:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800feb0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800feb2:	430b      	orrs	r3, r1
 800feb4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800feb6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800feb8:	431a      	orrs	r2, r3
 800feba:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800febc:	f7fe fe4e 	bl	800eb5c <HAL_GetTick>
 800fec0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800fec2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fec4:	423b      	tst	r3, r7
 800fec6:	d100      	bne.n	800feca <HAL_RCC_OscConfig+0x56>
 800fec8:	e143      	b.n	8010152 <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800feca:	21f8      	movs	r1, #248	; 0xf8
 800fecc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800fece:	69a3      	ldr	r3, [r4, #24]
 800fed0:	438a      	bics	r2, r1
 800fed2:	00db      	lsls	r3, r3, #3
 800fed4:	4313      	orrs	r3, r2
 800fed6:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	069b      	lsls	r3, r3, #26
 800fedc:	d500      	bpl.n	800fee0 <HAL_RCC_OscConfig+0x6c>
 800fede:	e167      	b.n	80101b0 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d000      	beq.n	800fee8 <HAL_RCC_OscConfig+0x74>
 800fee6:	e1a6      	b.n	8010236 <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }

  return HAL_OK;
 800fee8:	2000      	movs	r0, #0
 800feea:	e02f      	b.n	800ff4c <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800feec:	210c      	movs	r1, #12
 800feee:	4daa      	ldr	r5, [pc, #680]	; (8010198 <HAL_RCC_OscConfig+0x324>)
 800fef0:	686a      	ldr	r2, [r5, #4]
 800fef2:	400a      	ands	r2, r1
 800fef4:	2a04      	cmp	r2, #4
 800fef6:	d00b      	beq.n	800ff10 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800fef8:	686b      	ldr	r3, [r5, #4]
 800fefa:	400b      	ands	r3, r1
 800fefc:	2b08      	cmp	r3, #8
 800fefe:	d10f      	bne.n	800ff20 <HAL_RCC_OscConfig+0xac>
 800ff00:	22c0      	movs	r2, #192	; 0xc0
 800ff02:	686b      	ldr	r3, [r5, #4]
 800ff04:	0252      	lsls	r2, r2, #9
 800ff06:	4013      	ands	r3, r2
 800ff08:	2280      	movs	r2, #128	; 0x80
 800ff0a:	0252      	lsls	r2, r2, #9
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d107      	bne.n	800ff20 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	039b      	lsls	r3, r3, #14
 800ff14:	d5b6      	bpl.n	800fe84 <HAL_RCC_OscConfig+0x10>
 800ff16:	6863      	ldr	r3, [r4, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1b3      	bne.n	800fe84 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800ff1c:	2001      	movs	r0, #1
 800ff1e:	e015      	b.n	800ff4c <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff20:	6863      	ldr	r3, [r4, #4]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d114      	bne.n	800ff50 <HAL_RCC_OscConfig+0xdc>
 800ff26:	2380      	movs	r3, #128	; 0x80
 800ff28:	682a      	ldr	r2, [r5, #0]
 800ff2a:	025b      	lsls	r3, r3, #9
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ff30:	f7fe fe14 	bl	800eb5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ff34:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800ff36:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ff38:	02bf      	lsls	r7, r7, #10
 800ff3a:	682b      	ldr	r3, [r5, #0]
 800ff3c:	423b      	tst	r3, r7
 800ff3e:	d1a1      	bne.n	800fe84 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ff40:	f7fe fe0c 	bl	800eb5c <HAL_GetTick>
 800ff44:	1b80      	subs	r0, r0, r6
 800ff46:	2864      	cmp	r0, #100	; 0x64
 800ff48:	d9f7      	bls.n	800ff3a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800ff4a:	2003      	movs	r0, #3
}
 800ff4c:	b005      	add	sp, #20
 800ff4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d116      	bne.n	800ff82 <HAL_RCC_OscConfig+0x10e>
 800ff54:	682b      	ldr	r3, [r5, #0]
 800ff56:	4a91      	ldr	r2, [pc, #580]	; (801019c <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ff58:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff5a:	4013      	ands	r3, r2
 800ff5c:	602b      	str	r3, [r5, #0]
 800ff5e:	682b      	ldr	r3, [r5, #0]
 800ff60:	4a8f      	ldr	r2, [pc, #572]	; (80101a0 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ff62:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff64:	4013      	ands	r3, r2
 800ff66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ff68:	f7fe fdf8 	bl	800eb5c <HAL_GetTick>
 800ff6c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ff6e:	682b      	ldr	r3, [r5, #0]
 800ff70:	423b      	tst	r3, r7
 800ff72:	d100      	bne.n	800ff76 <HAL_RCC_OscConfig+0x102>
 800ff74:	e786      	b.n	800fe84 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ff76:	f7fe fdf1 	bl	800eb5c <HAL_GetTick>
 800ff7a:	1b80      	subs	r0, r0, r6
 800ff7c:	2864      	cmp	r0, #100	; 0x64
 800ff7e:	d9f6      	bls.n	800ff6e <HAL_RCC_OscConfig+0xfa>
 800ff80:	e7e3      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff82:	2b05      	cmp	r3, #5
 800ff84:	d105      	bne.n	800ff92 <HAL_RCC_OscConfig+0x11e>
 800ff86:	2380      	movs	r3, #128	; 0x80
 800ff88:	682a      	ldr	r2, [r5, #0]
 800ff8a:	02db      	lsls	r3, r3, #11
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	602b      	str	r3, [r5, #0]
 800ff90:	e7c9      	b.n	800ff26 <HAL_RCC_OscConfig+0xb2>
 800ff92:	682b      	ldr	r3, [r5, #0]
 800ff94:	4a81      	ldr	r2, [pc, #516]	; (801019c <HAL_RCC_OscConfig+0x328>)
 800ff96:	4013      	ands	r3, r2
 800ff98:	602b      	str	r3, [r5, #0]
 800ff9a:	682b      	ldr	r3, [r5, #0]
 800ff9c:	4a80      	ldr	r2, [pc, #512]	; (80101a0 <HAL_RCC_OscConfig+0x32c>)
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	e7c5      	b.n	800ff2e <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800ffa2:	220c      	movs	r2, #12
 800ffa4:	4d7c      	ldr	r5, [pc, #496]	; (8010198 <HAL_RCC_OscConfig+0x324>)
 800ffa6:	686b      	ldr	r3, [r5, #4]
 800ffa8:	4213      	tst	r3, r2
 800ffaa:	d00b      	beq.n	800ffc4 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800ffac:	686b      	ldr	r3, [r5, #4]
 800ffae:	4013      	ands	r3, r2
 800ffb0:	2b08      	cmp	r3, #8
 800ffb2:	d115      	bne.n	800ffe0 <HAL_RCC_OscConfig+0x16c>
 800ffb4:	22c0      	movs	r2, #192	; 0xc0
 800ffb6:	686b      	ldr	r3, [r5, #4]
 800ffb8:	0252      	lsls	r2, r2, #9
 800ffba:	4013      	ands	r3, r2
 800ffbc:	2280      	movs	r2, #128	; 0x80
 800ffbe:	0212      	lsls	r2, r2, #8
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d10d      	bne.n	800ffe0 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	079b      	lsls	r3, r3, #30
 800ffc8:	d502      	bpl.n	800ffd0 <HAL_RCC_OscConfig+0x15c>
 800ffca:	68e3      	ldr	r3, [r4, #12]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d1a5      	bne.n	800ff1c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ffd0:	21f8      	movs	r1, #248	; 0xf8
 800ffd2:	682a      	ldr	r2, [r5, #0]
 800ffd4:	6923      	ldr	r3, [r4, #16]
 800ffd6:	438a      	bics	r2, r1
 800ffd8:	00db      	lsls	r3, r3, #3
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	602b      	str	r3, [r5, #0]
 800ffde:	e755      	b.n	800fe8c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ffe0:	68e2      	ldr	r2, [r4, #12]
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	2a00      	cmp	r2, #0
 800ffe6:	d00f      	beq.n	8010008 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 800ffe8:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ffea:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800ffec:	4313      	orrs	r3, r2
 800ffee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fff0:	f7fe fdb4 	bl	800eb5c <HAL_GetTick>
 800fff4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fff6:	682b      	ldr	r3, [r5, #0]
 800fff8:	423b      	tst	r3, r7
 800fffa:	d1e9      	bne.n	800ffd0 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fffc:	f7fe fdae 	bl	800eb5c <HAL_GetTick>
 8010000:	1b80      	subs	r0, r0, r6
 8010002:	2802      	cmp	r0, #2
 8010004:	d9f7      	bls.n	800fff6 <HAL_RCC_OscConfig+0x182>
 8010006:	e7a0      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8010008:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801000a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 801000c:	439a      	bics	r2, r3
 801000e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8010010:	f7fe fda4 	bl	800eb5c <HAL_GetTick>
 8010014:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010016:	682b      	ldr	r3, [r5, #0]
 8010018:	423b      	tst	r3, r7
 801001a:	d100      	bne.n	801001e <HAL_RCC_OscConfig+0x1aa>
 801001c:	e736      	b.n	800fe8c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801001e:	f7fe fd9d 	bl	800eb5c <HAL_GetTick>
 8010022:	1b80      	subs	r0, r0, r6
 8010024:	2802      	cmp	r0, #2
 8010026:	d9f6      	bls.n	8010016 <HAL_RCC_OscConfig+0x1a2>
 8010028:	e78f      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801002a:	69e2      	ldr	r2, [r4, #28]
 801002c:	2301      	movs	r3, #1
 801002e:	4d5a      	ldr	r5, [pc, #360]	; (8010198 <HAL_RCC_OscConfig+0x324>)
 8010030:	2a00      	cmp	r2, #0
 8010032:	d010      	beq.n	8010056 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8010034:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010036:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8010038:	4313      	orrs	r3, r2
 801003a:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 801003c:	f7fe fd8e 	bl	800eb5c <HAL_GetTick>
 8010040:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010044:	423b      	tst	r3, r7
 8010046:	d000      	beq.n	801004a <HAL_RCC_OscConfig+0x1d6>
 8010048:	e724      	b.n	800fe94 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801004a:	f7fe fd87 	bl	800eb5c <HAL_GetTick>
 801004e:	1b80      	subs	r0, r0, r6
 8010050:	2802      	cmp	r0, #2
 8010052:	d9f6      	bls.n	8010042 <HAL_RCC_OscConfig+0x1ce>
 8010054:	e779      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 8010056:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010058:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 801005a:	439a      	bics	r2, r3
 801005c:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 801005e:	f7fe fd7d 	bl	800eb5c <HAL_GetTick>
 8010062:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010064:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010066:	423b      	tst	r3, r7
 8010068:	d100      	bne.n	801006c <HAL_RCC_OscConfig+0x1f8>
 801006a:	e713      	b.n	800fe94 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801006c:	f7fe fd76 	bl	800eb5c <HAL_GetTick>
 8010070:	1b80      	subs	r0, r0, r6
 8010072:	2802      	cmp	r0, #2
 8010074:	d9f6      	bls.n	8010064 <HAL_RCC_OscConfig+0x1f0>
 8010076:	e768      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010078:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 801007a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801007c:	4d46      	ldr	r5, [pc, #280]	; (8010198 <HAL_RCC_OscConfig+0x324>)
 801007e:	0552      	lsls	r2, r2, #21
 8010080:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8010082:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010084:	4213      	tst	r3, r2
 8010086:	d108      	bne.n	801009a <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8010088:	69eb      	ldr	r3, [r5, #28]
 801008a:	4313      	orrs	r3, r2
 801008c:	61eb      	str	r3, [r5, #28]
 801008e:	69eb      	ldr	r3, [r5, #28]
 8010090:	4013      	ands	r3, r2
 8010092:	9303      	str	r3, [sp, #12]
 8010094:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8010096:	2301      	movs	r3, #1
 8010098:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801009a:	2780      	movs	r7, #128	; 0x80
 801009c:	4e41      	ldr	r6, [pc, #260]	; (80101a4 <HAL_RCC_OscConfig+0x330>)
 801009e:	007f      	lsls	r7, r7, #1
 80100a0:	6833      	ldr	r3, [r6, #0]
 80100a2:	423b      	tst	r3, r7
 80100a4:	d006      	beq.n	80100b4 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100a6:	68a3      	ldr	r3, [r4, #8]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d113      	bne.n	80100d4 <HAL_RCC_OscConfig+0x260>
 80100ac:	6a2a      	ldr	r2, [r5, #32]
 80100ae:	4313      	orrs	r3, r2
 80100b0:	622b      	str	r3, [r5, #32]
 80100b2:	e030      	b.n	8010116 <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80100b4:	6833      	ldr	r3, [r6, #0]
 80100b6:	433b      	orrs	r3, r7
 80100b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80100ba:	f7fe fd4f 	bl	800eb5c <HAL_GetTick>
 80100be:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80100c0:	6833      	ldr	r3, [r6, #0]
 80100c2:	423b      	tst	r3, r7
 80100c4:	d1ef      	bne.n	80100a6 <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80100c6:	f7fe fd49 	bl	800eb5c <HAL_GetTick>
 80100ca:	9b01      	ldr	r3, [sp, #4]
 80100cc:	1ac0      	subs	r0, r0, r3
 80100ce:	2864      	cmp	r0, #100	; 0x64
 80100d0:	d9f6      	bls.n	80100c0 <HAL_RCC_OscConfig+0x24c>
 80100d2:	e73a      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100d4:	2201      	movs	r2, #1
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d114      	bne.n	8010104 <HAL_RCC_OscConfig+0x290>
 80100da:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80100dc:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100de:	4393      	bics	r3, r2
 80100e0:	622b      	str	r3, [r5, #32]
 80100e2:	6a2b      	ldr	r3, [r5, #32]
 80100e4:	3203      	adds	r2, #3
 80100e6:	4393      	bics	r3, r2
 80100e8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80100ea:	f7fe fd37 	bl	800eb5c <HAL_GetTick>
 80100ee:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80100f0:	6a2b      	ldr	r3, [r5, #32]
 80100f2:	423b      	tst	r3, r7
 80100f4:	d016      	beq.n	8010124 <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80100f6:	f7fe fd31 	bl	800eb5c <HAL_GetTick>
 80100fa:	4b2b      	ldr	r3, [pc, #172]	; (80101a8 <HAL_RCC_OscConfig+0x334>)
 80100fc:	1b80      	subs	r0, r0, r6
 80100fe:	4298      	cmp	r0, r3
 8010100:	d9f6      	bls.n	80100f0 <HAL_RCC_OscConfig+0x27c>
 8010102:	e722      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010104:	2b05      	cmp	r3, #5
 8010106:	d116      	bne.n	8010136 <HAL_RCC_OscConfig+0x2c2>
 8010108:	6a29      	ldr	r1, [r5, #32]
 801010a:	3b01      	subs	r3, #1
 801010c:	430b      	orrs	r3, r1
 801010e:	622b      	str	r3, [r5, #32]
 8010110:	6a2b      	ldr	r3, [r5, #32]
 8010112:	431a      	orrs	r2, r3
 8010114:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8010116:	f7fe fd21 	bl	800eb5c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801011a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 801011c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801011e:	6a2b      	ldr	r3, [r5, #32]
 8010120:	423b      	tst	r3, r7
 8010122:	d00f      	beq.n	8010144 <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 8010124:	9b00      	ldr	r3, [sp, #0]
 8010126:	2b01      	cmp	r3, #1
 8010128:	d000      	beq.n	801012c <HAL_RCC_OscConfig+0x2b8>
 801012a:	e6b7      	b.n	800fe9c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 801012c:	69eb      	ldr	r3, [r5, #28]
 801012e:	4a1f      	ldr	r2, [pc, #124]	; (80101ac <HAL_RCC_OscConfig+0x338>)
 8010130:	4013      	ands	r3, r2
 8010132:	61eb      	str	r3, [r5, #28]
 8010134:	e6b2      	b.n	800fe9c <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010136:	6a2b      	ldr	r3, [r5, #32]
 8010138:	4393      	bics	r3, r2
 801013a:	2204      	movs	r2, #4
 801013c:	622b      	str	r3, [r5, #32]
 801013e:	6a2b      	ldr	r3, [r5, #32]
 8010140:	4393      	bics	r3, r2
 8010142:	e7b5      	b.n	80100b0 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010144:	f7fe fd0a 	bl	800eb5c <HAL_GetTick>
 8010148:	4b17      	ldr	r3, [pc, #92]	; (80101a8 <HAL_RCC_OscConfig+0x334>)
 801014a:	1b80      	subs	r0, r0, r6
 801014c:	4298      	cmp	r0, r3
 801014e:	d9e6      	bls.n	801011e <HAL_RCC_OscConfig+0x2aa>
 8010150:	e6fb      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8010152:	f7fe fd03 	bl	800eb5c <HAL_GetTick>
 8010156:	1b80      	subs	r0, r0, r6
 8010158:	2802      	cmp	r0, #2
 801015a:	d800      	bhi.n	801015e <HAL_RCC_OscConfig+0x2ea>
 801015c:	e6b1      	b.n	800fec2 <HAL_RCC_OscConfig+0x4e>
 801015e:	e6f4      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010160:	3205      	adds	r2, #5
 8010162:	d103      	bne.n	801016c <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8010164:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8010166:	439a      	bics	r2, r3
 8010168:	636a      	str	r2, [r5, #52]	; 0x34
 801016a:	e6ae      	b.n	800feca <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 801016c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801016e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8010170:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8010172:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8010174:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8010176:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010178:	4393      	bics	r3, r2
 801017a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 801017c:	f7fe fcee 	bl	800eb5c <HAL_GetTick>
 8010180:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8010182:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010184:	423b      	tst	r3, r7
 8010186:	d100      	bne.n	801018a <HAL_RCC_OscConfig+0x316>
 8010188:	e6a6      	b.n	800fed8 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801018a:	f7fe fce7 	bl	800eb5c <HAL_GetTick>
 801018e:	1b80      	subs	r0, r0, r6
 8010190:	2802      	cmp	r0, #2
 8010192:	d9f6      	bls.n	8010182 <HAL_RCC_OscConfig+0x30e>
 8010194:	e6d9      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
 8010196:	46c0      	nop			; (mov r8, r8)
 8010198:	40021000 	.word	0x40021000
 801019c:	fffeffff 	.word	0xfffeffff
 80101a0:	fffbffff 	.word	0xfffbffff
 80101a4:	40007000 	.word	0x40007000
 80101a8:	00001388 	.word	0x00001388
 80101ac:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80101b0:	210c      	movs	r1, #12
 80101b2:	4d55      	ldr	r5, [pc, #340]	; (8010308 <HAL_RCC_OscConfig+0x494>)
 80101b4:	686a      	ldr	r2, [r5, #4]
 80101b6:	400a      	ands	r2, r1
 80101b8:	428a      	cmp	r2, r1
 80101ba:	d009      	beq.n	80101d0 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80101bc:	686b      	ldr	r3, [r5, #4]
 80101be:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80101c0:	2b08      	cmp	r3, #8
 80101c2:	d10e      	bne.n	80101e2 <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80101c4:	22c0      	movs	r2, #192	; 0xc0
 80101c6:	686b      	ldr	r3, [r5, #4]
 80101c8:	0252      	lsls	r2, r2, #9
 80101ca:	4013      	ands	r3, r2
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d108      	bne.n	80101e2 <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80101d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80101d2:	039b      	lsls	r3, r3, #14
 80101d4:	d400      	bmi.n	80101d8 <HAL_RCC_OscConfig+0x364>
 80101d6:	e683      	b.n	800fee0 <HAL_RCC_OscConfig+0x6c>
 80101d8:	6a23      	ldr	r3, [r4, #32]
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d000      	beq.n	80101e0 <HAL_RCC_OscConfig+0x36c>
 80101de:	e69d      	b.n	800ff1c <HAL_RCC_OscConfig+0xa8>
 80101e0:	e67e      	b.n	800fee0 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80101e2:	6a23      	ldr	r3, [r4, #32]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d013      	beq.n	8010210 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 80101e8:	2380      	movs	r3, #128	; 0x80
 80101ea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80101ec:	025b      	lsls	r3, r3, #9
 80101ee:	4313      	orrs	r3, r2
 80101f0:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80101f2:	f7fe fcb3 	bl	800eb5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80101f6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80101f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80101fa:	02bf      	lsls	r7, r7, #10
 80101fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80101fe:	423b      	tst	r3, r7
 8010200:	d000      	beq.n	8010204 <HAL_RCC_OscConfig+0x390>
 8010202:	e66d      	b.n	800fee0 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010204:	f7fe fcaa 	bl	800eb5c <HAL_GetTick>
 8010208:	1b80      	subs	r0, r0, r6
 801020a:	2802      	cmp	r0, #2
 801020c:	d9f6      	bls.n	80101fc <HAL_RCC_OscConfig+0x388>
 801020e:	e69c      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 8010210:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010212:	4a3e      	ldr	r2, [pc, #248]	; (801030c <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010214:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8010216:	4013      	ands	r3, r2
 8010218:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 801021a:	f7fe fc9f 	bl	800eb5c <HAL_GetTick>
 801021e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010220:	02bf      	lsls	r7, r7, #10
 8010222:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010224:	423b      	tst	r3, r7
 8010226:	d100      	bne.n	801022a <HAL_RCC_OscConfig+0x3b6>
 8010228:	e65a      	b.n	800fee0 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801022a:	f7fe fc97 	bl	800eb5c <HAL_GetTick>
 801022e:	1b80      	subs	r0, r0, r6
 8010230:	2802      	cmp	r0, #2
 8010232:	d9f6      	bls.n	8010222 <HAL_RCC_OscConfig+0x3ae>
 8010234:	e689      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010236:	210c      	movs	r1, #12
 8010238:	4d33      	ldr	r5, [pc, #204]	; (8010308 <HAL_RCC_OscConfig+0x494>)
 801023a:	686a      	ldr	r2, [r5, #4]
 801023c:	400a      	ands	r2, r1
 801023e:	2a08      	cmp	r2, #8
 8010240:	d047      	beq.n	80102d2 <HAL_RCC_OscConfig+0x45e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010242:	4a33      	ldr	r2, [pc, #204]	; (8010310 <HAL_RCC_OscConfig+0x49c>)
 8010244:	2b02      	cmp	r3, #2
 8010246:	d132      	bne.n	80102ae <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8010248:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801024a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 801024c:	4013      	ands	r3, r2
 801024e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010250:	f7fe fc84 	bl	800eb5c <HAL_GetTick>
 8010254:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010256:	04bf      	lsls	r7, r7, #18
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	423b      	tst	r3, r7
 801025c:	d121      	bne.n	80102a2 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801025e:	220f      	movs	r2, #15
 8010260:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010262:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010264:	4393      	bics	r3, r2
 8010266:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010268:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801026a:	4313      	orrs	r3, r2
 801026c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801026e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010272:	686a      	ldr	r2, [r5, #4]
 8010274:	430b      	orrs	r3, r1
 8010276:	4927      	ldr	r1, [pc, #156]	; (8010314 <HAL_RCC_OscConfig+0x4a0>)
 8010278:	400a      	ands	r2, r1
 801027a:	4313      	orrs	r3, r2
 801027c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 801027e:	2380      	movs	r3, #128	; 0x80
 8010280:	682a      	ldr	r2, [r5, #0]
 8010282:	045b      	lsls	r3, r3, #17
 8010284:	4313      	orrs	r3, r2
 8010286:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010288:	f7fe fc68 	bl	800eb5c <HAL_GetTick>
 801028c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801028e:	682b      	ldr	r3, [r5, #0]
 8010290:	4233      	tst	r3, r6
 8010292:	d000      	beq.n	8010296 <HAL_RCC_OscConfig+0x422>
 8010294:	e628      	b.n	800fee8 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010296:	f7fe fc61 	bl	800eb5c <HAL_GetTick>
 801029a:	1b00      	subs	r0, r0, r4
 801029c:	2802      	cmp	r0, #2
 801029e:	d9f6      	bls.n	801028e <HAL_RCC_OscConfig+0x41a>
 80102a0:	e653      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80102a2:	f7fe fc5b 	bl	800eb5c <HAL_GetTick>
 80102a6:	1b80      	subs	r0, r0, r6
 80102a8:	2802      	cmp	r0, #2
 80102aa:	d9d5      	bls.n	8010258 <HAL_RCC_OscConfig+0x3e4>
 80102ac:	e64d      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 80102ae:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80102b0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80102b2:	4013      	ands	r3, r2
 80102b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80102b6:	f7fe fc51 	bl	800eb5c <HAL_GetTick>
 80102ba:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80102bc:	04b6      	lsls	r6, r6, #18
 80102be:	682b      	ldr	r3, [r5, #0]
 80102c0:	4233      	tst	r3, r6
 80102c2:	d100      	bne.n	80102c6 <HAL_RCC_OscConfig+0x452>
 80102c4:	e610      	b.n	800fee8 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80102c6:	f7fe fc49 	bl	800eb5c <HAL_GetTick>
 80102ca:	1b00      	subs	r0, r0, r4
 80102cc:	2802      	cmp	r0, #2
 80102ce:	d9f6      	bls.n	80102be <HAL_RCC_OscConfig+0x44a>
 80102d0:	e63b      	b.n	800ff4a <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d100      	bne.n	80102d8 <HAL_RCC_OscConfig+0x464>
 80102d6:	e621      	b.n	800ff1c <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80102d8:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 80102da:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80102dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80102de:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80102e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80102e2:	4019      	ands	r1, r3
 80102e4:	4281      	cmp	r1, r0
 80102e6:	d000      	beq.n	80102ea <HAL_RCC_OscConfig+0x476>
 80102e8:	e618      	b.n	800ff1c <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80102ea:	210f      	movs	r1, #15
 80102ec:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80102ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80102f0:	428a      	cmp	r2, r1
 80102f2:	d000      	beq.n	80102f6 <HAL_RCC_OscConfig+0x482>
 80102f4:	e612      	b.n	800ff1c <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80102f6:	22f0      	movs	r2, #240	; 0xf0
 80102f8:	0392      	lsls	r2, r2, #14
 80102fa:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80102fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80102fe:	4293      	cmp	r3, r2
 8010300:	d100      	bne.n	8010304 <HAL_RCC_OscConfig+0x490>
 8010302:	e5f1      	b.n	800fee8 <HAL_RCC_OscConfig+0x74>
 8010304:	e60a      	b.n	800ff1c <HAL_RCC_OscConfig+0xa8>
 8010306:	46c0      	nop			; (mov r8, r8)
 8010308:	40021000 	.word	0x40021000
 801030c:	fffeffff 	.word	0xfffeffff
 8010310:	feffffff 	.word	0xfeffffff
 8010314:	ffc27fff 	.word	0xffc27fff

08010318 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010318:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 801031a:	4a14      	ldr	r2, [pc, #80]	; (801036c <HAL_RCC_GetSysClockFreq+0x54>)
{
 801031c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 801031e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8010320:	4018      	ands	r0, r3
 8010322:	2808      	cmp	r0, #8
 8010324:	d008      	beq.n	8010338 <HAL_RCC_GetSysClockFreq+0x20>
 8010326:	380c      	subs	r0, #12
 8010328:	1e43      	subs	r3, r0, #1
 801032a:	4198      	sbcs	r0, r3
 801032c:	4b10      	ldr	r3, [pc, #64]	; (8010370 <HAL_RCC_GetSysClockFreq+0x58>)
 801032e:	4240      	negs	r0, r0
 8010330:	4018      	ands	r0, r3
 8010332:	4b10      	ldr	r3, [pc, #64]	; (8010374 <HAL_RCC_GetSysClockFreq+0x5c>)
 8010334:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010336:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010338:	200f      	movs	r0, #15
 801033a:	0c99      	lsrs	r1, r3, #18
 801033c:	4c0e      	ldr	r4, [pc, #56]	; (8010378 <HAL_RCC_GetSysClockFreq+0x60>)
 801033e:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010340:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010342:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8010344:	490d      	ldr	r1, [pc, #52]	; (801037c <HAL_RCC_GetSysClockFreq+0x64>)
 8010346:	4002      	ands	r2, r0
 8010348:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801034a:	22c0      	movs	r2, #192	; 0xc0
 801034c:	2080      	movs	r0, #128	; 0x80
 801034e:	0252      	lsls	r2, r2, #9
 8010350:	4013      	ands	r3, r2
 8010352:	0240      	lsls	r0, r0, #9
 8010354:	4283      	cmp	r3, r0
 8010356:	d101      	bne.n	801035c <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8010358:	4809      	ldr	r0, [pc, #36]	; (8010380 <HAL_RCC_GetSysClockFreq+0x68>)
 801035a:	e002      	b.n	8010362 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 801035c:	4293      	cmp	r3, r2
 801035e:	d1fb      	bne.n	8010358 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8010360:	4804      	ldr	r0, [pc, #16]	; (8010374 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8010362:	f7f7 fb81 	bl	8007a68 <__udivsi3>
 8010366:	4360      	muls	r0, r4
 8010368:	e7e5      	b.n	8010336 <HAL_RCC_GetSysClockFreq+0x1e>
 801036a:	46c0      	nop			; (mov r8, r8)
 801036c:	40021000 	.word	0x40021000
 8010370:	fd9da600 	.word	0xfd9da600
 8010374:	02dc6c00 	.word	0x02dc6c00
 8010378:	0801be91 	.word	0x0801be91
 801037c:	0801bea1 	.word	0x0801bea1
 8010380:	007a1200 	.word	0x007a1200

08010384 <HAL_RCC_ClockConfig>:
{
 8010384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010386:	0004      	movs	r4, r0
 8010388:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 801038a:	2800      	cmp	r0, #0
 801038c:	d101      	bne.n	8010392 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 801038e:	2001      	movs	r0, #1
}
 8010390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010392:	2201      	movs	r2, #1
 8010394:	4d3a      	ldr	r5, [pc, #232]	; (8010480 <HAL_RCC_ClockConfig+0xfc>)
 8010396:	682b      	ldr	r3, [r5, #0]
 8010398:	4013      	ands	r3, r2
 801039a:	428b      	cmp	r3, r1
 801039c:	d31c      	bcc.n	80103d8 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801039e:	6821      	ldr	r1, [r4, #0]
 80103a0:	078b      	lsls	r3, r1, #30
 80103a2:	d422      	bmi.n	80103ea <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80103a4:	07cb      	lsls	r3, r1, #31
 80103a6:	d42f      	bmi.n	8010408 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80103a8:	2301      	movs	r3, #1
 80103aa:	682a      	ldr	r2, [r5, #0]
 80103ac:	401a      	ands	r2, r3
 80103ae:	42ba      	cmp	r2, r7
 80103b0:	d857      	bhi.n	8010462 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	4d33      	ldr	r5, [pc, #204]	; (8010484 <HAL_RCC_ClockConfig+0x100>)
 80103b6:	075b      	lsls	r3, r3, #29
 80103b8:	d45a      	bmi.n	8010470 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80103ba:	f7ff ffad 	bl	8010318 <HAL_RCC_GetSysClockFreq>
 80103be:	686b      	ldr	r3, [r5, #4]
 80103c0:	4a31      	ldr	r2, [pc, #196]	; (8010488 <HAL_RCC_ClockConfig+0x104>)
 80103c2:	061b      	lsls	r3, r3, #24
 80103c4:	0f1b      	lsrs	r3, r3, #28
 80103c6:	5cd3      	ldrb	r3, [r2, r3]
 80103c8:	40d8      	lsrs	r0, r3
 80103ca:	4b30      	ldr	r3, [pc, #192]	; (801048c <HAL_RCC_ClockConfig+0x108>)
 80103cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80103ce:	2000      	movs	r0, #0
 80103d0:	f7fe fb84 	bl	800eadc <HAL_InitTick>
  return HAL_OK;
 80103d4:	2000      	movs	r0, #0
 80103d6:	e7db      	b.n	8010390 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80103d8:	682b      	ldr	r3, [r5, #0]
 80103da:	4393      	bics	r3, r2
 80103dc:	430b      	orrs	r3, r1
 80103de:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80103e0:	682b      	ldr	r3, [r5, #0]
 80103e2:	4013      	ands	r3, r2
 80103e4:	428b      	cmp	r3, r1
 80103e6:	d1d2      	bne.n	801038e <HAL_RCC_ClockConfig+0xa>
 80103e8:	e7d9      	b.n	801039e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80103ea:	4a26      	ldr	r2, [pc, #152]	; (8010484 <HAL_RCC_ClockConfig+0x100>)
 80103ec:	074b      	lsls	r3, r1, #29
 80103ee:	d504      	bpl.n	80103fa <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80103f0:	23e0      	movs	r3, #224	; 0xe0
 80103f2:	6850      	ldr	r0, [r2, #4]
 80103f4:	00db      	lsls	r3, r3, #3
 80103f6:	4303      	orrs	r3, r0
 80103f8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80103fa:	20f0      	movs	r0, #240	; 0xf0
 80103fc:	6853      	ldr	r3, [r2, #4]
 80103fe:	4383      	bics	r3, r0
 8010400:	68a0      	ldr	r0, [r4, #8]
 8010402:	4303      	orrs	r3, r0
 8010404:	6053      	str	r3, [r2, #4]
 8010406:	e7cd      	b.n	80103a4 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010408:	6862      	ldr	r2, [r4, #4]
 801040a:	4e1e      	ldr	r6, [pc, #120]	; (8010484 <HAL_RCC_ClockConfig+0x100>)
 801040c:	2a01      	cmp	r2, #1
 801040e:	d103      	bne.n	8010418 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010410:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010412:	039b      	lsls	r3, r3, #14
 8010414:	d405      	bmi.n	8010422 <HAL_RCC_ClockConfig+0x9e>
 8010416:	e7ba      	b.n	801038e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010418:	2a02      	cmp	r2, #2
 801041a:	d11a      	bne.n	8010452 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801041c:	6833      	ldr	r3, [r6, #0]
 801041e:	019b      	lsls	r3, r3, #6
 8010420:	d5b5      	bpl.n	801038e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010422:	2103      	movs	r1, #3
 8010424:	6873      	ldr	r3, [r6, #4]
 8010426:	438b      	bics	r3, r1
 8010428:	4313      	orrs	r3, r2
 801042a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 801042c:	f7fe fb96 	bl	800eb5c <HAL_GetTick>
 8010430:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010432:	230c      	movs	r3, #12
 8010434:	6872      	ldr	r2, [r6, #4]
 8010436:	401a      	ands	r2, r3
 8010438:	6863      	ldr	r3, [r4, #4]
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	429a      	cmp	r2, r3
 801043e:	d0b3      	beq.n	80103a8 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010440:	f7fe fb8c 	bl	800eb5c <HAL_GetTick>
 8010444:	9b01      	ldr	r3, [sp, #4]
 8010446:	1ac0      	subs	r0, r0, r3
 8010448:	4b11      	ldr	r3, [pc, #68]	; (8010490 <HAL_RCC_ClockConfig+0x10c>)
 801044a:	4298      	cmp	r0, r3
 801044c:	d9f1      	bls.n	8010432 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 801044e:	2003      	movs	r0, #3
 8010450:	e79e      	b.n	8010390 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010452:	2a03      	cmp	r2, #3
 8010454:	d101      	bne.n	801045a <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010456:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010458:	e7db      	b.n	8010412 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801045a:	6833      	ldr	r3, [r6, #0]
 801045c:	079b      	lsls	r3, r3, #30
 801045e:	d4e0      	bmi.n	8010422 <HAL_RCC_ClockConfig+0x9e>
 8010460:	e795      	b.n	801038e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010462:	682a      	ldr	r2, [r5, #0]
 8010464:	439a      	bics	r2, r3
 8010466:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010468:	682a      	ldr	r2, [r5, #0]
 801046a:	421a      	tst	r2, r3
 801046c:	d0a1      	beq.n	80103b2 <HAL_RCC_ClockConfig+0x2e>
 801046e:	e78e      	b.n	801038e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8010470:	686b      	ldr	r3, [r5, #4]
 8010472:	4a08      	ldr	r2, [pc, #32]	; (8010494 <HAL_RCC_ClockConfig+0x110>)
 8010474:	4013      	ands	r3, r2
 8010476:	68e2      	ldr	r2, [r4, #12]
 8010478:	4313      	orrs	r3, r2
 801047a:	606b      	str	r3, [r5, #4]
 801047c:	e79d      	b.n	80103ba <HAL_RCC_ClockConfig+0x36>
 801047e:	46c0      	nop			; (mov r8, r8)
 8010480:	40022000 	.word	0x40022000
 8010484:	40021000 	.word	0x40021000
 8010488:	0801be79 	.word	0x0801be79
 801048c:	200000e4 	.word	0x200000e4
 8010490:	00001388 	.word	0x00001388
 8010494:	fffff8ff 	.word	0xfffff8ff

08010498 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8010498:	4b04      	ldr	r3, [pc, #16]	; (80104ac <HAL_RCC_GetPCLK1Freq+0x14>)
 801049a:	4a05      	ldr	r2, [pc, #20]	; (80104b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	055b      	lsls	r3, r3, #21
 80104a0:	0f5b      	lsrs	r3, r3, #29
 80104a2:	5cd3      	ldrb	r3, [r2, r3]
 80104a4:	4a03      	ldr	r2, [pc, #12]	; (80104b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80104a6:	6810      	ldr	r0, [r2, #0]
 80104a8:	40d8      	lsrs	r0, r3
}    
 80104aa:	4770      	bx	lr
 80104ac:	40021000 	.word	0x40021000
 80104b0:	0801be89 	.word	0x0801be89
 80104b4:	200000e4 	.word	0x200000e4

080104b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80104b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80104ba:	6803      	ldr	r3, [r0, #0]
{
 80104bc:	0005      	movs	r5, r0
 80104be:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80104c0:	03db      	lsls	r3, r3, #15
 80104c2:	d52a      	bpl.n	801051a <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80104c4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80104c6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80104c8:	4c45      	ldr	r4, [pc, #276]	; (80105e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80104ca:	0552      	lsls	r2, r2, #21
 80104cc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80104ce:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80104d0:	4213      	tst	r3, r2
 80104d2:	d108      	bne.n	80104e6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80104d4:	69e3      	ldr	r3, [r4, #28]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	61e3      	str	r3, [r4, #28]
 80104da:	69e3      	ldr	r3, [r4, #28]
 80104dc:	4013      	ands	r3, r2
 80104de:	9303      	str	r3, [sp, #12]
 80104e0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80104e2:	2301      	movs	r3, #1
 80104e4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80104e6:	2780      	movs	r7, #128	; 0x80
 80104e8:	4e3e      	ldr	r6, [pc, #248]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80104ea:	007f      	lsls	r7, r7, #1
 80104ec:	6833      	ldr	r3, [r6, #0]
 80104ee:	423b      	tst	r3, r7
 80104f0:	d043      	beq.n	801057a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80104f2:	6a22      	ldr	r2, [r4, #32]
 80104f4:	23c0      	movs	r3, #192	; 0xc0
 80104f6:	0011      	movs	r1, r2
 80104f8:	009b      	lsls	r3, r3, #2
 80104fa:	4e3b      	ldr	r6, [pc, #236]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80104fc:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80104fe:	421a      	tst	r2, r3
 8010500:	d14d      	bne.n	801059e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010502:	6a23      	ldr	r3, [r4, #32]
 8010504:	401e      	ands	r6, r3
 8010506:	686b      	ldr	r3, [r5, #4]
 8010508:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801050a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801050c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 801050e:	2b01      	cmp	r3, #1
 8010510:	d103      	bne.n	801051a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010512:	69e3      	ldr	r3, [r4, #28]
 8010514:	4a35      	ldr	r2, [pc, #212]	; (80105ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8010516:	4013      	ands	r3, r2
 8010518:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801051a:	682b      	ldr	r3, [r5, #0]
 801051c:	07da      	lsls	r2, r3, #31
 801051e:	d506      	bpl.n	801052e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010520:	2003      	movs	r0, #3
 8010522:	492f      	ldr	r1, [pc, #188]	; (80105e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8010524:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010526:	4382      	bics	r2, r0
 8010528:	68a8      	ldr	r0, [r5, #8]
 801052a:	4302      	orrs	r2, r0
 801052c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801052e:	079a      	lsls	r2, r3, #30
 8010530:	d506      	bpl.n	8010540 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010532:	492b      	ldr	r1, [pc, #172]	; (80105e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8010534:	482e      	ldr	r0, [pc, #184]	; (80105f0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8010536:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8010538:	4002      	ands	r2, r0
 801053a:	68e8      	ldr	r0, [r5, #12]
 801053c:	4302      	orrs	r2, r0
 801053e:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010540:	069a      	lsls	r2, r3, #26
 8010542:	d506      	bpl.n	8010552 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010544:	2010      	movs	r0, #16
 8010546:	4926      	ldr	r1, [pc, #152]	; (80105e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8010548:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801054a:	4382      	bics	r2, r0
 801054c:	6928      	ldr	r0, [r5, #16]
 801054e:	4302      	orrs	r2, r0
 8010550:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010552:	039a      	lsls	r2, r3, #14
 8010554:	d506      	bpl.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010556:	2080      	movs	r0, #128	; 0x80
 8010558:	4921      	ldr	r1, [pc, #132]	; (80105e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 801055a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801055c:	4382      	bics	r2, r0
 801055e:	69a8      	ldr	r0, [r5, #24]
 8010560:	4302      	orrs	r2, r0
 8010562:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8010564:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010566:	055b      	lsls	r3, r3, #21
 8010568:	d517      	bpl.n	801059a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801056a:	2140      	movs	r1, #64	; 0x40
 801056c:	4a1c      	ldr	r2, [pc, #112]	; (80105e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 801056e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010570:	438b      	bics	r3, r1
 8010572:	6969      	ldr	r1, [r5, #20]
 8010574:	430b      	orrs	r3, r1
 8010576:	6313      	str	r3, [r2, #48]	; 0x30
 8010578:	e00f      	b.n	801059a <HAL_RCCEx_PeriphCLKConfig+0xe2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801057a:	6833      	ldr	r3, [r6, #0]
 801057c:	433b      	orrs	r3, r7
 801057e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8010580:	f7fe faec 	bl	800eb5c <HAL_GetTick>
 8010584:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010586:	6833      	ldr	r3, [r6, #0]
 8010588:	423b      	tst	r3, r7
 801058a:	d1b2      	bne.n	80104f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801058c:	f7fe fae6 	bl	800eb5c <HAL_GetTick>
 8010590:	9b01      	ldr	r3, [sp, #4]
 8010592:	1ac0      	subs	r0, r0, r3
 8010594:	2864      	cmp	r0, #100	; 0x64
 8010596:	d9f6      	bls.n	8010586 <HAL_RCCEx_PeriphCLKConfig+0xce>
          return HAL_TIMEOUT;
 8010598:	2003      	movs	r0, #3
}
 801059a:	b005      	add	sp, #20
 801059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801059e:	686a      	ldr	r2, [r5, #4]
 80105a0:	4013      	ands	r3, r2
 80105a2:	428b      	cmp	r3, r1
 80105a4:	d0ad      	beq.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80105a6:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80105a8:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80105aa:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80105ac:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80105ae:	025b      	lsls	r3, r3, #9
 80105b0:	4303      	orrs	r3, r0
 80105b2:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80105b4:	6a23      	ldr	r3, [r4, #32]
 80105b6:	480f      	ldr	r0, [pc, #60]	; (80105f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80105b8:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80105ba:	4003      	ands	r3, r0
 80105bc:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80105be:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80105c0:	07d3      	lsls	r3, r2, #31
 80105c2:	d59e      	bpl.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80105c4:	f7fe faca 	bl	800eb5c <HAL_GetTick>
 80105c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80105ca:	2202      	movs	r2, #2
 80105cc:	6a23      	ldr	r3, [r4, #32]
 80105ce:	4213      	tst	r3, r2
 80105d0:	d197      	bne.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80105d2:	f7fe fac3 	bl	800eb5c <HAL_GetTick>
 80105d6:	4b08      	ldr	r3, [pc, #32]	; (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80105d8:	1bc0      	subs	r0, r0, r7
 80105da:	4298      	cmp	r0, r3
 80105dc:	d9f5      	bls.n	80105ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 80105de:	e7db      	b.n	8010598 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80105e0:	40021000 	.word	0x40021000
 80105e4:	40007000 	.word	0x40007000
 80105e8:	fffffcff 	.word	0xfffffcff
 80105ec:	efffffff 	.word	0xefffffff
 80105f0:	fffcffff 	.word	0xfffcffff
 80105f4:	fffeffff 	.word	0xfffeffff
 80105f8:	00001388 	.word	0x00001388

080105fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80105fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80105fe:	4a0b      	ldr	r2, [pc, #44]	; (801062c <HAL_RTC_WaitForSynchro+0x30>)
 8010600:	6803      	ldr	r3, [r0, #0]
{
 8010602:	0004      	movs	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010604:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010606:	f7fe faa9 	bl	800eb5c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801060a:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 801060c:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801060e:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010610:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010612:	6823      	ldr	r3, [r4, #0]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	4233      	tst	r3, r6
 8010618:	d001      	beq.n	801061e <HAL_RTC_WaitForSynchro+0x22>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 801061a:	2000      	movs	r0, #0
}
 801061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801061e:	f7fe fa9d 	bl	800eb5c <HAL_GetTick>
 8010622:	1b40      	subs	r0, r0, r5
 8010624:	42b8      	cmp	r0, r7
 8010626:	d9f4      	bls.n	8010612 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8010628:	2003      	movs	r0, #3
 801062a:	e7f7      	b.n	801061c <HAL_RTC_WaitForSynchro+0x20>
 801062c:	0001fd5d 	.word	0x0001fd5d

08010630 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010632:	2640      	movs	r6, #64	; 0x40
 8010634:	6803      	ldr	r3, [r0, #0]
{
 8010636:	0004      	movs	r4, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010638:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801063a:	2500      	movs	r5, #0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801063c:	4232      	tst	r2, r6
 801063e:	d10e      	bne.n	801065e <RTC_EnterInitMode+0x2e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010640:	2280      	movs	r2, #128	; 0x80
 8010642:	68d9      	ldr	r1, [r3, #12]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010644:	27fa      	movs	r7, #250	; 0xfa
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010646:	430a      	orrs	r2, r1
 8010648:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801064a:	f7fe fa87 	bl	800eb5c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801064e:	00bf      	lsls	r7, r7, #2
    tickstart = HAL_GetTick();
 8010650:	9001      	str	r0, [sp, #4]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	68db      	ldr	r3, [r3, #12]
 8010656:	4233      	tst	r3, r6
 8010658:	d101      	bne.n	801065e <RTC_EnterInitMode+0x2e>
 801065a:	2d01      	cmp	r5, #1
 801065c:	d101      	bne.n	8010662 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
}
 801065e:	0028      	movs	r0, r5
 8010660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010662:	f7fe fa7b 	bl	800eb5c <HAL_GetTick>
 8010666:	9b01      	ldr	r3, [sp, #4]
 8010668:	1ac0      	subs	r0, r0, r3
 801066a:	42b8      	cmp	r0, r7
 801066c:	d9f1      	bls.n	8010652 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 801066e:	2304      	movs	r3, #4
        status = HAL_ERROR;
 8010670:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010672:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8010674:	e7ed      	b.n	8010652 <RTC_EnterInitMode+0x22>

08010676 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010676:	2180      	movs	r1, #128	; 0x80
 8010678:	6803      	ldr	r3, [r0, #0]
{
 801067a:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801067c:	68da      	ldr	r2, [r3, #12]
{
 801067e:	0004      	movs	r4, r0
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010680:	438a      	bics	r2, r1
 8010682:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	069b      	lsls	r3, r3, #26
 8010688:	d501      	bpl.n	801068e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 801068a:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 801068c:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801068e:	f7ff ffb5 	bl	80105fc <HAL_RTC_WaitForSynchro>
 8010692:	2800      	cmp	r0, #0
 8010694:	d0f9      	beq.n	801068a <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010696:	2304      	movs	r3, #4
      status = HAL_ERROR;
 8010698:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 801069a:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 801069c:	e7f6      	b.n	801068c <RTC_ExitInitMode+0x16>
	...

080106a0 <HAL_RTC_Init>:
{
 80106a0:	b510      	push	{r4, lr}
 80106a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80106a4:	2001      	movs	r0, #1
  if (hrtc == NULL)
 80106a6:	2c00      	cmp	r4, #0
 80106a8:	d010      	beq.n	80106cc <HAL_RTC_Init+0x2c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80106aa:	7f63      	ldrb	r3, [r4, #29]
 80106ac:	b2da      	uxtb	r2, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d103      	bne.n	80106ba <HAL_RTC_Init+0x1a>
    HAL_RTC_MspInit(hrtc);
 80106b2:	0020      	movs	r0, r4
    hrtc->Lock = HAL_UNLOCKED;
 80106b4:	7722      	strb	r2, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 80106b6:	f7fe f817 	bl	800e6e8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80106ba:	2302      	movs	r3, #2
 80106bc:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	68da      	ldr	r2, [r3, #12]
 80106c2:	06d2      	lsls	r2, r2, #27
 80106c4:	d503      	bpl.n	80106ce <HAL_RTC_Init+0x2e>
    hrtc->State = HAL_RTC_STATE_READY;
 80106c6:	2301      	movs	r3, #1
 80106c8:	2000      	movs	r0, #0
 80106ca:	7763      	strb	r3, [r4, #29]
}
 80106cc:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80106ce:	22ca      	movs	r2, #202	; 0xca
 80106d0:	625a      	str	r2, [r3, #36]	; 0x24
 80106d2:	3a77      	subs	r2, #119	; 0x77
    status = RTC_EnterInitMode(hrtc);
 80106d4:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80106d6:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80106d8:	f7ff ffaa 	bl	8010630 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80106dc:	2800      	cmp	r0, #0
 80106de:	d121      	bne.n	8010724 <HAL_RTC_Init+0x84>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	4913      	ldr	r1, [pc, #76]	; (8010730 <HAL_RTC_Init+0x90>)
 80106e4:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80106e6:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80106e8:	400a      	ands	r2, r1
 80106ea:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80106ec:	6862      	ldr	r2, [r4, #4]
 80106ee:	6899      	ldr	r1, [r3, #8]
 80106f0:	4302      	orrs	r2, r0
 80106f2:	6960      	ldr	r0, [r4, #20]
 80106f4:	4302      	orrs	r2, r0
 80106f6:	430a      	orrs	r2, r1
 80106f8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80106fa:	68e2      	ldr	r2, [r4, #12]
      status = RTC_ExitInitMode(hrtc);
 80106fc:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80106fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010700:	68a2      	ldr	r2, [r4, #8]
 8010702:	6919      	ldr	r1, [r3, #16]
 8010704:	0412      	lsls	r2, r2, #16
 8010706:	430a      	orrs	r2, r1
 8010708:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 801070a:	f7ff ffb4 	bl	8010676 <RTC_ExitInitMode>
    if (status == HAL_OK)
 801070e:	2800      	cmp	r0, #0
 8010710:	d108      	bne.n	8010724 <HAL_RTC_Init+0x84>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	4907      	ldr	r1, [pc, #28]	; (8010734 <HAL_RTC_Init+0x94>)
 8010716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010718:	400a      	ands	r2, r1
 801071a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 801071c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801071e:	69a1      	ldr	r1, [r4, #24]
 8010720:	430a      	orrs	r2, r1
 8010722:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010724:	22ff      	movs	r2, #255	; 0xff
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 801072a:	2800      	cmp	r0, #0
 801072c:	d0cb      	beq.n	80106c6 <HAL_RTC_Init+0x26>
 801072e:	e7cd      	b.n	80106cc <HAL_RTC_Init+0x2c>
 8010730:	ff8fffbf 	.word	0xff8fffbf
 8010734:	fffbffff 	.word	0xfffbffff

08010738 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8010738:	2300      	movs	r3, #0

  while (number >= 10U)
 801073a:	2809      	cmp	r0, #9
 801073c:	d803      	bhi.n	8010746 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801073e:	011b      	lsls	r3, r3, #4
 8010740:	4318      	orrs	r0, r3
 8010742:	b2c0      	uxtb	r0, r0
}
 8010744:	4770      	bx	lr
    number -= 10U;
 8010746:	380a      	subs	r0, #10
    bcdhigh++;
 8010748:	3301      	adds	r3, #1
    number -= 10U;
 801074a:	b2c0      	uxtb	r0, r0
 801074c:	e7f5      	b.n	801073a <RTC_ByteToBcd2+0x2>
	...

08010750 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8010750:	2302      	movs	r3, #2
{
 8010752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010754:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8010756:	7f01      	ldrb	r1, [r0, #28]
{
 8010758:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 801075a:	0018      	movs	r0, r3
 801075c:	2901      	cmp	r1, #1
 801075e:	d045      	beq.n	80107ec <HAL_RTC_SetTime+0x9c>
 8010760:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010762:	7763      	strb	r3, [r4, #29]
  __HAL_LOCK(hrtc);
 8010764:	7721      	strb	r1, [r4, #28]
  if (Format == RTC_FORMAT_BIN)
 8010766:	78a9      	ldrb	r1, [r5, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010768:	6826      	ldr	r6, [r4, #0]
 801076a:	7828      	ldrb	r0, [r5, #0]
 801076c:	786f      	ldrb	r7, [r5, #1]
 801076e:	333e      	adds	r3, #62	; 0x3e
 8010770:	9100      	str	r1, [sp, #0]
  if (Format == RTC_FORMAT_BIN)
 8010772:	2a00      	cmp	r2, #0
 8010774:	d13b      	bne.n	80107ee <HAL_RTC_SetTime+0x9e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010776:	68b2      	ldr	r2, [r6, #8]
 8010778:	0011      	movs	r1, r2
 801077a:	4019      	ands	r1, r3
 801077c:	421a      	tst	r2, r3
 801077e:	d100      	bne.n	8010782 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8010780:	70e9      	strb	r1, [r5, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010782:	f7ff ffd9 	bl	8010738 <RTC_ByteToBcd2>
 8010786:	9001      	str	r0, [sp, #4]
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010788:	0038      	movs	r0, r7
 801078a:	f7ff ffd5 	bl	8010738 <RTC_ByteToBcd2>
 801078e:	0007      	movs	r7, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8010790:	9800      	ldr	r0, [sp, #0]
 8010792:	f7ff ffd1 	bl	8010738 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8010796:	78eb      	ldrb	r3, [r5, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010798:	9a01      	ldr	r2, [sp, #4]
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801079a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801079c:	4303      	orrs	r3, r0
 801079e:	0410      	lsls	r0, r2, #16
 80107a0:	4303      	orrs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80107a2:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80107a4:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80107a6:	23ca      	movs	r3, #202	; 0xca
 80107a8:	6273      	str	r3, [r6, #36]	; 0x24
 80107aa:	3b77      	subs	r3, #119	; 0x77
  status = RTC_EnterInitMode(hrtc);
 80107ac:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80107ae:	6273      	str	r3, [r6, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80107b0:	f7ff ff3e 	bl	8010630 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d114      	bne.n	80107e2 <HAL_RTC_SetTime+0x92>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80107b8:	4814      	ldr	r0, [pc, #80]	; (801080c <HAL_RTC_SetTime+0xbc>)
 80107ba:	6823      	ldr	r3, [r4, #0]
 80107bc:	4007      	ands	r7, r0
 80107be:	601f      	str	r7, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80107c0:	689a      	ldr	r2, [r3, #8]
 80107c2:	4913      	ldr	r1, [pc, #76]	; (8010810 <HAL_RTC_SetTime+0xc0>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80107c4:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80107c6:	400a      	ands	r2, r1
 80107c8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80107ca:	68ea      	ldr	r2, [r5, #12]
 80107cc:	6899      	ldr	r1, [r3, #8]
 80107ce:	4302      	orrs	r2, r0
 80107d0:	430a      	orrs	r2, r1
    status = RTC_ExitInitMode(hrtc);
 80107d2:	0020      	movs	r0, r4
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80107d4:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 80107d6:	f7ff ff4e 	bl	8010676 <RTC_ExitInitMode>
  if (status == HAL_OK)
 80107da:	2800      	cmp	r0, #0
 80107dc:	d101      	bne.n	80107e2 <HAL_RTC_SetTime+0x92>
    hrtc->State = HAL_RTC_STATE_READY;
 80107de:	2301      	movs	r3, #1
 80107e0:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80107e2:	22ff      	movs	r2, #255	; 0xff
 80107e4:	6823      	ldr	r3, [r4, #0]
 80107e6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80107e8:	2300      	movs	r3, #0
 80107ea:	7723      	strb	r3, [r4, #28]
}
 80107ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80107ee:	68b2      	ldr	r2, [r6, #8]
 80107f0:	0011      	movs	r1, r2
 80107f2:	4019      	ands	r1, r3
 80107f4:	421a      	tst	r2, r3
 80107f6:	d100      	bne.n	80107fa <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00U;
 80107f8:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80107fa:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80107fc:	023f      	lsls	r7, r7, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80107fe:	4307      	orrs	r7, r0
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010800:	9b00      	ldr	r3, [sp, #0]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010802:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010804:	431f      	orrs	r7, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010806:	0580      	lsls	r0, r0, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010808:	4307      	orrs	r7, r0
 801080a:	e7cc      	b.n	80107a6 <HAL_RTC_SetTime+0x56>
 801080c:	007f7f7f 	.word	0x007f7f7f
 8010810:	fffbffff 	.word	0xfffbffff

08010814 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8010814:	2302      	movs	r3, #2
{
 8010816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010818:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 801081a:	7f01      	ldrb	r1, [r0, #28]
{
 801081c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 801081e:	0018      	movs	r0, r3
 8010820:	2901      	cmp	r1, #1
 8010822:	d039      	beq.n	8010898 <HAL_RTC_SetDate+0x84>
 8010824:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010826:	7763      	strb	r3, [r4, #29]
  __HAL_LOCK(hrtc);
 8010828:	7721      	strb	r1, [r4, #28]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801082a:	782e      	ldrb	r6, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801082c:	78e8      	ldrb	r0, [r5, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801082e:	786b      	ldrb	r3, [r5, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8010830:	78af      	ldrb	r7, [r5, #2]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8010832:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010834:	2a00      	cmp	r2, #0
 8010836:	d130      	bne.n	801089a <HAL_RTC_SetDate+0x86>
 8010838:	3210      	adds	r2, #16
 801083a:	4213      	tst	r3, r2
 801083c:	d002      	beq.n	8010844 <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801083e:	4393      	bics	r3, r2
 8010840:	330a      	adds	r3, #10
 8010842:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010844:	f7ff ff78 	bl	8010738 <RTC_ByteToBcd2>
 8010848:	9001      	str	r0, [sp, #4]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801084a:	7868      	ldrb	r0, [r5, #1]
 801084c:	f7ff ff74 	bl	8010738 <RTC_ByteToBcd2>
 8010850:	0005      	movs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8010852:	0038      	movs	r0, r7
 8010854:	f7ff ff70 	bl	8010738 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010858:	9b01      	ldr	r3, [sp, #4]
 801085a:	4306      	orrs	r6, r0
 801085c:	041f      	lsls	r7, r3, #16
 801085e:	4337      	orrs	r7, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010860:	022d      	lsls	r5, r5, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010862:	432f      	orrs	r7, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010864:	22ca      	movs	r2, #202	; 0xca
 8010866:	6823      	ldr	r3, [r4, #0]
  status = RTC_EnterInitMode(hrtc);
 8010868:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801086a:	625a      	str	r2, [r3, #36]	; 0x24
 801086c:	3a77      	subs	r2, #119	; 0x77
 801086e:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8010870:	f7ff fede 	bl	8010630 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8010874:	2800      	cmp	r0, #0
 8010876:	d10a      	bne.n	801088e <HAL_RTC_SetDate+0x7a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010878:	4d0b      	ldr	r5, [pc, #44]	; (80108a8 <HAL_RTC_SetDate+0x94>)
 801087a:	6823      	ldr	r3, [r4, #0]
 801087c:	402f      	ands	r7, r5
    status = RTC_ExitInitMode(hrtc);
 801087e:	0020      	movs	r0, r4
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010880:	605f      	str	r7, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8010882:	f7ff fef8 	bl	8010676 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8010886:	2800      	cmp	r0, #0
 8010888:	d101      	bne.n	801088e <HAL_RTC_SetDate+0x7a>
    hrtc->State = HAL_RTC_STATE_READY;
 801088a:	2301      	movs	r3, #1
 801088c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801088e:	22ff      	movs	r2, #255	; 0xff
 8010890:	6823      	ldr	r3, [r4, #0]
 8010892:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8010894:	2300      	movs	r3, #0
 8010896:	7723      	strb	r3, [r4, #28]
}
 8010898:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801089a:	0400      	lsls	r0, r0, #16
 801089c:	4306      	orrs	r6, r0
 801089e:	4337      	orrs	r7, r6
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80108a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80108a2:	431f      	orrs	r7, r3
 80108a4:	e7de      	b.n	8010864 <HAL_RTC_SetDate+0x50>
 80108a6:	46c0      	nop			; (mov r8, r8)
 80108a8:	00ffff3f 	.word	0x00ffff3f

080108ac <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80108ac:	0902      	lsrs	r2, r0, #4
{
 80108ae:	0003      	movs	r3, r0
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80108b0:	200a      	movs	r0, #10
 80108b2:	4350      	muls	r0, r2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80108b4:	220f      	movs	r2, #15
 80108b6:	4013      	ands	r3, r2
 80108b8:	18c0      	adds	r0, r0, r3
 80108ba:	b2c0      	uxtb	r0, r0
}
 80108bc:	4770      	bx	lr
	...

080108c0 <HAL_RTC_GetTime>:
{
 80108c0:	b570      	push	{r4, r5, r6, lr}
 80108c2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80108c4:	6801      	ldr	r1, [r0, #0]
 80108c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80108c8:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80108ca:	690b      	ldr	r3, [r1, #16]
 80108cc:	045b      	lsls	r3, r3, #17
 80108ce:	0c5b      	lsrs	r3, r3, #17
 80108d0:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80108d2:	680b      	ldr	r3, [r1, #0]
 80108d4:	490d      	ldr	r1, [pc, #52]	; (801090c <HAL_RTC_GetTime+0x4c>)
 80108d6:	400b      	ands	r3, r1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80108d8:	0298      	lsls	r0, r3, #10
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80108da:	0a1d      	lsrs	r5, r3, #8
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80108dc:	b2de      	uxtb	r6, r3
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80108de:	0e80      	lsrs	r0, r0, #26
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80108e0:	b2ed      	uxtb	r5, r5
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80108e2:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80108e4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80108e6:	7065      	strb	r5, [r4, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80108e8:	70a6      	strb	r6, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80108ea:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80108ec:	2a00      	cmp	r2, #0
 80108ee:	d10a      	bne.n	8010906 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80108f0:	f7ff ffdc 	bl	80108ac <RTC_Bcd2ToByte>
 80108f4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80108f6:	0028      	movs	r0, r5
 80108f8:	f7ff ffd8 	bl	80108ac <RTC_Bcd2ToByte>
 80108fc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80108fe:	0030      	movs	r0, r6
 8010900:	f7ff ffd4 	bl	80108ac <RTC_Bcd2ToByte>
 8010904:	70a0      	strb	r0, [r4, #2]
}
 8010906:	2000      	movs	r0, #0
 8010908:	bd70      	pop	{r4, r5, r6, pc}
 801090a:	46c0      	nop			; (mov r8, r8)
 801090c:	007f7f7f 	.word	0x007f7f7f

08010910 <HAL_RTC_GetDate>:
{
 8010910:	b570      	push	{r4, r5, r6, lr}
 8010912:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010914:	6803      	ldr	r3, [r0, #0]
 8010916:	490e      	ldr	r1, [pc, #56]	; (8010950 <HAL_RTC_GetDate+0x40>)
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	400b      	ands	r3, r1
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801091c:	0c18      	lsrs	r0, r3, #16
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801091e:	04dd      	lsls	r5, r3, #19
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010920:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8010922:	041b      	lsls	r3, r3, #16
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8010924:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8010926:	0f5b      	lsrs	r3, r3, #29
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010928:	70e0      	strb	r0, [r4, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801092a:	7065      	strb	r5, [r4, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801092c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801092e:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8010930:	2a00      	cmp	r2, #0
 8010932:	d10a      	bne.n	801094a <HAL_RTC_GetDate+0x3a>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010934:	f7ff ffba 	bl	80108ac <RTC_Bcd2ToByte>
 8010938:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801093a:	0028      	movs	r0, r5
 801093c:	f7ff ffb6 	bl	80108ac <RTC_Bcd2ToByte>
 8010940:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010942:	0030      	movs	r0, r6
 8010944:	f7ff ffb2 	bl	80108ac <RTC_Bcd2ToByte>
 8010948:	70a0      	strb	r0, [r4, #2]
}
 801094a:	2000      	movs	r0, #0
 801094c:	bd70      	pop	{r4, r5, r6, pc}
 801094e:	46c0      	nop			; (mov r8, r8)
 8010950:	00ffff3f 	.word	0x00ffff3f

08010954 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8010954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010956:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010958:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 801095a:	b085      	sub	sp, #20
 801095c:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 801095e:	ab02      	add	r3, sp, #8
 8010960:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8010962:	0004      	movs	r4, r0
 8010964:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8010966:	f7fe f8f9 	bl	800eb5c <HAL_GetTick>
 801096a:	19ed      	adds	r5, r5, r7
 801096c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 801096e:	f7fe f8f5 	bl	800eb5c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010972:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010974:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8010976:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010978:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801097a:	4b2a      	ldr	r3, [pc, #168]	; (8010a24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4353      	muls	r3, r2
 8010980:	0d1b      	lsrs	r3, r3, #20
 8010982:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8010984:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8010986:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8010988:	ab02      	add	r3, sp, #8
 801098a:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 801098c:	688b      	ldr	r3, [r1, #8]
 801098e:	0018      	movs	r0, r3
 8010990:	4030      	ands	r0, r6
 8010992:	4233      	tst	r3, r6
 8010994:	d03b      	beq.n	8010a0e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010996:	23c0      	movs	r3, #192	; 0xc0
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	429e      	cmp	r6, r3
 801099c:	d104      	bne.n	80109a8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 801099e:	9b01      	ldr	r3, [sp, #4]
 80109a0:	7b1b      	ldrb	r3, [r3, #12]
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 80109a6:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 80109a8:	1c7b      	adds	r3, r7, #1
 80109aa:	d0ef      	beq.n	801098c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80109ac:	f7fe f8d6 	bl	800eb5c <HAL_GetTick>
 80109b0:	9b00      	ldr	r3, [sp, #0]
 80109b2:	1ac0      	subs	r0, r0, r3
 80109b4:	42a8      	cmp	r0, r5
 80109b6:	d32c      	bcc.n	8010a12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80109b8:	21e0      	movs	r1, #224	; 0xe0
 80109ba:	6823      	ldr	r3, [r4, #0]
 80109bc:	685a      	ldr	r2, [r3, #4]
 80109be:	438a      	bics	r2, r1
 80109c0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80109c2:	2282      	movs	r2, #130	; 0x82
 80109c4:	6861      	ldr	r1, [r4, #4]
 80109c6:	0052      	lsls	r2, r2, #1
 80109c8:	4291      	cmp	r1, r2
 80109ca:	d10c      	bne.n	80109e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 80109cc:	2180      	movs	r1, #128	; 0x80
 80109ce:	68a2      	ldr	r2, [r4, #8]
 80109d0:	0209      	lsls	r1, r1, #8
 80109d2:	428a      	cmp	r2, r1
 80109d4:	d003      	beq.n	80109de <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80109d6:	2180      	movs	r1, #128	; 0x80
 80109d8:	00c9      	lsls	r1, r1, #3
 80109da:	428a      	cmp	r2, r1
 80109dc:	d103      	bne.n	80109e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 80109de:	2140      	movs	r1, #64	; 0x40
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	438a      	bics	r2, r1
 80109e4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80109e6:	2180      	movs	r1, #128	; 0x80
 80109e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80109ea:	0189      	lsls	r1, r1, #6
 80109ec:	428a      	cmp	r2, r1
 80109ee:	d106      	bne.n	80109fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 80109f0:	6819      	ldr	r1, [r3, #0]
 80109f2:	480d      	ldr	r0, [pc, #52]	; (8010a28 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 80109f4:	4001      	ands	r1, r0
 80109f6:	6019      	str	r1, [r3, #0]
 80109f8:	6819      	ldr	r1, [r3, #0]
 80109fa:	430a      	orrs	r2, r1
 80109fc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80109fe:	0023      	movs	r3, r4
 8010a00:	2201      	movs	r2, #1
 8010a02:	335d      	adds	r3, #93	; 0x5d
 8010a04:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8010a06:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8010a08:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8010a0a:	345c      	adds	r4, #92	; 0x5c
 8010a0c:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 8010a0e:	b005      	add	sp, #20
 8010a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8010a12:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8010a14:	1e5a      	subs	r2, r3, #1
 8010a16:	4193      	sbcs	r3, r2
 8010a18:	425b      	negs	r3, r3
 8010a1a:	401d      	ands	r5, r3
      count--;
 8010a1c:	9b03      	ldr	r3, [sp, #12]
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	e7b0      	b.n	8010984 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 8010a22:	46c0      	nop			; (mov r8, r8)
 8010a24:	200000e4 	.word	0x200000e4
 8010a28:	ffffdfff 	.word	0xffffdfff

08010a2c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8010a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a2e:	000e      	movs	r6, r1
 8010a30:	b085      	sub	sp, #20
 8010a32:	0015      	movs	r5, r2
 8010a34:	0004      	movs	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010a36:	f7fe f891 	bl	800eb5c <HAL_GetTick>
 8010a3a:	19ad      	adds	r5, r5, r6
 8010a3c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8010a3e:	f7fe f88d 	bl	800eb5c <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010a42:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010a44:	4b25      	ldr	r3, [pc, #148]	; (8010adc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8010a46:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	015b      	lsls	r3, r3, #5
 8010a4c:	0d1b      	lsrs	r3, r3, #20
 8010a4e:	436b      	muls	r3, r5
 8010a50:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010a52:	6822      	ldr	r2, [r4, #0]
 8010a54:	6893      	ldr	r3, [r2, #8]
 8010a56:	0018      	movs	r0, r3
 8010a58:	4038      	ands	r0, r7
 8010a5a:	423b      	tst	r3, r7
 8010a5c:	d032      	beq.n	8010ac4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8010a5e:	1c73      	adds	r3, r6, #1
 8010a60:	d0f8      	beq.n	8010a54 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010a62:	f7fe f87b 	bl	800eb5c <HAL_GetTick>
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	1ac0      	subs	r0, r0, r3
 8010a6a:	42a8      	cmp	r0, r5
 8010a6c:	d32c      	bcc.n	8010ac8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010a6e:	21e0      	movs	r1, #224	; 0xe0
 8010a70:	6823      	ldr	r3, [r4, #0]
 8010a72:	685a      	ldr	r2, [r3, #4]
 8010a74:	438a      	bics	r2, r1
 8010a76:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a78:	2282      	movs	r2, #130	; 0x82
 8010a7a:	6861      	ldr	r1, [r4, #4]
 8010a7c:	0052      	lsls	r2, r2, #1
 8010a7e:	4291      	cmp	r1, r2
 8010a80:	d10c      	bne.n	8010a9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8010a82:	2180      	movs	r1, #128	; 0x80
 8010a84:	68a2      	ldr	r2, [r4, #8]
 8010a86:	0209      	lsls	r1, r1, #8
 8010a88:	428a      	cmp	r2, r1
 8010a8a:	d003      	beq.n	8010a94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010a8c:	2180      	movs	r1, #128	; 0x80
 8010a8e:	00c9      	lsls	r1, r1, #3
 8010a90:	428a      	cmp	r2, r1
 8010a92:	d103      	bne.n	8010a9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 8010a94:	2140      	movs	r1, #64	; 0x40
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	438a      	bics	r2, r1
 8010a9a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010a9c:	2180      	movs	r1, #128	; 0x80
 8010a9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010aa0:	0189      	lsls	r1, r1, #6
 8010aa2:	428a      	cmp	r2, r1
 8010aa4:	d106      	bne.n	8010ab4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8010aa6:	6819      	ldr	r1, [r3, #0]
 8010aa8:	480d      	ldr	r0, [pc, #52]	; (8010ae0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8010aaa:	4001      	ands	r1, r0
 8010aac:	6019      	str	r1, [r3, #0]
 8010aae:	6819      	ldr	r1, [r3, #0]
 8010ab0:	430a      	orrs	r2, r1
 8010ab2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8010ab4:	0023      	movs	r3, r4
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	335d      	adds	r3, #93	; 0x5d
 8010aba:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8010abc:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8010abe:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8010ac0:	345c      	adds	r4, #92	; 0x5c
 8010ac2:	7023      	strb	r3, [r4, #0]
}
 8010ac4:	b005      	add	sp, #20
 8010ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8010ac8:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8010aca:	1e5a      	subs	r2, r3, #1
 8010acc:	4193      	sbcs	r3, r2
 8010ace:	425b      	negs	r3, r3
 8010ad0:	401d      	ands	r5, r3
      count--;
 8010ad2:	9b03      	ldr	r3, [sp, #12]
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	9303      	str	r3, [sp, #12]
 8010ad8:	e7bb      	b.n	8010a52 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8010ada:	46c0      	nop			; (mov r8, r8)
 8010adc:	200000e4 	.word	0x200000e4
 8010ae0:	ffffdfff 	.word	0xffffdfff

08010ae4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010ae6:	2382      	movs	r3, #130	; 0x82
{
 8010ae8:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010aea:	6842      	ldr	r2, [r0, #4]
{
 8010aec:	0004      	movs	r4, r0
 8010aee:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010af0:	005b      	lsls	r3, r3, #1
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d10d      	bne.n	8010b12 <SPI_EndRxTransaction+0x2e>
 8010af6:	2280      	movs	r2, #128	; 0x80
 8010af8:	6883      	ldr	r3, [r0, #8]
 8010afa:	0212      	lsls	r2, r2, #8
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d003      	beq.n	8010b08 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010b00:	2280      	movs	r2, #128	; 0x80
 8010b02:	00d2      	lsls	r2, r2, #3
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d104      	bne.n	8010b12 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010b08:	2140      	movs	r1, #64	; 0x40
 8010b0a:	6822      	ldr	r2, [r4, #0]
 8010b0c:	6813      	ldr	r3, [r2, #0]
 8010b0e:	438b      	bics	r3, r1
 8010b10:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010b12:	003a      	movs	r2, r7
 8010b14:	0031      	movs	r1, r6
 8010b16:	0020      	movs	r0, r4
 8010b18:	f7ff ff88 	bl	8010a2c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8010b1c:	1e05      	subs	r5, r0, #0
 8010b1e:	d005      	beq.n	8010b2c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b20:	2320      	movs	r3, #32
 8010b22:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8010b24:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b26:	4313      	orrs	r3, r2
 8010b28:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8010b2a:	e016      	b.n	8010b5a <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b2c:	2382      	movs	r3, #130	; 0x82
 8010b2e:	6862      	ldr	r2, [r4, #4]
 8010b30:	005b      	lsls	r3, r3, #1
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d111      	bne.n	8010b5a <SPI_EndRxTransaction+0x76>
 8010b36:	2280      	movs	r2, #128	; 0x80
 8010b38:	68a3      	ldr	r3, [r4, #8]
 8010b3a:	0212      	lsls	r2, r2, #8
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d003      	beq.n	8010b48 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010b40:	2280      	movs	r2, #128	; 0x80
 8010b42:	00d2      	lsls	r2, r2, #3
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d108      	bne.n	8010b5a <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010b48:	21c0      	movs	r1, #192	; 0xc0
 8010b4a:	003b      	movs	r3, r7
 8010b4c:	0032      	movs	r2, r6
 8010b4e:	0020      	movs	r0, r4
 8010b50:	00c9      	lsls	r1, r1, #3
 8010b52:	f7ff feff 	bl	8010954 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d1e2      	bne.n	8010b20 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8010b5a:	0028      	movs	r0, r5
 8010b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b5e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010b5e:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010b60:	0013      	movs	r3, r2
{
 8010b62:	000d      	movs	r5, r1
 8010b64:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010b66:	000a      	movs	r2, r1
 8010b68:	21c0      	movs	r1, #192	; 0xc0
 8010b6a:	0149      	lsls	r1, r1, #5
{
 8010b6c:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010b6e:	f7ff fef1 	bl	8010954 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	d005      	beq.n	8010b82 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b76:	2320      	movs	r3, #32
 8010b78:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8010b7a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8010b80:	e00f      	b.n	8010ba2 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010b82:	0032      	movs	r2, r6
 8010b84:	0029      	movs	r1, r5
 8010b86:	0020      	movs	r0, r4
 8010b88:	f7ff ff50 	bl	8010a2c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d1f2      	bne.n	8010b76 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010b90:	21c0      	movs	r1, #192	; 0xc0
 8010b92:	0033      	movs	r3, r6
 8010b94:	002a      	movs	r2, r5
 8010b96:	0020      	movs	r0, r4
 8010b98:	00c9      	lsls	r1, r1, #3
 8010b9a:	f7ff fedb 	bl	8010954 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8010b9e:	2800      	cmp	r0, #0
 8010ba0:	d1e9      	bne.n	8010b76 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}

08010ba4 <HAL_SPI_Init>:
{
 8010ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ba6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8010ba8:	2001      	movs	r0, #1
  if (hspi == NULL)
 8010baa:	2c00      	cmp	r4, #0
 8010bac:	d067      	beq.n	8010c7e <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d165      	bne.n	8010c80 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010bb4:	2282      	movs	r2, #130	; 0x82
 8010bb6:	6861      	ldr	r1, [r4, #4]
 8010bb8:	0052      	lsls	r2, r2, #1
 8010bba:	4291      	cmp	r1, r2
 8010bbc:	d000      	beq.n	8010bc0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010bbe:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010bc0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8010bc2:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010bc4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8010bc6:	355d      	adds	r5, #93	; 0x5d
 8010bc8:	782b      	ldrb	r3, [r5, #0]
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d105      	bne.n	8010bdc <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8010bd0:	0023      	movs	r3, r4
 8010bd2:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8010bd4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8010bd6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8010bd8:	f7fd fd96 	bl	800e708 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8010bdc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8010bde:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8010be0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8010be2:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010be4:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8010be6:	6813      	ldr	r3, [r2, #0]
 8010be8:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010bea:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 8010bec:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010bee:	00c9      	lsls	r1, r1, #3
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	428d      	cmp	r5, r1
 8010bf4:	d848      	bhi.n	8010c88 <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010bf6:	2080      	movs	r0, #128	; 0x80
 8010bf8:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010bfa:	428d      	cmp	r5, r1
 8010bfc:	d000      	beq.n	8010c00 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010bfe:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010c00:	2382      	movs	r3, #130	; 0x82
 8010c02:	6866      	ldr	r6, [r4, #4]
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	4033      	ands	r3, r6
 8010c08:	2684      	movs	r6, #132	; 0x84
 8010c0a:	68a7      	ldr	r7, [r4, #8]
 8010c0c:	0236      	lsls	r6, r6, #8
 8010c0e:	403e      	ands	r6, r7
 8010c10:	4333      	orrs	r3, r6
 8010c12:	2602      	movs	r6, #2
 8010c14:	6927      	ldr	r7, [r4, #16]
 8010c16:	69a1      	ldr	r1, [r4, #24]
 8010c18:	403e      	ands	r6, r7
 8010c1a:	4333      	orrs	r3, r6
 8010c1c:	2601      	movs	r6, #1
 8010c1e:	6967      	ldr	r7, [r4, #20]
 8010c20:	46b4      	mov	ip, r6
 8010c22:	4037      	ands	r7, r6
 8010c24:	433b      	orrs	r3, r7
 8010c26:	2780      	movs	r7, #128	; 0x80
 8010c28:	00bf      	lsls	r7, r7, #2
 8010c2a:	400f      	ands	r7, r1
 8010c2c:	433b      	orrs	r3, r7
 8010c2e:	2738      	movs	r7, #56	; 0x38
 8010c30:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010c32:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010c34:	4037      	ands	r7, r6
 8010c36:	433b      	orrs	r3, r7
 8010c38:	2780      	movs	r7, #128	; 0x80
 8010c3a:	6a26      	ldr	r6, [r4, #32]
 8010c3c:	4037      	ands	r7, r6
 8010c3e:	433b      	orrs	r3, r7
 8010c40:	2780      	movs	r7, #128	; 0x80
 8010c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c44:	01bf      	lsls	r7, r7, #6
 8010c46:	4037      	ands	r7, r6
 8010c48:	433b      	orrs	r3, r7
 8010c4a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010c4c:	2310      	movs	r3, #16
 8010c4e:	2708      	movs	r7, #8
 8010c50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010c52:	4033      	ands	r3, r6
 8010c54:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8010c56:	4037      	ands	r7, r6
 8010c58:	433b      	orrs	r3, r7
 8010c5a:	27f0      	movs	r7, #240	; 0xf0
 8010c5c:	013f      	lsls	r7, r7, #4
 8010c5e:	403d      	ands	r5, r7
 8010c60:	431d      	orrs	r5, r3
 8010c62:	2304      	movs	r3, #4
 8010c64:	4019      	ands	r1, r3
 8010c66:	4329      	orrs	r1, r5
 8010c68:	4308      	orrs	r0, r1
 8010c6a:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010c6c:	69d3      	ldr	r3, [r2, #28]
 8010c6e:	4908      	ldr	r1, [pc, #32]	; (8010c90 <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010c70:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010c72:	400b      	ands	r3, r1
 8010c74:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8010c76:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010c78:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010c7a:	345d      	adds	r4, #93	; 0x5d
 8010c7c:	7023      	strb	r3, [r4, #0]
}
 8010c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010c80:	2300      	movs	r3, #0
 8010c82:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010c84:	6163      	str	r3, [r4, #20]
 8010c86:	e79b      	b.n	8010bc0 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010c88:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010c8a:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010c8c:	0109      	lsls	r1, r1, #4
 8010c8e:	e7b4      	b.n	8010bfa <HAL_SPI_Init+0x56>
 8010c90:	fffff7ff 	.word	0xfffff7ff

08010c94 <HAL_SPI_DeInit>:
{
 8010c94:	b570      	push	{r4, r5, r6, lr}
 8010c96:	0004      	movs	r4, r0
    return HAL_ERROR;
 8010c98:	2001      	movs	r0, #1
  if (hspi == NULL)
 8010c9a:	2c00      	cmp	r4, #0
 8010c9c:	d010      	beq.n	8010cc0 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8010c9e:	0025      	movs	r5, r4
 8010ca0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8010ca2:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8010ca4:	355d      	adds	r5, #93	; 0x5d
 8010ca6:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8010ca8:	6822      	ldr	r2, [r4, #0]
  HAL_SPI_MspDeInit(hspi);
 8010caa:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8010cac:	6813      	ldr	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8010cae:	345c      	adds	r4, #92	; 0x5c
  __HAL_SPI_DISABLE(hspi);
 8010cb0:	438b      	bics	r3, r1
 8010cb2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8010cb4:	f7fd fd7e 	bl	800e7b4 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010cb8:	2000      	movs	r0, #0
 8010cba:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8010cbc:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8010cbe:	7020      	strb	r0, [r4, #0]
}
 8010cc0:	bd70      	pop	{r4, r5, r6, pc}

08010cc2 <HAL_SPI_Transmit>:
{
 8010cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cc4:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8010cc6:	0003      	movs	r3, r0
{
 8010cc8:	b085      	sub	sp, #20
 8010cca:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hspi);
 8010ccc:	335c      	adds	r3, #92	; 0x5c
{
 8010cce:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8010cd0:	781a      	ldrb	r2, [r3, #0]
{
 8010cd2:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8010cd4:	2702      	movs	r7, #2
 8010cd6:	2a01      	cmp	r2, #1
 8010cd8:	d100      	bne.n	8010cdc <HAL_SPI_Transmit+0x1a>
 8010cda:	e085      	b.n	8010de8 <HAL_SPI_Transmit+0x126>
 8010cdc:	2201      	movs	r2, #1
 8010cde:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010ce0:	f7fd ff3c 	bl	800eb5c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8010ce4:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8010ce6:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8010ce8:	335d      	adds	r3, #93	; 0x5d
 8010cea:	781a      	ldrb	r2, [r3, #0]
 8010cec:	b2d7      	uxtb	r7, r2
 8010cee:	2a01      	cmp	r2, #1
 8010cf0:	d000      	beq.n	8010cf4 <HAL_SPI_Transmit+0x32>
 8010cf2:	e0af      	b.n	8010e54 <HAL_SPI_Transmit+0x192>
  if ((pData == NULL) || (Size == 0U))
 8010cf4:	9a00      	ldr	r2, [sp, #0]
 8010cf6:	2a00      	cmp	r2, #0
 8010cf8:	d073      	beq.n	8010de2 <HAL_SPI_Transmit+0x120>
 8010cfa:	2e00      	cmp	r6, #0
 8010cfc:	d071      	beq.n	8010de2 <HAL_SPI_Transmit+0x120>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010cfe:	2203      	movs	r2, #3
 8010d00:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010d02:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010d04:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010d06:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010d08:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010d0a:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010d0c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferSize  = Size;
 8010d0e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8010d10:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8010d12:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8010d14:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010d16:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010d18:	2280      	movs	r2, #128	; 0x80
 8010d1a:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8010d1c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8010d1e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010d20:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8010d22:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010d24:	4291      	cmp	r1, r2
 8010d26:	d108      	bne.n	8010d3a <HAL_SPI_Transmit+0x78>
    __HAL_SPI_DISABLE(hspi);
 8010d28:	2140      	movs	r1, #64	; 0x40
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	438a      	bics	r2, r1
 8010d2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010d30:	2280      	movs	r2, #128	; 0x80
 8010d32:	6819      	ldr	r1, [r3, #0]
 8010d34:	01d2      	lsls	r2, r2, #7
 8010d36:	430a      	orrs	r2, r1
 8010d38:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010d3a:	2240      	movs	r2, #64	; 0x40
 8010d3c:	6819      	ldr	r1, [r3, #0]
 8010d3e:	4211      	tst	r1, r2
 8010d40:	d102      	bne.n	8010d48 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8010d42:	6819      	ldr	r1, [r3, #0]
 8010d44:	430a      	orrs	r2, r1
 8010d46:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010d48:	21e0      	movs	r1, #224	; 0xe0
 8010d4a:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010d4c:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010d4e:	00c9      	lsls	r1, r1, #3
 8010d50:	4288      	cmp	r0, r1
 8010d52:	d94f      	bls.n	8010df4 <HAL_SPI_Transmit+0x132>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010d54:	2a00      	cmp	r2, #0
 8010d56:	d001      	beq.n	8010d5c <HAL_SPI_Transmit+0x9a>
 8010d58:	2e01      	cmp	r6, #1
 8010d5a:	d109      	bne.n	8010d70 <HAL_SPI_Transmit+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010d5c:	9a00      	ldr	r2, [sp, #0]
 8010d5e:	8812      	ldrh	r2, [r2, #0]
 8010d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d62:	9b00      	ldr	r3, [sp, #0]
 8010d64:	1c99      	adds	r1, r3, #2
      hspi->TxXferCount--;
 8010d66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d68:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010d70:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8010d72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d119      	bne.n	8010dac <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010d78:	0029      	movs	r1, r5
 8010d7a:	0020      	movs	r0, r4
 8010d7c:	9a01      	ldr	r2, [sp, #4]
 8010d7e:	f7ff feee 	bl	8010b5e <SPI_EndRxTxTransaction>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d163      	bne.n	8010e4e <HAL_SPI_Transmit+0x18c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010d86:	68a3      	ldr	r3, [r4, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d106      	bne.n	8010d9a <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d8c:	9303      	str	r3, [sp, #12]
 8010d8e:	6823      	ldr	r3, [r4, #0]
 8010d90:	68da      	ldr	r2, [r3, #12]
 8010d92:	9203      	str	r2, [sp, #12]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	9303      	str	r3, [sp, #12]
 8010d98:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010d9c:	2a00      	cmp	r2, #0
 8010d9e:	d120      	bne.n	8010de2 <HAL_SPI_Transmit+0x120>
    hspi->State = HAL_SPI_STATE_READY;
 8010da0:	0023      	movs	r3, r4
 8010da2:	2101      	movs	r1, #1
 8010da4:	335d      	adds	r3, #93	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010da6:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8010da8:	7019      	strb	r1, [r3, #0]
 8010daa:	e01a      	b.n	8010de2 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010dac:	6822      	ldr	r2, [r4, #0]
 8010dae:	6893      	ldr	r3, [r2, #8]
 8010db0:	4233      	tst	r3, r6
 8010db2:	d009      	beq.n	8010dc8 <HAL_SPI_Transmit+0x106>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010db4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010db6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010db8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010dba:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010dbc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8010dbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8010dc6:	e7d4      	b.n	8010d72 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010dc8:	f7fd fec8 	bl	800eb5c <HAL_GetTick>
 8010dcc:	9b01      	ldr	r3, [sp, #4]
 8010dce:	1ac0      	subs	r0, r0, r3
 8010dd0:	42a8      	cmp	r0, r5
 8010dd2:	d30c      	bcc.n	8010dee <HAL_SPI_Transmit+0x12c>
 8010dd4:	1c6b      	adds	r3, r5, #1
 8010dd6:	d0cc      	beq.n	8010d72 <HAL_SPI_Transmit+0xb0>
          hspi->State = HAL_SPI_STATE_READY;
 8010dd8:	0023      	movs	r3, r4
 8010dda:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8010ddc:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8010dde:	335d      	adds	r3, #93	; 0x5d
 8010de0:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8010de2:	2300      	movs	r3, #0
 8010de4:	345c      	adds	r4, #92	; 0x5c
 8010de6:	7023      	strb	r3, [r4, #0]
}
 8010de8:	0038      	movs	r0, r7
 8010dea:	b005      	add	sp, #20
 8010dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010dee:	2d00      	cmp	r5, #0
 8010df0:	d1bf      	bne.n	8010d72 <HAL_SPI_Transmit+0xb0>
 8010df2:	e7f1      	b.n	8010dd8 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010df4:	2a00      	cmp	r2, #0
 8010df6:	d001      	beq.n	8010dfc <HAL_SPI_Transmit+0x13a>
 8010df8:	2e01      	cmp	r6, #1
 8010dfa:	d109      	bne.n	8010e10 <HAL_SPI_Transmit+0x14e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010dfc:	9a00      	ldr	r2, [sp, #0]
 8010dfe:	7812      	ldrb	r2, [r2, #0]
 8010e00:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e04:	3301      	adds	r3, #1
 8010e06:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8010e08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010e10:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8010e12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d0af      	beq.n	8010d78 <HAL_SPI_Transmit+0xb6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010e18:	6823      	ldr	r3, [r4, #0]
 8010e1a:	689a      	ldr	r2, [r3, #8]
 8010e1c:	4232      	tst	r2, r6
 8010e1e:	d00a      	beq.n	8010e36 <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010e20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e22:	7812      	ldrb	r2, [r2, #0]
 8010e24:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e28:	3301      	adds	r3, #1
 8010e2a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8010e2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8010e34:	e7ed      	b.n	8010e12 <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e36:	f7fd fe91 	bl	800eb5c <HAL_GetTick>
 8010e3a:	9b01      	ldr	r3, [sp, #4]
 8010e3c:	1ac0      	subs	r0, r0, r3
 8010e3e:	42a8      	cmp	r0, r5
 8010e40:	d302      	bcc.n	8010e48 <HAL_SPI_Transmit+0x186>
 8010e42:	1c6b      	adds	r3, r5, #1
 8010e44:	d0e5      	beq.n	8010e12 <HAL_SPI_Transmit+0x150>
 8010e46:	e7c7      	b.n	8010dd8 <HAL_SPI_Transmit+0x116>
 8010e48:	2d00      	cmp	r5, #0
 8010e4a:	d1e2      	bne.n	8010e12 <HAL_SPI_Transmit+0x150>
 8010e4c:	e7c4      	b.n	8010dd8 <HAL_SPI_Transmit+0x116>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010e4e:	2320      	movs	r3, #32
 8010e50:	6623      	str	r3, [r4, #96]	; 0x60
 8010e52:	e798      	b.n	8010d86 <HAL_SPI_Transmit+0xc4>
    errorcode = HAL_BUSY;
 8010e54:	2702      	movs	r7, #2
 8010e56:	e7c4      	b.n	8010de2 <HAL_SPI_Transmit+0x120>

08010e58 <HAL_SPI_TransmitReceive>:
{
 8010e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e5a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8010e5c:	0003      	movs	r3, r0
 8010e5e:	335c      	adds	r3, #92	; 0x5c
{
 8010e60:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8010e62:	781a      	ldrb	r2, [r3, #0]
{
 8010e64:	0004      	movs	r4, r0
 8010e66:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8010e68:	2002      	movs	r0, #2
 8010e6a:	2a01      	cmp	r2, #1
 8010e6c:	d01b      	beq.n	8010ea6 <HAL_SPI_TransmitReceive+0x4e>
 8010e6e:	2201      	movs	r2, #1
 8010e70:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010e72:	f7fd fe73 	bl	800eb5c <HAL_GetTick>
  tmp_state           = hspi->State;
 8010e76:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8010e78:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8010e7a:	335d      	adds	r3, #93	; 0x5d
 8010e7c:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8010e7e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8010e80:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d009      	beq.n	8010e9a <HAL_SPI_TransmitReceive+0x42>
 8010e86:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8010e88:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010e8a:	005b      	lsls	r3, r3, #1
 8010e8c:	4299      	cmp	r1, r3
 8010e8e:	d107      	bne.n	8010ea0 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010e90:	68a3      	ldr	r3, [r4, #8]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d104      	bne.n	8010ea0 <HAL_SPI_TransmitReceive+0x48>
 8010e96:	2a04      	cmp	r2, #4
 8010e98:	d102      	bne.n	8010ea0 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010e9a:	2d00      	cmp	r5, #0
 8010e9c:	d104      	bne.n	8010ea8 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8010e9e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	345c      	adds	r4, #92	; 0x5c
 8010ea4:	7023      	strb	r3, [r4, #0]
}
 8010ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010ea8:	2f00      	cmp	r7, #0
 8010eaa:	d0f8      	beq.n	8010e9e <HAL_SPI_TransmitReceive+0x46>
 8010eac:	2e00      	cmp	r6, #0
 8010eae:	d0f6      	beq.n	8010e9e <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010eb0:	0023      	movs	r3, r4
 8010eb2:	335d      	adds	r3, #93	; 0x5d
 8010eb4:	781a      	ldrb	r2, [r3, #0]
 8010eb6:	2a04      	cmp	r2, #4
 8010eb8:	d001      	beq.n	8010ebe <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010eba:	2205      	movs	r2, #5
 8010ebc:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8010ebe:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010ec0:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8010ec2:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010ec4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010ec6:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8010ec8:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010eca:	1da2      	adds	r2, r4, #6
 8010ecc:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010ece:	22e0      	movs	r2, #224	; 0xe0
 8010ed0:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8010ed2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010ed4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010ed6:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010ed8:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8010eda:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8010edc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010ede:	00d2      	lsls	r2, r2, #3
 8010ee0:	4290      	cmp	r0, r2
 8010ee2:	d935      	bls.n	8010f50 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010ee4:	685a      	ldr	r2, [r3, #4]
 8010ee6:	4f62      	ldr	r7, [pc, #392]	; (8011070 <HAL_SPI_TransmitReceive+0x218>)
 8010ee8:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010eea:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010eec:	2240      	movs	r2, #64	; 0x40
 8010eee:	681f      	ldr	r7, [r3, #0]
 8010ef0:	4217      	tst	r7, r2
 8010ef2:	d102      	bne.n	8010efa <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8010ef4:	681f      	ldr	r7, [r3, #0]
 8010ef6:	433a      	orrs	r2, r7
 8010ef8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010efa:	22e0      	movs	r2, #224	; 0xe0
 8010efc:	00d2      	lsls	r2, r2, #3
 8010efe:	4290      	cmp	r0, r2
 8010f00:	d961      	bls.n	8010fc6 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010f02:	2900      	cmp	r1, #0
 8010f04:	d001      	beq.n	8010f0a <HAL_SPI_TransmitReceive+0xb2>
 8010f06:	2e01      	cmp	r6, #1
 8010f08:	d107      	bne.n	8010f1a <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f0a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f0c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f0e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8010f10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f12:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8010f14:	3b01      	subs	r3, #1
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8010f1a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010f1c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010f1e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010f20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d119      	bne.n	8010f5a <HAL_SPI_TransmitReceive+0x102>
 8010f26:	0023      	movs	r3, r4
 8010f28:	3308      	adds	r3, #8
 8010f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d114      	bne.n	8010f5a <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010f30:	0020      	movs	r0, r4
 8010f32:	9a01      	ldr	r2, [sp, #4]
 8010f34:	9908      	ldr	r1, [sp, #32]
 8010f36:	f7ff fe12 	bl	8010b5e <SPI_EndRxTxTransaction>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d000      	beq.n	8010f40 <HAL_SPI_TransmitReceive+0xe8>
 8010f3e:	e093      	b.n	8011068 <HAL_SPI_TransmitReceive+0x210>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010f40:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d1ab      	bne.n	8010e9e <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8010f46:	0023      	movs	r3, r4
 8010f48:	2201      	movs	r2, #1
 8010f4a:	335d      	adds	r3, #93	; 0x5d
 8010f4c:	701a      	strb	r2, [r3, #0]
 8010f4e:	e7a7      	b.n	8010ea0 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010f50:	2280      	movs	r2, #128	; 0x80
 8010f52:	685f      	ldr	r7, [r3, #4]
 8010f54:	0152      	lsls	r2, r2, #5
 8010f56:	433a      	orrs	r2, r7
 8010f58:	e7c7      	b.n	8010eea <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010f5a:	6820      	ldr	r0, [r4, #0]
 8010f5c:	6883      	ldr	r3, [r0, #8]
 8010f5e:	423b      	tst	r3, r7
 8010f60:	d00e      	beq.n	8010f80 <HAL_SPI_TransmitReceive+0x128>
 8010f62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00b      	beq.n	8010f80 <HAL_SPI_TransmitReceive+0x128>
 8010f68:	2d01      	cmp	r5, #1
 8010f6a:	d109      	bne.n	8010f80 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 0U;
 8010f6c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f70:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f72:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f74:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f76:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8010f78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010f7a:	3b01      	subs	r3, #1
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010f80:	6883      	ldr	r3, [r0, #8]
 8010f82:	0019      	movs	r1, r3
 8010f84:	4031      	ands	r1, r6
 8010f86:	4233      	tst	r3, r6
 8010f88:	d00e      	beq.n	8010fa8 <HAL_SPI_TransmitReceive+0x150>
 8010f8a:	0022      	movs	r2, r4
 8010f8c:	3208      	adds	r2, #8
 8010f8e:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d009      	beq.n	8010fa8 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8010f94:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010f96:	68c0      	ldr	r0, [r0, #12]
 8010f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f9a:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010f9c:	3302      	adds	r3, #2
 8010f9e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8010fa0:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010fa8:	f7fd fdd8 	bl	800eb5c <HAL_GetTick>
 8010fac:	9b01      	ldr	r3, [sp, #4]
 8010fae:	1ac0      	subs	r0, r0, r3
 8010fb0:	9b08      	ldr	r3, [sp, #32]
 8010fb2:	4298      	cmp	r0, r3
 8010fb4:	d3b4      	bcc.n	8010f20 <HAL_SPI_TransmitReceive+0xc8>
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	d0b2      	beq.n	8010f20 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8010fba:	0023      	movs	r3, r4
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	335d      	adds	r3, #93	; 0x5d
        errorcode = HAL_TIMEOUT;
 8010fc0:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8010fc2:	701a      	strb	r2, [r3, #0]
        goto error;
 8010fc4:	e76c      	b.n	8010ea0 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010fc6:	2900      	cmp	r1, #0
 8010fc8:	d001      	beq.n	8010fce <HAL_SPI_TransmitReceive+0x176>
 8010fca:	2e01      	cmp	r6, #1
 8010fcc:	d108      	bne.n	8010fe0 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010fce:	782a      	ldrb	r2, [r5, #0]
 8010fd0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8010fd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010fda:	3b01      	subs	r3, #1
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8010fe0:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010fe2:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010fe4:	002e      	movs	r6, r5
 8010fe6:	e032      	b.n	801104e <HAL_SPI_TransmitReceive+0x1f6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	689a      	ldr	r2, [r3, #8]
 8010fec:	423a      	tst	r2, r7
 8010fee:	d00f      	beq.n	8011010 <HAL_SPI_TransmitReceive+0x1b8>
 8010ff0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010ff2:	2a00      	cmp	r2, #0
 8010ff4:	d00c      	beq.n	8011010 <HAL_SPI_TransmitReceive+0x1b8>
 8010ff6:	2d01      	cmp	r5, #1
 8010ff8:	d10a      	bne.n	8011010 <HAL_SPI_TransmitReceive+0x1b8>
        txallowed = 0U;
 8010ffa:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010ffc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010ffe:	7812      	ldrb	r2, [r2, #0]
 8011000:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8011002:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011004:	3301      	adds	r3, #1
 8011006:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8011008:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801100a:	3b01      	subs	r3, #1
 801100c:	b29b      	uxth	r3, r3
 801100e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011010:	6823      	ldr	r3, [r4, #0]
 8011012:	689a      	ldr	r2, [r3, #8]
 8011014:	0011      	movs	r1, r2
 8011016:	4031      	ands	r1, r6
 8011018:	4232      	tst	r2, r6
 801101a:	d00f      	beq.n	801103c <HAL_SPI_TransmitReceive+0x1e4>
 801101c:	0022      	movs	r2, r4
 801101e:	3208      	adds	r2, #8
 8011020:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 8011022:	2800      	cmp	r0, #0
 8011024:	d00a      	beq.n	801103c <HAL_SPI_TransmitReceive+0x1e4>
        txallowed = 1U;
 8011026:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011028:	7b1b      	ldrb	r3, [r3, #12]
 801102a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801102c:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 801102e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011030:	3301      	adds	r3, #1
 8011032:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8011034:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8011036:	3b01      	subs	r3, #1
 8011038:	b29b      	uxth	r3, r3
 801103a:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801103c:	f7fd fd8e 	bl	800eb5c <HAL_GetTick>
 8011040:	9b01      	ldr	r3, [sp, #4]
 8011042:	1ac0      	subs	r0, r0, r3
 8011044:	9b08      	ldr	r3, [sp, #32]
 8011046:	4298      	cmp	r0, r3
 8011048:	d30a      	bcc.n	8011060 <HAL_SPI_TransmitReceive+0x208>
 801104a:	3301      	adds	r3, #1
 801104c:	d1b5      	bne.n	8010fba <HAL_SPI_TransmitReceive+0x162>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801104e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8011050:	2b00      	cmp	r3, #0
 8011052:	d1c9      	bne.n	8010fe8 <HAL_SPI_TransmitReceive+0x190>
 8011054:	0023      	movs	r3, r4
 8011056:	3308      	adds	r3, #8
 8011058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1c4      	bne.n	8010fe8 <HAL_SPI_TransmitReceive+0x190>
 801105e:	e767      	b.n	8010f30 <HAL_SPI_TransmitReceive+0xd8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011060:	9b08      	ldr	r3, [sp, #32]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1f3      	bne.n	801104e <HAL_SPI_TransmitReceive+0x1f6>
 8011066:	e7a8      	b.n	8010fba <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011068:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 801106a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801106c:	6623      	str	r3, [r4, #96]	; 0x60
 801106e:	e767      	b.n	8010f40 <HAL_SPI_TransmitReceive+0xe8>
 8011070:	ffffefff 	.word	0xffffefff

08011074 <HAL_SPI_Receive>:
{
 8011074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011076:	001d      	movs	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8011078:	0003      	movs	r3, r0
{
 801107a:	b087      	sub	sp, #28
  if (hspi->State != HAL_SPI_STATE_READY)
 801107c:	335d      	adds	r3, #93	; 0x5d
{
 801107e:	9204      	str	r2, [sp, #16]
  if (hspi->State != HAL_SPI_STATE_READY)
 8011080:	9303      	str	r3, [sp, #12]
 8011082:	781b      	ldrb	r3, [r3, #0]
{
 8011084:	0004      	movs	r4, r0
 8011086:	000f      	movs	r7, r1
  if (hspi->State != HAL_SPI_STATE_READY)
 8011088:	b2de      	uxtb	r6, r3
 801108a:	2b01      	cmp	r3, #1
 801108c:	d000      	beq.n	8011090 <HAL_SPI_Receive+0x1c>
 801108e:	e0b1      	b.n	80111f4 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011090:	3304      	adds	r3, #4
 8011092:	6842      	ldr	r2, [r0, #4]
 8011094:	33ff      	adds	r3, #255	; 0xff
 8011096:	429a      	cmp	r2, r3
 8011098:	d10e      	bne.n	80110b8 <HAL_SPI_Receive+0x44>
 801109a:	6883      	ldr	r3, [r0, #8]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d10b      	bne.n	80110b8 <HAL_SPI_Receive+0x44>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80110a0:	9a03      	ldr	r2, [sp, #12]
 80110a2:	3304      	adds	r3, #4
 80110a4:	7013      	strb	r3, [r2, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80110a6:	000a      	movs	r2, r1
 80110a8:	9b04      	ldr	r3, [sp, #16]
 80110aa:	9500      	str	r5, [sp, #0]
 80110ac:	f7ff fed4 	bl	8010e58 <HAL_SPI_TransmitReceive>
 80110b0:	0006      	movs	r6, r0
}
 80110b2:	0030      	movs	r0, r6
 80110b4:	b007      	add	sp, #28
 80110b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80110b8:	0023      	movs	r3, r4
 80110ba:	335c      	adds	r3, #92	; 0x5c
 80110bc:	781a      	ldrb	r2, [r3, #0]
 80110be:	2a01      	cmp	r2, #1
 80110c0:	d100      	bne.n	80110c4 <HAL_SPI_Receive+0x50>
 80110c2:	e099      	b.n	80111f8 <HAL_SPI_Receive+0x184>
 80110c4:	2201      	movs	r2, #1
 80110c6:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80110c8:	f7fd fd48 	bl	800eb5c <HAL_GetTick>
 80110cc:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 80110ce:	2f00      	cmp	r7, #0
 80110d0:	d07a      	beq.n	80111c8 <HAL_SPI_Receive+0x154>
 80110d2:	9b04      	ldr	r3, [sp, #16]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d077      	beq.n	80111c8 <HAL_SPI_Receive+0x154>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80110d8:	2304      	movs	r3, #4
 80110da:	9a03      	ldr	r2, [sp, #12]
  hspi->RxXferSize  = Size;
 80110dc:	9904      	ldr	r1, [sp, #16]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80110de:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80110e0:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 80110e2:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80110e4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80110e6:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80110e8:	3202      	adds	r2, #2
  hspi->RxXferSize  = Size;
 80110ea:	8791      	strh	r1, [r2, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80110ec:	87d1      	strh	r1, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80110ee:	22e0      	movs	r2, #224	; 0xe0
 80110f0:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80110f2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80110f4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80110f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80110f8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80110fa:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80110fc:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80110fe:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011100:	4291      	cmp	r1, r2
 8011102:	d92f      	bls.n	8011164 <HAL_SPI_Receive+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011104:	685a      	ldr	r2, [r3, #4]
 8011106:	483d      	ldr	r0, [pc, #244]	; (80111fc <HAL_SPI_Receive+0x188>)
 8011108:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801110a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801110c:	2280      	movs	r2, #128	; 0x80
 801110e:	68a0      	ldr	r0, [r4, #8]
 8011110:	0212      	lsls	r2, r2, #8
 8011112:	4290      	cmp	r0, r2
 8011114:	d107      	bne.n	8011126 <HAL_SPI_Receive+0xb2>
    __HAL_SPI_DISABLE(hspi);
 8011116:	2040      	movs	r0, #64	; 0x40
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	4382      	bics	r2, r0
 801111c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	4837      	ldr	r0, [pc, #220]	; (8011200 <HAL_SPI_Receive+0x18c>)
 8011122:	4002      	ands	r2, r0
 8011124:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011126:	2240      	movs	r2, #64	; 0x40
 8011128:	6818      	ldr	r0, [r3, #0]
 801112a:	4210      	tst	r0, r2
 801112c:	d102      	bne.n	8011134 <HAL_SPI_Receive+0xc0>
    __HAL_SPI_ENABLE(hspi);
 801112e:	6818      	ldr	r0, [r3, #0]
 8011130:	4302      	orrs	r2, r0
 8011132:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011134:	23e0      	movs	r3, #224	; 0xe0
 8011136:	0027      	movs	r7, r4
 8011138:	00db      	lsls	r3, r3, #3
 801113a:	3708      	adds	r7, #8
 801113c:	4299      	cmp	r1, r3
 801113e:	d925      	bls.n	801118c <HAL_SPI_Receive+0x118>
    while (hspi->RxXferCount > 0U)
 8011140:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011142:	2b00      	cmp	r3, #0
 8011144:	d025      	beq.n	8011192 <HAL_SPI_Receive+0x11e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011146:	2101      	movs	r1, #1
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	689a      	ldr	r2, [r3, #8]
 801114c:	420a      	tst	r2, r1
 801114e:	d042      	beq.n	80111d6 <HAL_SPI_Receive+0x162>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011150:	68da      	ldr	r2, [r3, #12]
 8011152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011154:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011156:	3302      	adds	r3, #2
 8011158:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801115a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801115c:	3b01      	subs	r3, #1
 801115e:	b29b      	uxth	r3, r3
 8011160:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011162:	e7ed      	b.n	8011140 <HAL_SPI_Receive+0xcc>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011164:	2280      	movs	r2, #128	; 0x80
 8011166:	6858      	ldr	r0, [r3, #4]
 8011168:	0152      	lsls	r2, r2, #5
 801116a:	4302      	orrs	r2, r0
 801116c:	e7cd      	b.n	801110a <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801116e:	2101      	movs	r1, #1
 8011170:	6823      	ldr	r3, [r4, #0]
 8011172:	689a      	ldr	r2, [r3, #8]
 8011174:	420a      	tst	r2, r1
 8011176:	d01b      	beq.n	80111b0 <HAL_SPI_Receive+0x13c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011178:	7b1b      	ldrb	r3, [r3, #12]
 801117a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801117c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801117e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011180:	185b      	adds	r3, r3, r1
 8011182:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8011184:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011186:	3b01      	subs	r3, #1
 8011188:	b29b      	uxth	r3, r3
 801118a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 801118c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801118e:	2b00      	cmp	r3, #0
 8011190:	d1ed      	bne.n	801116e <HAL_SPI_Receive+0xfa>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011192:	0029      	movs	r1, r5
 8011194:	0020      	movs	r0, r4
 8011196:	9a05      	ldr	r2, [sp, #20]
 8011198:	f7ff fca4 	bl	8010ae4 <SPI_EndRxTransaction>
 801119c:	2800      	cmp	r0, #0
 801119e:	d126      	bne.n	80111ee <HAL_SPI_Receive+0x17a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80111a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d110      	bne.n	80111c8 <HAL_SPI_Receive+0x154>
    hspi->State = HAL_SPI_STATE_READY;
 80111a6:	2201      	movs	r2, #1
 80111a8:	9903      	ldr	r1, [sp, #12]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80111aa:	001e      	movs	r6, r3
    hspi->State = HAL_SPI_STATE_READY;
 80111ac:	700a      	strb	r2, [r1, #0]
 80111ae:	e00b      	b.n	80111c8 <HAL_SPI_Receive+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111b0:	f7fd fcd4 	bl	800eb5c <HAL_GetTick>
 80111b4:	9b05      	ldr	r3, [sp, #20]
 80111b6:	1ac0      	subs	r0, r0, r3
 80111b8:	42a8      	cmp	r0, r5
 80111ba:	d309      	bcc.n	80111d0 <HAL_SPI_Receive+0x15c>
 80111bc:	1c6b      	adds	r3, r5, #1
 80111be:	d0e5      	beq.n	801118c <HAL_SPI_Receive+0x118>
          hspi->State = HAL_SPI_STATE_READY;
 80111c0:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 80111c2:	2603      	movs	r6, #3
          hspi->State = HAL_SPI_STATE_READY;
 80111c4:	9a03      	ldr	r2, [sp, #12]
 80111c6:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80111c8:	2300      	movs	r3, #0
 80111ca:	345c      	adds	r4, #92	; 0x5c
 80111cc:	7023      	strb	r3, [r4, #0]
  return errorcode;
 80111ce:	e770      	b.n	80110b2 <HAL_SPI_Receive+0x3e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111d0:	2d00      	cmp	r5, #0
 80111d2:	d1db      	bne.n	801118c <HAL_SPI_Receive+0x118>
 80111d4:	e7f4      	b.n	80111c0 <HAL_SPI_Receive+0x14c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111d6:	f7fd fcc1 	bl	800eb5c <HAL_GetTick>
 80111da:	9b05      	ldr	r3, [sp, #20]
 80111dc:	1ac0      	subs	r0, r0, r3
 80111de:	42a8      	cmp	r0, r5
 80111e0:	d302      	bcc.n	80111e8 <HAL_SPI_Receive+0x174>
 80111e2:	1c6b      	adds	r3, r5, #1
 80111e4:	d0ac      	beq.n	8011140 <HAL_SPI_Receive+0xcc>
 80111e6:	e7eb      	b.n	80111c0 <HAL_SPI_Receive+0x14c>
 80111e8:	2d00      	cmp	r5, #0
 80111ea:	d1a9      	bne.n	8011140 <HAL_SPI_Receive+0xcc>
 80111ec:	e7e8      	b.n	80111c0 <HAL_SPI_Receive+0x14c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80111ee:	2320      	movs	r3, #32
 80111f0:	6623      	str	r3, [r4, #96]	; 0x60
 80111f2:	e7d5      	b.n	80111a0 <HAL_SPI_Receive+0x12c>
    errorcode = HAL_BUSY;
 80111f4:	2602      	movs	r6, #2
 80111f6:	e7e7      	b.n	80111c8 <HAL_SPI_Receive+0x154>
  __HAL_LOCK(hspi);
 80111f8:	2602      	movs	r6, #2
 80111fa:	e75a      	b.n	80110b2 <HAL_SPI_Receive+0x3e>
 80111fc:	ffffefff 	.word	0xffffefff
 8011200:	ffffbfff 	.word	0xffffbfff

08011204 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011204:	2201      	movs	r2, #1
 8011206:	6a03      	ldr	r3, [r0, #32]
{
 8011208:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801120a:	4393      	bics	r3, r2
 801120c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801120e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011210:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011212:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011214:	3272      	adds	r2, #114	; 0x72
 8011216:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011218:	680a      	ldr	r2, [r1, #0]
 801121a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801121c:	2202      	movs	r2, #2
 801121e:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011220:	688a      	ldr	r2, [r1, #8]
 8011222:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011224:	4a14      	ldr	r2, [pc, #80]	; (8011278 <TIM_OC1_SetConfig+0x74>)
 8011226:	4290      	cmp	r0, r2
 8011228:	d008      	beq.n	801123c <TIM_OC1_SetConfig+0x38>
 801122a:	4e14      	ldr	r6, [pc, #80]	; (801127c <TIM_OC1_SetConfig+0x78>)
 801122c:	42b0      	cmp	r0, r6
 801122e:	d005      	beq.n	801123c <TIM_OC1_SetConfig+0x38>
 8011230:	4e13      	ldr	r6, [pc, #76]	; (8011280 <TIM_OC1_SetConfig+0x7c>)
 8011232:	42b0      	cmp	r0, r6
 8011234:	d002      	beq.n	801123c <TIM_OC1_SetConfig+0x38>
 8011236:	4e13      	ldr	r6, [pc, #76]	; (8011284 <TIM_OC1_SetConfig+0x80>)
 8011238:	42b0      	cmp	r0, r6
 801123a:	d116      	bne.n	801126a <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801123c:	2608      	movs	r6, #8
 801123e:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011240:	68ce      	ldr	r6, [r1, #12]
 8011242:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011244:	2604      	movs	r6, #4
 8011246:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011248:	4290      	cmp	r0, r2
 801124a:	d008      	beq.n	801125e <TIM_OC1_SetConfig+0x5a>
 801124c:	4a0b      	ldr	r2, [pc, #44]	; (801127c <TIM_OC1_SetConfig+0x78>)
 801124e:	4290      	cmp	r0, r2
 8011250:	d005      	beq.n	801125e <TIM_OC1_SetConfig+0x5a>
 8011252:	4a0b      	ldr	r2, [pc, #44]	; (8011280 <TIM_OC1_SetConfig+0x7c>)
 8011254:	4290      	cmp	r0, r2
 8011256:	d002      	beq.n	801125e <TIM_OC1_SetConfig+0x5a>
 8011258:	4a0a      	ldr	r2, [pc, #40]	; (8011284 <TIM_OC1_SetConfig+0x80>)
 801125a:	4290      	cmp	r0, r2
 801125c:	d105      	bne.n	801126a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801125e:	4a0a      	ldr	r2, [pc, #40]	; (8011288 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011260:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011262:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8011264:	694c      	ldr	r4, [r1, #20]
 8011266:	4334      	orrs	r4, r6
 8011268:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801126a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801126c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 801126e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8011270:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011272:	6203      	str	r3, [r0, #32]
}
 8011274:	bd70      	pop	{r4, r5, r6, pc}
 8011276:	46c0      	nop			; (mov r8, r8)
 8011278:	40012c00 	.word	0x40012c00
 801127c:	40014000 	.word	0x40014000
 8011280:	40014400 	.word	0x40014400
 8011284:	40014800 	.word	0x40014800
 8011288:	fffffcff 	.word	0xfffffcff

0801128c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801128c:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801128e:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011290:	6a03      	ldr	r3, [r0, #32]
 8011292:	4a17      	ldr	r2, [pc, #92]	; (80112f0 <TIM_OC3_SetConfig+0x64>)
 8011294:	4013      	ands	r3, r2
 8011296:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8011298:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801129a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 801129c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801129e:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112a0:	680d      	ldr	r5, [r1, #0]
 80112a2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80112a4:	4d13      	ldr	r5, [pc, #76]	; (80112f4 <TIM_OC3_SetConfig+0x68>)
 80112a6:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80112a8:	688d      	ldr	r5, [r1, #8]
 80112aa:	022d      	lsls	r5, r5, #8
 80112ac:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80112ae:	4d12      	ldr	r5, [pc, #72]	; (80112f8 <TIM_OC3_SetConfig+0x6c>)
 80112b0:	42a8      	cmp	r0, r5
 80112b2:	d10e      	bne.n	80112d2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80112b4:	4d11      	ldr	r5, [pc, #68]	; (80112fc <TIM_OC3_SetConfig+0x70>)
 80112b6:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80112b8:	68cb      	ldr	r3, [r1, #12]
 80112ba:	021b      	lsls	r3, r3, #8
 80112bc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80112be:	4d10      	ldr	r5, [pc, #64]	; (8011300 <TIM_OC3_SetConfig+0x74>)
 80112c0:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80112c2:	4d10      	ldr	r5, [pc, #64]	; (8011304 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80112c4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80112c6:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80112c8:	698a      	ldr	r2, [r1, #24]
 80112ca:	4332      	orrs	r2, r6
 80112cc:	0112      	lsls	r2, r2, #4
 80112ce:	432a      	orrs	r2, r5
 80112d0:	e008      	b.n	80112e4 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112d2:	4d0d      	ldr	r5, [pc, #52]	; (8011308 <TIM_OC3_SetConfig+0x7c>)
 80112d4:	42a8      	cmp	r0, r5
 80112d6:	d0f4      	beq.n	80112c2 <TIM_OC3_SetConfig+0x36>
 80112d8:	4d0c      	ldr	r5, [pc, #48]	; (801130c <TIM_OC3_SetConfig+0x80>)
 80112da:	42a8      	cmp	r0, r5
 80112dc:	d0f1      	beq.n	80112c2 <TIM_OC3_SetConfig+0x36>
 80112de:	4d0c      	ldr	r5, [pc, #48]	; (8011310 <TIM_OC3_SetConfig+0x84>)
 80112e0:	42a8      	cmp	r0, r5
 80112e2:	d0ee      	beq.n	80112c2 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112e4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80112e6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80112e8:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80112ea:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112ec:	6203      	str	r3, [r0, #32]
}
 80112ee:	bd70      	pop	{r4, r5, r6, pc}
 80112f0:	fffffeff 	.word	0xfffffeff
 80112f4:	fffffdff 	.word	0xfffffdff
 80112f8:	40012c00 	.word	0x40012c00
 80112fc:	fffff7ff 	.word	0xfffff7ff
 8011300:	fffffbff 	.word	0xfffffbff
 8011304:	ffffcfff 	.word	0xffffcfff
 8011308:	40014000 	.word	0x40014000
 801130c:	40014400 	.word	0x40014400
 8011310:	40014800 	.word	0x40014800

08011314 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011314:	6a03      	ldr	r3, [r0, #32]
 8011316:	4a14      	ldr	r2, [pc, #80]	; (8011368 <TIM_OC4_SetConfig+0x54>)
{
 8011318:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801131a:	4013      	ands	r3, r2
 801131c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801131e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011320:	4c12      	ldr	r4, [pc, #72]	; (801136c <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8011322:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8011324:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011326:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011328:	680c      	ldr	r4, [r1, #0]
 801132a:	0224      	lsls	r4, r4, #8
 801132c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801132e:	4c10      	ldr	r4, [pc, #64]	; (8011370 <TIM_OC4_SetConfig+0x5c>)
 8011330:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011332:	688c      	ldr	r4, [r1, #8]
 8011334:	0324      	lsls	r4, r4, #12
 8011336:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011338:	4c0e      	ldr	r4, [pc, #56]	; (8011374 <TIM_OC4_SetConfig+0x60>)
 801133a:	42a0      	cmp	r0, r4
 801133c:	d008      	beq.n	8011350 <TIM_OC4_SetConfig+0x3c>
 801133e:	4c0e      	ldr	r4, [pc, #56]	; (8011378 <TIM_OC4_SetConfig+0x64>)
 8011340:	42a0      	cmp	r0, r4
 8011342:	d005      	beq.n	8011350 <TIM_OC4_SetConfig+0x3c>
 8011344:	4c0d      	ldr	r4, [pc, #52]	; (801137c <TIM_OC4_SetConfig+0x68>)
 8011346:	42a0      	cmp	r0, r4
 8011348:	d002      	beq.n	8011350 <TIM_OC4_SetConfig+0x3c>
 801134a:	4c0d      	ldr	r4, [pc, #52]	; (8011380 <TIM_OC4_SetConfig+0x6c>)
 801134c:	42a0      	cmp	r0, r4
 801134e:	d104      	bne.n	801135a <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011350:	4c0c      	ldr	r4, [pc, #48]	; (8011384 <TIM_OC4_SetConfig+0x70>)
 8011352:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011354:	694c      	ldr	r4, [r1, #20]
 8011356:	01a4      	lsls	r4, r4, #6
 8011358:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801135a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801135c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 801135e:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8011360:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011362:	6202      	str	r2, [r0, #32]
}
 8011364:	bd30      	pop	{r4, r5, pc}
 8011366:	46c0      	nop			; (mov r8, r8)
 8011368:	ffffefff 	.word	0xffffefff
 801136c:	ffff8cff 	.word	0xffff8cff
 8011370:	ffffdfff 	.word	0xffffdfff
 8011374:	40012c00 	.word	0x40012c00
 8011378:	40014000 	.word	0x40014000
 801137c:	40014400 	.word	0x40014400
 8011380:	40014800 	.word	0x40014800
 8011384:	ffffbfff 	.word	0xffffbfff

08011388 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8011388:	0002      	movs	r2, r0
{
 801138a:	0003      	movs	r3, r0
    return HAL_ERROR;
 801138c:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 801138e:	323d      	adds	r2, #61	; 0x3d
 8011390:	7811      	ldrb	r1, [r2, #0]
 8011392:	4281      	cmp	r1, r0
 8011394:	d119      	bne.n	80113ca <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8011396:	2102      	movs	r1, #2
 8011398:	7011      	strb	r1, [r2, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4a0e      	ldr	r2, [pc, #56]	; (80113d8 <HAL_TIM_Base_Start+0x50>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d009      	beq.n	80113b6 <HAL_TIM_Base_Start+0x2e>
 80113a2:	2280      	movs	r2, #128	; 0x80
 80113a4:	05d2      	lsls	r2, r2, #23
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d005      	beq.n	80113b6 <HAL_TIM_Base_Start+0x2e>
 80113aa:	4a0c      	ldr	r2, [pc, #48]	; (80113dc <HAL_TIM_Base_Start+0x54>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d002      	beq.n	80113b6 <HAL_TIM_Base_Start+0x2e>
 80113b0:	4a0b      	ldr	r2, [pc, #44]	; (80113e0 <HAL_TIM_Base_Start+0x58>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d10a      	bne.n	80113cc <HAL_TIM_Base_Start+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80113b6:	2107      	movs	r1, #7
 80113b8:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80113ba:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80113bc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80113be:	2a06      	cmp	r2, #6
 80113c0:	d003      	beq.n	80113ca <HAL_TIM_Base_Start+0x42>
      __HAL_TIM_ENABLE(htim);
 80113c2:	2201      	movs	r2, #1
 80113c4:	6819      	ldr	r1, [r3, #0]
 80113c6:	430a      	orrs	r2, r1
 80113c8:	601a      	str	r2, [r3, #0]
}
 80113ca:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	4310      	orrs	r0, r2
 80113d0:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80113d2:	2000      	movs	r0, #0
 80113d4:	e7f9      	b.n	80113ca <HAL_TIM_Base_Start+0x42>
 80113d6:	46c0      	nop			; (mov r8, r8)
 80113d8:	40012c00 	.word	0x40012c00
 80113dc:	40000400 	.word	0x40000400
 80113e0:	40014000 	.word	0x40014000

080113e4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80113e4:	0002      	movs	r2, r0
{
 80113e6:	0003      	movs	r3, r0
    return HAL_ERROR;
 80113e8:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80113ea:	323d      	adds	r2, #61	; 0x3d
 80113ec:	7811      	ldrb	r1, [r2, #0]
 80113ee:	4281      	cmp	r1, r0
 80113f0:	d11c      	bne.n	801142c <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80113f2:	2102      	movs	r1, #2
 80113f4:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	68da      	ldr	r2, [r3, #12]
 80113fa:	4302      	orrs	r2, r0
 80113fc:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113fe:	4a0e      	ldr	r2, [pc, #56]	; (8011438 <HAL_TIM_Base_Start_IT+0x54>)
 8011400:	4293      	cmp	r3, r2
 8011402:	d009      	beq.n	8011418 <HAL_TIM_Base_Start_IT+0x34>
 8011404:	2280      	movs	r2, #128	; 0x80
 8011406:	05d2      	lsls	r2, r2, #23
 8011408:	4293      	cmp	r3, r2
 801140a:	d005      	beq.n	8011418 <HAL_TIM_Base_Start_IT+0x34>
 801140c:	4a0b      	ldr	r2, [pc, #44]	; (801143c <HAL_TIM_Base_Start_IT+0x58>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d002      	beq.n	8011418 <HAL_TIM_Base_Start_IT+0x34>
 8011412:	4a0b      	ldr	r2, [pc, #44]	; (8011440 <HAL_TIM_Base_Start_IT+0x5c>)
 8011414:	4293      	cmp	r3, r2
 8011416:	d10a      	bne.n	801142e <HAL_TIM_Base_Start_IT+0x4a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011418:	2107      	movs	r1, #7
 801141a:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 801141c:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801141e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011420:	2a06      	cmp	r2, #6
 8011422:	d003      	beq.n	801142c <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 8011424:	2201      	movs	r2, #1
 8011426:	6819      	ldr	r1, [r3, #0]
 8011428:	430a      	orrs	r2, r1
 801142a:	601a      	str	r2, [r3, #0]
}
 801142c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	4310      	orrs	r0, r2
 8011432:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8011434:	2000      	movs	r0, #0
 8011436:	e7f9      	b.n	801142c <HAL_TIM_Base_Start_IT+0x48>
 8011438:	40012c00 	.word	0x40012c00
 801143c:	40000400 	.word	0x40000400
 8011440:	40014000 	.word	0x40014000

08011444 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011444:	2101      	movs	r1, #1
 8011446:	6803      	ldr	r3, [r0, #0]
{
 8011448:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801144a:	68da      	ldr	r2, [r3, #12]
 801144c:	438a      	bics	r2, r1
 801144e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8011450:	6a1c      	ldr	r4, [r3, #32]
 8011452:	4a07      	ldr	r2, [pc, #28]	; (8011470 <HAL_TIM_Base_Stop_IT+0x2c>)
 8011454:	4214      	tst	r4, r2
 8011456:	d106      	bne.n	8011466 <HAL_TIM_Base_Stop_IT+0x22>
 8011458:	6a1c      	ldr	r4, [r3, #32]
 801145a:	4a06      	ldr	r2, [pc, #24]	; (8011474 <HAL_TIM_Base_Stop_IT+0x30>)
 801145c:	4214      	tst	r4, r2
 801145e:	d102      	bne.n	8011466 <HAL_TIM_Base_Stop_IT+0x22>
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	438a      	bics	r2, r1
 8011464:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8011466:	2301      	movs	r3, #1
 8011468:	303d      	adds	r0, #61	; 0x3d
 801146a:	7003      	strb	r3, [r0, #0]
}
 801146c:	2000      	movs	r0, #0
 801146e:	bd10      	pop	{r4, pc}
 8011470:	00001111 	.word	0x00001111
 8011474:	00000444 	.word	0x00000444

08011478 <HAL_TIM_OC_MspInit>:
 8011478:	4770      	bx	lr

0801147a <HAL_TIM_IC_MspInit>:
 801147a:	4770      	bx	lr

0801147c <HAL_TIM_OC_DelayElapsedCallback>:
 801147c:	4770      	bx	lr

0801147e <HAL_TIM_PWM_PulseFinishedCallback>:
 801147e:	4770      	bx	lr

08011480 <HAL_TIM_TriggerCallback>:
 8011480:	4770      	bx	lr

08011482 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011482:	2202      	movs	r2, #2
 8011484:	6803      	ldr	r3, [r0, #0]
{
 8011486:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011488:	6919      	ldr	r1, [r3, #16]
{
 801148a:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801148c:	4211      	tst	r1, r2
 801148e:	d00e      	beq.n	80114ae <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011490:	68d9      	ldr	r1, [r3, #12]
 8011492:	4211      	tst	r1, r2
 8011494:	d00b      	beq.n	80114ae <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011496:	3a05      	subs	r2, #5
 8011498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801149a:	3204      	adds	r2, #4
 801149c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801149e:	699b      	ldr	r3, [r3, #24]
 80114a0:	079b      	lsls	r3, r3, #30
 80114a2:	d100      	bne.n	80114a6 <HAL_TIM_IRQHandler+0x24>
 80114a4:	e079      	b.n	801159a <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 80114a6:	f7fd f8cf 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114aa:	2300      	movs	r3, #0
 80114ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80114ae:	2204      	movs	r2, #4
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	6919      	ldr	r1, [r3, #16]
 80114b4:	4211      	tst	r1, r2
 80114b6:	d010      	beq.n	80114da <HAL_TIM_IRQHandler+0x58>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80114b8:	68d9      	ldr	r1, [r3, #12]
 80114ba:	4211      	tst	r1, r2
 80114bc:	d00d      	beq.n	80114da <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80114be:	3a09      	subs	r2, #9
 80114c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80114c2:	3207      	adds	r2, #7
 80114c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80114c6:	699a      	ldr	r2, [r3, #24]
 80114c8:	23c0      	movs	r3, #192	; 0xc0
 80114ca:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80114cc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80114ce:	421a      	tst	r2, r3
 80114d0:	d069      	beq.n	80115a6 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80114d2:	f7fd f8b9 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114d6:	2300      	movs	r3, #0
 80114d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80114da:	2208      	movs	r2, #8
 80114dc:	6823      	ldr	r3, [r4, #0]
 80114de:	6919      	ldr	r1, [r3, #16]
 80114e0:	4211      	tst	r1, r2
 80114e2:	d00e      	beq.n	8011502 <HAL_TIM_IRQHandler+0x80>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80114e4:	68d9      	ldr	r1, [r3, #12]
 80114e6:	4211      	tst	r1, r2
 80114e8:	d00b      	beq.n	8011502 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80114ea:	3a11      	subs	r2, #17
 80114ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80114ee:	320d      	adds	r2, #13
 80114f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80114f2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80114f4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80114f6:	079b      	lsls	r3, r3, #30
 80114f8:	d05b      	beq.n	80115b2 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80114fa:	f7fd f8a5 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80114fe:	2300      	movs	r3, #0
 8011500:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011502:	2210      	movs	r2, #16
 8011504:	6823      	ldr	r3, [r4, #0]
 8011506:	6919      	ldr	r1, [r3, #16]
 8011508:	4211      	tst	r1, r2
 801150a:	d010      	beq.n	801152e <HAL_TIM_IRQHandler+0xac>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801150c:	68d9      	ldr	r1, [r3, #12]
 801150e:	4211      	tst	r1, r2
 8011510:	d00d      	beq.n	801152e <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011512:	3a21      	subs	r2, #33	; 0x21
 8011514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011516:	3219      	adds	r2, #25
 8011518:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801151a:	69da      	ldr	r2, [r3, #28]
 801151c:	23c0      	movs	r3, #192	; 0xc0
 801151e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8011520:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011522:	421a      	tst	r2, r3
 8011524:	d04b      	beq.n	80115be <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8011526:	f7fd f88f 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801152a:	2300      	movs	r3, #0
 801152c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801152e:	2201      	movs	r2, #1
 8011530:	6823      	ldr	r3, [r4, #0]
 8011532:	6919      	ldr	r1, [r3, #16]
 8011534:	4211      	tst	r1, r2
 8011536:	d007      	beq.n	8011548 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011538:	68d9      	ldr	r1, [r3, #12]
 801153a:	4211      	tst	r1, r2
 801153c:	d004      	beq.n	8011548 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801153e:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8011540:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011542:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8011544:	f7fa fb6a 	bl	800bc1c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011548:	2280      	movs	r2, #128	; 0x80
 801154a:	6823      	ldr	r3, [r4, #0]
 801154c:	6919      	ldr	r1, [r3, #16]
 801154e:	4211      	tst	r1, r2
 8011550:	d008      	beq.n	8011564 <HAL_TIM_IRQHandler+0xe2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011552:	68d9      	ldr	r1, [r3, #12]
 8011554:	4211      	tst	r1, r2
 8011556:	d005      	beq.n	8011564 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011558:	3a02      	subs	r2, #2
 801155a:	3aff      	subs	r2, #255	; 0xff
      HAL_TIMEx_BreakCallback(htim);
 801155c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801155e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8011560:	f000 fc07 	bl	8011d72 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011564:	2240      	movs	r2, #64	; 0x40
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	6919      	ldr	r1, [r3, #16]
 801156a:	4211      	tst	r1, r2
 801156c:	d007      	beq.n	801157e <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801156e:	68d9      	ldr	r1, [r3, #12]
 8011570:	4211      	tst	r1, r2
 8011572:	d004      	beq.n	801157e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011574:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8011576:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011578:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801157a:	f7ff ff81 	bl	8011480 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801157e:	2220      	movs	r2, #32
 8011580:	6823      	ldr	r3, [r4, #0]
 8011582:	6919      	ldr	r1, [r3, #16]
 8011584:	4211      	tst	r1, r2
 8011586:	d007      	beq.n	8011598 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011588:	68d9      	ldr	r1, [r3, #12]
 801158a:	4211      	tst	r1, r2
 801158c:	d004      	beq.n	8011598 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801158e:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8011590:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011592:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8011594:	f000 fbec 	bl	8011d70 <HAL_TIMEx_CommutCallback>
}
 8011598:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801159a:	f7ff ff6f 	bl	801147c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801159e:	0020      	movs	r0, r4
 80115a0:	f7ff ff6d 	bl	801147e <HAL_TIM_PWM_PulseFinishedCallback>
 80115a4:	e781      	b.n	80114aa <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80115a6:	f7ff ff69 	bl	801147c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115aa:	0020      	movs	r0, r4
 80115ac:	f7ff ff67 	bl	801147e <HAL_TIM_PWM_PulseFinishedCallback>
 80115b0:	e791      	b.n	80114d6 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80115b2:	f7ff ff63 	bl	801147c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115b6:	0020      	movs	r0, r4
 80115b8:	f7ff ff61 	bl	801147e <HAL_TIM_PWM_PulseFinishedCallback>
 80115bc:	e79f      	b.n	80114fe <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80115be:	f7ff ff5d 	bl	801147c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115c2:	0020      	movs	r0, r4
 80115c4:	f7ff ff5b 	bl	801147e <HAL_TIM_PWM_PulseFinishedCallback>
 80115c8:	e7af      	b.n	801152a <HAL_TIM_IRQHandler+0xa8>
	...

080115cc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115cc:	4a20      	ldr	r2, [pc, #128]	; (8011650 <TIM_Base_SetConfig+0x84>)
{
 80115ce:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80115d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115d2:	4290      	cmp	r0, r2
 80115d4:	d006      	beq.n	80115e4 <TIM_Base_SetConfig+0x18>
 80115d6:	2480      	movs	r4, #128	; 0x80
 80115d8:	05e4      	lsls	r4, r4, #23
 80115da:	42a0      	cmp	r0, r4
 80115dc:	d002      	beq.n	80115e4 <TIM_Base_SetConfig+0x18>
 80115de:	4c1d      	ldr	r4, [pc, #116]	; (8011654 <TIM_Base_SetConfig+0x88>)
 80115e0:	42a0      	cmp	r0, r4
 80115e2:	d10c      	bne.n	80115fe <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115e4:	2470      	movs	r4, #112	; 0x70
 80115e6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80115e8:	684c      	ldr	r4, [r1, #4]
 80115ea:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80115ec:	4290      	cmp	r0, r2
 80115ee:	d012      	beq.n	8011616 <TIM_Base_SetConfig+0x4a>
 80115f0:	2480      	movs	r4, #128	; 0x80
 80115f2:	05e4      	lsls	r4, r4, #23
 80115f4:	42a0      	cmp	r0, r4
 80115f6:	d00e      	beq.n	8011616 <TIM_Base_SetConfig+0x4a>
 80115f8:	4c16      	ldr	r4, [pc, #88]	; (8011654 <TIM_Base_SetConfig+0x88>)
 80115fa:	42a0      	cmp	r0, r4
 80115fc:	d00b      	beq.n	8011616 <TIM_Base_SetConfig+0x4a>
 80115fe:	4c16      	ldr	r4, [pc, #88]	; (8011658 <TIM_Base_SetConfig+0x8c>)
 8011600:	42a0      	cmp	r0, r4
 8011602:	d008      	beq.n	8011616 <TIM_Base_SetConfig+0x4a>
 8011604:	4c15      	ldr	r4, [pc, #84]	; (801165c <TIM_Base_SetConfig+0x90>)
 8011606:	42a0      	cmp	r0, r4
 8011608:	d005      	beq.n	8011616 <TIM_Base_SetConfig+0x4a>
 801160a:	4c15      	ldr	r4, [pc, #84]	; (8011660 <TIM_Base_SetConfig+0x94>)
 801160c:	42a0      	cmp	r0, r4
 801160e:	d002      	beq.n	8011616 <TIM_Base_SetConfig+0x4a>
 8011610:	4c14      	ldr	r4, [pc, #80]	; (8011664 <TIM_Base_SetConfig+0x98>)
 8011612:	42a0      	cmp	r0, r4
 8011614:	d103      	bne.n	801161e <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011616:	4c14      	ldr	r4, [pc, #80]	; (8011668 <TIM_Base_SetConfig+0x9c>)
 8011618:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801161a:	68cc      	ldr	r4, [r1, #12]
 801161c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801161e:	2480      	movs	r4, #128	; 0x80
 8011620:	43a3      	bics	r3, r4
 8011622:	694c      	ldr	r4, [r1, #20]
 8011624:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8011626:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011628:	688b      	ldr	r3, [r1, #8]
 801162a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801162c:	680b      	ldr	r3, [r1, #0]
 801162e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011630:	4290      	cmp	r0, r2
 8011632:	d008      	beq.n	8011646 <TIM_Base_SetConfig+0x7a>
 8011634:	4b09      	ldr	r3, [pc, #36]	; (801165c <TIM_Base_SetConfig+0x90>)
 8011636:	4298      	cmp	r0, r3
 8011638:	d005      	beq.n	8011646 <TIM_Base_SetConfig+0x7a>
 801163a:	4b09      	ldr	r3, [pc, #36]	; (8011660 <TIM_Base_SetConfig+0x94>)
 801163c:	4298      	cmp	r0, r3
 801163e:	d002      	beq.n	8011646 <TIM_Base_SetConfig+0x7a>
 8011640:	4b08      	ldr	r3, [pc, #32]	; (8011664 <TIM_Base_SetConfig+0x98>)
 8011642:	4298      	cmp	r0, r3
 8011644:	d101      	bne.n	801164a <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8011646:	690b      	ldr	r3, [r1, #16]
 8011648:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 801164a:	2301      	movs	r3, #1
 801164c:	6143      	str	r3, [r0, #20]
}
 801164e:	bd10      	pop	{r4, pc}
 8011650:	40012c00 	.word	0x40012c00
 8011654:	40000400 	.word	0x40000400
 8011658:	40002000 	.word	0x40002000
 801165c:	40014000 	.word	0x40014000
 8011660:	40014400 	.word	0x40014400
 8011664:	40014800 	.word	0x40014800
 8011668:	fffffcff 	.word	0xfffffcff

0801166c <HAL_TIM_Base_Init>:
{
 801166c:	b570      	push	{r4, r5, r6, lr}
 801166e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8011670:	2001      	movs	r0, #1
  if (htim == NULL)
 8011672:	2c00      	cmp	r4, #0
 8011674:	d021      	beq.n	80116ba <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011676:	0025      	movs	r5, r4
 8011678:	353d      	adds	r5, #61	; 0x3d
 801167a:	782b      	ldrb	r3, [r5, #0]
 801167c:	b2da      	uxtb	r2, r3
 801167e:	2b00      	cmp	r3, #0
 8011680:	d105      	bne.n	801168e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8011682:	0023      	movs	r3, r4
 8011684:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011686:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011688:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 801168a:	f7fd f8bb 	bl	800e804 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 801168e:	2302      	movs	r3, #2
 8011690:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011692:	6820      	ldr	r0, [r4, #0]
 8011694:	1d21      	adds	r1, r4, #4
 8011696:	f7ff ff99 	bl	80115cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801169a:	0022      	movs	r2, r4
 801169c:	2301      	movs	r3, #1
  return HAL_OK;
 801169e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80116a0:	3246      	adds	r2, #70	; 0x46
 80116a2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116a4:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116a6:	3a08      	subs	r2, #8
 80116a8:	7013      	strb	r3, [r2, #0]
 80116aa:	7053      	strb	r3, [r2, #1]
 80116ac:	7093      	strb	r3, [r2, #2]
 80116ae:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116b0:	7113      	strb	r3, [r2, #4]
 80116b2:	7153      	strb	r3, [r2, #5]
 80116b4:	7193      	strb	r3, [r2, #6]
 80116b6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80116b8:	702b      	strb	r3, [r5, #0]
}
 80116ba:	bd70      	pop	{r4, r5, r6, pc}

080116bc <HAL_TIM_OC_Init>:
{
 80116bc:	b570      	push	{r4, r5, r6, lr}
 80116be:	0004      	movs	r4, r0
    return HAL_ERROR;
 80116c0:	2001      	movs	r0, #1
  if (htim == NULL)
 80116c2:	2c00      	cmp	r4, #0
 80116c4:	d021      	beq.n	801170a <HAL_TIM_OC_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80116c6:	0025      	movs	r5, r4
 80116c8:	353d      	adds	r5, #61	; 0x3d
 80116ca:	782b      	ldrb	r3, [r5, #0]
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d105      	bne.n	80116de <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80116d2:	0023      	movs	r3, r4
 80116d4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80116d6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80116d8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_MspInit(htim);
 80116da:	f7ff fecd 	bl	8011478 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80116de:	2302      	movs	r3, #2
 80116e0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80116e2:	6820      	ldr	r0, [r4, #0]
 80116e4:	1d21      	adds	r1, r4, #4
 80116e6:	f7ff ff71 	bl	80115cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80116ea:	0022      	movs	r2, r4
 80116ec:	2301      	movs	r3, #1
  return HAL_OK;
 80116ee:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80116f0:	3246      	adds	r2, #70	; 0x46
 80116f2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116f4:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116f6:	3a08      	subs	r2, #8
 80116f8:	7013      	strb	r3, [r2, #0]
 80116fa:	7053      	strb	r3, [r2, #1]
 80116fc:	7093      	strb	r3, [r2, #2]
 80116fe:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011700:	7113      	strb	r3, [r2, #4]
 8011702:	7153      	strb	r3, [r2, #5]
 8011704:	7193      	strb	r3, [r2, #6]
 8011706:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8011708:	702b      	strb	r3, [r5, #0]
}
 801170a:	bd70      	pop	{r4, r5, r6, pc}

0801170c <HAL_TIM_IC_Init>:
{
 801170c:	b570      	push	{r4, r5, r6, lr}
 801170e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8011710:	2001      	movs	r0, #1
  if (htim == NULL)
 8011712:	2c00      	cmp	r4, #0
 8011714:	d021      	beq.n	801175a <HAL_TIM_IC_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011716:	0025      	movs	r5, r4
 8011718:	353d      	adds	r5, #61	; 0x3d
 801171a:	782b      	ldrb	r3, [r5, #0]
 801171c:	b2da      	uxtb	r2, r3
 801171e:	2b00      	cmp	r3, #0
 8011720:	d105      	bne.n	801172e <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8011722:	0023      	movs	r3, r4
 8011724:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8011726:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011728:	701a      	strb	r2, [r3, #0]
    HAL_TIM_IC_MspInit(htim);
 801172a:	f7ff fea6 	bl	801147a <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 801172e:	2302      	movs	r3, #2
 8011730:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011732:	6820      	ldr	r0, [r4, #0]
 8011734:	1d21      	adds	r1, r4, #4
 8011736:	f7ff ff49 	bl	80115cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801173a:	0022      	movs	r2, r4
 801173c:	2301      	movs	r3, #1
  return HAL_OK;
 801173e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011740:	3246      	adds	r2, #70	; 0x46
 8011742:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011744:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011746:	3a08      	subs	r2, #8
 8011748:	7013      	strb	r3, [r2, #0]
 801174a:	7053      	strb	r3, [r2, #1]
 801174c:	7093      	strb	r3, [r2, #2]
 801174e:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011750:	7113      	strb	r3, [r2, #4]
 8011752:	7153      	strb	r3, [r2, #5]
 8011754:	7193      	strb	r3, [r2, #6]
 8011756:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8011758:	702b      	strb	r3, [r5, #0]
}
 801175a:	bd70      	pop	{r4, r5, r6, pc}

0801175c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801175c:	2210      	movs	r2, #16
 801175e:	6a03      	ldr	r3, [r0, #32]
{
 8011760:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011762:	4393      	bics	r3, r2
 8011764:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8011766:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011768:	4c16      	ldr	r4, [pc, #88]	; (80117c4 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 801176a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801176c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801176e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011770:	680c      	ldr	r4, [r1, #0]
 8011772:	0224      	lsls	r4, r4, #8
 8011774:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8011776:	2420      	movs	r4, #32
 8011778:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801177a:	688c      	ldr	r4, [r1, #8]
 801177c:	0124      	lsls	r4, r4, #4
 801177e:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011780:	4c11      	ldr	r4, [pc, #68]	; (80117c8 <TIM_OC2_SetConfig+0x6c>)
 8011782:	42a0      	cmp	r0, r4
 8011784:	d10f      	bne.n	80117a6 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8011786:	2480      	movs	r4, #128	; 0x80
 8011788:	43a2      	bics	r2, r4
 801178a:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801178c:	68ca      	ldr	r2, [r1, #12]
 801178e:	0112      	lsls	r2, r2, #4
 8011790:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8011792:	2440      	movs	r4, #64	; 0x40
 8011794:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011796:	4e0d      	ldr	r6, [pc, #52]	; (80117cc <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011798:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801179a:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801179c:	698b      	ldr	r3, [r1, #24]
 801179e:	4323      	orrs	r3, r4
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4333      	orrs	r3, r6
 80117a4:	e008      	b.n	80117b8 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117a6:	4c0a      	ldr	r4, [pc, #40]	; (80117d0 <TIM_OC2_SetConfig+0x74>)
 80117a8:	42a0      	cmp	r0, r4
 80117aa:	d0f4      	beq.n	8011796 <TIM_OC2_SetConfig+0x3a>
 80117ac:	4c09      	ldr	r4, [pc, #36]	; (80117d4 <TIM_OC2_SetConfig+0x78>)
 80117ae:	42a0      	cmp	r0, r4
 80117b0:	d0f1      	beq.n	8011796 <TIM_OC2_SetConfig+0x3a>
 80117b2:	4c09      	ldr	r4, [pc, #36]	; (80117d8 <TIM_OC2_SetConfig+0x7c>)
 80117b4:	42a0      	cmp	r0, r4
 80117b6:	d0ee      	beq.n	8011796 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80117b8:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80117ba:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80117bc:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80117be:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80117c0:	6202      	str	r2, [r0, #32]
}
 80117c2:	bd70      	pop	{r4, r5, r6, pc}
 80117c4:	ffff8cff 	.word	0xffff8cff
 80117c8:	40012c00 	.word	0x40012c00
 80117cc:	fffff3ff 	.word	0xfffff3ff
 80117d0:	40014000 	.word	0x40014000
 80117d4:	40014400 	.word	0x40014400
 80117d8:	40014800 	.word	0x40014800

080117dc <HAL_TIM_OC_ConfigChannel>:
{
 80117dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80117de:	0005      	movs	r5, r0
 80117e0:	353c      	adds	r5, #60	; 0x3c
{
 80117e2:	0014      	movs	r4, r2
  __HAL_LOCK(htim);
 80117e4:	782a      	ldrb	r2, [r5, #0]
{
 80117e6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80117e8:	2002      	movs	r0, #2
 80117ea:	2a01      	cmp	r2, #1
 80117ec:	d00a      	beq.n	8011804 <HAL_TIM_OC_ConfigChannel+0x28>
 80117ee:	3801      	subs	r0, #1
 80117f0:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 80117f2:	2c08      	cmp	r4, #8
 80117f4:	d016      	beq.n	8011824 <HAL_TIM_OC_ConfigChannel+0x48>
 80117f6:	d806      	bhi.n	8011806 <HAL_TIM_OC_ConfigChannel+0x2a>
 80117f8:	2c00      	cmp	r4, #0
 80117fa:	d00a      	beq.n	8011812 <HAL_TIM_OC_ConfigChannel+0x36>
 80117fc:	2c04      	cmp	r4, #4
 80117fe:	d00d      	beq.n	801181c <HAL_TIM_OC_ConfigChannel+0x40>
  __HAL_UNLOCK(htim);
 8011800:	2300      	movs	r3, #0
 8011802:	702b      	strb	r3, [r5, #0]
}
 8011804:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8011806:	2c0c      	cmp	r4, #12
 8011808:	d1fa      	bne.n	8011800 <HAL_TIM_OC_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801180a:	6818      	ldr	r0, [r3, #0]
 801180c:	f7ff fd82 	bl	8011314 <TIM_OC4_SetConfig>
 8011810:	e002      	b.n	8011818 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011812:	6818      	ldr	r0, [r3, #0]
 8011814:	f7ff fcf6 	bl	8011204 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011818:	2000      	movs	r0, #0
      break;
 801181a:	e7f1      	b.n	8011800 <HAL_TIM_OC_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801181c:	6818      	ldr	r0, [r3, #0]
 801181e:	f7ff ff9d 	bl	801175c <TIM_OC2_SetConfig>
      break;
 8011822:	e7f9      	b.n	8011818 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011824:	6818      	ldr	r0, [r3, #0]
 8011826:	f7ff fd31 	bl	801128c <TIM_OC3_SetConfig>
      break;
 801182a:	e7f5      	b.n	8011818 <HAL_TIM_OC_ConfigChannel+0x3c>

0801182c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801182c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801182e:	2601      	movs	r6, #1
 8011830:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011832:	4f12      	ldr	r7, [pc, #72]	; (801187c <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011834:	43b4      	bics	r4, r6
 8011836:	6204      	str	r4, [r0, #32]
{
 8011838:	0015      	movs	r5, r2
  tmpccmr1 = TIMx->CCMR1;
 801183a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 801183c:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801183e:	42b8      	cmp	r0, r7
 8011840:	d017      	beq.n	8011872 <TIM_TI1_SetConfig+0x46>
 8011842:	2780      	movs	r7, #128	; 0x80
 8011844:	05ff      	lsls	r7, r7, #23
 8011846:	42b8      	cmp	r0, r7
 8011848:	d013      	beq.n	8011872 <TIM_TI1_SetConfig+0x46>
 801184a:	4f0d      	ldr	r7, [pc, #52]	; (8011880 <TIM_TI1_SetConfig+0x54>)
 801184c:	42b8      	cmp	r0, r7
 801184e:	d010      	beq.n	8011872 <TIM_TI1_SetConfig+0x46>
 8011850:	4f0c      	ldr	r7, [pc, #48]	; (8011884 <TIM_TI1_SetConfig+0x58>)
 8011852:	42b8      	cmp	r0, r7
 8011854:	d00d      	beq.n	8011872 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8011856:	4332      	orrs	r2, r6
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011858:	25f0      	movs	r5, #240	; 0xf0
 801185a:	43aa      	bics	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801185c:	011b      	lsls	r3, r3, #4
 801185e:	350f      	adds	r5, #15
 8011860:	402b      	ands	r3, r5
 8011862:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011864:	230a      	movs	r3, #10
 8011866:	439c      	bics	r4, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8011868:	4019      	ands	r1, r3
 801186a:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801186c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 801186e:	6201      	str	r1, [r0, #32]
}
 8011870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8011872:	2603      	movs	r6, #3
 8011874:	43b2      	bics	r2, r6
    tmpccmr1 |= TIM_ICSelection;
 8011876:	432a      	orrs	r2, r5
 8011878:	e7ee      	b.n	8011858 <TIM_TI1_SetConfig+0x2c>
 801187a:	46c0      	nop			; (mov r8, r8)
 801187c:	40012c00 	.word	0x40012c00
 8011880:	40000400 	.word	0x40000400
 8011884:	40014000 	.word	0x40014000

08011888 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8011888:	0003      	movs	r3, r0
{
 801188a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 801188c:	333c      	adds	r3, #60	; 0x3c
{
 801188e:	9001      	str	r0, [sp, #4]
 8011890:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8011892:	781a      	ldrb	r2, [r3, #0]
{
 8011894:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8011896:	2002      	movs	r0, #2
 8011898:	2a01      	cmp	r2, #1
 801189a:	d019      	beq.n	80118d0 <HAL_TIM_IC_ConfigChannel+0x48>
 801189c:	3801      	subs	r0, #1
 801189e:	7018      	strb	r0, [r3, #0]
  if (Channel == TIM_CHANNEL_1)
 80118a0:	2e00      	cmp	r6, #0
 80118a2:	d116      	bne.n	80118d2 <HAL_TIM_IC_ConfigChannel+0x4a>
    TIM_TI1_SetConfig(htim->Instance,
 80118a4:	9801      	ldr	r0, [sp, #4]
 80118a6:	68cb      	ldr	r3, [r1, #12]
 80118a8:	684a      	ldr	r2, [r1, #4]
 80118aa:	6800      	ldr	r0, [r0, #0]
 80118ac:	6809      	ldr	r1, [r1, #0]
 80118ae:	f7ff ffbd 	bl	801182c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80118b2:	210c      	movs	r1, #12
 80118b4:	9b01      	ldr	r3, [sp, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	699a      	ldr	r2, [r3, #24]
 80118ba:	438a      	bics	r2, r1
 80118bc:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80118be:	699a      	ldr	r2, [r3, #24]
 80118c0:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80118c2:	430a      	orrs	r2, r1
 80118c4:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80118c6:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80118c8:	2300      	movs	r3, #0
 80118ca:	9d01      	ldr	r5, [sp, #4]
 80118cc:	353c      	adds	r5, #60	; 0x3c
 80118ce:	702b      	strb	r3, [r5, #0]
}
 80118d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80118d2:	2e04      	cmp	r6, #4
 80118d4:	d122      	bne.n	801191c <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80118d6:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 80118d8:	9b01      	ldr	r3, [sp, #4]
 80118da:	6809      	ldr	r1, [r1, #0]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	6862      	ldr	r2, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80118e0:	6a18      	ldr	r0, [r3, #32]
    TIM_TI2_SetConfig(htim->Instance,
 80118e2:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80118e4:	43b8      	bics	r0, r7
 80118e6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80118e8:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80118ea:	4d34      	ldr	r5, [pc, #208]	; (80119bc <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80118ec:	0736      	lsls	r6, r6, #28
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80118ee:	4005      	ands	r5, r0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80118f0:	0210      	lsls	r0, r2, #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80118f2:	4a33      	ldr	r2, [pc, #204]	; (80119c0 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80118f4:	4328      	orrs	r0, r5
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80118f6:	4010      	ands	r0, r2
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80118f8:	0c36      	lsrs	r6, r6, #16
 80118fa:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80118fc:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80118fe:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011900:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011902:	43b7      	bics	r7, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011904:	4032      	ands	r2, r6
 8011906:	433a      	orrs	r2, r7

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011908:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 801190a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801190c:	699a      	ldr	r2, [r3, #24]
 801190e:	492d      	ldr	r1, [pc, #180]	; (80119c4 <HAL_TIM_IC_ConfigChannel+0x13c>)
 8011910:	400a      	ands	r2, r1
 8011912:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8011914:	68a2      	ldr	r2, [r4, #8]
 8011916:	6999      	ldr	r1, [r3, #24]
 8011918:	0212      	lsls	r2, r2, #8
 801191a:	e7d2      	b.n	80118c2 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 801191c:	2e08      	cmp	r6, #8
 801191e:	d125      	bne.n	801196c <HAL_TIM_IC_ConfigChannel+0xe4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011920:	2503      	movs	r5, #3
    TIM_TI3_SetConfig(htim->Instance,
 8011922:	9b01      	ldr	r3, [sp, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011924:	4f28      	ldr	r7, [pc, #160]	; (80119c8 <HAL_TIM_IC_ConfigChannel+0x140>)
    TIM_TI3_SetConfig(htim->Instance,
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	6809      	ldr	r1, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801192a:	6a1a      	ldr	r2, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 801192c:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801192e:	403a      	ands	r2, r7
    TIM_TI3_SetConfig(htim->Instance,
 8011930:	68e0      	ldr	r0, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011932:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011934:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011936:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011938:	43af      	bics	r7, r5
  tmpccmr2 |= TIM_ICSelection;
 801193a:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801193c:	27f0      	movs	r7, #240	; 0xf0
 801193e:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011940:	370f      	adds	r7, #15
 8011942:	4038      	ands	r0, r7
  tmpccer = TIMx->CCER;
 8011944:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011946:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011948:	4e20      	ldr	r6, [pc, #128]	; (80119cc <HAL_TIM_IC_ConfigChannel+0x144>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801194a:	61d8      	str	r0, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801194c:	4016      	ands	r6, r2
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801194e:	020a      	lsls	r2, r1, #8
 8011950:	21a0      	movs	r1, #160	; 0xa0
 8011952:	0109      	lsls	r1, r1, #4
 8011954:	400a      	ands	r2, r1
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8011956:	210c      	movs	r1, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8011958:	4332      	orrs	r2, r6
  TIMx->CCER = tmpccer;
 801195a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801195c:	69da      	ldr	r2, [r3, #28]
 801195e:	438a      	bics	r2, r1
 8011960:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011962:	69da      	ldr	r2, [r3, #28]
 8011964:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8011966:	430a      	orrs	r2, r1
 8011968:	61da      	str	r2, [r3, #28]
 801196a:	e7ac      	b.n	80118c6 <HAL_TIM_IC_ConfigChannel+0x3e>
  else if (Channel == TIM_CHANNEL_4)
 801196c:	2e0c      	cmp	r6, #12
 801196e:	d1ab      	bne.n	80118c8 <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI4_SetConfig(htim->Instance,
 8011970:	9b01      	ldr	r3, [sp, #4]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011972:	4817      	ldr	r0, [pc, #92]	; (80119d0 <HAL_TIM_IC_ConfigChannel+0x148>)
    TIM_TI4_SetConfig(htim->Instance,
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	6809      	ldr	r1, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011978:	6a1a      	ldr	r2, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 801197a:	6867      	ldr	r7, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801197c:	4002      	ands	r2, r0
    TIM_TI4_SetConfig(htim->Instance,
 801197e:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011980:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011982:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011984:	4d0d      	ldr	r5, [pc, #52]	; (80119bc <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011986:	0736      	lsls	r6, r6, #28
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011988:	4005      	ands	r5, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801198a:	0238      	lsls	r0, r7, #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801198c:	4f0c      	ldr	r7, [pc, #48]	; (80119c0 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801198e:	4328      	orrs	r0, r5
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011990:	0c36      	lsrs	r6, r6, #16
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011992:	4038      	ands	r0, r7
  tmpccer = TIMx->CCER;
 8011994:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011996:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8011998:	4e0e      	ldr	r6, [pc, #56]	; (80119d4 <HAL_TIM_IC_ConfigChannel+0x14c>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801199a:	61d8      	str	r0, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801199c:	4016      	ands	r6, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801199e:	030a      	lsls	r2, r1, #12
 80119a0:	21a0      	movs	r1, #160	; 0xa0
 80119a2:	0209      	lsls	r1, r1, #8
 80119a4:	400a      	ands	r2, r1
 80119a6:	4332      	orrs	r2, r6
  TIMx->CCER = tmpccer ;
 80119a8:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80119aa:	69da      	ldr	r2, [r3, #28]
 80119ac:	4905      	ldr	r1, [pc, #20]	; (80119c4 <HAL_TIM_IC_ConfigChannel+0x13c>)
 80119ae:	400a      	ands	r2, r1
 80119b0:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80119b2:	68a2      	ldr	r2, [r4, #8]
 80119b4:	69d9      	ldr	r1, [r3, #28]
 80119b6:	0212      	lsls	r2, r2, #8
 80119b8:	e7d5      	b.n	8011966 <HAL_TIM_IC_ConfigChannel+0xde>
 80119ba:	46c0      	nop			; (mov r8, r8)
 80119bc:	fffffcff 	.word	0xfffffcff
 80119c0:	ffff0fff 	.word	0xffff0fff
 80119c4:	fffff3ff 	.word	0xfffff3ff
 80119c8:	fffffeff 	.word	0xfffffeff
 80119cc:	fffff5ff 	.word	0xfffff5ff
 80119d0:	ffffefff 	.word	0xffffefff
 80119d4:	ffff5fff 	.word	0xffff5fff

080119d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80119d8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80119da:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80119dc:	4d03      	ldr	r5, [pc, #12]	; (80119ec <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80119de:	430a      	orrs	r2, r1
 80119e0:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80119e2:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80119e4:	4313      	orrs	r3, r2
 80119e6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80119e8:	6083      	str	r3, [r0, #8]
}
 80119ea:	bd30      	pop	{r4, r5, pc}
 80119ec:	ffff00ff 	.word	0xffff00ff

080119f0 <HAL_TIM_ConfigClockSource>:
{
 80119f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80119f2:	0005      	movs	r5, r0
 80119f4:	2302      	movs	r3, #2
 80119f6:	353c      	adds	r5, #60	; 0x3c
{
 80119f8:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80119fa:	7828      	ldrb	r0, [r5, #0]
 80119fc:	001a      	movs	r2, r3
 80119fe:	2801      	cmp	r0, #1
 8011a00:	d01d      	beq.n	8011a3e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8011a02:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8011a04:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8011a06:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8011a08:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8011a0a:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8011a0c:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011a0e:	4a49      	ldr	r2, [pc, #292]	; (8011b34 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 8011a10:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011a12:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8011a14:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8011a16:	680b      	ldr	r3, [r1, #0]
 8011a18:	2b60      	cmp	r3, #96	; 0x60
 8011a1a:	d059      	beq.n	8011ad0 <HAL_TIM_ConfigClockSource+0xe0>
 8011a1c:	d835      	bhi.n	8011a8a <HAL_TIM_ConfigClockSource+0x9a>
 8011a1e:	2b40      	cmp	r3, #64	; 0x40
 8011a20:	d100      	bne.n	8011a24 <HAL_TIM_ConfigClockSource+0x34>
 8011a22:	e06e      	b.n	8011b02 <HAL_TIM_ConfigClockSource+0x112>
 8011a24:	d815      	bhi.n	8011a52 <HAL_TIM_ConfigClockSource+0x62>
 8011a26:	2b20      	cmp	r3, #32
 8011a28:	d00d      	beq.n	8011a46 <HAL_TIM_ConfigClockSource+0x56>
 8011a2a:	d80a      	bhi.n	8011a42 <HAL_TIM_ConfigClockSource+0x52>
 8011a2c:	2210      	movs	r2, #16
 8011a2e:	0019      	movs	r1, r3
 8011a30:	4391      	bics	r1, r2
 8011a32:	d008      	beq.n	8011a46 <HAL_TIM_ConfigClockSource+0x56>
 8011a34:	003a      	movs	r2, r7
  htim->State = HAL_TIM_STATE_READY;
 8011a36:	2301      	movs	r3, #1
 8011a38:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	702b      	strb	r3, [r5, #0]
}
 8011a3e:	0010      	movs	r0, r2
 8011a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8011a42:	2b30      	cmp	r3, #48	; 0x30
 8011a44:	d1f6      	bne.n	8011a34 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8011a46:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8011a48:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011a4a:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	2207      	movs	r2, #7
 8011a50:	e018      	b.n	8011a84 <HAL_TIM_ConfigClockSource+0x94>
  switch (sClockSourceConfig->ClockSource)
 8011a52:	2b50      	cmp	r3, #80	; 0x50
 8011a54:	d1ee      	bne.n	8011a34 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011a56:	68ca      	ldr	r2, [r1, #12]
 8011a58:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 8011a5a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011a5c:	6a03      	ldr	r3, [r0, #32]
 8011a5e:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011a60:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011a62:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011a64:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011a66:	43bb      	bics	r3, r7
 8011a68:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011a6a:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011a6c:	220a      	movs	r2, #10
 8011a6e:	4391      	bics	r1, r2
 8011a70:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011a72:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 8011a74:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8011a76:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8011a78:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011a7a:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8011a7c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011a7e:	4393      	bics	r3, r2
 8011a80:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011a82:	2357      	movs	r3, #87	; 0x57
 8011a84:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8011a86:	6083      	str	r3, [r0, #8]
 8011a88:	e016      	b.n	8011ab8 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8011a8a:	2280      	movs	r2, #128	; 0x80
 8011a8c:	0152      	lsls	r2, r2, #5
 8011a8e:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 8011a90:	2200      	movs	r2, #0
  switch (sClockSourceConfig->ClockSource)
 8011a92:	4563      	cmp	r3, ip
 8011a94:	d0cf      	beq.n	8011a36 <HAL_TIM_ConfigClockSource+0x46>
 8011a96:	2280      	movs	r2, #128	; 0x80
 8011a98:	0192      	lsls	r2, r2, #6
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d00e      	beq.n	8011abc <HAL_TIM_ConfigClockSource+0xcc>
 8011a9e:	003a      	movs	r2, r7
 8011aa0:	2b70      	cmp	r3, #112	; 0x70
 8011aa2:	d1c8      	bne.n	8011a36 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 8011aa4:	68cb      	ldr	r3, [r1, #12]
 8011aa6:	684a      	ldr	r2, [r1, #4]
 8011aa8:	6889      	ldr	r1, [r1, #8]
 8011aaa:	f7ff ff95 	bl	80119d8 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011aae:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8011ab0:	6822      	ldr	r2, [r4, #0]
 8011ab2:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011ab4:	430b      	orrs	r3, r1
 8011ab6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8011ab8:	2200      	movs	r2, #0
}
 8011aba:	e7bc      	b.n	8011a36 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 8011abc:	68cb      	ldr	r3, [r1, #12]
 8011abe:	684a      	ldr	r2, [r1, #4]
 8011ac0:	6889      	ldr	r1, [r1, #8]
 8011ac2:	f7ff ff89 	bl	80119d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011ac6:	2380      	movs	r3, #128	; 0x80
 8011ac8:	6822      	ldr	r2, [r4, #0]
 8011aca:	01db      	lsls	r3, r3, #7
 8011acc:	6891      	ldr	r1, [r2, #8]
 8011ace:	e7f1      	b.n	8011ab4 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011ad0:	684a      	ldr	r2, [r1, #4]
 8011ad2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ad4:	2110      	movs	r1, #16
 8011ad6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011ad8:	4c17      	ldr	r4, [pc, #92]	; (8011b38 <HAL_TIM_ConfigClockSource+0x148>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ada:	438b      	bics	r3, r1
 8011adc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011ade:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8011ae0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011ae2:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011ae4:	24a0      	movs	r4, #160	; 0xa0
 8011ae6:	43a3      	bics	r3, r4
 8011ae8:	001c      	movs	r4, r3
  tmpccer |= (TIM_ICPolarity << 4U);
 8011aea:	0113      	lsls	r3, r2, #4
  tmpsmcr &= ~TIM_SMCR_TS;
 8011aec:	2270      	movs	r2, #112	; 0x70
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011aee:	033f      	lsls	r7, r7, #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8011af0:	4323      	orrs	r3, r4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011af2:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8011af4:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8011af6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8011af8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011afa:	4393      	bics	r3, r2
 8011afc:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011afe:	2367      	movs	r3, #103	; 0x67
 8011b00:	e7c0      	b.n	8011a84 <HAL_TIM_ConfigClockSource+0x94>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011b02:	68ca      	ldr	r2, [r1, #12]
 8011b04:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 8011b06:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b08:	6a03      	ldr	r3, [r0, #32]
 8011b0a:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011b0c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b0e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b10:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011b12:	43bb      	bics	r3, r7
 8011b14:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011b16:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011b18:	220a      	movs	r2, #10
 8011b1a:	4391      	bics	r1, r2
 8011b1c:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011b1e:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 8011b20:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8011b22:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8011b24:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011b26:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8011b28:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011b2a:	4393      	bics	r3, r2
 8011b2c:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011b2e:	2347      	movs	r3, #71	; 0x47
 8011b30:	e7a8      	b.n	8011a84 <HAL_TIM_ConfigClockSource+0x94>
 8011b32:	46c0      	nop			; (mov r8, r8)
 8011b34:	ffff0088 	.word	0xffff0088
 8011b38:	ffff0fff 	.word	0xffff0fff

08011b3c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011b3c:	231f      	movs	r3, #31
{
 8011b3e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011b40:	2401      	movs	r4, #1
 8011b42:	4019      	ands	r1, r3
 8011b44:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011b46:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8011b48:	6a03      	ldr	r3, [r0, #32]
 8011b4a:	43a3      	bics	r3, r4
 8011b4c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011b4e:	6a03      	ldr	r3, [r0, #32]
 8011b50:	431a      	orrs	r2, r3
 8011b52:	6202      	str	r2, [r0, #32]
}
 8011b54:	bd10      	pop	{r4, pc}
	...

08011b58 <HAL_TIM_OC_Start>:
{
 8011b58:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011b5a:	0003      	movs	r3, r0
{
 8011b5c:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011b5e:	2900      	cmp	r1, #0
 8011b60:	d105      	bne.n	8011b6e <HAL_TIM_OC_Start+0x16>
    return HAL_ERROR;
 8011b62:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011b64:	333e      	adds	r3, #62	; 0x3e
 8011b66:	781a      	ldrb	r2, [r3, #0]
 8011b68:	4282      	cmp	r2, r0
 8011b6a:	d018      	beq.n	8011b9e <HAL_TIM_OC_Start+0x46>
}
 8011b6c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011b6e:	2904      	cmp	r1, #4
 8011b70:	d10f      	bne.n	8011b92 <HAL_TIM_OC_Start+0x3a>
 8011b72:	333f      	adds	r3, #63	; 0x3f
 8011b74:	781b      	ldrb	r3, [r3, #0]
    return HAL_ERROR;
 8011b76:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011b78:	3b01      	subs	r3, #1
 8011b7a:	1e5a      	subs	r2, r3, #1
 8011b7c:	4193      	sbcs	r3, r2
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d1f3      	bne.n	8011b6c <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011b84:	2302      	movs	r3, #2
 8011b86:	0022      	movs	r2, r4
 8011b88:	2904      	cmp	r1, #4
 8011b8a:	d126      	bne.n	8011bda <HAL_TIM_OC_Start+0x82>
 8011b8c:	323f      	adds	r2, #63	; 0x3f
 8011b8e:	7013      	strb	r3, [r2, #0]
 8011b90:	e007      	b.n	8011ba2 <HAL_TIM_OC_Start+0x4a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011b92:	2908      	cmp	r1, #8
 8011b94:	d101      	bne.n	8011b9a <HAL_TIM_OC_Start+0x42>
 8011b96:	3340      	adds	r3, #64	; 0x40
 8011b98:	e7ec      	b.n	8011b74 <HAL_TIM_OC_Start+0x1c>
 8011b9a:	3341      	adds	r3, #65	; 0x41
 8011b9c:	e7ea      	b.n	8011b74 <HAL_TIM_OC_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011b9e:	2202      	movs	r2, #2
 8011ba0:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	6820      	ldr	r0, [r4, #0]
 8011ba6:	f7ff ffc9 	bl	8011b3c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	4917      	ldr	r1, [pc, #92]	; (8011c0c <HAL_TIM_OC_Start+0xb4>)
 8011bae:	428b      	cmp	r3, r1
 8011bb0:	d019      	beq.n	8011be6 <HAL_TIM_OC_Start+0x8e>
 8011bb2:	4a17      	ldr	r2, [pc, #92]	; (8011c10 <HAL_TIM_OC_Start+0xb8>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d016      	beq.n	8011be6 <HAL_TIM_OC_Start+0x8e>
 8011bb8:	4a16      	ldr	r2, [pc, #88]	; (8011c14 <HAL_TIM_OC_Start+0xbc>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d013      	beq.n	8011be6 <HAL_TIM_OC_Start+0x8e>
 8011bbe:	4a16      	ldr	r2, [pc, #88]	; (8011c18 <HAL_TIM_OC_Start+0xc0>)
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d010      	beq.n	8011be6 <HAL_TIM_OC_Start+0x8e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011bc4:	2280      	movs	r2, #128	; 0x80
 8011bc6:	05d2      	lsls	r2, r2, #23
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d114      	bne.n	8011bf6 <HAL_TIM_OC_Start+0x9e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011bcc:	2107      	movs	r1, #7
 8011bce:	689a      	ldr	r2, [r3, #8]
 8011bd0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bd2:	2a06      	cmp	r2, #6
 8011bd4:	d115      	bne.n	8011c02 <HAL_TIM_OC_Start+0xaa>
  return HAL_OK;
 8011bd6:	2000      	movs	r0, #0
 8011bd8:	e7c8      	b.n	8011b6c <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011bda:	2908      	cmp	r1, #8
 8011bdc:	d101      	bne.n	8011be2 <HAL_TIM_OC_Start+0x8a>
 8011bde:	3240      	adds	r2, #64	; 0x40
 8011be0:	e7d5      	b.n	8011b8e <HAL_TIM_OC_Start+0x36>
 8011be2:	3241      	adds	r2, #65	; 0x41
 8011be4:	e7d3      	b.n	8011b8e <HAL_TIM_OC_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8011be6:	2280      	movs	r2, #128	; 0x80
 8011be8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011bea:	0212      	lsls	r2, r2, #8
 8011bec:	4302      	orrs	r2, r0
 8011bee:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011bf0:	428b      	cmp	r3, r1
 8011bf2:	d1e7      	bne.n	8011bc4 <HAL_TIM_OC_Start+0x6c>
 8011bf4:	e7ea      	b.n	8011bcc <HAL_TIM_OC_Start+0x74>
 8011bf6:	4a09      	ldr	r2, [pc, #36]	; (8011c1c <HAL_TIM_OC_Start+0xc4>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d0e7      	beq.n	8011bcc <HAL_TIM_OC_Start+0x74>
 8011bfc:	4a04      	ldr	r2, [pc, #16]	; (8011c10 <HAL_TIM_OC_Start+0xb8>)
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d0e4      	beq.n	8011bcc <HAL_TIM_OC_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 8011c02:	2201      	movs	r2, #1
 8011c04:	6819      	ldr	r1, [r3, #0]
 8011c06:	430a      	orrs	r2, r1
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	e7e4      	b.n	8011bd6 <HAL_TIM_OC_Start+0x7e>
 8011c0c:	40012c00 	.word	0x40012c00
 8011c10:	40014000 	.word	0x40014000
 8011c14:	40014400 	.word	0x40014400
 8011c18:	40014800 	.word	0x40014800
 8011c1c:	40000400 	.word	0x40000400

08011c20 <HAL_TIM_IC_Start_IT>:
{
 8011c20:	b510      	push	{r4, lr}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011c22:	0003      	movs	r3, r0
{
 8011c24:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011c26:	2900      	cmp	r1, #0
 8011c28:	d132      	bne.n	8011c90 <HAL_TIM_IC_Start_IT+0x70>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011c2a:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011c2c:	333e      	adds	r3, #62	; 0x3e
 8011c2e:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011c30:	3242      	adds	r2, #66	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011c32:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011c34:	7810      	ldrb	r0, [r2, #0]
 8011c36:	b2c0      	uxtb	r0, r0
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d15d      	bne.n	8011cf8 <HAL_TIM_IC_Start_IT+0xd8>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8011c3c:	2801      	cmp	r0, #1
 8011c3e:	d15d      	bne.n	8011cfc <HAL_TIM_IC_Start_IT+0xdc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011c40:	0022      	movs	r2, r4
 8011c42:	3301      	adds	r3, #1
 8011c44:	2900      	cmp	r1, #0
 8011c46:	d139      	bne.n	8011cbc <HAL_TIM_IC_Start_IT+0x9c>
 8011c48:	323e      	adds	r2, #62	; 0x3e
 8011c4a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011c4c:	7113      	strb	r3, [r2, #4]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011c4e:	6820      	ldr	r0, [r4, #0]
 8011c50:	68c2      	ldr	r2, [r0, #12]
 8011c52:	4313      	orrs	r3, r2
 8011c54:	60c3      	str	r3, [r0, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011c56:	2201      	movs	r2, #1
 8011c58:	6820      	ldr	r0, [r4, #0]
 8011c5a:	f7ff ff6f 	bl	8011b3c <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011c5e:	6823      	ldr	r3, [r4, #0]
 8011c60:	4a27      	ldr	r2, [pc, #156]	; (8011d00 <HAL_TIM_IC_Start_IT+0xe0>)
 8011c62:	4293      	cmp	r3, r2
 8011c64:	d009      	beq.n	8011c7a <HAL_TIM_IC_Start_IT+0x5a>
 8011c66:	2280      	movs	r2, #128	; 0x80
 8011c68:	05d2      	lsls	r2, r2, #23
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	d005      	beq.n	8011c7a <HAL_TIM_IC_Start_IT+0x5a>
 8011c6e:	4a25      	ldr	r2, [pc, #148]	; (8011d04 <HAL_TIM_IC_Start_IT+0xe4>)
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d002      	beq.n	8011c7a <HAL_TIM_IC_Start_IT+0x5a>
 8011c74:	4a24      	ldr	r2, [pc, #144]	; (8011d08 <HAL_TIM_IC_Start_IT+0xe8>)
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d138      	bne.n	8011cec <HAL_TIM_IC_Start_IT+0xcc>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c7a:	2107      	movs	r1, #7
 8011c7c:	689a      	ldr	r2, [r3, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c7e:	2000      	movs	r0, #0
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c80:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c82:	2a06      	cmp	r2, #6
 8011c84:	d003      	beq.n	8011c8e <HAL_TIM_IC_Start_IT+0x6e>
        __HAL_TIM_ENABLE(htim);
 8011c86:	2201      	movs	r2, #1
 8011c88:	6819      	ldr	r1, [r3, #0]
 8011c8a:	430a      	orrs	r2, r1
 8011c8c:	601a      	str	r2, [r3, #0]
}
 8011c8e:	bd10      	pop	{r4, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011c90:	2904      	cmp	r1, #4
 8011c92:	d105      	bne.n	8011ca0 <HAL_TIM_IC_Start_IT+0x80>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011c94:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011c96:	333f      	adds	r3, #63	; 0x3f
 8011c98:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011c9a:	3243      	adds	r2, #67	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011c9c:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011c9e:	e7c9      	b.n	8011c34 <HAL_TIM_IC_Start_IT+0x14>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011ca0:	2908      	cmp	r1, #8
 8011ca2:	d105      	bne.n	8011cb0 <HAL_TIM_IC_Start_IT+0x90>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011ca4:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011ca6:	3340      	adds	r3, #64	; 0x40
 8011ca8:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011caa:	3244      	adds	r2, #68	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011cac:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011cae:	e7c1      	b.n	8011c34 <HAL_TIM_IC_Start_IT+0x14>
 8011cb0:	0002      	movs	r2, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011cb2:	3341      	adds	r3, #65	; 0x41
 8011cb4:	781b      	ldrb	r3, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011cb6:	3245      	adds	r2, #69	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011cb8:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011cba:	e7bb      	b.n	8011c34 <HAL_TIM_IC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011cbc:	2904      	cmp	r1, #4
 8011cbe:	d107      	bne.n	8011cd0 <HAL_TIM_IC_Start_IT+0xb0>
 8011cc0:	323f      	adds	r2, #63	; 0x3f
 8011cc2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011cc4:	7113      	strb	r3, [r2, #4]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011cc6:	6822      	ldr	r2, [r4, #0]
 8011cc8:	68d3      	ldr	r3, [r2, #12]
 8011cca:	430b      	orrs	r3, r1
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011ccc:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8011cce:	e7c2      	b.n	8011c56 <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011cd0:	2908      	cmp	r1, #8
 8011cd2:	d101      	bne.n	8011cd8 <HAL_TIM_IC_Start_IT+0xb8>
 8011cd4:	3240      	adds	r2, #64	; 0x40
 8011cd6:	e7f4      	b.n	8011cc2 <HAL_TIM_IC_Start_IT+0xa2>
 8011cd8:	3241      	adds	r2, #65	; 0x41
 8011cda:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011cdc:	7113      	strb	r3, [r2, #4]
  switch (Channel)
 8011cde:	290c      	cmp	r1, #12
 8011ce0:	d1d5      	bne.n	8011c8e <HAL_TIM_IC_Start_IT+0x6e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011ce2:	2310      	movs	r3, #16
 8011ce4:	6822      	ldr	r2, [r4, #0]
 8011ce6:	68d0      	ldr	r0, [r2, #12]
 8011ce8:	4303      	orrs	r3, r0
 8011cea:	e7ef      	b.n	8011ccc <HAL_TIM_IC_Start_IT+0xac>
      __HAL_TIM_ENABLE(htim);
 8011cec:	2201      	movs	r2, #1
 8011cee:	6819      	ldr	r1, [r3, #0]
 8011cf0:	2000      	movs	r0, #0
 8011cf2:	430a      	orrs	r2, r1
 8011cf4:	601a      	str	r2, [r3, #0]
 8011cf6:	e7ca      	b.n	8011c8e <HAL_TIM_IC_Start_IT+0x6e>
    return HAL_ERROR;
 8011cf8:	2001      	movs	r0, #1
 8011cfa:	e7c8      	b.n	8011c8e <HAL_TIM_IC_Start_IT+0x6e>
 8011cfc:	0018      	movs	r0, r3
 8011cfe:	e7c6      	b.n	8011c8e <HAL_TIM_IC_Start_IT+0x6e>
 8011d00:	40012c00 	.word	0x40012c00
 8011d04:	40000400 	.word	0x40000400
 8011d08:	40014000 	.word	0x40014000

08011d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d0c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d0e:	0004      	movs	r4, r0
 8011d10:	2202      	movs	r2, #2
 8011d12:	343c      	adds	r4, #60	; 0x3c
 8011d14:	7825      	ldrb	r5, [r4, #0]
{
 8011d16:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8011d18:	0010      	movs	r0, r2
 8011d1a:	2d01      	cmp	r5, #1
 8011d1c:	d020      	beq.n	8011d60 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d1e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011d20:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8011d22:	353d      	adds	r5, #61	; 0x3d
 8011d24:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8011d2a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8011d2c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d2e:	680e      	ldr	r6, [r1, #0]
 8011d30:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011d32:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d34:	480b      	ldr	r0, [pc, #44]	; (8011d64 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8011d36:	4283      	cmp	r3, r0
 8011d38:	d009      	beq.n	8011d4e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8011d3a:	2080      	movs	r0, #128	; 0x80
 8011d3c:	05c0      	lsls	r0, r0, #23
 8011d3e:	4283      	cmp	r3, r0
 8011d40:	d005      	beq.n	8011d4e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8011d42:	4809      	ldr	r0, [pc, #36]	; (8011d68 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8011d44:	4283      	cmp	r3, r0
 8011d46:	d002      	beq.n	8011d4e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8011d48:	4808      	ldr	r0, [pc, #32]	; (8011d6c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8011d4a:	4283      	cmp	r3, r0
 8011d4c:	d104      	bne.n	8011d58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011d4e:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d50:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011d52:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d54:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011d58:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8011d5a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011d5c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8011d5e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8011d60:	bd70      	pop	{r4, r5, r6, pc}
 8011d62:	46c0      	nop			; (mov r8, r8)
 8011d64:	40012c00 	.word	0x40012c00
 8011d68:	40000400 	.word	0x40000400
 8011d6c:	40014000 	.word	0x40014000

08011d70 <HAL_TIMEx_CommutCallback>:
 8011d70:	4770      	bx	lr

08011d72 <HAL_TIMEx_BreakCallback>:
 8011d72:	4770      	bx	lr

08011d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011d74:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d76:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011d80:	6801      	ldr	r1, [r0, #0]
 8011d82:	4d12      	ldr	r5, [pc, #72]	; (8011dcc <UART_EndRxTransfer+0x58>)
 8011d84:	680b      	ldr	r3, [r1, #0]
 8011d86:	402b      	ands	r3, r5
 8011d88:	600b      	str	r3, [r1, #0]
 8011d8a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d8e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d92:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d96:	6801      	ldr	r1, [r0, #0]
 8011d98:	688b      	ldr	r3, [r1, #8]
 8011d9a:	4393      	bics	r3, r2
 8011d9c:	608b      	str	r3, [r1, #8]
 8011d9e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011da2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d10a      	bne.n	8011dbe <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011da8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dac:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011db0:	2410      	movs	r4, #16
 8011db2:	6802      	ldr	r2, [r0, #0]
 8011db4:	6813      	ldr	r3, [r2, #0]
 8011db6:	43a3      	bics	r3, r4
 8011db8:	6013      	str	r3, [r2, #0]
 8011dba:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011dbe:	2220      	movs	r2, #32
 8011dc0:	1d03      	adds	r3, r0, #4
 8011dc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011dc8:	6683      	str	r3, [r0, #104]	; 0x68
}
 8011dca:	bd30      	pop	{r4, r5, pc}
 8011dcc:	fffffedf 	.word	0xfffffedf

08011dd0 <UART_SetConfig>:
{
 8011dd0:	b570      	push	{r4, r5, r6, lr}
 8011dd2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011dd4:	6925      	ldr	r5, [r4, #16]
 8011dd6:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011dd8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011dda:	4329      	orrs	r1, r5
 8011ddc:	6965      	ldr	r5, [r4, #20]
 8011dde:	69c3      	ldr	r3, [r0, #28]
 8011de0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011de2:	6810      	ldr	r0, [r2, #0]
 8011de4:	4d50      	ldr	r5, [pc, #320]	; (8011f28 <UART_SetConfig+0x158>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011de6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011de8:	4028      	ands	r0, r5
 8011dea:	4301      	orrs	r1, r0
 8011dec:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011dee:	6851      	ldr	r1, [r2, #4]
 8011df0:	484e      	ldr	r0, [pc, #312]	; (8011f2c <UART_SetConfig+0x15c>)
  tmpreg |= huart->Init.OneBitSampling;
 8011df2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011df4:	4001      	ands	r1, r0
 8011df6:	68e0      	ldr	r0, [r4, #12]
 8011df8:	4301      	orrs	r1, r0
 8011dfa:	6051      	str	r1, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8011dfc:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011dfe:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8011e00:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011e02:	4d4b      	ldr	r5, [pc, #300]	; (8011f30 <UART_SetConfig+0x160>)
 8011e04:	4028      	ands	r0, r5
 8011e06:	4301      	orrs	r1, r0
 8011e08:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011e0a:	494a      	ldr	r1, [pc, #296]	; (8011f34 <UART_SetConfig+0x164>)
 8011e0c:	428a      	cmp	r2, r1
 8011e0e:	d115      	bne.n	8011e3c <UART_SetConfig+0x6c>
 8011e10:	2103      	movs	r1, #3
 8011e12:	4a49      	ldr	r2, [pc, #292]	; (8011f38 <UART_SetConfig+0x168>)
 8011e14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011e16:	400a      	ands	r2, r1
 8011e18:	2180      	movs	r1, #128	; 0x80
 8011e1a:	3a01      	subs	r2, #1
 8011e1c:	0209      	lsls	r1, r1, #8
 8011e1e:	2a02      	cmp	r2, #2
 8011e20:	d86b      	bhi.n	8011efa <UART_SetConfig+0x12a>
 8011e22:	4846      	ldr	r0, [pc, #280]	; (8011f3c <UART_SetConfig+0x16c>)
 8011e24:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e26:	428b      	cmp	r3, r1
 8011e28:	d041      	beq.n	8011eae <UART_SetConfig+0xde>
    switch (clocksource)
 8011e2a:	2808      	cmp	r0, #8
 8011e2c:	d819      	bhi.n	8011e62 <UART_SetConfig+0x92>
 8011e2e:	f7f5 fdfd 	bl	8007a2c <__gnu_thumb1_case_uqi>
 8011e32:	182c      	.short	0x182c
 8011e34:	185e1820 	.word	0x185e1820
 8011e38:	1818      	.short	0x1818
 8011e3a:	61          	.byte	0x61
 8011e3b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011e3c:	4940      	ldr	r1, [pc, #256]	; (8011f40 <UART_SetConfig+0x170>)
 8011e3e:	428a      	cmp	r2, r1
 8011e40:	d119      	bne.n	8011e76 <UART_SetConfig+0xa6>
 8011e42:	21c0      	movs	r1, #192	; 0xc0
 8011e44:	2080      	movs	r0, #128	; 0x80
 8011e46:	4a3c      	ldr	r2, [pc, #240]	; (8011f38 <UART_SetConfig+0x168>)
 8011e48:	0289      	lsls	r1, r1, #10
 8011e4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011e4c:	0280      	lsls	r0, r0, #10
 8011e4e:	400a      	ands	r2, r1
 8011e50:	4282      	cmp	r2, r0
 8011e52:	d064      	beq.n	8011f1e <UART_SetConfig+0x14e>
 8011e54:	d807      	bhi.n	8011e66 <UART_SetConfig+0x96>
 8011e56:	2a00      	cmp	r2, #0
 8011e58:	d013      	beq.n	8011e82 <UART_SetConfig+0xb2>
 8011e5a:	2180      	movs	r1, #128	; 0x80
 8011e5c:	0249      	lsls	r1, r1, #9
 8011e5e:	428a      	cmp	r2, r1
 8011e60:	d056      	beq.n	8011f10 <UART_SetConfig+0x140>
    switch (clocksource)
 8011e62:	2001      	movs	r0, #1
 8011e64:	e050      	b.n	8011f08 <UART_SetConfig+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011e66:	428a      	cmp	r2, r1
 8011e68:	d1fb      	bne.n	8011e62 <UART_SetConfig+0x92>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e6a:	2280      	movs	r2, #128	; 0x80
 8011e6c:	0212      	lsls	r2, r2, #8
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	d026      	beq.n	8011ec0 <UART_SetConfig+0xf0>
        pclk = (uint32_t) HSI_VALUE;
 8011e72:	4834      	ldr	r0, [pc, #208]	; (8011f44 <UART_SetConfig+0x174>)
 8011e74:	e00d      	b.n	8011e92 <UART_SetConfig+0xc2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011e76:	4934      	ldr	r1, [pc, #208]	; (8011f48 <UART_SetConfig+0x178>)
 8011e78:	428a      	cmp	r2, r1
 8011e7a:	d002      	beq.n	8011e82 <UART_SetConfig+0xb2>
 8011e7c:	4933      	ldr	r1, [pc, #204]	; (8011f4c <UART_SetConfig+0x17c>)
 8011e7e:	428a      	cmp	r2, r1
 8011e80:	d1ef      	bne.n	8011e62 <UART_SetConfig+0x92>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e82:	2280      	movs	r2, #128	; 0x80
 8011e84:	0212      	lsls	r2, r2, #8
 8011e86:	4293      	cmp	r3, r2
 8011e88:	d039      	beq.n	8011efe <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e8a:	f7fe fb05 	bl	8010498 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	d039      	beq.n	8011f06 <UART_SetConfig+0x136>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011e92:	6863      	ldr	r3, [r4, #4]
 8011e94:	6861      	ldr	r1, [r4, #4]
 8011e96:	085b      	lsrs	r3, r3, #1
 8011e98:	1818      	adds	r0, r3, r0
 8011e9a:	f7f5 fde5 	bl	8007a68 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e9e:	0002      	movs	r2, r0
 8011ea0:	4b2b      	ldr	r3, [pc, #172]	; (8011f50 <UART_SetConfig+0x180>)
 8011ea2:	3a10      	subs	r2, #16
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d8dc      	bhi.n	8011e62 <UART_SetConfig+0x92>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	60d8      	str	r0, [r3, #12]
 8011eac:	e02b      	b.n	8011f06 <UART_SetConfig+0x136>
    switch (clocksource)
 8011eae:	2808      	cmp	r0, #8
 8011eb0:	d8d7      	bhi.n	8011e62 <UART_SetConfig+0x92>
 8011eb2:	f7f5 fdb1 	bl	8007a18 <__gnu_thumb1_case_sqi>
 8011eb6:	d624      	.short	0xd624
 8011eb8:	d631d605 	.word	0xd631d605
 8011ebc:	d6d6      	.short	0xd6d6
 8011ebe:	06          	.byte	0x06
 8011ebf:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8011ec0:	4b20      	ldr	r3, [pc, #128]	; (8011f44 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011ec2:	0058      	lsls	r0, r3, #1
 8011ec4:	6863      	ldr	r3, [r4, #4]
 8011ec6:	6861      	ldr	r1, [r4, #4]
 8011ec8:	085b      	lsrs	r3, r3, #1
 8011eca:	18c0      	adds	r0, r0, r3
 8011ecc:	f7f5 fdcc 	bl	8007a68 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ed0:	0002      	movs	r2, r0
 8011ed2:	4b1f      	ldr	r3, [pc, #124]	; (8011f50 <UART_SetConfig+0x180>)
 8011ed4:	3a10      	subs	r2, #16
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d8c3      	bhi.n	8011e62 <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011eda:	230f      	movs	r3, #15
 8011edc:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011ede:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011ee0:	439a      	bics	r2, r3
 8011ee2:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011ee4:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8011ee6:	6822      	ldr	r2, [r4, #0]
 8011ee8:	4318      	orrs	r0, r3
 8011eea:	60d0      	str	r0, [r2, #12]
 8011eec:	e00b      	b.n	8011f06 <UART_SetConfig+0x136>
        pclk = HAL_RCC_GetSysClockFreq();
 8011eee:	f7fe fa13 	bl	8010318 <HAL_RCC_GetSysClockFreq>
        break;
 8011ef2:	e7cc      	b.n	8011e8e <UART_SetConfig+0xbe>
        pclk = (uint32_t) LSE_VALUE;
 8011ef4:	2080      	movs	r0, #128	; 0x80
 8011ef6:	0200      	lsls	r0, r0, #8
 8011ef8:	e7cb      	b.n	8011e92 <UART_SetConfig+0xc2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011efa:	428b      	cmp	r3, r1
 8011efc:	d1c5      	bne.n	8011e8a <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetPCLK1Freq();
 8011efe:	f7fe facb 	bl	8010498 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8011f02:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8011f04:	d1dd      	bne.n	8011ec2 <UART_SetConfig+0xf2>
 8011f06:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8011f0c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8011f0e:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011f10:	2280      	movs	r2, #128	; 0x80
 8011f12:	0212      	lsls	r2, r2, #8
 8011f14:	4293      	cmp	r3, r2
 8011f16:	d1ea      	bne.n	8011eee <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetSysClockFreq();
 8011f18:	f7fe f9fe 	bl	8010318 <HAL_RCC_GetSysClockFreq>
 8011f1c:	e7f1      	b.n	8011f02 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011f1e:	2080      	movs	r0, #128	; 0x80
 8011f20:	0200      	lsls	r0, r0, #8
 8011f22:	4283      	cmp	r3, r0
 8011f24:	d1b5      	bne.n	8011e92 <UART_SetConfig+0xc2>
 8011f26:	e7cc      	b.n	8011ec2 <UART_SetConfig+0xf2>
 8011f28:	efff69f3 	.word	0xefff69f3
 8011f2c:	ffffcfff 	.word	0xffffcfff
 8011f30:	fffff4ff 	.word	0xfffff4ff
 8011f34:	40013800 	.word	0x40013800
 8011f38:	40021000 	.word	0x40021000
 8011f3c:	0801beb1 	.word	0x0801beb1
 8011f40:	40004400 	.word	0x40004400
 8011f44:	007a1200 	.word	0x007a1200
 8011f48:	40004800 	.word	0x40004800
 8011f4c:	40004c00 	.word	0x40004c00
 8011f50:	0000ffef 	.word	0x0000ffef

08011f54 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8011f56:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011f58:	07da      	lsls	r2, r3, #31
 8011f5a:	d506      	bpl.n	8011f6a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011f5c:	6801      	ldr	r1, [r0, #0]
 8011f5e:	4c28      	ldr	r4, [pc, #160]	; (8012000 <UART_AdvFeatureConfig+0xac>)
 8011f60:	684a      	ldr	r2, [r1, #4]
 8011f62:	4022      	ands	r2, r4
 8011f64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011f66:	4322      	orrs	r2, r4
 8011f68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011f6a:	079a      	lsls	r2, r3, #30
 8011f6c:	d506      	bpl.n	8011f7c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011f6e:	6801      	ldr	r1, [r0, #0]
 8011f70:	4c24      	ldr	r4, [pc, #144]	; (8012004 <UART_AdvFeatureConfig+0xb0>)
 8011f72:	684a      	ldr	r2, [r1, #4]
 8011f74:	4022      	ands	r2, r4
 8011f76:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011f78:	4322      	orrs	r2, r4
 8011f7a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011f7c:	075a      	lsls	r2, r3, #29
 8011f7e:	d506      	bpl.n	8011f8e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011f80:	6801      	ldr	r1, [r0, #0]
 8011f82:	4c21      	ldr	r4, [pc, #132]	; (8012008 <UART_AdvFeatureConfig+0xb4>)
 8011f84:	684a      	ldr	r2, [r1, #4]
 8011f86:	4022      	ands	r2, r4
 8011f88:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011f8a:	4322      	orrs	r2, r4
 8011f8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011f8e:	071a      	lsls	r2, r3, #28
 8011f90:	d506      	bpl.n	8011fa0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011f92:	6801      	ldr	r1, [r0, #0]
 8011f94:	4c1d      	ldr	r4, [pc, #116]	; (801200c <UART_AdvFeatureConfig+0xb8>)
 8011f96:	684a      	ldr	r2, [r1, #4]
 8011f98:	4022      	ands	r2, r4
 8011f9a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011f9c:	4322      	orrs	r2, r4
 8011f9e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011fa0:	06da      	lsls	r2, r3, #27
 8011fa2:	d506      	bpl.n	8011fb2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011fa4:	6801      	ldr	r1, [r0, #0]
 8011fa6:	4c1a      	ldr	r4, [pc, #104]	; (8012010 <UART_AdvFeatureConfig+0xbc>)
 8011fa8:	688a      	ldr	r2, [r1, #8]
 8011faa:	4022      	ands	r2, r4
 8011fac:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8011fae:	4322      	orrs	r2, r4
 8011fb0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011fb2:	069a      	lsls	r2, r3, #26
 8011fb4:	d506      	bpl.n	8011fc4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011fb6:	6801      	ldr	r1, [r0, #0]
 8011fb8:	4c16      	ldr	r4, [pc, #88]	; (8012014 <UART_AdvFeatureConfig+0xc0>)
 8011fba:	688a      	ldr	r2, [r1, #8]
 8011fbc:	4022      	ands	r2, r4
 8011fbe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8011fc0:	4322      	orrs	r2, r4
 8011fc2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011fc4:	065a      	lsls	r2, r3, #25
 8011fc6:	d510      	bpl.n	8011fea <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011fc8:	6801      	ldr	r1, [r0, #0]
 8011fca:	4d13      	ldr	r5, [pc, #76]	; (8012018 <UART_AdvFeatureConfig+0xc4>)
 8011fcc:	684a      	ldr	r2, [r1, #4]
 8011fce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8011fd0:	402a      	ands	r2, r5
 8011fd2:	4322      	orrs	r2, r4
 8011fd4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011fd6:	2280      	movs	r2, #128	; 0x80
 8011fd8:	0352      	lsls	r2, r2, #13
 8011fda:	4294      	cmp	r4, r2
 8011fdc:	d105      	bne.n	8011fea <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011fde:	684a      	ldr	r2, [r1, #4]
 8011fe0:	4c0e      	ldr	r4, [pc, #56]	; (801201c <UART_AdvFeatureConfig+0xc8>)
 8011fe2:	4022      	ands	r2, r4
 8011fe4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8011fe6:	4322      	orrs	r2, r4
 8011fe8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011fea:	061b      	lsls	r3, r3, #24
 8011fec:	d506      	bpl.n	8011ffc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011fee:	6802      	ldr	r2, [r0, #0]
 8011ff0:	490b      	ldr	r1, [pc, #44]	; (8012020 <UART_AdvFeatureConfig+0xcc>)
 8011ff2:	6853      	ldr	r3, [r2, #4]
 8011ff4:	400b      	ands	r3, r1
 8011ff6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8011ff8:	430b      	orrs	r3, r1
 8011ffa:	6053      	str	r3, [r2, #4]
}
 8011ffc:	bd30      	pop	{r4, r5, pc}
 8011ffe:	46c0      	nop			; (mov r8, r8)
 8012000:	fffdffff 	.word	0xfffdffff
 8012004:	fffeffff 	.word	0xfffeffff
 8012008:	fffbffff 	.word	0xfffbffff
 801200c:	ffff7fff 	.word	0xffff7fff
 8012010:	ffffefff 	.word	0xffffefff
 8012014:	ffffdfff 	.word	0xffffdfff
 8012018:	ffefffff 	.word	0xffefffff
 801201c:	ff9fffff 	.word	0xff9fffff
 8012020:	fff7ffff 	.word	0xfff7ffff

08012024 <UART_WaitOnFlagUntilTimeout>:
{
 8012024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012026:	0004      	movs	r4, r0
 8012028:	000d      	movs	r5, r1
 801202a:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801202c:	2608      	movs	r6, #8
{
 801202e:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012030:	6822      	ldr	r2, [r4, #0]
 8012032:	69d3      	ldr	r3, [r2, #28]
 8012034:	402b      	ands	r3, r5
 8012036:	1b5b      	subs	r3, r3, r5
 8012038:	4259      	negs	r1, r3
 801203a:	414b      	adcs	r3, r1
 801203c:	42bb      	cmp	r3, r7
 801203e:	d001      	beq.n	8012044 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8012040:	2000      	movs	r0, #0
 8012042:	e021      	b.n	8012088 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8012044:	9b08      	ldr	r3, [sp, #32]
 8012046:	3301      	adds	r3, #1
 8012048:	d0f3      	beq.n	8012032 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801204a:	f7fc fd87 	bl	800eb5c <HAL_GetTick>
 801204e:	9b00      	ldr	r3, [sp, #0]
 8012050:	1ac0      	subs	r0, r0, r3
 8012052:	9b08      	ldr	r3, [sp, #32]
 8012054:	4298      	cmp	r0, r3
 8012056:	d828      	bhi.n	80120aa <UART_WaitOnFlagUntilTimeout+0x86>
 8012058:	2b00      	cmp	r3, #0
 801205a:	d026      	beq.n	80120aa <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801205c:	2104      	movs	r1, #4
 801205e:	6823      	ldr	r3, [r4, #0]
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	420a      	tst	r2, r1
 8012064:	d0e4      	beq.n	8012030 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012066:	69da      	ldr	r2, [r3, #28]
 8012068:	0011      	movs	r1, r2
 801206a:	4031      	ands	r1, r6
 801206c:	9101      	str	r1, [sp, #4]
 801206e:	4232      	tst	r2, r6
 8012070:	d00b      	beq.n	801208a <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8012072:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012074:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8012076:	f7ff fe7d 	bl	8011d74 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801207a:	0023      	movs	r3, r4
 801207c:	3308      	adds	r3, #8
 801207e:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8012080:	2300      	movs	r3, #0
           return HAL_ERROR;
 8012082:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8012084:	3478      	adds	r4, #120	; 0x78
 8012086:	7023      	strb	r3, [r4, #0]
}
 8012088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801208a:	2280      	movs	r2, #128	; 0x80
 801208c:	69d9      	ldr	r1, [r3, #28]
 801208e:	0112      	lsls	r2, r2, #4
 8012090:	4211      	tst	r1, r2
 8012092:	d0cd      	beq.n	8012030 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012094:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8012096:	0020      	movs	r0, r4
 8012098:	f7ff fe6c 	bl	8011d74 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801209c:	0023      	movs	r3, r4
 801209e:	2220      	movs	r2, #32
 80120a0:	3308      	adds	r3, #8
 80120a2:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80120a4:	9b01      	ldr	r3, [sp, #4]
 80120a6:	3478      	adds	r4, #120	; 0x78
 80120a8:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80120aa:	2003      	movs	r0, #3
 80120ac:	e7ec      	b.n	8012088 <UART_WaitOnFlagUntilTimeout+0x64>
	...

080120b0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120b0:	0003      	movs	r3, r0
{
 80120b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120b4:	2500      	movs	r5, #0
{
 80120b6:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120b8:	3308      	adds	r3, #8
 80120ba:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80120bc:	f7fc fd4e 	bl	800eb5c <HAL_GetTick>
 80120c0:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80120c2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80120c4:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	3678      	adds	r6, #120	; 0x78
 80120ca:	071b      	lsls	r3, r3, #28
 80120cc:	d51b      	bpl.n	8012106 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120ce:	2180      	movs	r1, #128	; 0x80
 80120d0:	4b26      	ldr	r3, [pc, #152]	; (801216c <UART_CheckIdleState+0xbc>)
 80120d2:	002a      	movs	r2, r5
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	0389      	lsls	r1, r1, #14
 80120d8:	0003      	movs	r3, r0
 80120da:	0020      	movs	r0, r4
 80120dc:	f7ff ffa2 	bl	8012024 <UART_WaitOnFlagUntilTimeout>
 80120e0:	42a8      	cmp	r0, r5
 80120e2:	d010      	beq.n	8012106 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120e8:	2301      	movs	r3, #1
 80120ea:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80120ee:	2080      	movs	r0, #128	; 0x80
 80120f0:	6822      	ldr	r2, [r4, #0]
 80120f2:	6813      	ldr	r3, [r2, #0]
 80120f4:	4383      	bics	r3, r0
 80120f6:	6013      	str	r3, [r2, #0]
 80120f8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80120fc:	2320      	movs	r3, #32
 80120fe:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8012100:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 8012102:	2003      	movs	r0, #3
}
 8012104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012106:	0025      	movs	r5, r4
 8012108:	cd08      	ldmia	r5!, {r3}
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	075b      	lsls	r3, r3, #29
 801210e:	d525      	bpl.n	801215c <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012110:	2180      	movs	r1, #128	; 0x80
 8012112:	4b16      	ldr	r3, [pc, #88]	; (801216c <UART_CheckIdleState+0xbc>)
 8012114:	2200      	movs	r2, #0
 8012116:	9300      	str	r3, [sp, #0]
 8012118:	0020      	movs	r0, r4
 801211a:	003b      	movs	r3, r7
 801211c:	03c9      	lsls	r1, r1, #15
 801211e:	f7ff ff81 	bl	8012024 <UART_WaitOnFlagUntilTimeout>
 8012122:	2800      	cmp	r0, #0
 8012124:	d01a      	beq.n	801215c <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012126:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801212a:	2201      	movs	r2, #1
 801212c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012130:	6821      	ldr	r1, [r4, #0]
 8012132:	4f0f      	ldr	r7, [pc, #60]	; (8012170 <UART_CheckIdleState+0xc0>)
 8012134:	680b      	ldr	r3, [r1, #0]
 8012136:	403b      	ands	r3, r7
 8012138:	600b      	str	r3, [r1, #0]
 801213a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801213e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012142:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012146:	6821      	ldr	r1, [r4, #0]
 8012148:	688b      	ldr	r3, [r1, #8]
 801214a:	4393      	bics	r3, r2
 801214c:	608b      	str	r3, [r1, #8]
 801214e:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8012152:	2320      	movs	r3, #32
 8012154:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8012156:	2300      	movs	r3, #0
 8012158:	7033      	strb	r3, [r6, #0]
 801215a:	e7d2      	b.n	8012102 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801215c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 801215e:	2320      	movs	r3, #32
 8012160:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012162:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012164:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012166:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8012168:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 801216a:	e7cb      	b.n	8012104 <UART_CheckIdleState+0x54>
 801216c:	01ffffff 	.word	0x01ffffff
 8012170:	fffffedf 	.word	0xfffffedf

08012174 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8012174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012176:	0004      	movs	r4, r0
 8012178:	000f      	movs	r7, r1
 801217a:	0016      	movs	r6, r2
 801217c:	001d      	movs	r5, r3
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 801217e:	2800      	cmp	r0, #0
 8012180:	d101      	bne.n	8012186 <HAL_RS485Ex_Init+0x12>
  {
    return HAL_ERROR;
 8012182:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8012184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8012186:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012188:	2b00      	cmp	r3, #0
 801218a:	d104      	bne.n	8012196 <HAL_RS485Ex_Init+0x22>
    huart->Lock = HAL_UNLOCKED;
 801218c:	0002      	movs	r2, r0
 801218e:	3278      	adds	r2, #120	; 0x78
 8012190:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8012192:	f7fc fbc1 	bl	800e918 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8012196:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8012198:	2101      	movs	r1, #1
 801219a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801219c:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 801219e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80121a0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80121a2:	438b      	bics	r3, r1
 80121a4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80121a6:	f7ff fe13 	bl	8011dd0 <UART_SetConfig>
 80121aa:	2801      	cmp	r0, #1
 80121ac:	d0e9      	beq.n	8012182 <HAL_RS485Ex_Init+0xe>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80121ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d002      	beq.n	80121ba <HAL_RS485Ex_Init+0x46>
    UART_AdvFeatureConfig(huart);
 80121b4:	0020      	movs	r0, r4
 80121b6:	f7ff fecd 	bl	8011f54 <UART_AdvFeatureConfig>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80121ba:	2380      	movs	r3, #128	; 0x80
 80121bc:	6820      	ldr	r0, [r4, #0]
 80121be:	01db      	lsls	r3, r3, #7
 80121c0:	6882      	ldr	r2, [r0, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80121c2:	042d      	lsls	r5, r5, #16
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80121c4:	4313      	orrs	r3, r2
 80121c6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80121c8:	6881      	ldr	r1, [r0, #8]
 80121ca:	4b09      	ldr	r3, [pc, #36]	; (80121f0 <HAL_RS485Ex_Init+0x7c>)
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80121cc:	0572      	lsls	r2, r6, #21
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80121ce:	4019      	ands	r1, r3
 80121d0:	430f      	orrs	r7, r1
 80121d2:	6087      	str	r7, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80121d4:	6806      	ldr	r6, [r0, #0]
 80121d6:	4b07      	ldr	r3, [pc, #28]	; (80121f4 <HAL_RS485Ex_Init+0x80>)
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80121d8:	4315      	orrs	r5, r2
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80121da:	401e      	ands	r6, r3
  __HAL_UART_ENABLE(huart);
 80121dc:	2301      	movs	r3, #1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80121de:	4335      	orrs	r5, r6
 80121e0:	6005      	str	r5, [r0, #0]
  __HAL_UART_ENABLE(huart);
 80121e2:	6802      	ldr	r2, [r0, #0]
 80121e4:	4313      	orrs	r3, r2
 80121e6:	6003      	str	r3, [r0, #0]
  return (UART_CheckIdleState(huart));
 80121e8:	0020      	movs	r0, r4
 80121ea:	f7ff ff61 	bl	80120b0 <UART_CheckIdleState>
 80121ee:	e7c9      	b.n	8012184 <HAL_RS485Ex_Init+0x10>
 80121f0:	ffff7fff 	.word	0xffff7fff
 80121f4:	fc00ffff 	.word	0xfc00ffff

080121f8 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80121f8:	1d82      	adds	r2, r0, #6
{
 80121fa:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 80121fc:	2000      	movs	r0, #0
 80121fe:	87d0      	strh	r0, [r2, #62]	; 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012200:	4a01      	ldr	r2, [pc, #4]	; (8012208 <USB_EnableGlobalInt+0x10>)
 8012202:	3302      	adds	r3, #2
 8012204:	87da      	strh	r2, [r3, #62]	; 0x3e

  return HAL_OK;
}
 8012206:	4770      	bx	lr
 8012208:	ffffbf80 	.word	0xffffbf80

0801220c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801220c:	3002      	adds	r0, #2
 801220e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8012210:	4a02      	ldr	r2, [pc, #8]	; (801221c <USB_DisableGlobalInt+0x10>)
 8012212:	4013      	ands	r3, r2
 8012214:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8012216:	2000      	movs	r0, #0
 8012218:	4770      	bx	lr
 801221a:	46c0      	nop			; (mov r8, r8)
 801221c:	0000407f 	.word	0x0000407f

08012220 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012220:	b084      	sub	sp, #16
 8012222:	b510      	push	{r4, lr}
 8012224:	0004      	movs	r4, r0
 8012226:	9204      	str	r2, [sp, #16]
 8012228:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801222a:	2201      	movs	r2, #1
 801222c:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801222e:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012230:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 8012232:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012234:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012236:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 8012238:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 801223a:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 801223c:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 801223e:	bc10      	pop	{r4}
 8012240:	bc08      	pop	{r3}
 8012242:	b004      	add	sp, #16
 8012244:	4718      	bx	r3
	...

08012248 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801224a:	780e      	ldrb	r6, [r1, #0]
 801224c:	4a7c      	ldr	r2, [pc, #496]	; (8012440 <USB_ActivateEndpoint+0x1f8>)
 801224e:	00b3      	lsls	r3, r6, #2
 8012250:	18c3      	adds	r3, r0, r3
 8012252:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8012254:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012256:	4014      	ands	r4, r2
  switch (ep->type)
 8012258:	2201      	movs	r2, #1
{
 801225a:	0005      	movs	r5, r0
  switch (ep->type)
 801225c:	9200      	str	r2, [sp, #0]
 801225e:	2f03      	cmp	r7, #3
 8012260:	d808      	bhi.n	8012274 <USB_ActivateEndpoint+0x2c>
 8012262:	0038      	movs	r0, r7
 8012264:	f7f5 fbe2 	bl	8007a2c <__gnu_thumb1_case_uqi>
 8012268:	373a3d02 	.word	0x373a3d02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801226c:	2280      	movs	r2, #128	; 0x80
 801226e:	0092      	lsls	r2, r2, #2
 8012270:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8012272:	9700      	str	r7, [sp, #0]
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012274:	4a73      	ldr	r2, [pc, #460]	; (8012444 <USB_ActivateEndpoint+0x1fc>)
 8012276:	4314      	orrs	r4, r2
 8012278:	b2a4      	uxth	r4, r4
 801227a:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801227c:	8818      	ldrh	r0, [r3, #0]
 801227e:	4c72      	ldr	r4, [pc, #456]	; (8012448 <USB_ActivateEndpoint+0x200>)
 8012280:	4020      	ands	r0, r4
 8012282:	4330      	orrs	r0, r6
 8012284:	4310      	orrs	r0, r2
 8012286:	b280      	uxth	r0, r0
 8012288:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801228a:	00f0      	lsls	r0, r6, #3
 801228c:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 801228e:	7b08      	ldrb	r0, [r1, #12]
 8012290:	44ac      	add	ip, r5
 8012292:	3550      	adds	r5, #80	; 0x50
 8012294:	9501      	str	r5, [sp, #4]
 8012296:	2800      	cmp	r0, #0
 8012298:	d000      	beq.n	801229c <USB_ActivateEndpoint+0x54>
 801229a:	e06e      	b.n	801237a <USB_ActivateEndpoint+0x132>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801229c:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 801229e:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80122a0:	086d      	lsrs	r5, r5, #1
 80122a2:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d024      	beq.n	80122f2 <USB_ActivateEndpoint+0xaa>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80122a8:	2080      	movs	r0, #128	; 0x80
 80122aa:	9901      	ldr	r1, [sp, #4]
 80122ac:	00c0      	lsls	r0, r0, #3
 80122ae:	8809      	ldrh	r1, [r1, #0]
 80122b0:	4461      	add	r1, ip
 80122b2:	1809      	adds	r1, r1, r0
 80122b4:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80122b6:	8819      	ldrh	r1, [r3, #0]
 80122b8:	0649      	lsls	r1, r1, #25
 80122ba:	d504      	bpl.n	80122c6 <USB_ActivateEndpoint+0x7e>
 80122bc:	8819      	ldrh	r1, [r3, #0]
 80122be:	400c      	ands	r4, r1
 80122c0:	4962      	ldr	r1, [pc, #392]	; (801244c <USB_ActivateEndpoint+0x204>)
 80122c2:	430c      	orrs	r4, r1
 80122c4:	801c      	strh	r4, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80122c6:	4c62      	ldr	r4, [pc, #392]	; (8012450 <USB_ActivateEndpoint+0x208>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80122c8:	8819      	ldrh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 80122ca:	2f01      	cmp	r7, #1
 80122cc:	d00b      	beq.n	80122e6 <USB_ActivateEndpoint+0x9e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80122ce:	400c      	ands	r4, r1
 80122d0:	2120      	movs	r1, #32
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      if (ep->num == 0U)
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80122d2:	4061      	eors	r1, r4
 80122d4:	e008      	b.n	80122e8 <USB_ActivateEndpoint+0xa0>
      wEpRegVal |= USB_EP_INTERRUPT;
 80122d6:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80122d8:	00d2      	lsls	r2, r2, #3
 80122da:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80122dc:	2200      	movs	r2, #0
 80122de:	9200      	str	r2, [sp, #0]
      break;
 80122e0:	e7c8      	b.n	8012274 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80122e2:	2280      	movs	r2, #128	; 0x80
 80122e4:	e7f8      	b.n	80122d8 <USB_ActivateEndpoint+0x90>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80122e6:	4021      	ands	r1, r4
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80122e8:	430a      	orrs	r2, r1
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80122ea:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80122ec:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80122ee:	801a      	strh	r2, [r3, #0]
}
 80122f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80122f2:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80122f4:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80122f6:	8807      	ldrh	r7, [r0, #0]
 80122f8:	4856      	ldr	r0, [pc, #344]	; (8012454 <USB_ActivateEndpoint+0x20c>)
 80122fa:	4467      	add	r7, ip
 80122fc:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80122fe:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012300:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012302:	8805      	ldrh	r5, [r0, #0]
 8012304:	4854      	ldr	r0, [pc, #336]	; (8012458 <USB_ActivateEndpoint+0x210>)
 8012306:	4465      	add	r5, ip
 8012308:	182d      	adds	r5, r5, r0
 801230a:	882f      	ldrh	r7, [r5, #0]
 801230c:	05bf      	lsls	r7, r7, #22
 801230e:	0dbf      	lsrs	r7, r7, #22
 8012310:	802f      	strh	r7, [r5, #0]
 8012312:	293e      	cmp	r1, #62	; 0x3e
 8012314:	d90d      	bls.n	8012332 <USB_ActivateEndpoint+0xea>
 8012316:	201f      	movs	r0, #31
 8012318:	094f      	lsrs	r7, r1, #5
 801231a:	4001      	ands	r1, r0
 801231c:	0008      	movs	r0, r1
 801231e:	4241      	negs	r1, r0
 8012320:	4141      	adcs	r1, r0
 8012322:	1a7f      	subs	r7, r7, r1
 8012324:	8829      	ldrh	r1, [r5, #0]
 8012326:	02bf      	lsls	r7, r7, #10
 8012328:	430f      	orrs	r7, r1
 801232a:	494c      	ldr	r1, [pc, #304]	; (801245c <USB_ActivateEndpoint+0x214>)
 801232c:	4339      	orrs	r1, r7
 801232e:	b289      	uxth	r1, r1
 8012330:	e005      	b.n	801233e <USB_ActivateEndpoint+0xf6>
 8012332:	2900      	cmp	r1, #0
 8012334:	d114      	bne.n	8012360 <USB_ActivateEndpoint+0x118>
 8012336:	2780      	movs	r7, #128	; 0x80
 8012338:	8829      	ldrh	r1, [r5, #0]
 801233a:	023f      	lsls	r7, r7, #8
 801233c:	4339      	orrs	r1, r7
 801233e:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012340:	8819      	ldrh	r1, [r3, #0]
 8012342:	0449      	lsls	r1, r1, #17
 8012344:	d504      	bpl.n	8012350 <USB_ActivateEndpoint+0x108>
 8012346:	8819      	ldrh	r1, [r3, #0]
 8012348:	400c      	ands	r4, r1
 801234a:	4945      	ldr	r1, [pc, #276]	; (8012460 <USB_ActivateEndpoint+0x218>)
 801234c:	430c      	orrs	r4, r1
 801234e:	801c      	strh	r4, [r3, #0]
      if (ep->num == 0U)
 8012350:	4d44      	ldr	r5, [pc, #272]	; (8012464 <USB_ActivateEndpoint+0x21c>)
 8012352:	2e00      	cmp	r6, #0
 8012354:	d10b      	bne.n	801236e <USB_ActivateEndpoint+0x126>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012356:	21c0      	movs	r1, #192	; 0xc0
 8012358:	881c      	ldrh	r4, [r3, #0]
 801235a:	0189      	lsls	r1, r1, #6
 801235c:	402c      	ands	r4, r5
 801235e:	e7b8      	b.n	80122d2 <USB_ActivateEndpoint+0x8a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012360:	2001      	movs	r0, #1
 8012362:	084f      	lsrs	r7, r1, #1
 8012364:	4001      	ands	r1, r0
 8012366:	187f      	adds	r7, r7, r1
 8012368:	02bf      	lsls	r7, r7, #10
 801236a:	8829      	ldrh	r1, [r5, #0]
 801236c:	e7de      	b.n	801232c <USB_ActivateEndpoint+0xe4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801236e:	8819      	ldrh	r1, [r3, #0]
 8012370:	400d      	ands	r5, r1
 8012372:	2180      	movs	r1, #128	; 0x80
 8012374:	0189      	lsls	r1, r1, #6
 8012376:	4069      	eors	r1, r5
 8012378:	e7b6      	b.n	80122e8 <USB_ActivateEndpoint+0xa0>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801237a:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 801237c:	2f02      	cmp	r7, #2
 801237e:	d13a      	bne.n	80123f6 <USB_ActivateEndpoint+0x1ae>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012380:	4e39      	ldr	r6, [pc, #228]	; (8012468 <USB_ActivateEndpoint+0x220>)
 8012382:	4025      	ands	r5, r4
 8012384:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012386:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8012388:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801238a:	8805      	ldrh	r5, [r0, #0]
 801238c:	2080      	movs	r0, #128	; 0x80
 801238e:	890e      	ldrh	r6, [r1, #8]
 8012390:	4465      	add	r5, ip
 8012392:	00c0      	lsls	r0, r0, #3
 8012394:	0876      	lsrs	r6, r6, #1
 8012396:	182d      	adds	r5, r5, r0
 8012398:	0076      	lsls	r6, r6, #1
 801239a:	9801      	ldr	r0, [sp, #4]
 801239c:	802e      	strh	r6, [r5, #0]
 801239e:	8805      	ldrh	r5, [r0, #0]
 80123a0:	894e      	ldrh	r6, [r1, #10]
 80123a2:	482c      	ldr	r0, [pc, #176]	; (8012454 <USB_ActivateEndpoint+0x20c>)
 80123a4:	4465      	add	r5, ip
 80123a6:	0876      	lsrs	r6, r6, #1
 80123a8:	182d      	adds	r5, r5, r0
 80123aa:	0076      	lsls	r6, r6, #1
 80123ac:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 80123ae:	7849      	ldrb	r1, [r1, #1]
 80123b0:	4e27      	ldr	r6, [pc, #156]	; (8012450 <USB_ActivateEndpoint+0x208>)
 80123b2:	468c      	mov	ip, r1
 80123b4:	2180      	movs	r1, #128	; 0x80
 80123b6:	4660      	mov	r0, ip
 80123b8:	4d2a      	ldr	r5, [pc, #168]	; (8012464 <USB_ActivateEndpoint+0x21c>)
 80123ba:	01c9      	lsls	r1, r1, #7
 80123bc:	2800      	cmp	r0, #0
 80123be:	d11f      	bne.n	8012400 <USB_ActivateEndpoint+0x1b8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80123c0:	881f      	ldrh	r7, [r3, #0]
 80123c2:	420f      	tst	r7, r1
 80123c4:	d004      	beq.n	80123d0 <USB_ActivateEndpoint+0x188>
 80123c6:	8819      	ldrh	r1, [r3, #0]
 80123c8:	4f25      	ldr	r7, [pc, #148]	; (8012460 <USB_ActivateEndpoint+0x218>)
 80123ca:	4021      	ands	r1, r4
 80123cc:	4339      	orrs	r1, r7
 80123ce:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80123d0:	8819      	ldrh	r1, [r3, #0]
 80123d2:	0649      	lsls	r1, r1, #25
 80123d4:	d504      	bpl.n	80123e0 <USB_ActivateEndpoint+0x198>
 80123d6:	8819      	ldrh	r1, [r3, #0]
 80123d8:	400c      	ands	r4, r1
 80123da:	491c      	ldr	r1, [pc, #112]	; (801244c <USB_ActivateEndpoint+0x204>)
 80123dc:	430c      	orrs	r4, r1
 80123de:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80123e0:	8819      	ldrh	r1, [r3, #0]
 80123e2:	4029      	ands	r1, r5
 80123e4:	25c0      	movs	r5, #192	; 0xc0
 80123e6:	01ad      	lsls	r5, r5, #6
 80123e8:	404d      	eors	r5, r1
 80123ea:	4315      	orrs	r5, r2
 80123ec:	b2ad      	uxth	r5, r5
 80123ee:	801d      	strh	r5, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80123f0:	8819      	ldrh	r1, [r3, #0]
 80123f2:	4031      	ands	r1, r6
 80123f4:	e778      	b.n	80122e8 <USB_ActivateEndpoint+0xa0>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80123f6:	4e1d      	ldr	r6, [pc, #116]	; (801246c <USB_ActivateEndpoint+0x224>)
 80123f8:	4035      	ands	r5, r6
 80123fa:	4315      	orrs	r5, r2
 80123fc:	b2ad      	uxth	r5, r5
 80123fe:	e7c2      	b.n	8012386 <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012400:	8818      	ldrh	r0, [r3, #0]
 8012402:	4208      	tst	r0, r1
 8012404:	d004      	beq.n	8012410 <USB_ActivateEndpoint+0x1c8>
 8012406:	8819      	ldrh	r1, [r3, #0]
 8012408:	4815      	ldr	r0, [pc, #84]	; (8012460 <USB_ActivateEndpoint+0x218>)
 801240a:	4021      	ands	r1, r4
 801240c:	4301      	orrs	r1, r0
 801240e:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012410:	8819      	ldrh	r1, [r3, #0]
 8012412:	0649      	lsls	r1, r1, #25
 8012414:	d504      	bpl.n	8012420 <USB_ActivateEndpoint+0x1d8>
 8012416:	8819      	ldrh	r1, [r3, #0]
 8012418:	400c      	ands	r4, r1
 801241a:	490c      	ldr	r1, [pc, #48]	; (801244c <USB_ActivateEndpoint+0x204>)
 801241c:	430c      	orrs	r4, r1
 801241e:	801c      	strh	r4, [r3, #0]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012420:	8819      	ldrh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8012422:	2f01      	cmp	r7, #1
 8012424:	d009      	beq.n	801243a <USB_ActivateEndpoint+0x1f2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012426:	400e      	ands	r6, r1
 8012428:	2120      	movs	r1, #32
 801242a:	4071      	eors	r1, r6
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801242c:	4311      	orrs	r1, r2
 801242e:	b289      	uxth	r1, r1
 8012430:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012432:	8819      	ldrh	r1, [r3, #0]
 8012434:	400d      	ands	r5, r1
 8012436:	432a      	orrs	r2, r5
 8012438:	e757      	b.n	80122ea <USB_ActivateEndpoint+0xa2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801243a:	4031      	ands	r1, r6
 801243c:	e7f6      	b.n	801242c <USB_ActivateEndpoint+0x1e4>
 801243e:	46c0      	nop			; (mov r8, r8)
 8012440:	ffff898f 	.word	0xffff898f
 8012444:	ffff8080 	.word	0xffff8080
 8012448:	ffff8f8f 	.word	0xffff8f8f
 801244c:	000080c0 	.word	0x000080c0
 8012450:	ffff8fbf 	.word	0xffff8fbf
 8012454:	00000404 	.word	0x00000404
 8012458:	00000406 	.word	0x00000406
 801245c:	ffff8000 	.word	0xffff8000
 8012460:	0000c080 	.word	0x0000c080
 8012464:	ffffbf8f 	.word	0xffffbf8f
 8012468:	00008180 	.word	0x00008180
 801246c:	ffff8e8f 	.word	0xffff8e8f

08012470 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012470:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012472:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8012474:	7b0a      	ldrb	r2, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 801247a:	784d      	ldrb	r5, [r1, #1]
 801247c:	4b32      	ldr	r3, [pc, #200]	; (8012548 <USB_DeactivateEndpoint+0xd8>)
  if (ep->doublebuffer == 0U)
 801247e:	2a00      	cmp	r2, #0
 8012480:	d11d      	bne.n	80124be <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012482:	8802      	ldrh	r2, [r0, #0]
    if (ep->is_in != 0U)
 8012484:	2d00      	cmp	r5, #0
 8012486:	d00f      	beq.n	80124a8 <USB_DeactivateEndpoint+0x38>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012488:	0652      	lsls	r2, r2, #25
 801248a:	d505      	bpl.n	8012498 <USB_DeactivateEndpoint+0x28>
 801248c:	8802      	ldrh	r2, [r0, #0]
 801248e:	492f      	ldr	r1, [pc, #188]	; (801254c <USB_DeactivateEndpoint+0xdc>)
 8012490:	400a      	ands	r2, r1
 8012492:	492f      	ldr	r1, [pc, #188]	; (8012550 <USB_DeactivateEndpoint+0xe0>)
 8012494:	430a      	orrs	r2, r1
 8012496:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012498:	8802      	ldrh	r2, [r0, #0]
 801249a:	492e      	ldr	r1, [pc, #184]	; (8012554 <USB_DeactivateEndpoint+0xe4>)
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801249c:	400a      	ands	r2, r1

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801249e:	4313      	orrs	r3, r2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80124a4:	2000      	movs	r0, #0
 80124a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80124a8:	0452      	lsls	r2, r2, #17
 80124aa:	d505      	bpl.n	80124b8 <USB_DeactivateEndpoint+0x48>
 80124ac:	8802      	ldrh	r2, [r0, #0]
 80124ae:	4927      	ldr	r1, [pc, #156]	; (801254c <USB_DeactivateEndpoint+0xdc>)
 80124b0:	400a      	ands	r2, r1
 80124b2:	4929      	ldr	r1, [pc, #164]	; (8012558 <USB_DeactivateEndpoint+0xe8>)
 80124b4:	430a      	orrs	r2, r1
 80124b6:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80124b8:	8802      	ldrh	r2, [r0, #0]
 80124ba:	4928      	ldr	r1, [pc, #160]	; (801255c <USB_DeactivateEndpoint+0xec>)
 80124bc:	e7ee      	b.n	801249c <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 80124be:	2180      	movs	r1, #128	; 0x80
 80124c0:	4a22      	ldr	r2, [pc, #136]	; (801254c <USB_DeactivateEndpoint+0xdc>)
 80124c2:	4e24      	ldr	r6, [pc, #144]	; (8012554 <USB_DeactivateEndpoint+0xe4>)
 80124c4:	4c25      	ldr	r4, [pc, #148]	; (801255c <USB_DeactivateEndpoint+0xec>)
 80124c6:	01c9      	lsls	r1, r1, #7
 80124c8:	2d00      	cmp	r5, #0
 80124ca:	d11d      	bne.n	8012508 <USB_DeactivateEndpoint+0x98>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80124cc:	8805      	ldrh	r5, [r0, #0]
 80124ce:	420d      	tst	r5, r1
 80124d0:	d004      	beq.n	80124dc <USB_DeactivateEndpoint+0x6c>
 80124d2:	8801      	ldrh	r1, [r0, #0]
 80124d4:	4d20      	ldr	r5, [pc, #128]	; (8012558 <USB_DeactivateEndpoint+0xe8>)
 80124d6:	4011      	ands	r1, r2
 80124d8:	4329      	orrs	r1, r5
 80124da:	8001      	strh	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80124dc:	8801      	ldrh	r1, [r0, #0]
 80124de:	4d20      	ldr	r5, [pc, #128]	; (8012560 <USB_DeactivateEndpoint+0xf0>)
 80124e0:	0649      	lsls	r1, r1, #25
 80124e2:	d504      	bpl.n	80124ee <USB_DeactivateEndpoint+0x7e>
 80124e4:	8801      	ldrh	r1, [r0, #0]
 80124e6:	4011      	ands	r1, r2
 80124e8:	4329      	orrs	r1, r5
 80124ea:	b289      	uxth	r1, r1
 80124ec:	8001      	strh	r1, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 80124ee:	8801      	ldrh	r1, [r0, #0]
 80124f0:	400a      	ands	r2, r1
 80124f2:	4315      	orrs	r5, r2
 80124f4:	b2ad      	uxth	r5, r5
 80124f6:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80124f8:	8802      	ldrh	r2, [r0, #0]
 80124fa:	4014      	ands	r4, r2
 80124fc:	431c      	orrs	r4, r3
 80124fe:	b2a4      	uxth	r4, r4
 8012500:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012502:	8802      	ldrh	r2, [r0, #0]
 8012504:	4032      	ands	r2, r6
 8012506:	e7ca      	b.n	801249e <USB_DeactivateEndpoint+0x2e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012508:	8807      	ldrh	r7, [r0, #0]
 801250a:	4d16      	ldr	r5, [pc, #88]	; (8012564 <USB_DeactivateEndpoint+0xf4>)
 801250c:	420f      	tst	r7, r1
 801250e:	d004      	beq.n	801251a <USB_DeactivateEndpoint+0xaa>
 8012510:	8801      	ldrh	r1, [r0, #0]
 8012512:	4011      	ands	r1, r2
 8012514:	4329      	orrs	r1, r5
 8012516:	b289      	uxth	r1, r1
 8012518:	8001      	strh	r1, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801251a:	8801      	ldrh	r1, [r0, #0]
 801251c:	0649      	lsls	r1, r1, #25
 801251e:	d504      	bpl.n	801252a <USB_DeactivateEndpoint+0xba>
 8012520:	8801      	ldrh	r1, [r0, #0]
 8012522:	4f0b      	ldr	r7, [pc, #44]	; (8012550 <USB_DeactivateEndpoint+0xe0>)
 8012524:	4011      	ands	r1, r2
 8012526:	4339      	orrs	r1, r7
 8012528:	8001      	strh	r1, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801252a:	8801      	ldrh	r1, [r0, #0]
 801252c:	400a      	ands	r2, r1
 801252e:	4315      	orrs	r5, r2
 8012530:	b2ad      	uxth	r5, r5
 8012532:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012534:	8802      	ldrh	r2, [r0, #0]
 8012536:	4032      	ands	r2, r6
 8012538:	431a      	orrs	r2, r3
 801253a:	b292      	uxth	r2, r2
 801253c:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801253e:	8802      	ldrh	r2, [r0, #0]
 8012540:	4014      	ands	r4, r2
 8012542:	4323      	orrs	r3, r4
 8012544:	e7ac      	b.n	80124a0 <USB_DeactivateEndpoint+0x30>
 8012546:	46c0      	nop			; (mov r8, r8)
 8012548:	ffff8080 	.word	0xffff8080
 801254c:	ffff8f8f 	.word	0xffff8f8f
 8012550:	000080c0 	.word	0x000080c0
 8012554:	ffff8fbf 	.word	0xffff8fbf
 8012558:	0000c080 	.word	0x0000c080
 801255c:	ffffbf8f 	.word	0xffffbf8f
 8012560:	ffff80c0 	.word	0xffff80c0
 8012564:	ffffc080 	.word	0xffffc080

08012568 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012568:	780b      	ldrb	r3, [r1, #0]
 801256a:	4a0b      	ldr	r2, [pc, #44]	; (8012598 <USB_EPSetStall+0x30>)
 801256c:	009b      	lsls	r3, r3, #2
 801256e:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8012570:	784b      	ldrb	r3, [r1, #1]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d009      	beq.n	801258a <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012576:	8803      	ldrh	r3, [r0, #0]
 8012578:	4908      	ldr	r1, [pc, #32]	; (801259c <USB_EPSetStall+0x34>)
 801257a:	4019      	ands	r1, r3
 801257c:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801257e:	404b      	eors	r3, r1
 8012580:	4313      	orrs	r3, r2
 8012582:	b29b      	uxth	r3, r3
 8012584:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8012586:	2000      	movs	r0, #0
 8012588:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801258a:	8803      	ldrh	r3, [r0, #0]
 801258c:	4904      	ldr	r1, [pc, #16]	; (80125a0 <USB_EPSetStall+0x38>)
 801258e:	4019      	ands	r1, r3
 8012590:	2380      	movs	r3, #128	; 0x80
 8012592:	015b      	lsls	r3, r3, #5
 8012594:	e7f3      	b.n	801257e <USB_EPSetStall+0x16>
 8012596:	46c0      	nop			; (mov r8, r8)
 8012598:	ffff8080 	.word	0xffff8080
 801259c:	ffff8fbf 	.word	0xffff8fbf
 80125a0:	ffffbf8f 	.word	0xffffbf8f

080125a4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80125a4:	7b0b      	ldrb	r3, [r1, #12]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d119      	bne.n	80125de <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80125aa:	780b      	ldrb	r3, [r1, #0]
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 80125b0:	784b      	ldrb	r3, [r1, #1]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d015      	beq.n	80125e2 <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80125b6:	8803      	ldrh	r3, [r0, #0]
 80125b8:	065b      	lsls	r3, r3, #25
 80125ba:	d505      	bpl.n	80125c8 <USB_EPClearStall+0x24>
 80125bc:	8803      	ldrh	r3, [r0, #0]
 80125be:	4a10      	ldr	r2, [pc, #64]	; (8012600 <USB_EPClearStall+0x5c>)
 80125c0:	4013      	ands	r3, r2
 80125c2:	4a10      	ldr	r2, [pc, #64]	; (8012604 <USB_EPClearStall+0x60>)
 80125c4:	4313      	orrs	r3, r2
 80125c6:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 80125c8:	78cb      	ldrb	r3, [r1, #3]
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d007      	beq.n	80125de <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80125ce:	8803      	ldrh	r3, [r0, #0]
 80125d0:	4a0d      	ldr	r2, [pc, #52]	; (8012608 <USB_EPClearStall+0x64>)
 80125d2:	401a      	ands	r2, r3
 80125d4:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80125d6:	4053      	eors	r3, r2
 80125d8:	4a0c      	ldr	r2, [pc, #48]	; (801260c <USB_EPClearStall+0x68>)
 80125da:	4313      	orrs	r3, r2
 80125dc:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 80125de:	2000      	movs	r0, #0
 80125e0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80125e2:	8803      	ldrh	r3, [r0, #0]
 80125e4:	045b      	lsls	r3, r3, #17
 80125e6:	d505      	bpl.n	80125f4 <USB_EPClearStall+0x50>
 80125e8:	8803      	ldrh	r3, [r0, #0]
 80125ea:	4a05      	ldr	r2, [pc, #20]	; (8012600 <USB_EPClearStall+0x5c>)
 80125ec:	4013      	ands	r3, r2
 80125ee:	4a08      	ldr	r2, [pc, #32]	; (8012610 <USB_EPClearStall+0x6c>)
 80125f0:	4313      	orrs	r3, r2
 80125f2:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80125f4:	8803      	ldrh	r3, [r0, #0]
 80125f6:	4a07      	ldr	r2, [pc, #28]	; (8012614 <USB_EPClearStall+0x70>)
 80125f8:	401a      	ands	r2, r3
 80125fa:	23c0      	movs	r3, #192	; 0xc0
 80125fc:	019b      	lsls	r3, r3, #6
 80125fe:	e7ea      	b.n	80125d6 <USB_EPClearStall+0x32>
 8012600:	ffff8f8f 	.word	0xffff8f8f
 8012604:	000080c0 	.word	0x000080c0
 8012608:	ffff8fbf 	.word	0xffff8fbf
 801260c:	00008080 	.word	0x00008080
 8012610:	0000c080 	.word	0x0000c080
 8012614:	ffffbf8f 	.word	0xffffbf8f

08012618 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8012618:	2900      	cmp	r1, #0
 801261a:	d102      	bne.n	8012622 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801261c:	2380      	movs	r3, #128	; 0x80
 801261e:	304c      	adds	r0, #76	; 0x4c
 8012620:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8012622:	2000      	movs	r0, #0
 8012624:	4770      	bx	lr

08012626 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012626:	2280      	movs	r2, #128	; 0x80
 8012628:	3058      	adds	r0, #88	; 0x58
 801262a:	8803      	ldrh	r3, [r0, #0]
 801262c:	0212      	lsls	r2, r2, #8
 801262e:	4313      	orrs	r3, r2
 8012630:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8012632:	2000      	movs	r0, #0
 8012634:	4770      	bx	lr

08012636 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012636:	3006      	adds	r0, #6
 8012638:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 801263a:	b280      	uxth	r0, r0
  return tmpreg;
}
 801263c:	4770      	bx	lr

0801263e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801263e:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012640:	2480      	movs	r4, #128	; 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012642:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012644:	00e4      	lsls	r4, r4, #3
 8012646:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012648:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801264a:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 801264c:	005b      	lsls	r3, r3, #1
 801264e:	18cb      	adds	r3, r1, r3
 8012650:	1a40      	subs	r0, r0, r1
 8012652:	1844      	adds	r4, r0, r1
 8012654:	428b      	cmp	r3, r1
 8012656:	d100      	bne.n	801265a <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8012658:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 801265a:	784a      	ldrb	r2, [r1, #1]
 801265c:	780d      	ldrb	r5, [r1, #0]
 801265e:	0212      	lsls	r2, r2, #8
 8012660:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8012662:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8012664:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8012666:	e7f4      	b.n	8012652 <USB_WritePMA+0x14>

08012668 <USB_EPStartXfer>:
{
 8012668:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 801266a:	784a      	ldrb	r2, [r1, #1]
{
 801266c:	0005      	movs	r5, r0
 801266e:	000c      	movs	r4, r1
    if (ep->doublebuffer == 0U)
 8012670:	7b0b      	ldrb	r3, [r1, #12]
{
 8012672:	b085      	sub	sp, #20
  if (ep->is_in == 1U)
 8012674:	2a01      	cmp	r2, #1
 8012676:	d000      	beq.n	801267a <USB_EPStartXfer+0x12>
 8012678:	e110      	b.n	801289c <USB_EPStartXfer+0x234>
    if (ep->xfer_len > ep->maxpacket)
 801267a:	6908      	ldr	r0, [r1, #16]
 801267c:	698e      	ldr	r6, [r1, #24]
 801267e:	4286      	cmp	r6, r0
 8012680:	d900      	bls.n	8012684 <USB_EPStartXfer+0x1c>
 8012682:	0006      	movs	r6, r0
    if (ep->doublebuffer == 0U)
 8012684:	002f      	movs	r7, r5
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012686:	6962      	ldr	r2, [r4, #20]
 8012688:	3750      	adds	r7, #80	; 0x50
 801268a:	9201      	str	r2, [sp, #4]
    if (ep->doublebuffer == 0U)
 801268c:	2b00      	cmp	r3, #0
 801268e:	d11d      	bne.n	80126cc <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012690:	b2b6      	uxth	r6, r6
 8012692:	0033      	movs	r3, r6
 8012694:	88e2      	ldrh	r2, [r4, #6]
 8012696:	9901      	ldr	r1, [sp, #4]
 8012698:	0028      	movs	r0, r5
 801269a:	f7ff ffd0 	bl	801263e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801269e:	4ab0      	ldr	r2, [pc, #704]	; (8012960 <USB_EPStartXfer+0x2f8>)
 80126a0:	8839      	ldrh	r1, [r7, #0]
 80126a2:	7823      	ldrb	r3, [r4, #0]
 80126a4:	18aa      	adds	r2, r5, r2
 80126a6:	00db      	lsls	r3, r3, #3
 80126a8:	1852      	adds	r2, r2, r1
 80126aa:	189b      	adds	r3, r3, r2
 80126ac:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80126ae:	7820      	ldrb	r0, [r4, #0]
 80126b0:	4aac      	ldr	r2, [pc, #688]	; (8012964 <USB_EPStartXfer+0x2fc>)
 80126b2:	0080      	lsls	r0, r0, #2
 80126b4:	182d      	adds	r5, r5, r0
 80126b6:	882b      	ldrh	r3, [r5, #0]
 80126b8:	401a      	ands	r2, r3
 80126ba:	2330      	movs	r3, #48	; 0x30
 80126bc:	4053      	eors	r3, r2
 80126be:	4aaa      	ldr	r2, [pc, #680]	; (8012968 <USB_EPStartXfer+0x300>)
 80126c0:	4313      	orrs	r3, r2
 80126c2:	b29b      	uxth	r3, r3
  return HAL_OK;
 80126c4:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80126c6:	802b      	strh	r3, [r5, #0]
}
 80126c8:	b005      	add	sp, #20
 80126ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80126cc:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 80126ce:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80126d0:	00d1      	lsls	r1, r2, #3
 80126d2:	9102      	str	r1, [sp, #8]
      if (ep->type == EP_TYPE_BULK)
 80126d4:	78e1      	ldrb	r1, [r4, #3]
 80126d6:	0092      	lsls	r2, r2, #2
 80126d8:	2902      	cmp	r1, #2
 80126da:	d000      	beq.n	80126de <USB_EPStartXfer+0x76>
 80126dc:	e0c7      	b.n	801286e <USB_EPStartXfer+0x206>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80126de:	18aa      	adds	r2, r5, r2
        if (ep->xfer_len_db > ep->maxpacket)
 80126e0:	4298      	cmp	r0, r3
 80126e2:	d300      	bcc.n	80126e6 <USB_EPStartXfer+0x7e>
 80126e4:	e0b2      	b.n	801284c <USB_EPStartXfer+0x1e4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80126e6:	8811      	ldrh	r1, [r2, #0]
 80126e8:	48a0      	ldr	r0, [pc, #640]	; (801296c <USB_EPStartXfer+0x304>)
          ep->xfer_len_db -= len;
 80126ea:	1b9b      	subs	r3, r3, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80126ec:	4008      	ands	r0, r1
 80126ee:	49a0      	ldr	r1, [pc, #640]	; (8012970 <USB_EPStartXfer+0x308>)
 80126f0:	4308      	orrs	r0, r1
 80126f2:	8010      	strh	r0, [r2, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80126f4:	8810      	ldrh	r0, [r2, #0]
 80126f6:	2240      	movs	r2, #64	; 0x40
 80126f8:	0001      	movs	r1, r0
 80126fa:	4011      	ands	r1, r2
          ep->xfer_len_db -= len;
 80126fc:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80126fe:	9103      	str	r1, [sp, #12]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012700:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012702:	4210      	tst	r0, r2
 8012704:	d052      	beq.n	80127ac <USB_EPStartXfer+0x144>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012706:	4a9b      	ldr	r2, [pc, #620]	; (8012974 <USB_EPStartXfer+0x30c>)
 8012708:	8838      	ldrh	r0, [r7, #0]
 801270a:	9902      	ldr	r1, [sp, #8]
 801270c:	18aa      	adds	r2, r5, r2
 801270e:	1812      	adds	r2, r2, r0
 8012710:	1852      	adds	r2, r2, r1
 8012712:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012714:	0028      	movs	r0, r5
 8012716:	8962      	ldrh	r2, [r4, #10]
 8012718:	9901      	ldr	r1, [sp, #4]
 801271a:	f7ff ff90 	bl	801263e <USB_WritePMA>
            ep->xfer_buff += len;
 801271e:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8012720:	6a20      	ldr	r0, [r4, #32]
 8012722:	6922      	ldr	r2, [r4, #16]
            ep->xfer_buff += len;
 8012724:	1999      	adds	r1, r3, r6
 8012726:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db = 0U;
 8012728:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 801272a:	4290      	cmp	r0, r2
 801272c:	d901      	bls.n	8012732 <USB_EPStartXfer+0xca>
              ep->xfer_len_db -= len;
 801272e:	1b83      	subs	r3, r0, r6
 8012730:	0030      	movs	r0, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012732:	7862      	ldrb	r2, [r4, #1]
 8012734:	6223      	str	r3, [r4, #32]
 8012736:	b283      	uxth	r3, r0
 8012738:	2a00      	cmp	r2, #0
 801273a:	d12c      	bne.n	8012796 <USB_EPStartXfer+0x12e>
 801273c:	4a88      	ldr	r2, [pc, #544]	; (8012960 <USB_EPStartXfer+0x2f8>)
 801273e:	883f      	ldrh	r7, [r7, #0]
 8012740:	7826      	ldrb	r6, [r4, #0]
 8012742:	18aa      	adds	r2, r5, r2
 8012744:	00f6      	lsls	r6, r6, #3
 8012746:	19d2      	adds	r2, r2, r7
 8012748:	18b2      	adds	r2, r6, r2
 801274a:	8816      	ldrh	r6, [r2, #0]
 801274c:	05b6      	lsls	r6, r6, #22
 801274e:	0db6      	lsrs	r6, r6, #22
 8012750:	8016      	strh	r6, [r2, #0]
 8012752:	283e      	cmp	r0, #62	; 0x3e
 8012754:	d90c      	bls.n	8012770 <USB_EPStartXfer+0x108>
 8012756:	271f      	movs	r7, #31
 8012758:	0946      	lsrs	r6, r0, #5
 801275a:	4038      	ands	r0, r7
 801275c:	4247      	negs	r7, r0
 801275e:	4178      	adcs	r0, r7
 8012760:	1a36      	subs	r6, r6, r0
 8012762:	8810      	ldrh	r0, [r2, #0]
 8012764:	02b6      	lsls	r6, r6, #10
 8012766:	4306      	orrs	r6, r0
 8012768:	4883      	ldr	r0, [pc, #524]	; (8012978 <USB_EPStartXfer+0x310>)
 801276a:	4330      	orrs	r0, r6
 801276c:	b280      	uxth	r0, r0
 801276e:	e005      	b.n	801277c <USB_EPStartXfer+0x114>
 8012770:	2800      	cmp	r0, #0
 8012772:	d109      	bne.n	8012788 <USB_EPStartXfer+0x120>
 8012774:	2680      	movs	r6, #128	; 0x80
 8012776:	8810      	ldrh	r0, [r2, #0]
 8012778:	0236      	lsls	r6, r6, #8
 801277a:	4330      	orrs	r0, r6
 801277c:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801277e:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012780:	0028      	movs	r0, r5
 8012782:	f7ff ff5c 	bl	801263e <USB_WritePMA>
 8012786:	e792      	b.n	80126ae <USB_EPStartXfer+0x46>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012788:	2701      	movs	r7, #1
 801278a:	0846      	lsrs	r6, r0, #1
 801278c:	4038      	ands	r0, r7
 801278e:	1836      	adds	r6, r6, r0
 8012790:	02b6      	lsls	r6, r6, #10
 8012792:	8810      	ldrh	r0, [r2, #0]
 8012794:	e7e9      	b.n	801276a <USB_EPStartXfer+0x102>
 8012796:	2a01      	cmp	r2, #1
 8012798:	d1f1      	bne.n	801277e <USB_EPStartXfer+0x116>
 801279a:	4871      	ldr	r0, [pc, #452]	; (8012960 <USB_EPStartXfer+0x2f8>)
 801279c:	883e      	ldrh	r6, [r7, #0]
 801279e:	7822      	ldrb	r2, [r4, #0]
 80127a0:	1828      	adds	r0, r5, r0
 80127a2:	00d2      	lsls	r2, r2, #3
 80127a4:	1980      	adds	r0, r0, r6
 80127a6:	1812      	adds	r2, r2, r0
 80127a8:	8013      	strh	r3, [r2, #0]
 80127aa:	e7e8      	b.n	801277e <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80127ac:	4a6c      	ldr	r2, [pc, #432]	; (8012960 <USB_EPStartXfer+0x2f8>)
 80127ae:	8838      	ldrh	r0, [r7, #0]
 80127b0:	9902      	ldr	r1, [sp, #8]
 80127b2:	18aa      	adds	r2, r5, r2
 80127b4:	1812      	adds	r2, r2, r0
 80127b6:	1852      	adds	r2, r2, r1
 80127b8:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127ba:	0028      	movs	r0, r5
 80127bc:	8922      	ldrh	r2, [r4, #8]
 80127be:	9901      	ldr	r1, [sp, #4]
 80127c0:	f7ff ff3d 	bl	801263e <USB_WritePMA>
            ep->xfer_buff += len;
 80127c4:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80127c6:	6a20      	ldr	r0, [r4, #32]
 80127c8:	6922      	ldr	r2, [r4, #16]
            ep->xfer_buff += len;
 80127ca:	1999      	adds	r1, r3, r6
 80127cc:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db = 0U;
 80127ce:	9b03      	ldr	r3, [sp, #12]
            if (ep->xfer_len_db > ep->maxpacket)
 80127d0:	4290      	cmp	r0, r2
 80127d2:	d901      	bls.n	80127d8 <USB_EPStartXfer+0x170>
              ep->xfer_len_db -= len;
 80127d4:	1b83      	subs	r3, r0, r6
 80127d6:	0030      	movs	r0, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80127d8:	7862      	ldrb	r2, [r4, #1]
 80127da:	6223      	str	r3, [r4, #32]
 80127dc:	b283      	uxth	r3, r0
 80127de:	2a00      	cmp	r2, #0
 80127e0:	d129      	bne.n	8012836 <USB_EPStartXfer+0x1ce>
 80127e2:	4a64      	ldr	r2, [pc, #400]	; (8012974 <USB_EPStartXfer+0x30c>)
 80127e4:	883f      	ldrh	r7, [r7, #0]
 80127e6:	7826      	ldrb	r6, [r4, #0]
 80127e8:	18aa      	adds	r2, r5, r2
 80127ea:	00f6      	lsls	r6, r6, #3
 80127ec:	19d2      	adds	r2, r2, r7
 80127ee:	18b2      	adds	r2, r6, r2
 80127f0:	8816      	ldrh	r6, [r2, #0]
 80127f2:	05b6      	lsls	r6, r6, #22
 80127f4:	0db6      	lsrs	r6, r6, #22
 80127f6:	8016      	strh	r6, [r2, #0]
 80127f8:	283e      	cmp	r0, #62	; 0x3e
 80127fa:	d90c      	bls.n	8012816 <USB_EPStartXfer+0x1ae>
 80127fc:	271f      	movs	r7, #31
 80127fe:	0946      	lsrs	r6, r0, #5
 8012800:	4038      	ands	r0, r7
 8012802:	4247      	negs	r7, r0
 8012804:	4178      	adcs	r0, r7
 8012806:	1a36      	subs	r6, r6, r0
 8012808:	8810      	ldrh	r0, [r2, #0]
 801280a:	02b6      	lsls	r6, r6, #10
 801280c:	4306      	orrs	r6, r0
 801280e:	485a      	ldr	r0, [pc, #360]	; (8012978 <USB_EPStartXfer+0x310>)
 8012810:	4330      	orrs	r0, r6
 8012812:	b280      	uxth	r0, r0
 8012814:	e005      	b.n	8012822 <USB_EPStartXfer+0x1ba>
 8012816:	2800      	cmp	r0, #0
 8012818:	d106      	bne.n	8012828 <USB_EPStartXfer+0x1c0>
 801281a:	2680      	movs	r6, #128	; 0x80
 801281c:	8810      	ldrh	r0, [r2, #0]
 801281e:	0236      	lsls	r6, r6, #8
 8012820:	4330      	orrs	r0, r6
 8012822:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012824:	8962      	ldrh	r2, [r4, #10]
 8012826:	e7ab      	b.n	8012780 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012828:	2701      	movs	r7, #1
 801282a:	0846      	lsrs	r6, r0, #1
 801282c:	4038      	ands	r0, r7
 801282e:	1836      	adds	r6, r6, r0
 8012830:	02b6      	lsls	r6, r6, #10
 8012832:	8810      	ldrh	r0, [r2, #0]
 8012834:	e7ec      	b.n	8012810 <USB_EPStartXfer+0x1a8>
 8012836:	2a01      	cmp	r2, #1
 8012838:	d1f4      	bne.n	8012824 <USB_EPStartXfer+0x1bc>
 801283a:	484e      	ldr	r0, [pc, #312]	; (8012974 <USB_EPStartXfer+0x30c>)
 801283c:	883e      	ldrh	r6, [r7, #0]
 801283e:	7822      	ldrb	r2, [r4, #0]
 8012840:	1828      	adds	r0, r5, r0
 8012842:	00d2      	lsls	r2, r2, #3
 8012844:	1980      	adds	r0, r0, r6
 8012846:	1812      	adds	r2, r2, r0
 8012848:	8013      	strh	r3, [r2, #0]
 801284a:	e7eb      	b.n	8012824 <USB_EPStartXfer+0x1bc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801284c:	8810      	ldrh	r0, [r2, #0]
 801284e:	4e4b      	ldr	r6, [pc, #300]	; (801297c <USB_EPStartXfer+0x314>)
 8012850:	4945      	ldr	r1, [pc, #276]	; (8012968 <USB_EPStartXfer+0x300>)
 8012852:	4030      	ands	r0, r6
 8012854:	4308      	orrs	r0, r1
 8012856:	b280      	uxth	r0, r0
 8012858:	8010      	strh	r0, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801285a:	4a41      	ldr	r2, [pc, #260]	; (8012960 <USB_EPStartXfer+0x2f8>)
 801285c:	8838      	ldrh	r0, [r7, #0]
 801285e:	9902      	ldr	r1, [sp, #8]
 8012860:	18aa      	adds	r2, r5, r2
 8012862:	1812      	adds	r2, r2, r0
 8012864:	1852      	adds	r2, r2, r1
 8012866:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012868:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801286a:	8922      	ldrh	r2, [r4, #8]
 801286c:	e00e      	b.n	801288c <USB_EPStartXfer+0x224>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801286e:	18aa      	adds	r2, r5, r2
        ep->xfer_len_db -= len;
 8012870:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012872:	8812      	ldrh	r2, [r2, #0]
        ep->xfer_len_db -= len;
 8012874:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012876:	8838      	ldrh	r0, [r7, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012878:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801287a:	0652      	lsls	r2, r2, #25
 801287c:	d508      	bpl.n	8012890 <USB_EPStartXfer+0x228>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801287e:	4a3d      	ldr	r2, [pc, #244]	; (8012974 <USB_EPStartXfer+0x30c>)
 8012880:	9902      	ldr	r1, [sp, #8]
 8012882:	18aa      	adds	r2, r5, r2
 8012884:	1812      	adds	r2, r2, r0
 8012886:	1852      	adds	r2, r2, r1
 8012888:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801288a:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801288c:	9901      	ldr	r1, [sp, #4]
 801288e:	e777      	b.n	8012780 <USB_EPStartXfer+0x118>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012890:	4a33      	ldr	r2, [pc, #204]	; (8012960 <USB_EPStartXfer+0x2f8>)
 8012892:	9902      	ldr	r1, [sp, #8]
 8012894:	18aa      	adds	r2, r5, r2
 8012896:	1812      	adds	r2, r2, r0
 8012898:	1852      	adds	r2, r2, r1
 801289a:	e7e5      	b.n	8012868 <USB_EPStartXfer+0x200>
    if (ep->doublebuffer == 0U)
 801289c:	2b00      	cmp	r3, #0
 801289e:	d13c      	bne.n	801291a <USB_EPStartXfer+0x2b2>
      if (ep->xfer_len > ep->maxpacket)
 80128a0:	698a      	ldr	r2, [r1, #24]
 80128a2:	6909      	ldr	r1, [r1, #16]
 80128a4:	428a      	cmp	r2, r1
 80128a6:	d901      	bls.n	80128ac <USB_EPStartXfer+0x244>
        ep->xfer_len -= len;
 80128a8:	1a53      	subs	r3, r2, r1
 80128aa:	000a      	movs	r2, r1
 80128ac:	61a3      	str	r3, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80128ae:	002b      	movs	r3, r5
 80128b0:	3350      	adds	r3, #80	; 0x50
 80128b2:	8818      	ldrh	r0, [r3, #0]
 80128b4:	4b2f      	ldr	r3, [pc, #188]	; (8012974 <USB_EPStartXfer+0x30c>)
 80128b6:	7821      	ldrb	r1, [r4, #0]
 80128b8:	18eb      	adds	r3, r5, r3
 80128ba:	00c9      	lsls	r1, r1, #3
 80128bc:	181b      	adds	r3, r3, r0
 80128be:	18cb      	adds	r3, r1, r3
 80128c0:	8819      	ldrh	r1, [r3, #0]
 80128c2:	0589      	lsls	r1, r1, #22
 80128c4:	0d89      	lsrs	r1, r1, #22
 80128c6:	8019      	strh	r1, [r3, #0]
 80128c8:	2a3e      	cmp	r2, #62	; 0x3e
 80128ca:	d90c      	bls.n	80128e6 <USB_EPStartXfer+0x27e>
 80128cc:	201f      	movs	r0, #31
 80128ce:	0951      	lsrs	r1, r2, #5
 80128d0:	4002      	ands	r2, r0
 80128d2:	4250      	negs	r0, r2
 80128d4:	4142      	adcs	r2, r0
 80128d6:	1a89      	subs	r1, r1, r2
 80128d8:	881a      	ldrh	r2, [r3, #0]
 80128da:	0289      	lsls	r1, r1, #10
 80128dc:	4311      	orrs	r1, r2
 80128de:	4a26      	ldr	r2, [pc, #152]	; (8012978 <USB_EPStartXfer+0x310>)
 80128e0:	430a      	orrs	r2, r1
 80128e2:	b292      	uxth	r2, r2
 80128e4:	e005      	b.n	80128f2 <USB_EPStartXfer+0x28a>
 80128e6:	2a00      	cmp	r2, #0
 80128e8:	d110      	bne.n	801290c <USB_EPStartXfer+0x2a4>
 80128ea:	2180      	movs	r1, #128	; 0x80
 80128ec:	881a      	ldrh	r2, [r3, #0]
 80128ee:	0209      	lsls	r1, r1, #8
 80128f0:	430a      	orrs	r2, r1
 80128f2:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80128f4:	7820      	ldrb	r0, [r4, #0]
 80128f6:	4a22      	ldr	r2, [pc, #136]	; (8012980 <USB_EPStartXfer+0x318>)
 80128f8:	0080      	lsls	r0, r0, #2
 80128fa:	182d      	adds	r5, r5, r0
 80128fc:	882b      	ldrh	r3, [r5, #0]
 80128fe:	401a      	ands	r2, r3
 8012900:	23c0      	movs	r3, #192	; 0xc0
 8012902:	019b      	lsls	r3, r3, #6
 8012904:	4053      	eors	r3, r2
 8012906:	4a1f      	ldr	r2, [pc, #124]	; (8012984 <USB_EPStartXfer+0x31c>)
 8012908:	4313      	orrs	r3, r2
 801290a:	e6db      	b.n	80126c4 <USB_EPStartXfer+0x5c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801290c:	2001      	movs	r0, #1
 801290e:	0851      	lsrs	r1, r2, #1
 8012910:	4002      	ands	r2, r0
 8012912:	1889      	adds	r1, r1, r2
 8012914:	0289      	lsls	r1, r1, #10
 8012916:	881a      	ldrh	r2, [r3, #0]
 8012918:	e7e2      	b.n	80128e0 <USB_EPStartXfer+0x278>
      if (ep->type == EP_TYPE_BULK)
 801291a:	78cb      	ldrb	r3, [r1, #3]
 801291c:	2b02      	cmp	r3, #2
 801291e:	d000      	beq.n	8012922 <USB_EPStartXfer+0x2ba>
 8012920:	e07b      	b.n	8012a1a <USB_EPStartXfer+0x3b2>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012922:	2a00      	cmp	r2, #0
 8012924:	d14b      	bne.n	80129be <USB_EPStartXfer+0x356>
 8012926:	0006      	movs	r6, r0
 8012928:	4a0d      	ldr	r2, [pc, #52]	; (8012960 <USB_EPStartXfer+0x2f8>)
 801292a:	3650      	adds	r6, #80	; 0x50
 801292c:	8831      	ldrh	r1, [r6, #0]
 801292e:	7823      	ldrb	r3, [r4, #0]
 8012930:	1882      	adds	r2, r0, r2
 8012932:	00db      	lsls	r3, r3, #3
 8012934:	1852      	adds	r2, r2, r1
 8012936:	189a      	adds	r2, r3, r2
 8012938:	8813      	ldrh	r3, [r2, #0]
 801293a:	059b      	lsls	r3, r3, #22
 801293c:	0d9b      	lsrs	r3, r3, #22
 801293e:	8013      	strh	r3, [r2, #0]
 8012940:	6923      	ldr	r3, [r4, #16]
 8012942:	2b3e      	cmp	r3, #62	; 0x3e
 8012944:	d920      	bls.n	8012988 <USB_EPStartXfer+0x320>
 8012946:	271f      	movs	r7, #31
 8012948:	401f      	ands	r7, r3
 801294a:	4279      	negs	r1, r7
 801294c:	414f      	adcs	r7, r1
 801294e:	0958      	lsrs	r0, r3, #5
 8012950:	8811      	ldrh	r1, [r2, #0]
 8012952:	1bc0      	subs	r0, r0, r7
 8012954:	0280      	lsls	r0, r0, #10
 8012956:	4308      	orrs	r0, r1
 8012958:	4907      	ldr	r1, [pc, #28]	; (8012978 <USB_EPStartXfer+0x310>)
 801295a:	4301      	orrs	r1, r0
 801295c:	b289      	uxth	r1, r1
 801295e:	e019      	b.n	8012994 <USB_EPStartXfer+0x32c>
 8012960:	00000402 	.word	0x00000402
 8012964:	ffff8fbf 	.word	0xffff8fbf
 8012968:	ffff8080 	.word	0xffff8080
 801296c:	ffff8f8f 	.word	0xffff8f8f
 8012970:	00008180 	.word	0x00008180
 8012974:	00000406 	.word	0x00000406
 8012978:	ffff8000 	.word	0xffff8000
 801297c:	ffff8e8f 	.word	0xffff8e8f
 8012980:	ffffbf8f 	.word	0xffffbf8f
 8012984:	00008080 	.word	0x00008080
 8012988:	2b00      	cmp	r3, #0
 801298a:	d12b      	bne.n	80129e4 <USB_EPStartXfer+0x37c>
 801298c:	2080      	movs	r0, #128	; 0x80
 801298e:	8811      	ldrh	r1, [r2, #0]
 8012990:	0200      	lsls	r0, r0, #8
 8012992:	4301      	orrs	r1, r0
 8012994:	8011      	strh	r1, [r2, #0]
 8012996:	4a52      	ldr	r2, [pc, #328]	; (8012ae0 <USB_EPStartXfer+0x478>)
 8012998:	8830      	ldrh	r0, [r6, #0]
 801299a:	7821      	ldrb	r1, [r4, #0]
 801299c:	18aa      	adds	r2, r5, r2
 801299e:	00c9      	lsls	r1, r1, #3
 80129a0:	1812      	adds	r2, r2, r0
 80129a2:	188a      	adds	r2, r1, r2
 80129a4:	8811      	ldrh	r1, [r2, #0]
 80129a6:	0589      	lsls	r1, r1, #22
 80129a8:	0d89      	lsrs	r1, r1, #22
 80129aa:	8011      	strh	r1, [r2, #0]
 80129ac:	2b3e      	cmp	r3, #62	; 0x3e
 80129ae:	d820      	bhi.n	80129f2 <USB_EPStartXfer+0x38a>
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d12b      	bne.n	8012a0c <USB_EPStartXfer+0x3a4>
 80129b4:	2180      	movs	r1, #128	; 0x80
 80129b6:	8813      	ldrh	r3, [r2, #0]
 80129b8:	0209      	lsls	r1, r1, #8
 80129ba:	430b      	orrs	r3, r1
 80129bc:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 80129be:	69e3      	ldr	r3, [r4, #28]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d097      	beq.n	80128f4 <USB_EPStartXfer+0x28c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80129c4:	7823      	ldrb	r3, [r4, #0]
 80129c6:	4947      	ldr	r1, [pc, #284]	; (8012ae4 <USB_EPStartXfer+0x47c>)
 80129c8:	009b      	lsls	r3, r3, #2
 80129ca:	18eb      	adds	r3, r5, r3
 80129cc:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80129ce:	400a      	ands	r2, r1
 80129d0:	428a      	cmp	r2, r1
 80129d2:	d002      	beq.n	80129da <USB_EPStartXfer+0x372>
 80129d4:	2a00      	cmp	r2, #0
 80129d6:	d000      	beq.n	80129da <USB_EPStartXfer+0x372>
 80129d8:	e78c      	b.n	80128f4 <USB_EPStartXfer+0x28c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80129da:	4943      	ldr	r1, [pc, #268]	; (8012ae8 <USB_EPStartXfer+0x480>)
 80129dc:	881a      	ldrh	r2, [r3, #0]
 80129de:	400a      	ands	r2, r1
 80129e0:	4942      	ldr	r1, [pc, #264]	; (8012aec <USB_EPStartXfer+0x484>)
 80129e2:	e785      	b.n	80128f0 <USB_EPStartXfer+0x288>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80129e4:	2101      	movs	r1, #1
 80129e6:	0858      	lsrs	r0, r3, #1
 80129e8:	4019      	ands	r1, r3
 80129ea:	1840      	adds	r0, r0, r1
 80129ec:	0280      	lsls	r0, r0, #10
 80129ee:	8811      	ldrh	r1, [r2, #0]
 80129f0:	e7b3      	b.n	801295a <USB_EPStartXfer+0x2f2>
 80129f2:	201f      	movs	r0, #31
 80129f4:	0959      	lsrs	r1, r3, #5
 80129f6:	4003      	ands	r3, r0
 80129f8:	4258      	negs	r0, r3
 80129fa:	4143      	adcs	r3, r0
 80129fc:	1ac9      	subs	r1, r1, r3
 80129fe:	8813      	ldrh	r3, [r2, #0]
 8012a00:	0289      	lsls	r1, r1, #10
 8012a02:	4319      	orrs	r1, r3
 8012a04:	4b3a      	ldr	r3, [pc, #232]	; (8012af0 <USB_EPStartXfer+0x488>)
 8012a06:	430b      	orrs	r3, r1
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	e7d7      	b.n	80129bc <USB_EPStartXfer+0x354>
 8012a0c:	2001      	movs	r0, #1
 8012a0e:	0859      	lsrs	r1, r3, #1
 8012a10:	4003      	ands	r3, r0
 8012a12:	18c9      	adds	r1, r1, r3
 8012a14:	0289      	lsls	r1, r1, #10
 8012a16:	8813      	ldrh	r3, [r2, #0]
 8012a18:	e7f5      	b.n	8012a06 <USB_EPStartXfer+0x39e>
        return HAL_ERROR;
 8012a1a:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8012a1c:	4283      	cmp	r3, r0
 8012a1e:	d000      	beq.n	8012a22 <USB_EPStartXfer+0x3ba>
 8012a20:	e652      	b.n	80126c8 <USB_EPStartXfer+0x60>
        if (ep->xfer_len > ep->maxpacket)
 8012a22:	698b      	ldr	r3, [r1, #24]
 8012a24:	6909      	ldr	r1, [r1, #16]
          ep->xfer_len = 0U;
 8012a26:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 8012a28:	428b      	cmp	r3, r1
 8012a2a:	d901      	bls.n	8012a30 <USB_EPStartXfer+0x3c8>
          ep->xfer_len -= len;
 8012a2c:	1a58      	subs	r0, r3, r1
 8012a2e:	000b      	movs	r3, r1
 8012a30:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012a32:	2a00      	cmp	r2, #0
 8012a34:	d000      	beq.n	8012a38 <USB_EPStartXfer+0x3d0>
 8012a36:	e75d      	b.n	80128f4 <USB_EPStartXfer+0x28c>
 8012a38:	002e      	movs	r6, r5
 8012a3a:	4a2e      	ldr	r2, [pc, #184]	; (8012af4 <USB_EPStartXfer+0x48c>)
 8012a3c:	3650      	adds	r6, #80	; 0x50
 8012a3e:	8830      	ldrh	r0, [r6, #0]
 8012a40:	7821      	ldrb	r1, [r4, #0]
 8012a42:	18aa      	adds	r2, r5, r2
 8012a44:	00c9      	lsls	r1, r1, #3
 8012a46:	1812      	adds	r2, r2, r0
 8012a48:	188a      	adds	r2, r1, r2
 8012a4a:	8811      	ldrh	r1, [r2, #0]
 8012a4c:	0589      	lsls	r1, r1, #22
 8012a4e:	0d89      	lsrs	r1, r1, #22
 8012a50:	8011      	strh	r1, [r2, #0]
 8012a52:	2b3e      	cmp	r3, #62	; 0x3e
 8012a54:	d90c      	bls.n	8012a70 <USB_EPStartXfer+0x408>
 8012a56:	211f      	movs	r1, #31
 8012a58:	4019      	ands	r1, r3
 8012a5a:	424f      	negs	r7, r1
 8012a5c:	4179      	adcs	r1, r7
 8012a5e:	0958      	lsrs	r0, r3, #5
 8012a60:	1a40      	subs	r0, r0, r1
 8012a62:	8811      	ldrh	r1, [r2, #0]
 8012a64:	0280      	lsls	r0, r0, #10
 8012a66:	4308      	orrs	r0, r1
 8012a68:	4921      	ldr	r1, [pc, #132]	; (8012af0 <USB_EPStartXfer+0x488>)
 8012a6a:	4301      	orrs	r1, r0
 8012a6c:	b289      	uxth	r1, r1
 8012a6e:	e005      	b.n	8012a7c <USB_EPStartXfer+0x414>
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d119      	bne.n	8012aa8 <USB_EPStartXfer+0x440>
 8012a74:	2080      	movs	r0, #128	; 0x80
 8012a76:	8811      	ldrh	r1, [r2, #0]
 8012a78:	0200      	lsls	r0, r0, #8
 8012a7a:	4301      	orrs	r1, r0
 8012a7c:	8011      	strh	r1, [r2, #0]
 8012a7e:	4a18      	ldr	r2, [pc, #96]	; (8012ae0 <USB_EPStartXfer+0x478>)
 8012a80:	8830      	ldrh	r0, [r6, #0]
 8012a82:	7821      	ldrb	r1, [r4, #0]
 8012a84:	18aa      	adds	r2, r5, r2
 8012a86:	00c9      	lsls	r1, r1, #3
 8012a88:	1812      	adds	r2, r2, r0
 8012a8a:	188a      	adds	r2, r1, r2
 8012a8c:	8811      	ldrh	r1, [r2, #0]
 8012a8e:	0589      	lsls	r1, r1, #22
 8012a90:	0d89      	lsrs	r1, r1, #22
 8012a92:	8011      	strh	r1, [r2, #0]
 8012a94:	2b3e      	cmp	r3, #62	; 0x3e
 8012a96:	d80e      	bhi.n	8012ab6 <USB_EPStartXfer+0x44e>
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d119      	bne.n	8012ad0 <USB_EPStartXfer+0x468>
 8012a9c:	2180      	movs	r1, #128	; 0x80
 8012a9e:	8813      	ldrh	r3, [r2, #0]
 8012aa0:	0209      	lsls	r1, r1, #8
 8012aa2:	430b      	orrs	r3, r1
 8012aa4:	8013      	strh	r3, [r2, #0]
 8012aa6:	e725      	b.n	80128f4 <USB_EPStartXfer+0x28c>
 8012aa8:	2101      	movs	r1, #1
 8012aaa:	0858      	lsrs	r0, r3, #1
 8012aac:	4019      	ands	r1, r3
 8012aae:	1840      	adds	r0, r0, r1
 8012ab0:	0280      	lsls	r0, r0, #10
 8012ab2:	8811      	ldrh	r1, [r2, #0]
 8012ab4:	e7d9      	b.n	8012a6a <USB_EPStartXfer+0x402>
 8012ab6:	201f      	movs	r0, #31
 8012ab8:	0959      	lsrs	r1, r3, #5
 8012aba:	4003      	ands	r3, r0
 8012abc:	4258      	negs	r0, r3
 8012abe:	4143      	adcs	r3, r0
 8012ac0:	1ac9      	subs	r1, r1, r3
 8012ac2:	8813      	ldrh	r3, [r2, #0]
 8012ac4:	0289      	lsls	r1, r1, #10
 8012ac6:	4319      	orrs	r1, r3
 8012ac8:	4b09      	ldr	r3, [pc, #36]	; (8012af0 <USB_EPStartXfer+0x488>)
 8012aca:	430b      	orrs	r3, r1
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	e7e9      	b.n	8012aa4 <USB_EPStartXfer+0x43c>
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	0859      	lsrs	r1, r3, #1
 8012ad4:	4003      	ands	r3, r0
 8012ad6:	18c9      	adds	r1, r1, r3
 8012ad8:	0289      	lsls	r1, r1, #10
 8012ada:	8813      	ldrh	r3, [r2, #0]
 8012adc:	e7f5      	b.n	8012aca <USB_EPStartXfer+0x462>
 8012ade:	46c0      	nop			; (mov r8, r8)
 8012ae0:	00000406 	.word	0x00000406
 8012ae4:	00004040 	.word	0x00004040
 8012ae8:	ffff8f8f 	.word	0xffff8f8f
 8012aec:	000080c0 	.word	0x000080c0
 8012af0:	ffff8000 	.word	0xffff8000
 8012af4:	00000402 	.word	0x00000402

08012af8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012af8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012afa:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012afc:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012afe:	00ed      	lsls	r5, r5, #3
 8012b00:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 8012b02:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8012b04:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012b06:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8012b08:	1a47      	subs	r7, r0, r1
 8012b0a:	197a      	adds	r2, r7, r5
 8012b0c:	2e00      	cmp	r6, #0
 8012b0e:	d107      	bne.n	8012b20 <USB_ReadPMA+0x28>
 8012b10:	0064      	lsls	r4, r4, #1
 8012b12:	1900      	adds	r0, r0, r4
 8012b14:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012b16:	07db      	lsls	r3, r3, #31
 8012b18:	d501      	bpl.n	8012b1e <USB_ReadPMA+0x26>
  {
    RdVal = *pdwVal;
 8012b1a:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012b1c:	700b      	strb	r3, [r1, #0]
  }
}
 8012b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8012b20:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8012b22:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8012b24:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012b26:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012b28:	0a12      	lsrs	r2, r2, #8
 8012b2a:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8012b2c:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 8012b2e:	e7ec      	b.n	8012b0a <USB_ReadPMA+0x12>

08012b30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012b30:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012b32:	4903      	ldr	r1, [pc, #12]	; (8012b40 <MX_FATFS_Init+0x10>)
 8012b34:	4803      	ldr	r0, [pc, #12]	; (8012b44 <MX_FATFS_Init+0x14>)
 8012b36:	f004 faa5 	bl	8017084 <FATFS_LinkDriver>
 8012b3a:	4b03      	ldr	r3, [pc, #12]	; (8012b48 <MX_FATFS_Init+0x18>)
 8012b3c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012b3e:	bd10      	pop	{r4, pc}
 8012b40:	20000630 	.word	0x20000630
 8012b44:	200000f0 	.word	0x200000f0
 8012b48:	20000634 	.word	0x20000634

08012b4c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	4770      	bx	lr

08012b50 <MX_FATFS_DeInit>:

/* USER CODE BEGIN Application */
void MX_FATFS_DeInit(void)
{
 8012b50:	b510      	push	{r4, lr}
	retUSER = FATFS_UnLinkDriver(USERPath);
 8012b52:	4803      	ldr	r0, [pc, #12]	; (8012b60 <MX_FATFS_DeInit+0x10>)
 8012b54:	f004 fab6 	bl	80170c4 <FATFS_UnLinkDriver>
 8012b58:	4b02      	ldr	r3, [pc, #8]	; (8012b64 <MX_FATFS_DeInit+0x14>)
 8012b5a:	7018      	strb	r0, [r3, #0]
}
 8012b5c:	bd10      	pop	{r4, pc}
 8012b5e:	46c0      	nop			; (mov r8, r8)
 8012b60:	20000630 	.word	0x20000630
 8012b64:	20000634 	.word	0x20000634

08012b68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012b68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;

	return SD_disk_initialize (pdrv);
 8012b6a:	f7f8 f835 	bl	800abd8 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8012b6e:	bd10      	pop	{r4, pc}

08012b70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012b70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 8012b72:	f7f8 f8cd 	bl	800ad10 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8012b76:	bd10      	pop	{r4, pc}

08012b78 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012b78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN READ */
	SD_disk_read (pdrv, buff, sector, count);
 8012b7a:	f7f8 f8d3 	bl	800ad24 <SD_disk_read>
    return RES_OK;
  /* USER CODE END READ */
}
 8012b7e:	2000      	movs	r0, #0
 8012b80:	bd10      	pop	{r4, pc}

08012b82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012b82:	b510      	push	{r4, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 8012b84:	f7f8 f918 	bl	800adb8 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8012b88:	bd10      	pop	{r4, pc}

08012b8a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012b8a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 8012b8c:	f7f8 f96e 	bl	800ae6c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8012b90:	bd10      	pop	{r4, pc}
	...

08012b94 <FLASH_ReadEntireMemory>:

static void FLASH_ReadEntireMemory(uint16_t *ReadBuf) {
	volatile uint16_t *words = (volatile uint16_t*) MEMORY_ADDR;

	for (uint16_t i = 0; i < TOTAL_BYTE/2; i++) {
		ReadBuf[i] = words[i];
 8012b94:	4a04      	ldr	r2, [pc, #16]	; (8012ba8 <FLASH_ReadEntireMemory+0x14>)
static void FLASH_ReadEntireMemory(uint16_t *ReadBuf) {
 8012b96:	4b05      	ldr	r3, [pc, #20]	; (8012bac <FLASH_ReadEntireMemory+0x18>)
		ReadBuf[i] = words[i];
 8012b98:	1880      	adds	r0, r0, r2
	for (uint16_t i = 0; i < TOTAL_BYTE/2; i++) {
 8012b9a:	4a05      	ldr	r2, [pc, #20]	; (8012bb0 <FLASH_ReadEntireMemory+0x1c>)
		ReadBuf[i] = words[i];
 8012b9c:	8819      	ldrh	r1, [r3, #0]
 8012b9e:	52c1      	strh	r1, [r0, r3]
	for (uint16_t i = 0; i < TOTAL_BYTE/2; i++) {
 8012ba0:	3302      	adds	r3, #2
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d1fa      	bne.n	8012b9c <FLASH_ReadEntireMemory+0x8>
	}
}
 8012ba6:	4770      	bx	lr
 8012ba8:	f7fe0800 	.word	0xf7fe0800
 8012bac:	0801f800 	.word	0x0801f800
 8012bb0:	0801f83c 	.word	0x0801f83c

08012bb4 <FLASH_Write.constprop.0>:
	for (uint8_t i = 0; i < sizeof(VDRLZ_Input) / 2; i++) {
		ReadBuf[INDEX_VDRLZ/2 + i] = temp[i];
	}
}

static void FLASH_Write(uint16_t *ReadBuf, uint32_t Addr) {
 8012bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bb6:	0005      	movs	r5, r0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8012bb8:	f7fc f864 	bl	800ec84 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	480d      	ldr	r0, [pc, #52]	; (8012bf4 <FLASH_Write.constprop.0+0x40>)
	EraseInitStruct.PageAddress = Addr;
 8012bc0:	4c0d      	ldr	r4, [pc, #52]	; (8012bf8 <FLASH_Write.constprop.0+0x44>)
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8012bc2:	6003      	str	r3, [r0, #0]
	EraseInitStruct.NbPages = 1;

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8012bc4:	a901      	add	r1, sp, #4
	EraseInitStruct.NbPages = 1;
 8012bc6:	3301      	adds	r3, #1
	EraseInitStruct.PageAddress = Addr;
 8012bc8:	6044      	str	r4, [r0, #4]
	EraseInitStruct.NbPages = 1;
 8012bca:	6083      	str	r3, [r0, #8]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8012bcc:	f7fc f908 	bl	800ede0 <HAL_FLASHEx_Erase>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d10d      	bne.n	8012bf0 <FLASH_Write.constprop.0+0x3c>
		/*Error occurred while page erase.*/
		return;
	}

	for (uint16_t i = 0; i < (TOTAL_BYTE + 1) / 2; i++)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Addr + i * 2, ReadBuf[i]);
 8012bd4:	4b09      	ldr	r3, [pc, #36]	; (8012bfc <FLASH_Write.constprop.0+0x48>)
 8012bd6:	0021      	movs	r1, r4
 8012bd8:	18eb      	adds	r3, r5, r3
 8012bda:	5b1a      	ldrh	r2, [r3, r4]
 8012bdc:	2001      	movs	r0, #1
 8012bde:	2300      	movs	r3, #0
 8012be0:	f7fc f898 	bl	800ed14 <HAL_FLASH_Program>
	for (uint16_t i = 0; i < (TOTAL_BYTE + 1) / 2; i++)
 8012be4:	4b06      	ldr	r3, [pc, #24]	; (8012c00 <FLASH_Write.constprop.0+0x4c>)
 8012be6:	3402      	adds	r4, #2
 8012be8:	429c      	cmp	r4, r3
 8012bea:	d1f3      	bne.n	8012bd4 <FLASH_Write.constprop.0+0x20>
	HAL_FLASH_Lock();
 8012bec:	f7fc f85e 	bl	800ecac <HAL_FLASH_Lock>
}
 8012bf0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8012bf2:	46c0      	nop			; (mov r8, r8)
 8012bf4:	20000638 	.word	0x20000638
 8012bf8:	0801f800 	.word	0x0801f800
 8012bfc:	f7fe0800 	.word	0xf7fe0800
 8012c00:	0801f83c 	.word	0x0801f83c

08012c04 <FLASH_WriteDataCalib>:

void FLASH_WriteDataCalib(MeasureValue *data, uint8_t measurementIndex)
{
 8012c04:	b530      	push	{r4, r5, lr}
 8012c06:	0004      	movs	r4, r0
 8012c08:	000d      	movs	r5, r1
 8012c0a:	b091      	sub	sp, #68	; 0x44
	uint32_t Addr = 0;
	uint16_t ReadBuf[(TOTAL_BYTE + 1) / 2];

	if(data == NULL)
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d010      	beq.n	8012c32 <FLASH_WriteDataCalib+0x2e>
	{
		return;
	}

	Addr = MEMORY_ADDR;
	FLASH_ReadEntireMemory(ReadBuf);
 8012c10:	a801      	add	r0, sp, #4
 8012c12:	f7ff ffbf 	bl	8012b94 <FLASH_ReadEntireMemory>
		indexArray = INDEX_DATA_CALIB_1 / 2;
 8012c16:	2000      	movs	r0, #0
	if (measurementIndex == 1)
 8012c18:	2d01      	cmp	r5, #1
 8012c1a:	d000      	beq.n	8012c1e <FLASH_WriteDataCalib+0x1a>
		indexArray = INDEX_DATA_CALIB_2 /2 ;
 8012c1c:	300a      	adds	r0, #10
		ReadBuf[indexArray + i] = temp[i];
 8012c1e:	ab01      	add	r3, sp, #4
 8012c20:	0040      	lsls	r0, r0, #1
 8012c22:	2214      	movs	r2, #20
 8012c24:	0021      	movs	r1, r4
 8012c26:	1818      	adds	r0, r3, r0
 8012c28:	f005 fd06 	bl	8018638 <memcpy>
	updateDataCalib(ReadBuf, data, measurementIndex);
	FLASH_Write(ReadBuf, Addr);
 8012c2c:	a801      	add	r0, sp, #4
 8012c2e:	f7ff ffc1 	bl	8012bb4 <FLASH_Write.constprop.0>
}
 8012c32:	b011      	add	sp, #68	; 0x44
 8012c34:	bd30      	pop	{r4, r5, pc}
	...

08012c38 <FLASH_ReadDataCalib>:
	uint32_t Addr = 0;

	if (measurementIndex == 1) {
		Addr = MEMORY_ADDR + INDEX_DATA_CALIB_1;
	} else {
		Addr = MEMORY_ADDR + INDEX_DATA_CALIB_2;
 8012c38:	3901      	subs	r1, #1
 8012c3a:	424b      	negs	r3, r1
 8012c3c:	4159      	adcs	r1, r3
 8012c3e:	2313      	movs	r3, #19
{
 8012c40:	b510      	push	{r4, lr}
 8012c42:	0004      	movs	r4, r0
		Addr = MEMORY_ADDR + INDEX_DATA_CALIB_2;
 8012c44:	4249      	negs	r1, r1
 8012c46:	4399      	bics	r1, r3
 8012c48:	4b03      	ldr	r3, [pc, #12]	; (8012c58 <FLASH_ReadDataCalib+0x20>)
	}
	return *(MeasureValue*) Addr;
 8012c4a:	2214      	movs	r2, #20
		Addr = MEMORY_ADDR + INDEX_DATA_CALIB_2;
 8012c4c:	18c9      	adds	r1, r1, r3
	return *(MeasureValue*) Addr;
 8012c4e:	f005 fcf3 	bl	8018638 <memcpy>
}
 8012c52:	0020      	movs	r0, r4
 8012c54:	bd10      	pop	{r4, pc}
 8012c56:	46c0      	nop			; (mov r8, r8)
 8012c58:	0801f814 	.word	0x0801f814

08012c5c <FLASH_WriteVDRLZ>:


void FLASH_WriteVDRLZ(VDRLZ_Input *data)
{
 8012c5c:	b510      	push	{r4, lr}
 8012c5e:	0004      	movs	r4, r0
 8012c60:	b090      	sub	sp, #64	; 0x40
	uint32_t Addr = 0;
	uint16_t ReadBuf[(TOTAL_BYTE + 1) / 2];

	if(data == NULL)
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d00a      	beq.n	8012c7c <FLASH_WriteVDRLZ+0x20>
	{
		return;
	}

	Addr = MEMORY_ADDR;
	FLASH_ReadEntireMemory(ReadBuf);
 8012c66:	a801      	add	r0, sp, #4
 8012c68:	f7ff ff94 	bl	8012b94 <FLASH_ReadEntireMemory>
		ReadBuf[INDEX_VDRLZ/2 + i] = temp[i];
 8012c6c:	2214      	movs	r2, #20
 8012c6e:	0021      	movs	r1, r4
 8012c70:	a80b      	add	r0, sp, #44	; 0x2c
 8012c72:	f005 fce1 	bl	8018638 <memcpy>
	updateVDRLZ(ReadBuf, data);
	FLASH_Write(ReadBuf, Addr);
 8012c76:	a801      	add	r0, sp, #4
 8012c78:	f7ff ff9c 	bl	8012bb4 <FLASH_Write.constprop.0>
}
 8012c7c:	b010      	add	sp, #64	; 0x40
 8012c7e:	bd10      	pop	{r4, pc}

08012c80 <FLASH_ReadVDRLZ>:

VDRLZ_Input FLASH_ReadVDRLZ()
{
 8012c80:	b510      	push	{r4, lr}
 8012c82:	0004      	movs	r4, r0
//	memcpy(readStruct, (VDRLZ_Input*)(MEMORY_ADDR + INDEX_VDRLZ), sizeof(VDRLZ_Input));
	return *(VDRLZ_Input*)(MEMORY_ADDR + INDEX_VDRLZ);
 8012c84:	2214      	movs	r2, #20
 8012c86:	4902      	ldr	r1, [pc, #8]	; (8012c90 <FLASH_ReadVDRLZ+0x10>)
 8012c88:	f005 fcd6 	bl	8018638 <memcpy>
}
 8012c8c:	0020      	movs	r0, r4
 8012c8e:	bd10      	pop	{r4, pc}
 8012c90:	0801f828 	.word	0x0801f828

08012c94 <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
 8012c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c96:	0004      	movs	r4, r0
	CHECK_SOCKNUM();
 8012c98:	2808      	cmp	r0, #8
 8012c9a:	d82d      	bhi.n	8012cf8 <close+0x64>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8012c9c:	0147      	lsls	r7, r0, #5
 8012c9e:	003e      	movs	r6, r7
 8012ca0:	3709      	adds	r7, #9
 8012ca2:	37ff      	adds	r7, #255	; 0xff
 8012ca4:	2110      	movs	r1, #16
 8012ca6:	0038      	movs	r0, r7
 8012ca8:	3608      	adds	r6, #8
 8012caa:	f000 fae3 	bl	8013274 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8012cae:	0038      	movs	r0, r7
 8012cb0:	f000 fab2 	bl	8013218 <WIZCHIP_READ>
 8012cb4:	1e05      	subs	r5, r0, #0
 8012cb6:	d1fa      	bne.n	8012cae <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8012cb8:	2380      	movs	r3, #128	; 0x80
 8012cba:	009b      	lsls	r3, r3, #2
 8012cbc:	211f      	movs	r1, #31
 8012cbe:	18f0      	adds	r0, r6, r3
 8012cc0:	f000 fad8 	bl	8013274 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	40a3      	lsls	r3, r4
 8012cc8:	43db      	mvns	r3, r3
 8012cca:	490d      	ldr	r1, [pc, #52]	; (8012d00 <close+0x6c>)
 8012ccc:	b21b      	sxth	r3, r3
 8012cce:	880a      	ldrh	r2, [r1, #0]
 8012cd0:	401a      	ands	r2, r3
 8012cd2:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8012cd4:	490b      	ldr	r1, [pc, #44]	; (8012d04 <close+0x70>)
 8012cd6:	880a      	ldrh	r2, [r1, #0]
 8012cd8:	4013      	ands	r3, r2
 8012cda:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
 8012cdc:	4b0a      	ldr	r3, [pc, #40]	; (8012d08 <close+0x74>)
 8012cde:	0062      	lsls	r2, r4, #1
 8012ce0:	52d5      	strh	r5, [r2, r3]
	sock_pack_info[sn] = 0;
 8012ce2:	4b0a      	ldr	r3, [pc, #40]	; (8012d0c <close+0x78>)
 8012ce4:	551d      	strb	r5, [r3, r4]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8012ce6:	23c0      	movs	r3, #192	; 0xc0
 8012ce8:	009b      	lsls	r3, r3, #2
 8012cea:	18f0      	adds	r0, r6, r3
 8012cec:	f000 fa94 	bl	8013218 <WIZCHIP_READ>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d1f8      	bne.n	8012ce6 <close+0x52>
 8012cf4:	3001      	adds	r0, #1
	return SOCK_OK;
}
 8012cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 8012cf8:	2001      	movs	r0, #1
 8012cfa:	4240      	negs	r0, r0
 8012cfc:	e7fb      	b.n	8012cf6 <close+0x62>
 8012cfe:	46c0      	nop			; (mov r8, r8)
 8012d00:	20000644 	.word	0x20000644
 8012d04:	20000646 	.word	0x20000646
 8012d08:	20000650 	.word	0x20000650
 8012d0c:	20000648 	.word	0x20000648

08012d10 <socket>:
{
 8012d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d12:	b085      	sub	sp, #20
 8012d14:	0004      	movs	r4, r0
 8012d16:	0016      	movs	r6, r2
 8012d18:	001d      	movs	r5, r3
 8012d1a:	9101      	str	r1, [sp, #4]
	CHECK_SOCKNUM();
 8012d1c:	2808      	cmp	r0, #8
 8012d1e:	d900      	bls.n	8012d22 <socket+0x12>
 8012d20:	e07b      	b.n	8012e1a <socket+0x10a>
	switch(protocol)
 8012d22:	000b      	movs	r3, r1
 8012d24:	2901      	cmp	r1, #1
 8012d26:	d004      	beq.n	8012d32 <socket+0x22>
 8012d28:	3b02      	subs	r3, #2
 8012d2a:	2b02      	cmp	r3, #2
 8012d2c:	d90c      	bls.n	8012d48 <socket+0x38>
 8012d2e:	2005      	movs	r0, #5
 8012d30:	e074      	b.n	8012e1c <socket+0x10c>
            getSIPR((uint8_t*)&taddr);
 8012d32:	20f0      	movs	r0, #240	; 0xf0
 8012d34:	2204      	movs	r2, #4
 8012d36:	0100      	lsls	r0, r0, #4
 8012d38:	a903      	add	r1, sp, #12
 8012d3a:	f000 fac9 	bl	80132d0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8012d3e:	9b03      	ldr	r3, [sp, #12]
 8012d40:	2003      	movs	r0, #3
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d100      	bne.n	8012d48 <socket+0x38>
 8012d46:	e069      	b.n	8012e1c <socket+0x10c>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8012d48:	076b      	lsls	r3, r5, #29
 8012d4a:	d456      	bmi.n	8012dfa <socket+0xea>
	if(flag != 0)
 8012d4c:	2d00      	cmp	r5, #0
 8012d4e:	d004      	beq.n	8012d5a <socket+0x4a>
   	switch(protocol)
 8012d50:	9b01      	ldr	r3, [sp, #4]
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d04e      	beq.n	8012df4 <socket+0xe4>
 8012d56:	2b02      	cmp	r3, #2
 8012d58:	d051      	beq.n	8012dfe <socket+0xee>
	close(sn);
 8012d5a:	0020      	movs	r0, r4
 8012d5c:	f7ff ff9a 	bl	8012c94 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8012d60:	230f      	movs	r3, #15
 8012d62:	0029      	movs	r1, r5
 8012d64:	0167      	lsls	r7, r4, #5
 8012d66:	4399      	bics	r1, r3
 8012d68:	9b01      	ldr	r3, [sp, #4]
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	0038      	movs	r0, r7
 8012d6e:	4319      	orrs	r1, r3
 8012d70:	f000 fa80 	bl	8013274 <WIZCHIP_WRITE>
	if(!port)
 8012d74:	2e00      	cmp	r6, #0
 8012d76:	d107      	bne.n	8012d88 <socket+0x78>
	   port = sock_any_port++;
 8012d78:	4a29      	ldr	r2, [pc, #164]	; (8012e20 <socket+0x110>)
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8012d7a:	492a      	ldr	r1, [pc, #168]	; (8012e24 <socket+0x114>)
	   port = sock_any_port++;
 8012d7c:	8816      	ldrh	r6, [r2, #0]
 8012d7e:	1c73      	adds	r3, r6, #1
 8012d80:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8012d82:	428b      	cmp	r3, r1
 8012d84:	d045      	beq.n	8012e12 <socket+0x102>
	   port = sock_any_port++;
 8012d86:	8013      	strh	r3, [r2, #0]
   setSn_PORT(sn,port);	
 8012d88:	2380      	movs	r3, #128	; 0x80
 8012d8a:	00db      	lsls	r3, r3, #3
 8012d8c:	0a31      	lsrs	r1, r6, #8
 8012d8e:	18f8      	adds	r0, r7, r3
 8012d90:	f000 fa70 	bl	8013274 <WIZCHIP_WRITE>
 8012d94:	23a0      	movs	r3, #160	; 0xa0
 8012d96:	b2f1      	uxtb	r1, r6
 8012d98:	00db      	lsls	r3, r3, #3
   setSn_CR(sn,Sn_CR_OPEN);
 8012d9a:	1c7e      	adds	r6, r7, #1
   setSn_PORT(sn,port);	
 8012d9c:	18f8      	adds	r0, r7, r3
   setSn_CR(sn,Sn_CR_OPEN);
 8012d9e:	36ff      	adds	r6, #255	; 0xff
   setSn_PORT(sn,port);	
 8012da0:	f000 fa68 	bl	8013274 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8012da4:	2101      	movs	r1, #1
 8012da6:	0030      	movs	r0, r6
 8012da8:	f000 fa64 	bl	8013274 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8012dac:	0030      	movs	r0, r6
 8012dae:	f000 fa33 	bl	8013218 <WIZCHIP_READ>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d1fa      	bne.n	8012dac <socket+0x9c>
   sock_io_mode &= ~(1 <<sn);
 8012db6:	2301      	movs	r3, #1
 8012db8:	001a      	movs	r2, r3
 8012dba:	40a2      	lsls	r2, r4
 8012dbc:	43d2      	mvns	r2, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8012dbe:	401d      	ands	r5, r3
 8012dc0:	40a5      	lsls	r5, r4
 8012dc2:	4919      	ldr	r1, [pc, #100]	; (8012e28 <socket+0x118>)
   sock_io_mode &= ~(1 <<sn);
 8012dc4:	b212      	sxth	r2, r2
 8012dc6:	880e      	ldrh	r6, [r1, #0]
 8012dc8:	4016      	ands	r6, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8012dca:	4335      	orrs	r5, r6
 8012dcc:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8012dce:	4917      	ldr	r1, [pc, #92]	; (8012e2c <socket+0x11c>)
 8012dd0:	880b      	ldrh	r3, [r1, #0]
 8012dd2:	401a      	ands	r2, r3
 8012dd4:	800a      	strh	r2, [r1, #0]
   sock_remained_size[sn] = 0;
 8012dd6:	4a16      	ldr	r2, [pc, #88]	; (8012e30 <socket+0x120>)
 8012dd8:	0063      	lsls	r3, r4, #1
 8012dda:	5298      	strh	r0, [r3, r2]
   sock_pack_info[sn] = PACK_COMPLETED;
 8012ddc:	4b15      	ldr	r3, [pc, #84]	; (8012e34 <socket+0x124>)
 8012dde:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8012de0:	23c0      	movs	r3, #192	; 0xc0
 8012de2:	009b      	lsls	r3, r3, #2
 8012de4:	18f8      	adds	r0, r7, r3
 8012de6:	f000 fa17 	bl	8013218 <WIZCHIP_READ>
 8012dea:	2800      	cmp	r0, #0
 8012dec:	d0f8      	beq.n	8012de0 <socket+0xd0>
   return (int8_t)sn;
 8012dee:	b260      	sxtb	r0, r4
}	   
 8012df0:	b005      	add	sp, #20
 8012df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8012df4:	2321      	movs	r3, #33	; 0x21
 8012df6:	421d      	tst	r5, r3
 8012df8:	d1af      	bne.n	8012d5a <socket+0x4a>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8012dfa:	2006      	movs	r0, #6
 8012dfc:	e00e      	b.n	8012e1c <socket+0x10c>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8012dfe:	b26b      	sxtb	r3, r5
   	      if(flag & SF_IGMP_VER2)
 8012e00:	06aa      	lsls	r2, r5, #26
 8012e02:	d501      	bpl.n	8012e08 <socket+0xf8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	daf8      	bge.n	8012dfa <socket+0xea>
      	      if(flag & SF_UNI_BLOCK)
 8012e08:	06ea      	lsls	r2, r5, #27
 8012e0a:	d5a6      	bpl.n	8012d5a <socket+0x4a>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	dba4      	blt.n	8012d5a <socket+0x4a>
 8012e10:	e7f3      	b.n	8012dfa <socket+0xea>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8012e12:	4b09      	ldr	r3, [pc, #36]	; (8012e38 <socket+0x128>)
	   port = sock_any_port++;
 8012e14:	4e09      	ldr	r6, [pc, #36]	; (8012e3c <socket+0x12c>)
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8012e16:	8013      	strh	r3, [r2, #0]
 8012e18:	e7b6      	b.n	8012d88 <socket+0x78>
	CHECK_SOCKNUM();
 8012e1a:	2001      	movs	r0, #1
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8012e1c:	4240      	negs	r0, r0
 8012e1e:	e7e7      	b.n	8012df0 <socket+0xe0>
 8012e20:	20000104 	.word	0x20000104
 8012e24:	0000fff0 	.word	0x0000fff0
 8012e28:	20000644 	.word	0x20000644
 8012e2c:	20000646 	.word	0x20000646
 8012e30:	20000650 	.word	0x20000650
 8012e34:	20000648 	.word	0x20000648
 8012e38:	ffffc000 	.word	0xffffc000
 8012e3c:	0000ffef 	.word	0x0000ffef

08012e40 <listen>:

int8_t listen(uint8_t sn)
{
 8012e40:	b570      	push	{r4, r5, r6, lr}
 8012e42:	0005      	movs	r5, r0
	CHECK_SOCKNUM();
 8012e44:	2808      	cmp	r0, #8
 8012e46:	d828      	bhi.n	8012e9a <listen+0x5a>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8012e48:	0144      	lsls	r4, r0, #5
 8012e4a:	3408      	adds	r4, #8
 8012e4c:	0020      	movs	r0, r4
 8012e4e:	f000 f9e3 	bl	8013218 <WIZCHIP_READ>
 8012e52:	230f      	movs	r3, #15
 8012e54:	4018      	ands	r0, r3
 8012e56:	2801      	cmp	r0, #1
 8012e58:	d121      	bne.n	8012e9e <listen+0x5e>
	CHECK_SOCKINIT();
 8012e5a:	23c0      	movs	r3, #192	; 0xc0
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	18e6      	adds	r6, r4, r3
 8012e60:	0030      	movs	r0, r6
 8012e62:	f000 f9d9 	bl	8013218 <WIZCHIP_READ>
 8012e66:	2813      	cmp	r0, #19
 8012e68:	d11b      	bne.n	8012ea2 <listen+0x62>
	setSn_CR(sn,Sn_CR_LISTEN);
 8012e6a:	3401      	adds	r4, #1
 8012e6c:	34ff      	adds	r4, #255	; 0xff
 8012e6e:	2102      	movs	r1, #2
 8012e70:	0020      	movs	r0, r4
 8012e72:	f000 f9ff 	bl	8013274 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8012e76:	0020      	movs	r0, r4
 8012e78:	f000 f9ce 	bl	8013218 <WIZCHIP_READ>
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d1fa      	bne.n	8012e76 <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8012e80:	0030      	movs	r0, r6
 8012e82:	f000 f9c9 	bl	8013218 <WIZCHIP_READ>
 8012e86:	2814      	cmp	r0, #20
 8012e88:	d101      	bne.n	8012e8e <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 8012e8a:	3813      	subs	r0, #19
}
 8012e8c:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 8012e8e:	0028      	movs	r0, r5
 8012e90:	f7ff ff00 	bl	8012c94 <close>
         return SOCKERR_SOCKCLOSED;
 8012e94:	2004      	movs	r0, #4
	CHECK_SOCKINIT();
 8012e96:	4240      	negs	r0, r0
 8012e98:	e7f8      	b.n	8012e8c <listen+0x4c>
	CHECK_SOCKNUM();
 8012e9a:	2001      	movs	r0, #1
 8012e9c:	e7fb      	b.n	8012e96 <listen+0x56>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8012e9e:	2005      	movs	r0, #5
 8012ea0:	e7f9      	b.n	8012e96 <listen+0x56>
	CHECK_SOCKINIT();
 8012ea2:	2003      	movs	r0, #3
 8012ea4:	e7f7      	b.n	8012e96 <listen+0x56>
	...

08012ea8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8012ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eaa:	b085      	sub	sp, #20
 8012eac:	001d      	movs	r5, r3
 8012eae:	ab0a      	add	r3, sp, #40	; 0x28
 8012eb0:	0006      	movs	r6, r0
 8012eb2:	881f      	ldrh	r7, [r3, #0]
 8012eb4:	9103      	str	r1, [sp, #12]
 8012eb6:	9201      	str	r2, [sp, #4]
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8012eb8:	2808      	cmp	r0, #8
 8012eba:	d900      	bls.n	8012ebe <sendto+0x16>
 8012ebc:	e09b      	b.n	8012ff6 <sendto+0x14e>
   switch(getSn_MR(sn) & 0x0F)
 8012ebe:	0144      	lsls	r4, r0, #5
 8012ec0:	3408      	adds	r4, #8
 8012ec2:	0020      	movs	r0, r4
 8012ec4:	f000 f9a8 	bl	8013218 <WIZCHIP_READ>
 8012ec8:	230f      	movs	r3, #15
 8012eca:	4018      	ands	r0, r3
 8012ecc:	3802      	subs	r0, #2
 8012ece:	2802      	cmp	r0, #2
 8012ed0:	d900      	bls.n	8012ed4 <sendto+0x2c>
 8012ed2:	e092      	b.n	8012ffa <sendto+0x152>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8012ed4:	9b01      	ldr	r3, [sp, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d100      	bne.n	8012edc <sendto+0x34>
 8012eda:	e090      	b.n	8012ffe <sendto+0x156>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8012edc:	782a      	ldrb	r2, [r5, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8012ede:	786b      	ldrb	r3, [r5, #1]
 8012ee0:	0212      	lsls	r2, r2, #8
 8012ee2:	189a      	adds	r2, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8012ee4:	78ab      	ldrb	r3, [r5, #2]
 8012ee6:	0212      	lsls	r2, r2, #8
 8012ee8:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8012eea:	78ea      	ldrb	r2, [r5, #3]
 8012eec:	021b      	lsls	r3, r3, #8
 8012eee:	18d3      	adds	r3, r2, r3
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d041      	beq.n	8012f78 <sendto+0xd0>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8012ef4:	2f00      	cmp	r7, #0
 8012ef6:	d046      	beq.n	8012f86 <sendto+0xde>
   tmp = getSn_SR(sn);
 8012ef8:	23c0      	movs	r3, #192	; 0xc0
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	18e3      	adds	r3, r4, r3
 8012efe:	0018      	movs	r0, r3
 8012f00:	9302      	str	r3, [sp, #8]
 8012f02:	f000 f989 	bl	8013218 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8012f06:	2842      	cmp	r0, #66	; 0x42
 8012f08:	d144      	bne.n	8012f94 <sendto+0xec>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8012f0a:	23c0      	movs	r3, #192	; 0xc0
 8012f0c:	011b      	lsls	r3, r3, #4
 8012f0e:	2204      	movs	r2, #4
 8012f10:	0029      	movs	r1, r5
 8012f12:	18e0      	adds	r0, r4, r3
 8012f14:	f000 fa16 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8012f18:	2380      	movs	r3, #128	; 0x80
 8012f1a:	015b      	lsls	r3, r3, #5
 8012f1c:	18e0      	adds	r0, r4, r3
 8012f1e:	0a39      	lsrs	r1, r7, #8
 8012f20:	f000 f9a8 	bl	8013274 <WIZCHIP_WRITE>
 8012f24:	2388      	movs	r3, #136	; 0x88
 8012f26:	015b      	lsls	r3, r3, #5
 8012f28:	18e0      	adds	r0, r4, r3
 8012f2a:	b2f9      	uxtb	r1, r7
 8012f2c:	f000 f9a2 	bl	8013274 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8012f30:	23f8      	movs	r3, #248	; 0xf8
 8012f32:	015b      	lsls	r3, r3, #5
 8012f34:	18e0      	adds	r0, r4, r3
 8012f36:	f000 f96f 	bl	8013218 <WIZCHIP_READ>
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8012f3a:	9b01      	ldr	r3, [sp, #4]
   freesize = getSn_TxMAX(sn);
 8012f3c:	0280      	lsls	r0, r0, #10
 8012f3e:	1c05      	adds	r5, r0, #0
 8012f40:	b280      	uxth	r0, r0
 8012f42:	4298      	cmp	r0, r3
 8012f44:	d901      	bls.n	8012f4a <sendto+0xa2>
 8012f46:	466b      	mov	r3, sp
 8012f48:	889d      	ldrh	r5, [r3, #4]
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	40b3      	lsls	r3, r6
 8012f4e:	b2ad      	uxth	r5, r5
 8012f50:	9301      	str	r3, [sp, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8012f52:	0030      	movs	r0, r6
 8012f54:	f000 fa30 	bl	80133b8 <getSn_TX_FSR>
 8012f58:	0007      	movs	r7, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8012f5a:	9802      	ldr	r0, [sp, #8]
 8012f5c:	f000 f95c 	bl	8013218 <WIZCHIP_READ>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d04e      	beq.n	8013002 <sendto+0x15a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8012f64:	4b28      	ldr	r3, [pc, #160]	; (8013008 <sendto+0x160>)
 8012f66:	9a01      	ldr	r2, [sp, #4]
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	421a      	tst	r2, r3
 8012f6c:	d018      	beq.n	8012fa0 <sendto+0xf8>
 8012f6e:	2000      	movs	r0, #0
 8012f70:	42bd      	cmp	r5, r7
 8012f72:	d917      	bls.n	8012fa4 <sendto+0xfc>
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8012f74:	b005      	add	sp, #20
 8012f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8012f78:	0020      	movs	r0, r4
 8012f7a:	f000 f94d 	bl	8013218 <WIZCHIP_READ>
 8012f7e:	0743      	lsls	r3, r0, #29
 8012f80:	d4b8      	bmi.n	8012ef4 <sendto+0x4c>
 8012f82:	200c      	movs	r0, #12
 8012f84:	e035      	b.n	8012ff2 <sendto+0x14a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8012f86:	0020      	movs	r0, r4
 8012f88:	f000 f946 	bl	8013218 <WIZCHIP_READ>
 8012f8c:	0743      	lsls	r3, r0, #29
 8012f8e:	d4b3      	bmi.n	8012ef8 <sendto+0x50>
 8012f90:	200b      	movs	r0, #11
 8012f92:	e02e      	b.n	8012ff2 <sendto+0x14a>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8012f94:	23ef      	movs	r3, #239	; 0xef
 8012f96:	4018      	ands	r0, r3
 8012f98:	2822      	cmp	r0, #34	; 0x22
 8012f9a:	d0b6      	beq.n	8012f0a <sendto+0x62>
 8012f9c:	2007      	movs	r0, #7
 8012f9e:	e028      	b.n	8012ff2 <sendto+0x14a>
      if(len <= freesize) break;
 8012fa0:	42bd      	cmp	r5, r7
 8012fa2:	d8d6      	bhi.n	8012f52 <sendto+0xaa>
	wiz_send_data(sn, buf, len);
 8012fa4:	0030      	movs	r0, r6
	setSn_CR(sn,Sn_CR_SEND);
 8012fa6:	1c66      	adds	r6, r4, #1
	wiz_send_data(sn, buf, len);
 8012fa8:	9903      	ldr	r1, [sp, #12]
 8012faa:	002a      	movs	r2, r5
	setSn_CR(sn,Sn_CR_SEND);
 8012fac:	36ff      	adds	r6, #255	; 0xff
	wiz_send_data(sn, buf, len);
 8012fae:	f000 fa4f 	bl	8013450 <wiz_send_data>
	setSn_CR(sn,Sn_CR_SEND);
 8012fb2:	2120      	movs	r1, #32
 8012fb4:	0030      	movs	r0, r6
 8012fb6:	f000 f95d 	bl	8013274 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8012fba:	0030      	movs	r0, r6
 8012fbc:	f000 f92c 	bl	8013218 <WIZCHIP_READ>
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d1fa      	bne.n	8012fba <sendto+0x112>
      if(tmp & Sn_IR_SENDOK)
 8012fc4:	2710      	movs	r7, #16
      tmp = getSn_IR(sn);
 8012fc6:	2380      	movs	r3, #128	; 0x80
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	18e6      	adds	r6, r4, r3
 8012fcc:	0030      	movs	r0, r6
 8012fce:	f000 f923 	bl	8013218 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8012fd2:	4238      	tst	r0, r7
 8012fd4:	d005      	beq.n	8012fe2 <sendto+0x13a>
         setSn_IR(sn, Sn_IR_SENDOK);
 8012fd6:	0030      	movs	r0, r6
 8012fd8:	2110      	movs	r1, #16
 8012fda:	f000 f94b 	bl	8013274 <WIZCHIP_WRITE>
   return (int32_t)len;
 8012fde:	0028      	movs	r0, r5
 8012fe0:	e7c8      	b.n	8012f74 <sendto+0xcc>
      else if(tmp & Sn_IR_TIMEOUT)
 8012fe2:	2308      	movs	r3, #8
 8012fe4:	4218      	tst	r0, r3
 8012fe6:	d0ee      	beq.n	8012fc6 <sendto+0x11e>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8012fe8:	0030      	movs	r0, r6
 8012fea:	0019      	movs	r1, r3
 8012fec:	f000 f942 	bl	8013274 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8012ff0:	200d      	movs	r0, #13
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8012ff2:	4240      	negs	r0, r0
 8012ff4:	e7be      	b.n	8012f74 <sendto+0xcc>
   CHECK_SOCKNUM();
 8012ff6:	2001      	movs	r0, #1
 8012ff8:	e7fb      	b.n	8012ff2 <sendto+0x14a>
         return SOCKERR_SOCKMODE;
 8012ffa:	2005      	movs	r0, #5
 8012ffc:	e7f9      	b.n	8012ff2 <sendto+0x14a>
   CHECK_SOCKDATA();
 8012ffe:	200e      	movs	r0, #14
 8013000:	e7f7      	b.n	8012ff2 <sendto+0x14a>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8013002:	2004      	movs	r0, #4
 8013004:	e7f5      	b.n	8012ff2 <sendto+0x14a>
 8013006:	46c0      	nop			; (mov r8, r8)
 8013008:	20000644 	.word	0x20000644

0801300c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 801300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801300e:	b087      	sub	sp, #28
 8013010:	0004      	movs	r4, r0
 8013012:	9102      	str	r1, [sp, #8]
 8013014:	9201      	str	r2, [sp, #4]
 8013016:	9300      	str	r3, [sp, #0]
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
 8013018:	2808      	cmp	r0, #8
 801301a:	d900      	bls.n	801301e <recvfrom+0x12>
 801301c:	e0e8      	b.n	80131f0 <recvfrom+0x1e4>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 801301e:	0146      	lsls	r6, r0, #5
 8013020:	3608      	adds	r6, #8
 8013022:	0030      	movs	r0, r6
 8013024:	f000 f8f8 	bl	8013218 <WIZCHIP_READ>
 8013028:	230f      	movs	r3, #15
 801302a:	4003      	ands	r3, r0
 801302c:	3b02      	subs	r3, #2
 801302e:	0007      	movs	r7, r0
 8013030:	2b02      	cmp	r3, #2
 8013032:	d900      	bls.n	8013036 <recvfrom+0x2a>
 8013034:	e0df      	b.n	80131f6 <recvfrom+0x1ea>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8013036:	9b01      	ldr	r3, [sp, #4]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d100      	bne.n	801303e <recvfrom+0x32>
 801303c:	e0dd      	b.n	80131fa <recvfrom+0x1ee>
   if(sock_remained_size[sn] == 0)
 801303e:	4b71      	ldr	r3, [pc, #452]	; (8013204 <recvfrom+0x1f8>)
 8013040:	0062      	lsls	r2, r4, #1
 8013042:	5ad3      	ldrh	r3, [r2, r3]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d159      	bne.n	80130fc <recvfrom+0xf0>
 8013048:	3301      	adds	r3, #1
 801304a:	40a3      	lsls	r3, r4
 801304c:	9303      	str	r3, [sp, #12]
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 801304e:	0020      	movs	r0, r4
 8013050:	f000 f9d8 	bl	8013404 <getSn_RX_RSR>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8013054:	23c0      	movs	r3, #192	; 0xc0
 8013056:	009b      	lsls	r3, r3, #2
         pack_len = getSn_RX_RSR(sn);
 8013058:	0005      	movs	r5, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801305a:	18f0      	adds	r0, r6, r3
 801305c:	f000 f8dc 	bl	8013218 <WIZCHIP_READ>
 8013060:	2800      	cmp	r0, #0
 8013062:	d100      	bne.n	8013066 <recvfrom+0x5a>
 8013064:	e0cb      	b.n	80131fe <recvfrom+0x1f2>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8013066:	4b68      	ldr	r3, [pc, #416]	; (8013208 <recvfrom+0x1fc>)
 8013068:	9a03      	ldr	r2, [sp, #12]
 801306a:	881b      	ldrh	r3, [r3, #0]
 801306c:	421a      	tst	r2, r3
 801306e:	d003      	beq.n	8013078 <recvfrom+0x6c>
 8013070:	1e28      	subs	r0, r5, #0
 8013072:	d103      	bne.n	801307c <recvfrom+0x70>
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
 8013074:	b007      	add	sp, #28
 8013076:	bdf0      	pop	{r4, r5, r6, r7, pc}
         if(pack_len != 0) break;
 8013078:	2d00      	cmp	r5, #0
 801307a:	d0e8      	beq.n	801304e <recvfrom+0x42>
	switch (mr & 0x07)
 801307c:	2007      	movs	r0, #7
   			setSn_CR(sn,Sn_CR_RECV);
 801307e:	3601      	adds	r6, #1
 8013080:	0063      	lsls	r3, r4, #1
 8013082:	4038      	ands	r0, r7
 8013084:	36ff      	adds	r6, #255	; 0xff
 8013086:	4f5f      	ldr	r7, [pc, #380]	; (8013204 <recvfrom+0x1f8>)
 8013088:	9303      	str	r3, [sp, #12]
	switch (mr & 0x07)
 801308a:	2803      	cmp	r0, #3
 801308c:	d100      	bne.n	8013090 <recvfrom+0x84>
 801308e:	e083      	b.n	8013198 <recvfrom+0x18c>
 8013090:	2804      	cmp	r0, #4
 8013092:	d035      	beq.n	8013100 <recvfrom+0xf4>
 8013094:	2802      	cmp	r0, #2
 8013096:	d000      	beq.n	801309a <recvfrom+0x8e>
 8013098:	e0a3      	b.n	80131e2 <recvfrom+0x1d6>
	      if(sock_remained_size[sn] == 0)
 801309a:	5afb      	ldrh	r3, [r7, r3]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d12b      	bne.n	80130f8 <recvfrom+0xec>
   			wiz_recv_data(sn, head, 8);
 80130a0:	0020      	movs	r0, r4
 80130a2:	a904      	add	r1, sp, #16
 80130a4:	2208      	movs	r2, #8
 80130a6:	f000 fa00 	bl	80134aa <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80130aa:	2140      	movs	r1, #64	; 0x40
 80130ac:	0030      	movs	r0, r6
 80130ae:	f000 f8e1 	bl	8013274 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80130b2:	0030      	movs	r0, r6
 80130b4:	f000 f8b0 	bl	8013218 <WIZCHIP_READ>
 80130b8:	2800      	cmp	r0, #0
 80130ba:	d1fa      	bne.n	80130b2 <recvfrom+0xa6>
               addr[0] = head[0];
 80130bc:	ab04      	add	r3, sp, #16
 80130be:	9a00      	ldr	r2, [sp, #0]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	7013      	strb	r3, [r2, #0]
      			addr[1] = head[1];
 80130c4:	ab04      	add	r3, sp, #16
 80130c6:	785b      	ldrb	r3, [r3, #1]
 80130c8:	7053      	strb	r3, [r2, #1]
      			addr[2] = head[2];
 80130ca:	ab04      	add	r3, sp, #16
 80130cc:	789b      	ldrb	r3, [r3, #2]
 80130ce:	7093      	strb	r3, [r2, #2]
      			addr[3] = head[3];
 80130d0:	ab04      	add	r3, sp, #16
 80130d2:	78db      	ldrb	r3, [r3, #3]
 80130d4:	70d3      	strb	r3, [r2, #3]
      			*port = head[4];
 80130d6:	ab04      	add	r3, sp, #16
 80130d8:	791a      	ldrb	r2, [r3, #4]
      			*port = (*port << 8) + head[5];
 80130da:	795b      	ldrb	r3, [r3, #5]
 80130dc:	0212      	lsls	r2, r2, #8
 80130de:	189b      	adds	r3, r3, r2
 80130e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130e2:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
 80130e4:	aa04      	add	r2, sp, #16
 80130e6:	7991      	ldrb	r1, [r2, #6]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80130e8:	79d2      	ldrb	r2, [r2, #7]
 80130ea:	0063      	lsls	r3, r4, #1
 80130ec:	0209      	lsls	r1, r1, #8
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80130ee:	1852      	adds	r2, r2, r1
 80130f0:	52fa      	strh	r2, [r7, r3]
   			sock_pack_info[sn] = PACK_FIRST;
 80130f2:	2280      	movs	r2, #128	; 0x80
 80130f4:	4b45      	ldr	r3, [pc, #276]	; (801320c <recvfrom+0x200>)
 80130f6:	551a      	strb	r2, [r3, r4]
			if(len < sock_remained_size[sn]) pack_len = len;
 80130f8:	0063      	lsls	r3, r4, #1
 80130fa:	e029      	b.n	8013150 <recvfrom+0x144>
	uint16_t pack_len=0;
 80130fc:	2500      	movs	r5, #0
 80130fe:	e7bd      	b.n	801307c <recvfrom+0x70>
	      if(sock_remained_size[sn] == 0)
 8013100:	0063      	lsls	r3, r4, #1
 8013102:	5afb      	ldrh	r3, [r7, r3]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d122      	bne.n	801314e <recvfrom+0x142>
   			wiz_recv_data(sn, head, 2);
 8013108:	0020      	movs	r0, r4
 801310a:	a904      	add	r1, sp, #16
 801310c:	2202      	movs	r2, #2
 801310e:	f000 f9cc 	bl	80134aa <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8013112:	2140      	movs	r1, #64	; 0x40
 8013114:	0030      	movs	r0, r6
 8013116:	f000 f8ad 	bl	8013274 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801311a:	0030      	movs	r0, r6
 801311c:	f000 f87c 	bl	8013218 <WIZCHIP_READ>
 8013120:	2800      	cmp	r0, #0
 8013122:	d1fa      	bne.n	801311a <recvfrom+0x10e>
    			sock_remained_size[sn] = head[0];
 8013124:	ab04      	add	r3, sp, #16
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8013126:	aa04      	add	r2, sp, #16
 8013128:	7852      	ldrb	r2, [r2, #1]
    			sock_remained_size[sn] = head[0];
 801312a:	781b      	ldrb	r3, [r3, #0]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 801312c:	3a02      	subs	r2, #2
 801312e:	021b      	lsls	r3, r3, #8
 8013130:	189b      	adds	r3, r3, r2
 8013132:	9a03      	ldr	r2, [sp, #12]
 8013134:	b29b      	uxth	r3, r3
 8013136:	52bb      	strh	r3, [r7, r2]
   			if(sock_remained_size[sn] > 1514) 
 8013138:	4a35      	ldr	r2, [pc, #212]	; (8013210 <recvfrom+0x204>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d904      	bls.n	8013148 <recvfrom+0x13c>
   			   close(sn);
 801313e:	0020      	movs	r0, r4
 8013140:	f7ff fda8 	bl	8012c94 <close>
   			   return SOCKFATAL_PACKLEN;
 8013144:	4833      	ldr	r0, [pc, #204]	; (8013214 <recvfrom+0x208>)
 8013146:	e795      	b.n	8013074 <recvfrom+0x68>
   			sock_pack_info[sn] = PACK_FIRST;
 8013148:	2280      	movs	r2, #128	; 0x80
 801314a:	4b30      	ldr	r3, [pc, #192]	; (801320c <recvfrom+0x200>)
 801314c:	551a      	strb	r2, [r3, r4]
			if(len < sock_remained_size[sn]) pack_len = len;
 801314e:	9b03      	ldr	r3, [sp, #12]
 8013150:	5afb      	ldrh	r3, [r7, r3]
 8013152:	9a01      	ldr	r2, [sp, #4]
 8013154:	1c1d      	adds	r5, r3, #0
 8013156:	4293      	cmp	r3, r2
 8013158:	d901      	bls.n	801315e <recvfrom+0x152>
 801315a:	466b      	mov	r3, sp
 801315c:	889d      	ldrh	r5, [r3, #4]
 801315e:	b2ad      	uxth	r5, r5
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8013160:	002a      	movs	r2, r5
 8013162:	0020      	movs	r0, r4
 8013164:	9902      	ldr	r1, [sp, #8]
 8013166:	f000 f9a0 	bl	80134aa <wiz_recv_data>
	setSn_CR(sn,Sn_CR_RECV);
 801316a:	2140      	movs	r1, #64	; 0x40
 801316c:	0030      	movs	r0, r6
 801316e:	f000 f881 	bl	8013274 <WIZCHIP_WRITE>
	while(getSn_CR(sn)) ;
 8013172:	0030      	movs	r0, r6
 8013174:	f000 f850 	bl	8013218 <WIZCHIP_READ>
 8013178:	2800      	cmp	r0, #0
 801317a:	d1fa      	bne.n	8013172 <recvfrom+0x166>
	sock_remained_size[sn] -= pack_len;
 801317c:	0062      	lsls	r2, r4, #1
 801317e:	5abb      	ldrh	r3, [r7, r2]
 8013180:	1b5b      	subs	r3, r3, r5
 8013182:	b29b      	uxth	r3, r3
 8013184:	52bb      	strh	r3, [r7, r2]
	if(sock_remained_size[sn] != 0)
 8013186:	4a21      	ldr	r2, [pc, #132]	; (801320c <recvfrom+0x200>)
 8013188:	2b00      	cmp	r3, #0
 801318a:	d002      	beq.n	8013192 <recvfrom+0x186>
	   sock_pack_info[sn] |= PACK_REMAINED;
 801318c:	2301      	movs	r3, #1
 801318e:	5d10      	ldrb	r0, [r2, r4]
 8013190:	4318      	orrs	r0, r3
 8013192:	5510      	strb	r0, [r2, r4]
   return (int32_t)pack_len;
 8013194:	0028      	movs	r0, r5
 8013196:	e76d      	b.n	8013074 <recvfrom+0x68>
		   if(sock_remained_size[sn] == 0)
 8013198:	0063      	lsls	r3, r4, #1
 801319a:	5afb      	ldrh	r3, [r7, r3]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d1ab      	bne.n	80130f8 <recvfrom+0xec>
   			wiz_recv_data(sn, head, 6);
 80131a0:	0020      	movs	r0, r4
 80131a2:	a904      	add	r1, sp, #16
 80131a4:	2206      	movs	r2, #6
 80131a6:	f000 f980 	bl	80134aa <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80131aa:	2140      	movs	r1, #64	; 0x40
 80131ac:	0030      	movs	r0, r6
 80131ae:	f000 f861 	bl	8013274 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80131b2:	0030      	movs	r0, r6
 80131b4:	f000 f830 	bl	8013218 <WIZCHIP_READ>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d1fa      	bne.n	80131b2 <recvfrom+0x1a6>
   			addr[0] = head[0];
 80131bc:	ab04      	add	r3, sp, #16
 80131be:	9a00      	ldr	r2, [sp, #0]
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	7013      	strb	r3, [r2, #0]
   			addr[1] = head[1];
 80131c4:	ab04      	add	r3, sp, #16
 80131c6:	785b      	ldrb	r3, [r3, #1]
 80131c8:	7053      	strb	r3, [r2, #1]
   			addr[2] = head[2];
 80131ca:	ab04      	add	r3, sp, #16
 80131cc:	789b      	ldrb	r3, [r3, #2]
 80131ce:	7093      	strb	r3, [r2, #2]
   			addr[3] = head[3];
 80131d0:	ab04      	add	r3, sp, #16
 80131d2:	78db      	ldrb	r3, [r3, #3]
 80131d4:	70d3      	strb	r3, [r2, #3]
   			sock_remained_size[sn] = head[4];
 80131d6:	aa04      	add	r2, sp, #16
 80131d8:	7911      	ldrb	r1, [r2, #4]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80131da:	0063      	lsls	r3, r4, #1
 80131dc:	7952      	ldrb	r2, [r2, #5]
 80131de:	0209      	lsls	r1, r1, #8
 80131e0:	e785      	b.n	80130ee <recvfrom+0xe2>
         wiz_recv_ignore(sn, pack_len); // data copy.
 80131e2:	0029      	movs	r1, r5
 80131e4:	0020      	movs	r0, r4
 80131e6:	f000 f98d 	bl	8013504 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80131ea:	0063      	lsls	r3, r4, #1
 80131ec:	52fd      	strh	r5, [r7, r3]
         break;
 80131ee:	e7bc      	b.n	801316a <recvfrom+0x15e>
   CHECK_SOCKNUM();
 80131f0:	2001      	movs	r0, #1
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80131f2:	4240      	negs	r0, r0
 80131f4:	e73e      	b.n	8013074 <recvfrom+0x68>
         return SOCKERR_SOCKMODE;
 80131f6:	2005      	movs	r0, #5
 80131f8:	e7fb      	b.n	80131f2 <recvfrom+0x1e6>
   CHECK_SOCKDATA();
 80131fa:	200e      	movs	r0, #14
 80131fc:	e7f9      	b.n	80131f2 <recvfrom+0x1e6>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80131fe:	2004      	movs	r0, #4
 8013200:	e7f7      	b.n	80131f2 <recvfrom+0x1e6>
 8013202:	46c0      	nop			; (mov r8, r8)
 8013204:	20000650 	.word	0x20000650
 8013208:	20000644 	.word	0x20000644
 801320c:	20000648 	.word	0x20000648
 8013210:	000005ea 	.word	0x000005ea
 8013214:	fffffc17 	.word	0xfffffc17

08013218 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8013218:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801321a:	0005      	movs	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 801321c:	4c14      	ldr	r4, [pc, #80]	; (8013270 <WIZCHIP_READ+0x58>)
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801321e:	0a2e      	lsrs	r6, r5, #8
   WIZCHIP_CRITICAL_ENTER();
 8013220:	68e3      	ldr	r3, [r4, #12]
 8013222:	4798      	blx	r3
   WIZCHIP.CS._select();
 8013224:	6963      	ldr	r3, [r4, #20]
 8013226:	4798      	blx	r3
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8013228:	6a63      	ldr	r3, [r4, #36]	; 0x24
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801322a:	0c28      	lsrs	r0, r5, #16
 801322c:	b2c0      	uxtb	r0, r0
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801322e:	b2f6      	uxtb	r6, r6
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8013230:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8013232:	2b00      	cmp	r3, #0
 8013234:	d002      	beq.n	801323c <WIZCHIP_READ+0x24>
 8013236:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013238:	2a00      	cmp	r2, #0
 801323a:	d110      	bne.n	801325e <WIZCHIP_READ+0x46>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801323c:	6a23      	ldr	r3, [r4, #32]
 801323e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8013240:	0030      	movs	r0, r6
 8013242:	6a23      	ldr	r3, [r4, #32]
 8013244:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8013246:	0028      	movs	r0, r5
 8013248:	6a23      	ldr	r3, [r4, #32]
 801324a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 801324c:	69e3      	ldr	r3, [r4, #28]
 801324e:	4798      	blx	r3
 8013250:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
 8013252:	69a3      	ldr	r3, [r4, #24]
 8013254:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8013256:	6923      	ldr	r3, [r4, #16]
 8013258:	4798      	blx	r3
   return ret;
}
 801325a:	0028      	movs	r0, r5
 801325c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801325e:	ab01      	add	r3, sp, #4
 8013260:	7018      	strb	r0, [r3, #0]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8013262:	2103      	movs	r1, #3
 8013264:	0018      	movs	r0, r3
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8013266:	705e      	strb	r6, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8013268:	709d      	strb	r5, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801326a:	4790      	blx	r2
 801326c:	e7ee      	b.n	801324c <WIZCHIP_READ+0x34>
 801326e:	46c0      	nop			; (mov r8, r8)
 8013270:	20000108 	.word	0x20000108

08013274 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8013274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8013276:	4d15      	ldr	r5, [pc, #84]	; (80132cc <WIZCHIP_WRITE+0x58>)
{
 8013278:	0004      	movs	r4, r0
   WIZCHIP_CRITICAL_ENTER();
 801327a:	68eb      	ldr	r3, [r5, #12]
{
 801327c:	000e      	movs	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 801327e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8013280:	696b      	ldr	r3, [r5, #20]
 8013282:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8013284:	2104      	movs	r1, #4
 8013286:	000f      	movs	r7, r1

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8013288:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801328a:	4327      	orrs	r7, r4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801328c:	0c20      	lsrs	r0, r4, #16
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801328e:	0a24      	lsrs	r4, r4, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8013290:	b2c0      	uxtb	r0, r0
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8013292:	b2e4      	uxtb	r4, r4
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8013294:	b2ff      	uxtb	r7, r7
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8013296:	2a00      	cmp	r2, #0
 8013298:	d10f      	bne.n	80132ba <WIZCHIP_WRITE+0x46>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801329a:	6a2b      	ldr	r3, [r5, #32]
 801329c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801329e:	0020      	movs	r0, r4
 80132a0:	6a2b      	ldr	r3, [r5, #32]
 80132a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80132a4:	0038      	movs	r0, r7
 80132a6:	6a2b      	ldr	r3, [r5, #32]
 80132a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80132aa:	0030      	movs	r0, r6
 80132ac:	6a2b      	ldr	r3, [r5, #32]
 80132ae:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 80132b0:	69ab      	ldr	r3, [r5, #24]
 80132b2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80132b4:	692b      	ldr	r3, [r5, #16]
 80132b6:	4798      	blx	r3
}
 80132b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80132ba:	ab01      	add	r3, sp, #4
 80132bc:	7018      	strb	r0, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80132be:	705c      	strb	r4, [r3, #1]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80132c0:	0018      	movs	r0, r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80132c2:	709f      	strb	r7, [r3, #2]
		spi_data[3] = wb;
 80132c4:	70de      	strb	r6, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80132c6:	4790      	blx	r2
 80132c8:	e7f2      	b.n	80132b0 <WIZCHIP_WRITE+0x3c>
 80132ca:	46c0      	nop			; (mov r8, r8)
 80132cc:	20000108 	.word	0x20000108

080132d0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80132d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132d2:	0006      	movs	r6, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80132d4:	4c1a      	ldr	r4, [pc, #104]	; (8013340 <WIZCHIP_READ_BUF+0x70>)
{
 80132d6:	b085      	sub	sp, #20
   WIZCHIP_CRITICAL_ENTER();
 80132d8:	68e3      	ldr	r3, [r4, #12]
{
 80132da:	0015      	movs	r5, r2
 80132dc:	9101      	str	r1, [sp, #4]
   WIZCHIP_CRITICAL_ENTER();
 80132de:	4798      	blx	r3
   WIZCHIP.CS._select();
 80132e0:	6963      	ldr	r3, [r4, #20]
 80132e2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80132e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80132e6:	0c30      	lsrs	r0, r6, #16
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80132e8:	0a37      	lsrs	r7, r6, #8
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80132ea:	b2c0      	uxtb	r0, r0
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80132ec:	b2ff      	uxtb	r7, r7
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80132ee:	b2f6      	uxtb	r6, r6
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <WIZCHIP_READ_BUF+0x2a>
 80132f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80132f6:	2a00      	cmp	r2, #0
 80132f8:	d116      	bne.n	8013328 <WIZCHIP_READ_BUF+0x58>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80132fa:	6a23      	ldr	r3, [r4, #32]
 80132fc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80132fe:	0038      	movs	r0, r7
 8013300:	6a23      	ldr	r3, [r4, #32]
 8013302:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8013304:	0030      	movs	r0, r6
 8013306:	6a23      	ldr	r3, [r4, #32]
 8013308:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801330a:	9e01      	ldr	r6, [sp, #4]
 801330c:	1975      	adds	r5, r6, r5
 801330e:	42b5      	cmp	r5, r6
 8013310:	d105      	bne.n	801331e <WIZCHIP_READ_BUF+0x4e>
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8013312:	69a3      	ldr	r3, [r4, #24]
 8013314:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8013316:	6923      	ldr	r3, [r4, #16]
 8013318:	4798      	blx	r3
}
 801331a:	b005      	add	sp, #20
 801331c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 801331e:	69e3      	ldr	r3, [r4, #28]
 8013320:	4798      	blx	r3
 8013322:	7030      	strb	r0, [r6, #0]
		for(i = 0; i < len; i++)
 8013324:	3601      	adds	r6, #1
 8013326:	e7f2      	b.n	801330e <WIZCHIP_READ_BUF+0x3e>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8013328:	ab03      	add	r3, sp, #12
 801332a:	7018      	strb	r0, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801332c:	705f      	strb	r7, [r3, #1]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801332e:	0018      	movs	r0, r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8013330:	709e      	strb	r6, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8013332:	2103      	movs	r1, #3
 8013334:	4790      	blx	r2
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8013336:	0029      	movs	r1, r5
 8013338:	9801      	ldr	r0, [sp, #4]
 801333a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801333c:	4798      	blx	r3
 801333e:	e7e8      	b.n	8013312 <WIZCHIP_READ_BUF+0x42>
 8013340:	20000108 	.word	0x20000108

08013344 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8013344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013346:	0005      	movs	r5, r0
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
   WIZCHIP.CS._select();

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8013348:	2704      	movs	r7, #4
   WIZCHIP_CRITICAL_ENTER();
 801334a:	4c1a      	ldr	r4, [pc, #104]	; (80133b4 <WIZCHIP_WRITE_BUF+0x70>)
{
 801334c:	b085      	sub	sp, #20
   WIZCHIP_CRITICAL_ENTER();
 801334e:	68e3      	ldr	r3, [r4, #12]
{
 8013350:	0016      	movs	r6, r2
 8013352:	9101      	str	r1, [sp, #4]
   WIZCHIP_CRITICAL_ENTER();
 8013354:	4798      	blx	r3
   WIZCHIP.CS._select();
 8013356:	6963      	ldr	r3, [r4, #20]
 8013358:	4798      	blx	r3

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801335a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 801335c:	432f      	orrs	r7, r5
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801335e:	0c28      	lsrs	r0, r5, #16
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8013360:	0a2d      	lsrs	r5, r5, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8013362:	b2c0      	uxtb	r0, r0
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8013364:	b2ed      	uxtb	r5, r5
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8013366:	b2ff      	uxtb	r7, r7
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8013368:	2b00      	cmp	r3, #0
 801336a:	d116      	bne.n	801339a <WIZCHIP_WRITE_BUF+0x56>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801336c:	6a23      	ldr	r3, [r4, #32]
 801336e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8013370:	0028      	movs	r0, r5
 8013372:	6a23      	ldr	r3, [r4, #32]
 8013374:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8013376:	0038      	movs	r0, r7
 8013378:	6a23      	ldr	r3, [r4, #32]
 801337a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801337c:	9d01      	ldr	r5, [sp, #4]
 801337e:	19ae      	adds	r6, r5, r6
 8013380:	42ae      	cmp	r6, r5
 8013382:	d105      	bne.n	8013390 <WIZCHIP_WRITE_BUF+0x4c>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8013384:	69a3      	ldr	r3, [r4, #24]
 8013386:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8013388:	6923      	ldr	r3, [r4, #16]
 801338a:	4798      	blx	r3
}
 801338c:	b005      	add	sp, #20
 801338e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8013390:	7828      	ldrb	r0, [r5, #0]
 8013392:	6a23      	ldr	r3, [r4, #32]
 8013394:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8013396:	3501      	adds	r5, #1
 8013398:	e7f2      	b.n	8013380 <WIZCHIP_WRITE_BUF+0x3c>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801339a:	aa03      	add	r2, sp, #12
 801339c:	7010      	strb	r0, [r2, #0]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801339e:	2103      	movs	r1, #3
 80133a0:	0010      	movs	r0, r2
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80133a2:	7055      	strb	r5, [r2, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80133a4:	7097      	strb	r7, [r2, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80133a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80133a8:	0031      	movs	r1, r6
 80133aa:	9801      	ldr	r0, [sp, #4]
 80133ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80133ae:	4798      	blx	r3
 80133b0:	e7e8      	b.n	8013384 <WIZCHIP_WRITE_BUF+0x40>
 80133b2:	46c0      	nop			; (mov r8, r8)
 80133b4:	20000108 	.word	0x20000108

080133b8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80133b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 80133ba:	2400      	movs	r4, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80133bc:	4b0f      	ldr	r3, [pc, #60]	; (80133fc <getSn_TX_FSR+0x44>)
 80133be:	0146      	lsls	r6, r0, #5
 80133c0:	18f7      	adds	r7, r6, r3
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80133c2:	4b0f      	ldr	r3, [pc, #60]	; (8013400 <getSn_TX_FSR+0x48>)
 80133c4:	18f6      	adds	r6, r6, r3
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80133c6:	0038      	movs	r0, r7
 80133c8:	f7ff ff26 	bl	8013218 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80133cc:	0205      	lsls	r5, r0, #8
 80133ce:	0030      	movs	r0, r6
 80133d0:	f7ff ff22 	bl	8013218 <WIZCHIP_READ>
 80133d4:	b2ad      	uxth	r5, r5
 80133d6:	182d      	adds	r5, r5, r0
 80133d8:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 80133da:	2d00      	cmp	r5, #0
 80133dc:	d009      	beq.n	80133f2 <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80133de:	0038      	movs	r0, r7
 80133e0:	f7ff ff1a 	bl	8013218 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80133e4:	0204      	lsls	r4, r0, #8
 80133e6:	0030      	movs	r0, r6
 80133e8:	f7ff ff16 	bl	8013218 <WIZCHIP_READ>
 80133ec:	b2a4      	uxth	r4, r4
 80133ee:	1824      	adds	r4, r4, r0
 80133f0:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 80133f2:	42ac      	cmp	r4, r5
 80133f4:	d1e7      	bne.n	80133c6 <getSn_TX_FSR+0xe>
   return val;
}
 80133f6:	0020      	movs	r0, r4
 80133f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133fa:	46c0      	nop			; (mov r8, r8)
 80133fc:	00002008 	.word	0x00002008
 8013400:	00002108 	.word	0x00002108

08013404 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8013404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 8013406:	2400      	movs	r4, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8013408:	4b0f      	ldr	r3, [pc, #60]	; (8013448 <getSn_RX_RSR+0x44>)
 801340a:	0146      	lsls	r6, r0, #5
 801340c:	18f7      	adds	r7, r6, r3
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801340e:	4b0f      	ldr	r3, [pc, #60]	; (801344c <getSn_RX_RSR+0x48>)
 8013410:	18f6      	adds	r6, r6, r3
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8013412:	0038      	movs	r0, r7
 8013414:	f7ff ff00 	bl	8013218 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8013418:	0205      	lsls	r5, r0, #8
 801341a:	0030      	movs	r0, r6
 801341c:	f7ff fefc 	bl	8013218 <WIZCHIP_READ>
 8013420:	b2ad      	uxth	r5, r5
 8013422:	182d      	adds	r5, r5, r0
 8013424:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8013426:	2d00      	cmp	r5, #0
 8013428:	d009      	beq.n	801343e <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 801342a:	0038      	movs	r0, r7
 801342c:	f7ff fef4 	bl	8013218 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8013430:	0204      	lsls	r4, r0, #8
 8013432:	0030      	movs	r0, r6
 8013434:	f7ff fef0 	bl	8013218 <WIZCHIP_READ>
 8013438:	b2a4      	uxth	r4, r4
 801343a:	1824      	adds	r4, r4, r0
 801343c:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 801343e:	42ac      	cmp	r4, r5
 8013440:	d1e7      	bne.n	8013412 <getSn_RX_RSR+0xe>
   return val;
}
 8013442:	0020      	movs	r0, r4
 8013444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013446:	46c0      	nop			; (mov r8, r8)
 8013448:	00002608 	.word	0x00002608
 801344c:	00002708 	.word	0x00002708

08013450 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8013450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013452:	1e14      	subs	r4, r2, #0
 8013454:	9101      	str	r1, [sp, #4]
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8013456:	d027      	beq.n	80134a8 <wiz_send_data+0x58>
   ptr = getSn_TX_WR(sn);
 8013458:	2390      	movs	r3, #144	; 0x90
 801345a:	0085      	lsls	r5, r0, #2
 801345c:	1c6e      	adds	r6, r5, #1
 801345e:	019b      	lsls	r3, r3, #6
 8013460:	00f6      	lsls	r6, r6, #3
 8013462:	18f7      	adds	r7, r6, r3
 8013464:	0038      	movs	r0, r7
 8013466:	f7ff fed7 	bl	8013218 <WIZCHIP_READ>
 801346a:	2394      	movs	r3, #148	; 0x94
 801346c:	019b      	lsls	r3, r3, #6
 801346e:	18f6      	adds	r6, r6, r3
 8013470:	9000      	str	r0, [sp, #0]
 8013472:	0030      	movs	r0, r6
 8013474:	f7ff fed0 	bl	8013218 <WIZCHIP_READ>
 8013478:	9b00      	ldr	r3, [sp, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 801347a:	3502      	adds	r5, #2
   ptr = getSn_TX_WR(sn);
 801347c:	021a      	lsls	r2, r3, #8
 801347e:	1812      	adds	r2, r2, r0
 8013480:	b293      	uxth	r3, r2
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8013482:	00e8      	lsls	r0, r5, #3
 8013484:	021d      	lsls	r5, r3, #8
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8013486:	0022      	movs	r2, r4
 8013488:	9901      	ldr	r1, [sp, #4]
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 801348a:	1940      	adds	r0, r0, r5
   ptr = getSn_TX_WR(sn);
 801348c:	9300      	str	r3, [sp, #0]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 801348e:	f7ff ff59 	bl	8013344 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8013492:	9b00      	ldr	r3, [sp, #0]
   setSn_TX_WR(sn,ptr);
 8013494:	0038      	movs	r0, r7
   ptr += len;
 8013496:	18e4      	adds	r4, r4, r3
 8013498:	b2a4      	uxth	r4, r4
   setSn_TX_WR(sn,ptr);
 801349a:	0a21      	lsrs	r1, r4, #8
 801349c:	f7ff feea 	bl	8013274 <WIZCHIP_WRITE>
 80134a0:	0030      	movs	r0, r6
 80134a2:	b2e1      	uxtb	r1, r4
 80134a4:	f7ff fee6 	bl	8013274 <WIZCHIP_WRITE>
}
 80134a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080134aa <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80134aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134ac:	1e14      	subs	r4, r2, #0
 80134ae:	9101      	str	r1, [sp, #4]
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 80134b0:	d027      	beq.n	8013502 <wiz_recv_data+0x58>
   ptr = getSn_RX_RD(sn);
 80134b2:	23a0      	movs	r3, #160	; 0xa0
 80134b4:	0085      	lsls	r5, r0, #2
 80134b6:	1c6e      	adds	r6, r5, #1
 80134b8:	019b      	lsls	r3, r3, #6
 80134ba:	00f6      	lsls	r6, r6, #3
 80134bc:	18f7      	adds	r7, r6, r3
 80134be:	0038      	movs	r0, r7
 80134c0:	f7ff feaa 	bl	8013218 <WIZCHIP_READ>
 80134c4:	23a4      	movs	r3, #164	; 0xa4
 80134c6:	019b      	lsls	r3, r3, #6
 80134c8:	18f6      	adds	r6, r6, r3
 80134ca:	9000      	str	r0, [sp, #0]
 80134cc:	0030      	movs	r0, r6
 80134ce:	f7ff fea3 	bl	8013218 <WIZCHIP_READ>
 80134d2:	9b00      	ldr	r3, [sp, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80134d4:	3503      	adds	r5, #3
   ptr = getSn_RX_RD(sn);
 80134d6:	021a      	lsls	r2, r3, #8
 80134d8:	1812      	adds	r2, r2, r0
 80134da:	b293      	uxth	r3, r2
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80134dc:	00e8      	lsls	r0, r5, #3
 80134de:	021d      	lsls	r5, r3, #8
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80134e0:	0022      	movs	r2, r4
 80134e2:	9901      	ldr	r1, [sp, #4]
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80134e4:	1940      	adds	r0, r0, r5
   ptr = getSn_RX_RD(sn);
 80134e6:	9300      	str	r3, [sp, #0]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80134e8:	f7ff fef2 	bl	80132d0 <WIZCHIP_READ_BUF>
   ptr += len;
 80134ec:	9b00      	ldr	r3, [sp, #0]
   
   setSn_RX_RD(sn,ptr);
 80134ee:	0038      	movs	r0, r7
   ptr += len;
 80134f0:	18e4      	adds	r4, r4, r3
 80134f2:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
 80134f4:	0a21      	lsrs	r1, r4, #8
 80134f6:	f7ff febd 	bl	8013274 <WIZCHIP_WRITE>
 80134fa:	0030      	movs	r0, r6
 80134fc:	b2e1      	uxtb	r1, r4
 80134fe:	f7ff feb9 	bl	8013274 <WIZCHIP_WRITE>
}
 8013502:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08013504 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8013504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
 8013506:	4b0e      	ldr	r3, [pc, #56]	; (8013540 <wiz_recv_ignore+0x3c>)
 8013508:	0146      	lsls	r6, r0, #5
 801350a:	0037      	movs	r7, r6
 801350c:	18f6      	adds	r6, r6, r3
 801350e:	0030      	movs	r0, r6
{
 8013510:	000c      	movs	r4, r1
   ptr = getSn_RX_RD(sn);
 8013512:	f7ff fe81 	bl	8013218 <WIZCHIP_READ>
 8013516:	23a4      	movs	r3, #164	; 0xa4
 8013518:	3708      	adds	r7, #8
 801351a:	019b      	lsls	r3, r3, #6
 801351c:	18ff      	adds	r7, r7, r3
 801351e:	0005      	movs	r5, r0
 8013520:	0038      	movs	r0, r7
 8013522:	f7ff fe79 	bl	8013218 <WIZCHIP_READ>
 8013526:	022d      	lsls	r5, r5, #8
   ptr += len;
 8013528:	1824      	adds	r4, r4, r0
 801352a:	192d      	adds	r5, r5, r4
 801352c:	b2ad      	uxth	r5, r5
   setSn_RX_RD(sn,ptr);
 801352e:	0030      	movs	r0, r6
 8013530:	0a29      	lsrs	r1, r5, #8
 8013532:	f7ff fe9f 	bl	8013274 <WIZCHIP_WRITE>
 8013536:	0038      	movs	r0, r7
 8013538:	b2e9      	uxtb	r1, r5
 801353a:	f7ff fe9b 	bl	8013274 <WIZCHIP_WRITE>
}
 801353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013540:	00002808 	.word	0x00002808

08013544 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8013544:	4770      	bx	lr

08013546 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8013546:	7800      	ldrb	r0, [r0, #0]
 8013548:	b2c0      	uxtb	r0, r0
 801354a:	4770      	bx	lr

0801354c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 801354c:	7001      	strb	r1, [r0, #0]
 801354e:	4770      	bx	lr

08013550 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8013550:	2000      	movs	r0, #0
 8013552:	4770      	bx	lr

08013554 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8013554:	4770      	bx	lr

08013556 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8013556:	4770      	bx	lr

08013558 <wizchip_spi_writeburst>:
 8013558:	4770      	bx	lr

0801355a <wizchip_cris_exit>:
 801355a:	4770      	bx	lr

0801355c <wizchip_cs_select>:
 801355c:	4770      	bx	lr

0801355e <wizchip_cs_deselect>:
 801355e:	4770      	bx	lr

08013560 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8013560:	4b06      	ldr	r3, [pc, #24]	; (801357c <reg_wizchip_cs_cbfunc+0x1c>)
 8013562:	2800      	cmp	r0, #0
 8013564:	d001      	beq.n	801356a <reg_wizchip_cs_cbfunc+0xa>
 8013566:	2900      	cmp	r1, #0
 8013568:	d104      	bne.n	8013574 <reg_wizchip_cs_cbfunc+0x14>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 801356a:	4a05      	ldr	r2, [pc, #20]	; (8013580 <reg_wizchip_cs_cbfunc+0x20>)
 801356c:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801356e:	4a05      	ldr	r2, [pc, #20]	; (8013584 <reg_wizchip_cs_cbfunc+0x24>)
 8013570:	619a      	str	r2, [r3, #24]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 8013572:	4770      	bx	lr
      WIZCHIP.CS._select   = cs_sel;
 8013574:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8013576:	6199      	str	r1, [r3, #24]
}
 8013578:	e7fb      	b.n	8013572 <reg_wizchip_cs_cbfunc+0x12>
 801357a:	46c0      	nop			; (mov r8, r8)
 801357c:	20000108 	.word	0x20000108
 8013580:	0801355d 	.word	0x0801355d
 8013584:	0801355f 	.word	0x0801355f

08013588 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8013588:	4b08      	ldr	r3, [pc, #32]	; (80135ac <reg_wizchip_spi_cbfunc+0x24>)
 801358a:	881a      	ldrh	r2, [r3, #0]
 801358c:	0592      	lsls	r2, r2, #22
 801358e:	d400      	bmi.n	8013592 <reg_wizchip_spi_cbfunc+0xa>
 8013590:	e7fe      	b.n	8013590 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8013592:	2800      	cmp	r0, #0
 8013594:	d001      	beq.n	801359a <reg_wizchip_spi_cbfunc+0x12>
 8013596:	2900      	cmp	r1, #0
 8013598:	d104      	bne.n	80135a4 <reg_wizchip_spi_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801359a:	4a05      	ldr	r2, [pc, #20]	; (80135b0 <reg_wizchip_spi_cbfunc+0x28>)
 801359c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801359e:	4a05      	ldr	r2, [pc, #20]	; (80135b4 <reg_wizchip_spi_cbfunc+0x2c>)
 80135a0:	621a      	str	r2, [r3, #32]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 80135a2:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80135a4:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80135a6:	6219      	str	r1, [r3, #32]
}
 80135a8:	e7fb      	b.n	80135a2 <reg_wizchip_spi_cbfunc+0x1a>
 80135aa:	46c0      	nop			; (mov r8, r8)
 80135ac:	20000108 	.word	0x20000108
 80135b0:	08013551 	.word	0x08013551
 80135b4:	08013555 	.word	0x08013555

080135b8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80135b8:	4b08      	ldr	r3, [pc, #32]	; (80135dc <reg_wizchip_spiburst_cbfunc+0x24>)
 80135ba:	881a      	ldrh	r2, [r3, #0]
 80135bc:	0592      	lsls	r2, r2, #22
 80135be:	d400      	bmi.n	80135c2 <reg_wizchip_spiburst_cbfunc+0xa>
 80135c0:	e7fe      	b.n	80135c0 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d001      	beq.n	80135ca <reg_wizchip_spiburst_cbfunc+0x12>
 80135c6:	2900      	cmp	r1, #0
 80135c8:	d104      	bne.n	80135d4 <reg_wizchip_spiburst_cbfunc+0x1c>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80135ca:	4a05      	ldr	r2, [pc, #20]	; (80135e0 <reg_wizchip_spiburst_cbfunc+0x28>)
 80135cc:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80135ce:	4a05      	ldr	r2, [pc, #20]	; (80135e4 <reg_wizchip_spiburst_cbfunc+0x2c>)
 80135d0:	629a      	str	r2, [r3, #40]	; 0x28
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}
 80135d2:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80135d4:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80135d6:	6299      	str	r1, [r3, #40]	; 0x28
}
 80135d8:	e7fb      	b.n	80135d2 <reg_wizchip_spiburst_cbfunc+0x1a>
 80135da:	46c0      	nop			; (mov r8, r8)
 80135dc:	20000108 	.word	0x20000108
 80135e0:	08013557 	.word	0x08013557
 80135e4:	08013559 	.word	0x08013559

080135e8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80135e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80135ea:	2790      	movs	r7, #144	; 0x90
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80135ec:	2680      	movs	r6, #128	; 0x80
 80135ee:	25a0      	movs	r5, #160	; 0xa0
 80135f0:	24f0      	movs	r4, #240	; 0xf0
{
 80135f2:	b087      	sub	sp, #28
   getSHAR(mac);
 80135f4:	013f      	lsls	r7, r7, #4
 80135f6:	0038      	movs	r0, r7
 80135f8:	a904      	add	r1, sp, #16
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80135fa:	0076      	lsls	r6, r6, #1
   getSHAR(mac);
 80135fc:	2206      	movs	r2, #6
 80135fe:	f7ff fe67 	bl	80132d0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8013602:	00ed      	lsls	r5, r5, #3
 8013604:	0030      	movs	r0, r6
 8013606:	a901      	add	r1, sp, #4
 8013608:	2204      	movs	r2, #4
 801360a:	f7ff fe61 	bl	80132d0 <WIZCHIP_READ_BUF>
 801360e:	0124      	lsls	r4, r4, #4
 8013610:	0028      	movs	r0, r5
 8013612:	a902      	add	r1, sp, #8
 8013614:	2204      	movs	r2, #4
 8013616:	f7ff fe5b 	bl	80132d0 <WIZCHIP_READ_BUF>
 801361a:	2204      	movs	r2, #4
 801361c:	0020      	movs	r0, r4
 801361e:	a903      	add	r1, sp, #12
 8013620:	f7ff fe56 	bl	80132d0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8013624:	2180      	movs	r1, #128	; 0x80
 8013626:	2000      	movs	r0, #0
 8013628:	f7ff fe24 	bl	8013274 <WIZCHIP_WRITE>
   getMR(); // for delay
 801362c:	2000      	movs	r0, #0
 801362e:	f7ff fdf3 	bl	8013218 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8013632:	0038      	movs	r0, r7
 8013634:	a904      	add	r1, sp, #16
 8013636:	2206      	movs	r2, #6
 8013638:	f7ff fe84 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801363c:	0030      	movs	r0, r6
 801363e:	a901      	add	r1, sp, #4
 8013640:	2204      	movs	r2, #4
 8013642:	f7ff fe7f 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8013646:	0028      	movs	r0, r5
 8013648:	a902      	add	r1, sp, #8
 801364a:	2204      	movs	r2, #4
 801364c:	f7ff fe7a 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8013650:	2204      	movs	r2, #4
 8013652:	0020      	movs	r0, r4
 8013654:	a903      	add	r1, sp, #12
 8013656:	f7ff fe75 	bl	8013344 <WIZCHIP_WRITE_BUF>
}
 801365a:	b007      	add	sp, #28
 801365c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013660 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8013660:	b570      	push	{r4, r5, r6, lr}
 8013662:	0005      	movs	r5, r0
 8013664:	000c      	movs	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8013666:	f7ff ffbf 	bl	80135e8 <wizchip_sw_reset>
   if(txsize)
 801366a:	2d00      	cmp	r5, #0
 801366c:	d015      	beq.n	801369a <wizchip_init+0x3a>
 801366e:	0029      	movs	r1, r5
 8013670:	002a      	movs	r2, r5
   {
      tmp = 0;
 8013672:	2300      	movs	r3, #0
 8013674:	3108      	adds	r1, #8
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 8013676:	7810      	ldrb	r0, [r2, #0]
 8013678:	18c3      	adds	r3, r0, r3
 801367a:	b25b      	sxtb	r3, r3

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 801367c:	2b10      	cmp	r3, #16
 801367e:	dc27      	bgt.n	80136d0 <wizchip_init+0x70>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013680:	3201      	adds	r2, #1
 8013682:	4291      	cmp	r1, r2
 8013684:	d1f7      	bne.n	8013676 <wizchip_init+0x16>
 8013686:	2600      	movs	r6, #0
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8013688:	4b13      	ldr	r3, [pc, #76]	; (80136d8 <wizchip_init+0x78>)
 801368a:	0170      	lsls	r0, r6, #5
 801368c:	5da9      	ldrb	r1, [r5, r6]
 801368e:	18c0      	adds	r0, r0, r3
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013690:	3601      	adds	r6, #1
			setSn_TXBUF_SIZE(i, txsize[i]);
 8013692:	f7ff fdef 	bl	8013274 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8013696:	2e08      	cmp	r6, #8
 8013698:	d1f6      	bne.n	8013688 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 801369a:	2c00      	cmp	r4, #0
 801369c:	d101      	bne.n	80136a2 <wizchip_init+0x42>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 801369e:	2000      	movs	r0, #0
}
 80136a0:	bd70      	pop	{r4, r5, r6, pc}
 80136a2:	0021      	movs	r1, r4
 80136a4:	0022      	movs	r2, r4
      tmp = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	3108      	adds	r1, #8
			tmp += rxsize[i];
 80136aa:	7810      	ldrb	r0, [r2, #0]
 80136ac:	18c3      	adds	r3, r0, r3
 80136ae:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 80136b0:	2b10      	cmp	r3, #16
 80136b2:	dc0d      	bgt.n	80136d0 <wizchip_init+0x70>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80136b4:	3201      	adds	r2, #1
 80136b6:	4291      	cmp	r1, r2
 80136b8:	d1f7      	bne.n	80136aa <wizchip_init+0x4a>
 80136ba:	2500      	movs	r5, #0
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80136bc:	4b07      	ldr	r3, [pc, #28]	; (80136dc <wizchip_init+0x7c>)
 80136be:	0168      	lsls	r0, r5, #5
 80136c0:	5d61      	ldrb	r1, [r4, r5]
 80136c2:	18c0      	adds	r0, r0, r3
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80136c4:	3501      	adds	r5, #1
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80136c6:	f7ff fdd5 	bl	8013274 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80136ca:	2d08      	cmp	r5, #8
 80136cc:	d1f6      	bne.n	80136bc <wizchip_init+0x5c>
 80136ce:	e7e6      	b.n	801369e <wizchip_init+0x3e>
			if(tmp > 16) return -1;
 80136d0:	2001      	movs	r0, #1
 80136d2:	4240      	negs	r0, r0
 80136d4:	e7e4      	b.n	80136a0 <wizchip_init+0x40>
 80136d6:	46c0      	nop			; (mov r8, r8)
 80136d8:	00001f08 	.word	0x00001f08
 80136dc:	00001e08 	.word	0x00001e08

080136e0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80136e0:	b510      	push	{r4, lr}
 80136e2:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
 80136e4:	2090      	movs	r0, #144	; 0x90
 80136e6:	0021      	movs	r1, r4
 80136e8:	2206      	movs	r2, #6
 80136ea:	0100      	lsls	r0, r0, #4
 80136ec:	f7ff fe2a 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80136f0:	0021      	movs	r1, r4
 80136f2:	2080      	movs	r0, #128	; 0x80
 80136f4:	2204      	movs	r2, #4
 80136f6:	310e      	adds	r1, #14
 80136f8:	0040      	lsls	r0, r0, #1
 80136fa:	f7ff fe23 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80136fe:	0021      	movs	r1, r4
 8013700:	20a0      	movs	r0, #160	; 0xa0
 8013702:	2204      	movs	r2, #4
 8013704:	310a      	adds	r1, #10
 8013706:	00c0      	lsls	r0, r0, #3
 8013708:	f7ff fe1c 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801370c:	2204      	movs	r2, #4
 801370e:	20f0      	movs	r0, #240	; 0xf0
 8013710:	1da1      	adds	r1, r4, #6
 8013712:	4090      	lsls	r0, r2
 8013714:	f7ff fe16 	bl	8013344 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8013718:	7ca2      	ldrb	r2, [r4, #18]
 801371a:	4b06      	ldr	r3, [pc, #24]	; (8013734 <wizchip_setnetinfo+0x54>)
 801371c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801371e:	7ce2      	ldrb	r2, [r4, #19]
 8013720:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8013722:	7d22      	ldrb	r2, [r4, #20]
 8013724:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8013726:	7d62      	ldrb	r2, [r4, #21]
 8013728:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801372a:	7da2      	ldrb	r2, [r4, #22]
 801372c:	4b02      	ldr	r3, [pc, #8]	; (8013738 <wizchip_setnetinfo+0x58>)
 801372e:	701a      	strb	r2, [r3, #0]
}
 8013730:	bd10      	pop	{r4, pc}
 8013732:	46c0      	nop			; (mov r8, r8)
 8013734:	20000661 	.word	0x20000661
 8013738:	20000660 	.word	0x20000660

0801373c <default_ip_assign>:
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
   setSIPR(DHCP_allocated_ip);
 801373c:	2204      	movs	r2, #4
 801373e:	20f0      	movs	r0, #240	; 0xf0
{
 8013740:	b510      	push	{r4, lr}
   setSIPR(DHCP_allocated_ip);
 8013742:	4090      	lsls	r0, r2
 8013744:	4907      	ldr	r1, [pc, #28]	; (8013764 <default_ip_assign+0x28>)
 8013746:	f7ff fdfd 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801374a:	20a0      	movs	r0, #160	; 0xa0
 801374c:	2204      	movs	r2, #4
 801374e:	4906      	ldr	r1, [pc, #24]	; (8013768 <default_ip_assign+0x2c>)
 8013750:	00c0      	lsls	r0, r0, #3
 8013752:	f7ff fdf7 	bl	8013344 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8013756:	2080      	movs	r0, #128	; 0x80
 8013758:	2204      	movs	r2, #4
 801375a:	4904      	ldr	r1, [pc, #16]	; (801376c <default_ip_assign+0x30>)
 801375c:	0040      	lsls	r0, r0, #1
 801375e:	f7ff fdf1 	bl	8013344 <WIZCHIP_WRITE_BUF>
}
 8013762:	bd10      	pop	{r4, pc}
 8013764:	20000680 	.word	0x20000680
 8013768:	20000684 	.word	0x20000684
 801376c:	2000067c 	.word	0x2000067c

08013770 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8013770:	b510      	push	{r4, lr}
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8013772:	2180      	movs	r1, #128	; 0x80
 8013774:	2000      	movs	r0, #0
 8013776:	f7ff fd7d 	bl	8013274 <WIZCHIP_WRITE>
   getMR(); // for delay
 801377a:	2000      	movs	r0, #0
 801377c:	f7ff fd4c 	bl	8013218 <WIZCHIP_READ>
   default_ip_assign();
 8013780:	f7ff ffdc 	bl	801373c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8013784:	2090      	movs	r0, #144	; 0x90
 8013786:	2206      	movs	r2, #6
 8013788:	4902      	ldr	r1, [pc, #8]	; (8013794 <default_ip_update+0x24>)
 801378a:	0100      	lsls	r0, r0, #4
 801378c:	f7ff fdda 	bl	8013344 <WIZCHIP_WRITE_BUF>
}
 8013790:	bd10      	pop	{r4, pc}
 8013792:	46c0      	nop			; (mov r8, r8)
 8013794:	20000665 	.word	0x20000665

08013798 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8013798:	b510      	push	{r4, lr}
	// WIZchip Software Reset
	setMR(MR_RST);
 801379a:	2180      	movs	r1, #128	; 0x80
 801379c:	2000      	movs	r0, #0
 801379e:	f7ff fd69 	bl	8013274 <WIZCHIP_WRITE>
	getMR(); // for delay
 80137a2:	2000      	movs	r0, #0
 80137a4:	f7ff fd38 	bl	8013218 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80137a8:	2090      	movs	r0, #144	; 0x90
 80137aa:	2206      	movs	r2, #6
 80137ac:	4902      	ldr	r1, [pc, #8]	; (80137b8 <default_ip_conflict+0x20>)
 80137ae:	0100      	lsls	r0, r0, #4
 80137b0:	f7ff fdc8 	bl	8013344 <WIZCHIP_WRITE_BUF>
}
 80137b4:	bd10      	pop	{r4, pc}
 80137b6:	46c0      	nop			; (mov r8, r8)
 80137b8:	20000665 	.word	0x20000665

080137bc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80137bc:	b570      	push	{r4, r5, r6, lr}
   dhcp_ip_assign   = default_ip_assign;
 80137be:	4b09      	ldr	r3, [pc, #36]	; (80137e4 <reg_dhcp_cbfunc+0x28>)
 80137c0:	4d09      	ldr	r5, [pc, #36]	; (80137e8 <reg_dhcp_cbfunc+0x2c>)
   dhcp_ip_update   = default_ip_update;
 80137c2:	4c0a      	ldr	r4, [pc, #40]	; (80137ec <reg_dhcp_cbfunc+0x30>)
   dhcp_ip_assign   = default_ip_assign;
 80137c4:	602b      	str	r3, [r5, #0]
   dhcp_ip_update   = default_ip_update;
 80137c6:	4b0a      	ldr	r3, [pc, #40]	; (80137f0 <reg_dhcp_cbfunc+0x34>)
   dhcp_ip_conflict = default_ip_conflict;
 80137c8:	4e0a      	ldr	r6, [pc, #40]	; (80137f4 <reg_dhcp_cbfunc+0x38>)
   dhcp_ip_update   = default_ip_update;
 80137ca:	6023      	str	r3, [r4, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80137cc:	4b0a      	ldr	r3, [pc, #40]	; (80137f8 <reg_dhcp_cbfunc+0x3c>)
 80137ce:	601e      	str	r6, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80137d0:	2800      	cmp	r0, #0
 80137d2:	d000      	beq.n	80137d6 <reg_dhcp_cbfunc+0x1a>
 80137d4:	6028      	str	r0, [r5, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 80137d6:	2900      	cmp	r1, #0
 80137d8:	d000      	beq.n	80137dc <reg_dhcp_cbfunc+0x20>
 80137da:	6021      	str	r1, [r4, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80137dc:	2a00      	cmp	r2, #0
 80137de:	d000      	beq.n	80137e2 <reg_dhcp_cbfunc+0x26>
 80137e0:	601a      	str	r2, [r3, #0]
}
 80137e2:	bd70      	pop	{r4, r5, r6, pc}
 80137e4:	0801373d 	.word	0x0801373d
 80137e8:	2000013c 	.word	0x2000013c
 80137ec:	20000144 	.word	0x20000144
 80137f0:	08013771 	.word	0x08013771
 80137f4:	08013799 	.word	0x08013799
 80137f8:	20000140 	.word	0x20000140

080137fc <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80137fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80137fe:	2090      	movs	r0, #144	; 0x90
 8013800:	4669      	mov	r1, sp
 8013802:	2206      	movs	r2, #6
 8013804:	0100      	lsls	r0, r0, #4
 8013806:	f7ff fd63 	bl	80132d0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801380a:	4b1d      	ldr	r3, [pc, #116]	; (8013880 <makeDHCPMSG+0x84>)
	pDHCPMSG->secs    = DHCP_SECS;
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);

	pDHCPMSG->ciaddr[0] = 0;
 801380c:	2500      	movs	r5, #0
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801380e:	681c      	ldr	r4, [r3, #0]
 8013810:	4b1c      	ldr	r3, [pc, #112]	; (8013884 <makeDHCPMSG+0x88>)
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8013812:	0020      	movs	r0, r4
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8013814:	6023      	str	r3, [r4, #0]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8013816:	4b1c      	ldr	r3, [pc, #112]	; (8013888 <makeDHCPMSG+0x8c>)
	pDHCPMSG->ciaddr[0] = 0;
 8013818:	60e5      	str	r5, [r4, #12]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801381a:	681b      	ldr	r3, [r3, #0]
	pDHCPMSG->yiaddr[0] = 0;
 801381c:	6125      	str	r5, [r4, #16]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801381e:	0e1a      	lsrs	r2, r3, #24
 8013820:	7122      	strb	r2, [r4, #4]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8013822:	0c1a      	lsrs	r2, r3, #16
 8013824:	7162      	strb	r2, [r4, #5]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8013826:	71e3      	strb	r3, [r4, #7]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8013828:	0a1a      	lsrs	r2, r3, #8
	pDHCPMSG->secs    = DHCP_SECS;
 801382a:	2380      	movs	r3, #128	; 0x80
 801382c:	041b      	lsls	r3, r3, #16
 801382e:	60a3      	str	r3, [r4, #8]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8013830:	4b16      	ldr	r3, [pc, #88]	; (801388c <makeDHCPMSG+0x90>)
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8013832:	71a2      	strb	r2, [r4, #6]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8013834:	781a      	ldrb	r2, [r3, #0]
	pDHCPMSG->siaddr[0] = 0;
 8013836:	6165      	str	r5, [r4, #20]
	pDHCPMSG->giaddr[0] = 0;
 8013838:	61a5      	str	r5, [r4, #24]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801383a:	7722      	strb	r2, [r4, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801383c:	785a      	ldrb	r2, [r3, #1]
	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801383e:	3022      	adds	r0, #34	; 0x22
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8013840:	7762      	strb	r2, [r4, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8013842:	789a      	ldrb	r2, [r3, #2]
 8013844:	77a2      	strb	r2, [r4, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8013846:	78da      	ldrb	r2, [r3, #3]
 8013848:	77e2      	strb	r2, [r4, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801384a:	7919      	ldrb	r1, [r3, #4]
 801384c:	1c62      	adds	r2, r4, #1
 801384e:	77d1      	strb	r1, [r2, #31]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8013850:	795b      	ldrb	r3, [r3, #5]
 8013852:	1ca2      	adds	r2, r4, #2
 8013854:	77d3      	strb	r3, [r2, #31]
	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8013856:	0029      	movs	r1, r5
 8013858:	220a      	movs	r2, #10
 801385a:	f004 fef6 	bl	801864a <memset>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801385e:	0020      	movs	r0, r4
 8013860:	0029      	movs	r1, r5
 8013862:	2240      	movs	r2, #64	; 0x40
 8013864:	302c      	adds	r0, #44	; 0x2c
 8013866:	f004 fef0 	bl	801864a <memset>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801386a:	0020      	movs	r0, r4
 801386c:	0029      	movs	r1, r5
 801386e:	2280      	movs	r2, #128	; 0x80
 8013870:	306c      	adds	r0, #108	; 0x6c
 8013872:	f004 feea 	bl	801864a <memset>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8013876:	4b06      	ldr	r3, [pc, #24]	; (8013890 <makeDHCPMSG+0x94>)
 8013878:	34ec      	adds	r4, #236	; 0xec
 801387a:	6023      	str	r3, [r4, #0]
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
}
 801387c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 801387e:	46c0      	nop			; (mov r8, r8)
 8013880:	20000694 	.word	0x20000694
 8013884:	00060101 	.word	0x00060101
 8013888:	20000674 	.word	0x20000674
 801388c:	20000665 	.word	0x20000665
 8013890:	63538263 	.word	0x63538263

08013894 <send_DHCP_DECLINE>:

}

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8013894:	b530      	push	{r4, r5, lr}
 8013896:	b085      	sub	sp, #20
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
	
	makeDHCPMSG();
 8013898:	f7ff ffb0 	bl	80137fc <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801389c:	4b27      	ldr	r3, [pc, #156]	; (801393c <send_DHCP_DECLINE+0xa8>)
 801389e:	2100      	movs	r1, #0
 80138a0:	681c      	ldr	r4, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80138a2:	4a27      	ldr	r2, [pc, #156]	; (8013940 <send_DHCP_DECLINE+0xac>)
 80138a4:	0023      	movs	r3, r4
 80138a6:	33f0      	adds	r3, #240	; 0xf0
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80138a8:	72a1      	strb	r1, [r4, #10]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80138aa:	72e1      	strb	r1, [r4, #11]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80138ac:	601a      	str	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
	pDHCPMSG->OPT[k++] = 0x07;
 80138ae:	2208      	movs	r2, #8
 80138b0:	32ff      	adds	r2, #255	; 0xff
 80138b2:	809a      	strh	r2, [r3, #4]
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80138b4:	0022      	movs	r2, r4
 80138b6:	4b23      	ldr	r3, [pc, #140]	; (8013944 <send_DHCP_DECLINE+0xb0>)
 80138b8:	32f6      	adds	r2, #246	; 0xf6
 80138ba:	7818      	ldrb	r0, [r3, #0]
 80138bc:	7010      	strb	r0, [r2, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80138be:	7858      	ldrb	r0, [r3, #1]
 80138c0:	7050      	strb	r0, [r2, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80138c2:	7898      	ldrb	r0, [r3, #2]
 80138c4:	7090      	strb	r0, [r2, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80138c6:	78d8      	ldrb	r0, [r3, #3]
 80138c8:	70d0      	strb	r0, [r2, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80138ca:	7918      	ldrb	r0, [r3, #4]
 80138cc:	7110      	strb	r0, [r2, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80138ce:	795b      	ldrb	r3, [r3, #5]

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
	pDHCPMSG->OPT[k++] = 0x04;
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80138d0:	0020      	movs	r0, r4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80138d2:	7153      	strb	r3, [r2, #5]
	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80138d4:	0023      	movs	r3, r4
 80138d6:	4a1c      	ldr	r2, [pc, #112]	; (8013948 <send_DHCP_DECLINE+0xb4>)
 80138d8:	33fc      	adds	r3, #252	; 0xfc
 80138da:	801a      	strh	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80138dc:	4a1b      	ldr	r2, [pc, #108]	; (801394c <send_DHCP_DECLINE+0xb8>)
 80138de:	30fe      	adds	r0, #254	; 0xfe
 80138e0:	7813      	ldrb	r3, [r2, #0]
 80138e2:	7003      	strb	r3, [r0, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80138e4:	0023      	movs	r3, r4
 80138e6:	7855      	ldrb	r5, [r2, #1]
 80138e8:	33ff      	adds	r3, #255	; 0xff
 80138ea:	701d      	strb	r5, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80138ec:	7895      	ldrb	r5, [r2, #2]
 80138ee:	705d      	strb	r5, [r3, #1]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80138f0:	78d2      	ldrb	r2, [r2, #3]
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];

	pDHCPMSG->OPT[k++] = endOption;
 80138f2:	25ff      	movs	r5, #255	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80138f4:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80138f6:	4a16      	ldr	r2, [pc, #88]	; (8013950 <send_DHCP_DECLINE+0xbc>)
 80138f8:	8082      	strh	r2, [r0, #4]
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80138fa:	4a16      	ldr	r2, [pc, #88]	; (8013954 <send_DHCP_DECLINE+0xc0>)
 80138fc:	7810      	ldrb	r0, [r2, #0]
 80138fe:	7158      	strb	r0, [r3, #5]
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8013900:	7850      	ldrb	r0, [r2, #1]
 8013902:	7198      	strb	r0, [r3, #6]
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8013904:	7890      	ldrb	r0, [r2, #2]
 8013906:	71d8      	strb	r0, [r3, #7]
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8013908:	78d2      	ldrb	r2, [r2, #3]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801390a:	0020      	movs	r0, r4
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801390c:	721a      	strb	r2, [r3, #8]
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801390e:	221c      	movs	r2, #28
 8013910:	300a      	adds	r0, #10
	pDHCPMSG->OPT[k++] = endOption;
 8013912:	725d      	strb	r5, [r3, #9]
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8013914:	1952      	adds	r2, r2, r5
 8013916:	30ff      	adds	r0, #255	; 0xff
 8013918:	f004 fe97 	bl	801864a <memset>

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801391c:	490e      	ldr	r1, [pc, #56]	; (8013958 <send_DHCP_DECLINE+0xc4>)
 801391e:	2289      	movs	r2, #137	; 0x89
 8013920:	7808      	ldrb	r0, [r1, #0]
 8013922:	2143      	movs	r1, #67	; 0x43
	ip[0] = 0xFF;
 8013924:	ab03      	add	r3, sp, #12
 8013926:	701d      	strb	r5, [r3, #0]
	ip[1] = 0xFF;
 8013928:	705d      	strb	r5, [r3, #1]
	ip[2] = 0xFF;
 801392a:	709d      	strb	r5, [r3, #2]
	ip[3] = 0xFF;
 801392c:	70dd      	strb	r5, [r3, #3]
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801392e:	0092      	lsls	r2, r2, #2
 8013930:	9100      	str	r1, [sp, #0]
 8013932:	0021      	movs	r1, r4
 8013934:	f7ff fab8 	bl	8012ea8 <sendto>
}
 8013938:	b005      	add	sp, #20
 801393a:	bd30      	pop	{r4, r5, pc}
 801393c:	20000694 	.word	0x20000694
 8013940:	3d040135 	.word	0x3d040135
 8013944:	20000665 	.word	0x20000665
 8013948:	00000432 	.word	0x00000432
 801394c:	20000680 	.word	0x20000680
 8013950:	00000436 	.word	0x00000436
 8013954:	2000066f 	.word	0x2000066f
 8013958:	20000673 	.word	0x20000673

0801395c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801395c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801395e:	4e68      	ldr	r6, [pc, #416]	; (8013b00 <parseDHCPMSG+0x1a4>)
{
 8013960:	b08d      	sub	sp, #52	; 0x34
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8013962:	7830      	ldrb	r0, [r6, #0]
 8013964:	f7ff fd4e 	bl	8013404 <getSn_RX_RSR>
 8013968:	1e02      	subs	r2, r0, #0
 801396a:	d102      	bne.n	8013972 <parseDHCPMSG+0x16>
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else
   {
	   return 0;
 801396c:	2000      	movs	r0, #0
   				break;
			} // switch
		} // while
	} // if
	return	type;
}
 801396e:	b00d      	add	sp, #52	; 0x34
 8013970:	bdf0      	pop	{r4, r5, r6, r7, pc}
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8013972:	7830      	ldrb	r0, [r6, #0]
 8013974:	260e      	movs	r6, #14
 8013976:	ab06      	add	r3, sp, #24
 8013978:	18f6      	adds	r6, r6, r3
 801397a:	4d62      	ldr	r5, [pc, #392]	; (8013b04 <parseDHCPMSG+0x1a8>)
 801397c:	9600      	str	r6, [sp, #0]
 801397e:	ac0a      	add	r4, sp, #40	; 0x28
 8013980:	0023      	movs	r3, r4
 8013982:	6829      	ldr	r1, [r5, #0]
 8013984:	f7ff fb42 	bl	801300c <recvfrom>
	if (svr_port == DHCP_SERVER_PORT) {
 8013988:	8833      	ldrh	r3, [r6, #0]
	uint8_t type = 0;
 801398a:	2200      	movs	r2, #0
	if (svr_port == DHCP_SERVER_PORT) {
 801398c:	2b43      	cmp	r3, #67	; 0x43
 801398e:	d156      	bne.n	8013a3e <parseDHCPMSG+0xe2>
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8013990:	682a      	ldr	r2, [r5, #0]
 8013992:	4b5d      	ldr	r3, [pc, #372]	; (8013b08 <parseDHCPMSG+0x1ac>)
 8013994:	7f15      	ldrb	r5, [r2, #28]
 8013996:	7819      	ldrb	r1, [r3, #0]
 8013998:	428d      	cmp	r5, r1
 801399a:	d1e7      	bne.n	801396c <parseDHCPMSG+0x10>
 801399c:	7f55      	ldrb	r5, [r2, #29]
 801399e:	7859      	ldrb	r1, [r3, #1]
 80139a0:	428d      	cmp	r5, r1
 80139a2:	d1e3      	bne.n	801396c <parseDHCPMSG+0x10>
 80139a4:	7f95      	ldrb	r5, [r2, #30]
 80139a6:	7899      	ldrb	r1, [r3, #2]
 80139a8:	428d      	cmp	r5, r1
 80139aa:	d1df      	bne.n	801396c <parseDHCPMSG+0x10>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80139ac:	7fd5      	ldrb	r5, [r2, #31]
 80139ae:	78d9      	ldrb	r1, [r3, #3]
 80139b0:	428d      	cmp	r5, r1
 80139b2:	d1db      	bne.n	801396c <parseDHCPMSG+0x10>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80139b4:	1c51      	adds	r1, r2, #1
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80139b6:	7fcd      	ldrb	r5, [r1, #31]
 80139b8:	7919      	ldrb	r1, [r3, #4]
 80139ba:	428d      	cmp	r5, r1
 80139bc:	d1d6      	bne.n	801396c <parseDHCPMSG+0x10>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80139be:	1c91      	adds	r1, r2, #2
 80139c0:	7fc9      	ldrb	r1, [r1, #31]
 80139c2:	795b      	ldrb	r3, [r3, #5]
 80139c4:	4299      	cmp	r1, r3
 80139c6:	d1d1      	bne.n	801396c <parseDHCPMSG+0x10>
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80139c8:	4b50      	ldr	r3, [pc, #320]	; (8013b0c <parseDHCPMSG+0x1b0>)
 80139ca:	785e      	ldrb	r6, [r3, #1]
 80139cc:	789d      	ldrb	r5, [r3, #2]
 80139ce:	78d9      	ldrb	r1, [r3, #3]
 80139d0:	781f      	ldrb	r7, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80139d2:	7823      	ldrb	r3, [r4, #0]
 80139d4:	9303      	str	r3, [sp, #12]
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80139d6:	003b      	movs	r3, r7
 80139d8:	4333      	orrs	r3, r6
 80139da:	432b      	orrs	r3, r5
 80139dc:	430b      	orrs	r3, r1
 80139de:	d01c      	beq.n	8013a1a <parseDHCPMSG+0xbe>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80139e0:	9b03      	ldr	r3, [sp, #12]
 80139e2:	429f      	cmp	r7, r3
 80139e4:	d108      	bne.n	80139f8 <parseDHCPMSG+0x9c>
 80139e6:	7863      	ldrb	r3, [r4, #1]
 80139e8:	42b3      	cmp	r3, r6
 80139ea:	d105      	bne.n	80139f8 <parseDHCPMSG+0x9c>
 80139ec:	78a3      	ldrb	r3, [r4, #2]
 80139ee:	42ab      	cmp	r3, r5
 80139f0:	d102      	bne.n	80139f8 <parseDHCPMSG+0x9c>
 80139f2:	78e3      	ldrb	r3, [r4, #3]
 80139f4:	428b      	cmp	r3, r1
 80139f6:	d010      	beq.n	8013a1a <parseDHCPMSG+0xbe>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 80139f8:	4b45      	ldr	r3, [pc, #276]	; (8013b10 <parseDHCPMSG+0x1b4>)
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80139fa:	9d03      	ldr	r5, [sp, #12]
 80139fc:	7819      	ldrb	r1, [r3, #0]
 80139fe:	42a9      	cmp	r1, r5
 8013a00:	d1b4      	bne.n	801396c <parseDHCPMSG+0x10>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8013a02:	7865      	ldrb	r5, [r4, #1]
 8013a04:	7859      	ldrb	r1, [r3, #1]
 8013a06:	428d      	cmp	r5, r1
 8013a08:	d1b0      	bne.n	801396c <parseDHCPMSG+0x10>
 8013a0a:	78a5      	ldrb	r5, [r4, #2]
 8013a0c:	7899      	ldrb	r1, [r3, #2]
 8013a0e:	428d      	cmp	r5, r1
 8013a10:	d1ac      	bne.n	801396c <parseDHCPMSG+0x10>
 8013a12:	78e1      	ldrb	r1, [r4, #3]
 8013a14:	78db      	ldrb	r3, [r3, #3]
 8013a16:	4299      	cmp	r1, r3
 8013a18:	d1a8      	bne.n	801396c <parseDHCPMSG+0x10>
		e = p + (len - 240);
 8013a1a:	b280      	uxth	r0, r0
 8013a1c:	0013      	movs	r3, r2
 8013a1e:	1812      	adds	r2, r2, r0
 8013a20:	9204      	str	r2, [sp, #16]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8013a22:	7862      	ldrb	r2, [r4, #1]
   				DHCP_SIP[0] = *p++;
 8013a24:	4939      	ldr	r1, [pc, #228]	; (8013b0c <parseDHCPMSG+0x1b0>)
                DHCP_REAL_SIP[1]=svr_addr[1];
 8013a26:	9205      	str	r2, [sp, #20]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8013a28:	78a2      	ldrb	r2, [r4, #2]
   				DHCP_allocated_dns[0] = *p++;
 8013a2a:	4d3a      	ldr	r5, [pc, #232]	; (8013b14 <parseDHCPMSG+0x1b8>)
                DHCP_REAL_SIP[2]=svr_addr[2];
 8013a2c:	9206      	str	r2, [sp, #24]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8013a2e:	78e2      	ldrb	r2, [r4, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8013a30:	4c37      	ldr	r4, [pc, #220]	; (8013b10 <parseDHCPMSG+0x1b4>)
                DHCP_REAL_SIP[3]=svr_addr[3];
 8013a32:	9207      	str	r2, [sp, #28]
	uint8_t type = 0;
 8013a34:	2200      	movs	r2, #0
		e = p + (len - 240);
 8013a36:	33f0      	adds	r3, #240	; 0xf0
		while ( p < e ) {
 8013a38:	9804      	ldr	r0, [sp, #16]
 8013a3a:	4283      	cmp	r3, r0
 8013a3c:	d301      	bcc.n	8013a42 <parseDHCPMSG+0xe6>
	return	type;
 8013a3e:	b250      	sxtb	r0, r2
 8013a40:	e795      	b.n	801396e <parseDHCPMSG+0x12>
			switch ( *p ) {
 8013a42:	7818      	ldrb	r0, [r3, #0]
 8013a44:	2833      	cmp	r0, #51	; 0x33
 8013a46:	d03a      	beq.n	8013abe <parseDHCPMSG+0x162>
 8013a48:	d807      	bhi.n	8013a5a <parseDHCPMSG+0xfe>
 8013a4a:	2806      	cmp	r0, #6
 8013a4c:	d80b      	bhi.n	8013a66 <parseDHCPMSG+0x10a>
 8013a4e:	f7f3 ffed 	bl	8007a2c <__gnu_thumb1_case_uqi>
 8013a52:	130e      	.short	0x130e
 8013a54:	0a0a1e0a 	.word	0x0a0a1e0a
 8013a58:	2b          	.byte	0x2b
 8013a59:	00          	.byte	0x00
 8013a5a:	2836      	cmp	r0, #54	; 0x36
 8013a5c:	d03d      	beq.n	8013ada <parseDHCPMSG+0x17e>
 8013a5e:	28ff      	cmp	r0, #255	; 0xff
 8013a60:	d04c      	beq.n	8013afc <parseDHCPMSG+0x1a0>
 8013a62:	2835      	cmp	r0, #53	; 0x35
 8013a64:	d005      	beq.n	8013a72 <parseDHCPMSG+0x116>
   				opt_len = *p++;
 8013a66:	1c98      	adds	r0, r3, #2
   				p += opt_len;
 8013a68:	785b      	ldrb	r3, [r3, #1]
 8013a6a:	18c3      	adds	r3, r0, r3
   				break;
 8013a6c:	e7e4      	b.n	8013a38 <parseDHCPMSG+0xdc>
   				p++;
 8013a6e:	3301      	adds	r3, #1
   				break;
 8013a70:	e7e2      	b.n	8013a38 <parseDHCPMSG+0xdc>
   				type = *p++;
 8013a72:	789a      	ldrb	r2, [r3, #2]
 8013a74:	3303      	adds	r3, #3
   				break;
 8013a76:	e7df      	b.n	8013a38 <parseDHCPMSG+0xdc>
   				DHCP_allocated_sn[0] = *p++;
 8013a78:	4827      	ldr	r0, [pc, #156]	; (8013b18 <parseDHCPMSG+0x1bc>)
 8013a7a:	789f      	ldrb	r7, [r3, #2]
 8013a7c:	7007      	strb	r7, [r0, #0]
   				DHCP_allocated_sn[1] = *p++;
 8013a7e:	78df      	ldrb	r7, [r3, #3]
 8013a80:	7047      	strb	r7, [r0, #1]
   				DHCP_allocated_sn[2] = *p++;
 8013a82:	791f      	ldrb	r7, [r3, #4]
 8013a84:	7087      	strb	r7, [r0, #2]
   				DHCP_allocated_sn[3] = *p++;
 8013a86:	795f      	ldrb	r7, [r3, #5]
 8013a88:	70c7      	strb	r7, [r0, #3]
   				DHCP_SIP[3] = *p++;
 8013a8a:	3306      	adds	r3, #6
   				break;
 8013a8c:	e7d4      	b.n	8013a38 <parseDHCPMSG+0xdc>
   				DHCP_allocated_gw[0] = *p++;
 8013a8e:	789e      	ldrb	r6, [r3, #2]
 8013a90:	4822      	ldr	r0, [pc, #136]	; (8013b1c <parseDHCPMSG+0x1c0>)
   				opt_len = *p++;       
 8013a92:	785f      	ldrb	r7, [r3, #1]
   				DHCP_allocated_gw[0] = *p++;
 8013a94:	7006      	strb	r6, [r0, #0]
   				DHCP_allocated_gw[1] = *p++;
 8013a96:	78de      	ldrb	r6, [r3, #3]
 8013a98:	7046      	strb	r6, [r0, #1]
   				DHCP_allocated_gw[2] = *p++;
 8013a9a:	791e      	ldrb	r6, [r3, #4]
 8013a9c:	7086      	strb	r6, [r0, #2]
   				DHCP_allocated_gw[3] = *p++;
 8013a9e:	795e      	ldrb	r6, [r3, #5]
   				p = p + (opt_len - 4);
 8013aa0:	19db      	adds	r3, r3, r7
   				DHCP_allocated_gw[3] = *p++;
 8013aa2:	70c6      	strb	r6, [r0, #3]
   				p = p + (opt_len - 4);
 8013aa4:	3302      	adds	r3, #2
   				break;
 8013aa6:	e7c7      	b.n	8013a38 <parseDHCPMSG+0xdc>
   				DHCP_allocated_dns[0] = *p++;
 8013aa8:	789f      	ldrb	r7, [r3, #2]
   				opt_len = *p++;       
 8013aaa:	7858      	ldrb	r0, [r3, #1]
   				DHCP_allocated_dns[0] = *p++;
 8013aac:	702f      	strb	r7, [r5, #0]
   				DHCP_allocated_dns[1] = *p++;
 8013aae:	78df      	ldrb	r7, [r3, #3]
 8013ab0:	706f      	strb	r7, [r5, #1]
   				DHCP_allocated_dns[2] = *p++;
 8013ab2:	791f      	ldrb	r7, [r3, #4]
 8013ab4:	70af      	strb	r7, [r5, #2]
   				DHCP_allocated_dns[3] = *p++;
 8013ab6:	795f      	ldrb	r7, [r3, #5]
   				p = p + (opt_len - 4);
 8013ab8:	181b      	adds	r3, r3, r0
   				DHCP_allocated_dns[3] = *p++;
 8013aba:	70ef      	strb	r7, [r5, #3]
   				p = p + (opt_len - 4);
 8013abc:	e7f2      	b.n	8013aa4 <parseDHCPMSG+0x148>
   				dhcp_lease_time  = *p++;
 8013abe:	7898      	ldrb	r0, [r3, #2]
 8013ac0:	4e17      	ldr	r6, [pc, #92]	; (8013b20 <parseDHCPMSG+0x1c4>)
 8013ac2:	6030      	str	r0, [r6, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8013ac4:	78df      	ldrb	r7, [r3, #3]
 8013ac6:	0200      	lsls	r0, r0, #8
 8013ac8:	19c0      	adds	r0, r0, r7
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8013aca:	791f      	ldrb	r7, [r3, #4]
 8013acc:	0200      	lsls	r0, r0, #8
 8013ace:	19c0      	adds	r0, r0, r7
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8013ad0:	795f      	ldrb	r7, [r3, #5]
 8013ad2:	0200      	lsls	r0, r0, #8
 8013ad4:	19c0      	adds	r0, r0, r7
 8013ad6:	6030      	str	r0, [r6, #0]
   				break;
 8013ad8:	e7d7      	b.n	8013a8a <parseDHCPMSG+0x12e>
   				DHCP_SIP[0] = *p++;
 8013ada:	7898      	ldrb	r0, [r3, #2]
 8013adc:	7008      	strb	r0, [r1, #0]
   				DHCP_SIP[1] = *p++;
 8013ade:	78d8      	ldrb	r0, [r3, #3]
 8013ae0:	7048      	strb	r0, [r1, #1]
   				DHCP_SIP[2] = *p++;
 8013ae2:	7918      	ldrb	r0, [r3, #4]
 8013ae4:	7088      	strb	r0, [r1, #2]
   				DHCP_SIP[3] = *p++;
 8013ae6:	7958      	ldrb	r0, [r3, #5]
 8013ae8:	70c8      	strb	r0, [r1, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8013aea:	9803      	ldr	r0, [sp, #12]
 8013aec:	7020      	strb	r0, [r4, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8013aee:	9805      	ldr	r0, [sp, #20]
 8013af0:	7060      	strb	r0, [r4, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8013af2:	9806      	ldr	r0, [sp, #24]
 8013af4:	70a0      	strb	r0, [r4, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8013af6:	9807      	ldr	r0, [sp, #28]
 8013af8:	70e0      	strb	r0, [r4, #3]
 8013afa:	e7c6      	b.n	8013a8a <parseDHCPMSG+0x12e>
			switch ( *p ) {
 8013afc:	9b04      	ldr	r3, [sp, #16]
 8013afe:	e79b      	b.n	8013a38 <parseDHCPMSG+0xdc>
 8013b00:	20000673 	.word	0x20000673
 8013b04:	20000694 	.word	0x20000694
 8013b08:	20000665 	.word	0x20000665
 8013b0c:	2000066f 	.word	0x2000066f
 8013b10:	2000066b 	.word	0x2000066b
 8013b14:	20000678 	.word	0x20000678
 8013b18:	20000684 	.word	0x20000684
 8013b1c:	2000067c 	.word	0x2000067c
 8013b20:	20000148 	.word	0x20000148

08013b24 <check_DHCP_leasedIP>:
	}
	return ret;
}

int8_t check_DHCP_leasedIP(void)
{
 8013b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8013b26:	20d8      	movs	r0, #216	; 0xd8
 8013b28:	0140      	lsls	r0, r0, #5
 8013b2a:	f7ff fb75 	bl	8013218 <WIZCHIP_READ>
 8013b2e:	0005      	movs	r5, r0
	setRCR(0x03);
 8013b30:	20d8      	movs	r0, #216	; 0xd8
 8013b32:	2103      	movs	r1, #3
 8013b34:	0140      	lsls	r0, r0, #5
 8013b36:	f7ff fb9d 	bl	8013274 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8013b3a:	4b0e      	ldr	r3, [pc, #56]	; (8013b74 <check_DHCP_leasedIP+0x50>)
 8013b3c:	2211      	movs	r2, #17
 8013b3e:	7818      	ldrb	r0, [r3, #0]
 8013b40:	4b0d      	ldr	r3, [pc, #52]	; (8013b78 <check_DHCP_leasedIP+0x54>)
 8013b42:	490e      	ldr	r1, [pc, #56]	; (8013b7c <check_DHCP_leasedIP+0x58>)
 8013b44:	9300      	str	r3, [sp, #0]
 8013b46:	4b0e      	ldr	r3, [pc, #56]	; (8013b80 <check_DHCP_leasedIP+0x5c>)
 8013b48:	f7ff f9ae 	bl	8012ea8 <sendto>
 8013b4c:	0004      	movs	r4, r0

	// RCR value restore
	setRCR(tmp);
 8013b4e:	20d8      	movs	r0, #216	; 0xd8
 8013b50:	0029      	movs	r1, r5
 8013b52:	0140      	lsls	r0, r0, #5
 8013b54:	f7ff fb8e 	bl	8013274 <WIZCHIP_WRITE>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8013b58:	2001      	movs	r0, #1
	if(ret == SOCKERR_TIMEOUT) {
 8013b5a:	340d      	adds	r4, #13
 8013b5c:	d008      	beq.n	8013b70 <check_DHCP_leasedIP+0x4c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8013b5e:	f7ff fe99 	bl	8013894 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8013b62:	4a08      	ldr	r2, [pc, #32]	; (8013b84 <check_DHCP_leasedIP+0x60>)
 8013b64:	6811      	ldr	r1, [r2, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8013b66:	6813      	ldr	r3, [r2, #0]
 8013b68:	1a5b      	subs	r3, r3, r1
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d9fb      	bls.n	8013b66 <check_DHCP_leasedIP+0x42>
 8013b6e:	2000      	movs	r0, #0

		return 0;
	}
}	
 8013b70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013b72:	46c0      	nop			; (mov r8, r8)
 8013b74:	20000673 	.word	0x20000673
 8013b78:	00001388 	.word	0x00001388
 8013b7c:	0801beb4 	.word	0x0801beb4
 8013b80:	20000680 	.word	0x20000680
 8013b84:	20000690 	.word	0x20000690

08013b88 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
	dhcp_tick_1s = 0;
 8013b88:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 8013b8a:	210a      	movs	r1, #10
	dhcp_tick_1s = 0;
 8013b8c:	4a03      	ldr	r2, [pc, #12]	; (8013b9c <reset_DHCP_timeout+0x14>)
 8013b8e:	6013      	str	r3, [r2, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8013b90:	4a03      	ldr	r2, [pc, #12]	; (8013ba0 <reset_DHCP_timeout+0x18>)
 8013b92:	6011      	str	r1, [r2, #0]
	dhcp_retry_count = 0;
 8013b94:	4a03      	ldr	r2, [pc, #12]	; (8013ba4 <reset_DHCP_timeout+0x1c>)
 8013b96:	7013      	strb	r3, [r2, #0]
}
 8013b98:	4770      	bx	lr
 8013b9a:	46c0      	nop			; (mov r8, r8)
 8013b9c:	20000690 	.word	0x20000690
 8013ba0:	2000014c 	.word	0x2000014c
 8013ba4:	2000068c 	.word	0x2000068c

08013ba8 <DHCP_init>:
{
 8013ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013baa:	0006      	movs	r6, r0
   getSHAR(DHCP_CHADDR);
 8013bac:	2090      	movs	r0, #144	; 0x90
   uint8_t zeroip[4] = {0,0,0,0};
 8013bae:	2300      	movs	r3, #0
   getSHAR(DHCP_CHADDR);
 8013bb0:	4c21      	ldr	r4, [pc, #132]	; (8013c38 <DHCP_init+0x90>)
 8013bb2:	2206      	movs	r2, #6
{
 8013bb4:	000d      	movs	r5, r1
   getSHAR(DHCP_CHADDR);
 8013bb6:	0100      	lsls	r0, r0, #4
 8013bb8:	0021      	movs	r1, r4
   uint8_t zeroip[4] = {0,0,0,0};
 8013bba:	9301      	str	r3, [sp, #4]
   getSHAR(DHCP_CHADDR);
 8013bbc:	f7ff fb88 	bl	80132d0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8013bc0:	7862      	ldrb	r2, [r4, #1]
 8013bc2:	7823      	ldrb	r3, [r4, #0]
 8013bc4:	4313      	orrs	r3, r2
 8013bc6:	78a2      	ldrb	r2, [r4, #2]
 8013bc8:	4313      	orrs	r3, r2
 8013bca:	78e2      	ldrb	r2, [r4, #3]
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	7922      	ldrb	r2, [r4, #4]
 8013bd0:	4313      	orrs	r3, r2
 8013bd2:	7962      	ldrb	r2, [r4, #5]
 8013bd4:	4313      	orrs	r3, r2
 8013bd6:	d10d      	bne.n	8013bf4 <DHCP_init+0x4c>
      DHCP_CHADDR[1] = 0x08;
 8013bd8:	2208      	movs	r2, #8
      setSHAR(DHCP_CHADDR);     
 8013bda:	2090      	movs	r0, #144	; 0x90
      DHCP_CHADDR[1] = 0x08;
 8013bdc:	7062      	strb	r2, [r4, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8013bde:	32d4      	adds	r2, #212	; 0xd4
 8013be0:	70a2      	strb	r2, [r4, #2]
      setSHAR(DHCP_CHADDR);     
 8013be2:	0021      	movs	r1, r4
      DHCP_CHADDR[0] = 0x00;
 8013be4:	7023      	strb	r3, [r4, #0]
      DHCP_CHADDR[3] = 0x00;
 8013be6:	70e3      	strb	r3, [r4, #3]
      DHCP_CHADDR[4] = 0x00;
 8013be8:	7123      	strb	r3, [r4, #4]
      DHCP_CHADDR[5] = 0x00; 
 8013bea:	7163      	strb	r3, [r4, #5]
      setSHAR(DHCP_CHADDR);     
 8013bec:	3ad6      	subs	r2, #214	; 0xd6
 8013bee:	0100      	lsls	r0, r0, #4
 8013bf0:	f7ff fba8 	bl	8013344 <WIZCHIP_WRITE_BUF>
	DHCP_SOCKET = s; // SOCK_DHCP
 8013bf4:	4b11      	ldr	r3, [pc, #68]	; (8013c3c <DHCP_init+0x94>)
 8013bf6:	701e      	strb	r6, [r3, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8013bf8:	4b11      	ldr	r3, [pc, #68]	; (8013c40 <DHCP_init+0x98>)
 8013bfa:	601d      	str	r5, [r3, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8013bfc:	7920      	ldrb	r0, [r4, #4]
		DHCP_XID += DHCP_CHADDR[3];
 8013bfe:	78e1      	ldrb	r1, [r4, #3]
		DHCP_XID += DHCP_CHADDR[5];
 8013c00:	7962      	ldrb	r2, [r4, #5]
		DHCP_XID += DHCP_CHADDR[4];
 8013c02:	180b      	adds	r3, r1, r0
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8013c04:	4041      	eors	r1, r0
	setSIPR(zeroip);
 8013c06:	20f0      	movs	r0, #240	; 0xf0
		DHCP_XID += DHCP_CHADDR[4];
 8013c08:	4c0e      	ldr	r4, [pc, #56]	; (8013c44 <DHCP_init+0x9c>)
	setSIPR(zeroip);
 8013c0a:	0100      	lsls	r0, r0, #4
		DHCP_XID += DHCP_CHADDR[4];
 8013c0c:	191b      	adds	r3, r3, r4
		DHCP_XID += DHCP_CHADDR[5];
 8013c0e:	189b      	adds	r3, r3, r2
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8013c10:	404a      	eors	r2, r1
 8013c12:	189b      	adds	r3, r3, r2
 8013c14:	4a0c      	ldr	r2, [pc, #48]	; (8013c48 <DHCP_init+0xa0>)
	setSIPR(zeroip);
 8013c16:	a901      	add	r1, sp, #4
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8013c18:	6013      	str	r3, [r2, #0]
	setSIPR(zeroip);
 8013c1a:	2204      	movs	r2, #4
 8013c1c:	f7ff fb92 	bl	8013344 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8013c20:	2080      	movs	r0, #128	; 0x80
 8013c22:	2204      	movs	r2, #4
 8013c24:	a901      	add	r1, sp, #4
 8013c26:	0040      	lsls	r0, r0, #1
 8013c28:	f7ff fb8c 	bl	8013344 <WIZCHIP_WRITE_BUF>
	reset_DHCP_timeout();
 8013c2c:	f7ff ffac 	bl	8013b88 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8013c30:	2200      	movs	r2, #0
 8013c32:	4b06      	ldr	r3, [pc, #24]	; (8013c4c <DHCP_init+0xa4>)
 8013c34:	701a      	strb	r2, [r3, #0]
}
 8013c36:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8013c38:	20000665 	.word	0x20000665
 8013c3c:	20000673 	.word	0x20000673
 8013c40:	20000694 	.word	0x20000694
 8013c44:	12345678 	.word	0x12345678
 8013c48:	20000674 	.word	0x20000674
 8013c4c:	2000068d 	.word	0x2000068d

08013c50 <getIPfromDHCP>:
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
	ip[0] = DHCP_allocated_ip[0];
 8013c50:	4b04      	ldr	r3, [pc, #16]	; (8013c64 <getIPfromDHCP+0x14>)
 8013c52:	781a      	ldrb	r2, [r3, #0]
 8013c54:	7002      	strb	r2, [r0, #0]
	ip[1] = DHCP_allocated_ip[1];
 8013c56:	785a      	ldrb	r2, [r3, #1]
 8013c58:	7042      	strb	r2, [r0, #1]
	ip[2] = DHCP_allocated_ip[2];	
 8013c5a:	789a      	ldrb	r2, [r3, #2]
 8013c5c:	7082      	strb	r2, [r0, #2]
	ip[3] = DHCP_allocated_ip[3];
 8013c5e:	78db      	ldrb	r3, [r3, #3]
 8013c60:	70c3      	strb	r3, [r0, #3]
}
 8013c62:	4770      	bx	lr
 8013c64:	20000680 	.word	0x20000680

08013c68 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
	ip[0] =DHCP_allocated_gw[0];
 8013c68:	4b04      	ldr	r3, [pc, #16]	; (8013c7c <getGWfromDHCP+0x14>)
 8013c6a:	781a      	ldrb	r2, [r3, #0]
 8013c6c:	7002      	strb	r2, [r0, #0]
	ip[1] =DHCP_allocated_gw[1];
 8013c6e:	785a      	ldrb	r2, [r3, #1]
 8013c70:	7042      	strb	r2, [r0, #1]
	ip[2] =DHCP_allocated_gw[2];
 8013c72:	789a      	ldrb	r2, [r3, #2]
 8013c74:	7082      	strb	r2, [r0, #2]
	ip[3] =DHCP_allocated_gw[3];			
 8013c76:	78db      	ldrb	r3, [r3, #3]
 8013c78:	70c3      	strb	r3, [r0, #3]
}
 8013c7a:	4770      	bx	lr
 8013c7c:	2000067c 	.word	0x2000067c

08013c80 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_sn[0];
 8013c80:	4b04      	ldr	r3, [pc, #16]	; (8013c94 <getSNfromDHCP+0x14>)
 8013c82:	781a      	ldrb	r2, [r3, #0]
 8013c84:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_sn[1];
 8013c86:	785a      	ldrb	r2, [r3, #1]
 8013c88:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_sn[2];
 8013c8a:	789a      	ldrb	r2, [r3, #2]
 8013c8c:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_sn[3];         
 8013c8e:	78db      	ldrb	r3, [r3, #3]
 8013c90:	70c3      	strb	r3, [r0, #3]
}
 8013c92:	4770      	bx	lr
 8013c94:	20000684 	.word	0x20000684

08013c98 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_dns[0];
 8013c98:	4b04      	ldr	r3, [pc, #16]	; (8013cac <getDNSfromDHCP+0x14>)
 8013c9a:	781a      	ldrb	r2, [r3, #0]
 8013c9c:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_dns[1];
 8013c9e:	785a      	ldrb	r2, [r3, #1]
 8013ca0:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_dns[2];
 8013ca2:	789a      	ldrb	r2, [r3, #2]
 8013ca4:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_dns[3];         
 8013ca6:	78db      	ldrb	r3, [r3, #3]
 8013ca8:	70c3      	strb	r3, [r0, #3]
}
 8013caa:	4770      	bx	lr
 8013cac:	20000678 	.word	0x20000678

08013cb0 <NibbleToHex>:
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
 8013cb0:	230f      	movs	r3, #15
 8013cb2:	4003      	ands	r3, r0
  if (nibble <= 9)
    return nibble + '0';
  else 
    return nibble + ('A'-0x0A);
 8013cb4:	0018      	movs	r0, r3
 8013cb6:	3037      	adds	r0, #55	; 0x37
  if (nibble <= 9)
 8013cb8:	2b09      	cmp	r3, #9
 8013cba:	d801      	bhi.n	8013cc0 <NibbleToHex+0x10>
    return nibble + '0';
 8013cbc:	3330      	adds	r3, #48	; 0x30
 8013cbe:	0018      	movs	r0, r3
}
 8013cc0:	4770      	bx	lr
	...

08013cc4 <send_DHCP_DISCOVER>:
{
 8013cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cc6:	b089      	sub	sp, #36	; 0x24
   makeDHCPMSG();
 8013cc8:	f7ff fd98 	bl	80137fc <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	4a69      	ldr	r2, [pc, #420]	; (8013e74 <send_DHCP_DISCOVER+0x1b0>)
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8013cd0:	2512      	movs	r5, #18
   DHCP_SIP[0]=0;
 8013cd2:	7013      	strb	r3, [r2, #0]
   DHCP_SIP[1]=0;
 8013cd4:	7053      	strb	r3, [r2, #1]
   DHCP_SIP[2]=0;
 8013cd6:	7093      	strb	r3, [r2, #2]
   DHCP_SIP[3]=0;
 8013cd8:	70d3      	strb	r3, [r2, #3]
   DHCP_REAL_SIP[0]=0;
 8013cda:	4a67      	ldr	r2, [pc, #412]	; (8013e78 <send_DHCP_DISCOVER+0x1b4>)
 8013cdc:	7013      	strb	r3, [r2, #0]
   DHCP_REAL_SIP[1]=0;
 8013cde:	7053      	strb	r3, [r2, #1]
   DHCP_REAL_SIP[2]=0;
 8013ce0:	7093      	strb	r3, [r2, #2]
   DHCP_REAL_SIP[3]=0;
 8013ce2:	70d3      	strb	r3, [r2, #3]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8013ce4:	4b65      	ldr	r3, [pc, #404]	; (8013e7c <send_DHCP_DISCOVER+0x1b8>)
 8013ce6:	4a66      	ldr	r2, [pc, #408]	; (8013e80 <send_DHCP_DISCOVER+0x1bc>)
 8013ce8:	681c      	ldr	r4, [r3, #0]
 8013cea:	0023      	movs	r3, r4
 8013cec:	33f0      	adds	r3, #240	; 0xf0
 8013cee:	601a      	str	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 8013cf0:	2208      	movs	r2, #8
 8013cf2:	32ff      	adds	r2, #255	; 0xff
 8013cf4:	809a      	strh	r2, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8013cf6:	0022      	movs	r2, r4
 8013cf8:	4b62      	ldr	r3, [pc, #392]	; (8013e84 <send_DHCP_DISCOVER+0x1c0>)
 8013cfa:	32f6      	adds	r2, #246	; 0xf6
 8013cfc:	7819      	ldrb	r1, [r3, #0]
 8013cfe:	7011      	strb	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8013d00:	7859      	ldrb	r1, [r3, #1]
 8013d02:	7051      	strb	r1, [r2, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8013d04:	7899      	ldrb	r1, [r3, #2]
 8013d06:	7091      	strb	r1, [r2, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8013d08:	78df      	ldrb	r7, [r3, #3]
 8013d0a:	70d7      	strb	r7, [r2, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8013d0c:	791e      	ldrb	r6, [r3, #4]
 8013d0e:	7116      	strb	r6, [r2, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8013d10:	795b      	ldrb	r3, [r3, #5]
 8013d12:	9302      	str	r3, [sp, #8]
 8013d14:	0023      	movs	r3, r4
 8013d16:	9a02      	ldr	r2, [sp, #8]
 8013d18:	33fb      	adds	r3, #251	; 0xfb
 8013d1a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = hostName;
 8013d1c:	220c      	movs	r2, #12
 8013d1e:	3301      	adds	r3, #1
 8013d20:	801a      	strh	r2, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8013d22:	4a59      	ldr	r2, [pc, #356]	; (8013e88 <send_DHCP_DISCOVER+0x1c4>)
 8013d24:	002b      	movs	r3, r5
 8013d26:	3b12      	subs	r3, #18
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	9304      	str	r3, [sp, #16]
 8013d2c:	5cd3      	ldrb	r3, [r2, r3]
 8013d2e:	9303      	str	r3, [sp, #12]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8013d30:	1c6b      	adds	r3, r5, #1
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	9305      	str	r3, [sp, #20]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8013d36:	9b03      	ldr	r3, [sp, #12]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d000      	beq.n	8013d3e <send_DHCP_DISCOVER+0x7a>
 8013d3c:	e093      	b.n	8013e66 <send_DHCP_DISCOVER+0x1a2>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8013d3e:	0938      	lsrs	r0, r7, #4
 8013d40:	f7ff ffb6 	bl	8013cb0 <NibbleToHex>
 8013d44:	1963      	adds	r3, r4, r5
 8013d46:	33ec      	adds	r3, #236	; 0xec
 8013d48:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8013d4a:	0038      	movs	r0, r7
 8013d4c:	f7ff ffb0 	bl	8013cb0 <NibbleToHex>
 8013d50:	9b05      	ldr	r3, [sp, #20]
 8013d52:	18e3      	adds	r3, r4, r3
 8013d54:	33ec      	adds	r3, #236	; 0xec
 8013d56:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8013d58:	0930      	lsrs	r0, r6, #4
 8013d5a:	f7ff ffa9 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8013d5e:	1cab      	adds	r3, r5, #2
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	18e3      	adds	r3, r4, r3
 8013d64:	33ec      	adds	r3, #236	; 0xec
 8013d66:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8013d68:	0030      	movs	r0, r6
 8013d6a:	f7ff ffa1 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8013d6e:	1ceb      	adds	r3, r5, #3
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	18e3      	adds	r3, r4, r3
 8013d74:	33ec      	adds	r3, #236	; 0xec
 8013d76:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8013d78:	9b02      	ldr	r3, [sp, #8]
 8013d7a:	0918      	lsrs	r0, r3, #4
 8013d7c:	f7ff ff98 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8013d80:	1d2b      	adds	r3, r5, #4
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	18e3      	adds	r3, r4, r3
 8013d86:	33ec      	adds	r3, #236	; 0xec
 8013d88:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8013d8a:	9802      	ldr	r0, [sp, #8]
 8013d8c:	f7ff ff90 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8013d90:	1d6b      	adds	r3, r5, #5
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	18e3      	adds	r3, r4, r3
 8013d96:	33ec      	adds	r3, #236	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8013d98:	9a04      	ldr	r2, [sp, #16]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8013d9a:	7018      	strb	r0, [r3, #0]
 8013d9c:	1dab      	adds	r3, r5, #6
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	3207      	adds	r2, #7
 8013da2:	1a9a      	subs	r2, r3, r2
 8013da4:	9904      	ldr	r1, [sp, #16]
 8013da6:	18a2      	adds	r2, r4, r2
 8013da8:	32ec      	adds	r2, #236	; 0xec
 8013daa:	3106      	adds	r1, #6
 8013dac:	7011      	strb	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8013dae:	2237      	movs	r2, #55	; 0x37
 8013db0:	18e3      	adds	r3, r4, r3
 8013db2:	33ec      	adds	r3, #236	; 0xec
 8013db4:	701a      	strb	r2, [r3, #0]
 8013db6:	1deb      	adds	r3, r5, #7
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	18e3      	adds	r3, r4, r3
 8013dbc:	3a31      	subs	r2, #49	; 0x31
 8013dbe:	33ec      	adds	r3, #236	; 0xec
 8013dc0:	701a      	strb	r2, [r3, #0]
 8013dc2:	002b      	movs	r3, r5
	pDHCPMSG->OPT[k++] = subnetMask;
 8013dc4:	2101      	movs	r1, #1
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8013dc6:	3308      	adds	r3, #8
	pDHCPMSG->OPT[k++] = subnetMask;
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	18e3      	adds	r3, r4, r3
 8013dcc:	33ec      	adds	r3, #236	; 0xec
 8013dce:	7019      	strb	r1, [r3, #0]
 8013dd0:	002b      	movs	r3, r5
 8013dd2:	3309      	adds	r3, #9
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	18e3      	adds	r3, r4, r3
 8013dd8:	33ec      	adds	r3, #236	; 0xec
 8013dda:	3102      	adds	r1, #2
 8013ddc:	7019      	strb	r1, [r3, #0]
 8013dde:	002b      	movs	r3, r5
 8013de0:	330a      	adds	r3, #10
	pDHCPMSG->OPT[k++] = dns;
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	18e3      	adds	r3, r4, r3
 8013de6:	33ec      	adds	r3, #236	; 0xec
 8013de8:	701a      	strb	r2, [r3, #0]
 8013dea:	002b      	movs	r3, r5
 8013dec:	330b      	adds	r3, #11
	pDHCPMSG->OPT[k++] = domainName;
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	18e3      	adds	r3, r4, r3
 8013df2:	33ec      	adds	r3, #236	; 0xec
 8013df4:	3209      	adds	r2, #9
 8013df6:	701a      	strb	r2, [r3, #0]
 8013df8:	002b      	movs	r3, r5
 8013dfa:	330c      	adds	r3, #12
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	18e3      	adds	r3, r4, r3
 8013e00:	33ec      	adds	r3, #236	; 0xec
 8013e02:	322b      	adds	r2, #43	; 0x2b
 8013e04:	701a      	strb	r2, [r3, #0]
 8013e06:	002b      	movs	r3, r5
 8013e08:	330d      	adds	r3, #13
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	18e3      	adds	r3, r4, r3
 8013e0e:	33ec      	adds	r3, #236	; 0xec
 8013e10:	3201      	adds	r2, #1
 8013e12:	701a      	strb	r2, [r3, #0]
 8013e14:	002b      	movs	r3, r5
 8013e16:	330e      	adds	r3, #14
	pDHCPMSG->OPT[k++] = endOption;
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	0028      	movs	r0, r5
 8013e1c:	18e3      	adds	r3, r4, r3
 8013e1e:	33ec      	adds	r3, #236	; 0xec
 8013e20:	32c4      	adds	r2, #196	; 0xc4
 8013e22:	701a      	strb	r2, [r3, #0]
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8013e24:	239c      	movs	r3, #156	; 0x9c
	pDHCPMSG->OPT[k++] = endOption;
 8013e26:	300f      	adds	r0, #15
 8013e28:	b280      	uxth	r0, r0
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8013e2a:	9a03      	ldr	r2, [sp, #12]
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	4298      	cmp	r0, r3
 8013e30:	d803      	bhi.n	8013e3a <send_DHCP_DISCOVER+0x176>
 8013e32:	222a      	movs	r2, #42	; 0x2a
 8013e34:	32ff      	adds	r2, #255	; 0xff
 8013e36:	1b52      	subs	r2, r2, r5
 8013e38:	b292      	uxth	r2, r2
 8013e3a:	30ec      	adds	r0, #236	; 0xec
 8013e3c:	2100      	movs	r1, #0
 8013e3e:	1820      	adds	r0, r4, r0
 8013e40:	f004 fc03 	bl	801864a <memset>
	ip[0] = 255;
 8013e44:	22ff      	movs	r2, #255	; 0xff
 8013e46:	ab07      	add	r3, sp, #28
 8013e48:	701a      	strb	r2, [r3, #0]
	ip[1] = 255;
 8013e4a:	705a      	strb	r2, [r3, #1]
	ip[2] = 255;
 8013e4c:	709a      	strb	r2, [r3, #2]
	ip[3] = 255;
 8013e4e:	70da      	strb	r2, [r3, #3]
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8013e50:	4a0e      	ldr	r2, [pc, #56]	; (8013e8c <send_DHCP_DISCOVER+0x1c8>)
 8013e52:	0021      	movs	r1, r4
 8013e54:	7810      	ldrb	r0, [r2, #0]
 8013e56:	2243      	movs	r2, #67	; 0x43
 8013e58:	9200      	str	r2, [sp, #0]
 8013e5a:	32e2      	adds	r2, #226	; 0xe2
 8013e5c:	32ff      	adds	r2, #255	; 0xff
 8013e5e:	f7ff f823 	bl	8012ea8 <sendto>
}
 8013e62:	b009      	add	sp, #36	; 0x24
 8013e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8013e66:	9b03      	ldr	r3, [sp, #12]
 8013e68:	1965      	adds	r5, r4, r5
 8013e6a:	35ec      	adds	r5, #236	; 0xec
 8013e6c:	702b      	strb	r3, [r5, #0]
 8013e6e:	9d05      	ldr	r5, [sp, #20]
 8013e70:	e758      	b.n	8013d24 <send_DHCP_DISCOVER+0x60>
 8013e72:	46c0      	nop			; (mov r8, r8)
 8013e74:	2000066f 	.word	0x2000066f
 8013e78:	2000066b 	.word	0x2000066b
 8013e7c:	20000694 	.word	0x20000694
 8013e80:	3d010135 	.word	0x3d010135
 8013e84:	20000665 	.word	0x20000665
 8013e88:	20000134 	.word	0x20000134
 8013e8c:	20000673 	.word	0x20000673

08013e90 <send_DHCP_REQUEST>:
{
 8013e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e92:	b089      	sub	sp, #36	; 0x24
   makeDHCPMSG();
 8013e94:	f7ff fcb2 	bl	80137fc <makeDHCPMSG>
   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8013e98:	4b89      	ldr	r3, [pc, #548]	; (80140c0 <send_DHCP_REQUEST+0x230>)
 8013e9a:	488a      	ldr	r0, [pc, #552]	; (80140c4 <send_DHCP_REQUEST+0x234>)
 8013e9c:	781a      	ldrb	r2, [r3, #0]
 8013e9e:	ab07      	add	r3, sp, #28
 8013ea0:	3a03      	subs	r2, #3
 8013ea2:	2a01      	cmp	r2, #1
 8013ea4:	d900      	bls.n	8013ea8 <send_DHCP_REQUEST+0x18>
 8013ea6:	e0ff      	b.n	80140a8 <send_DHCP_REQUEST+0x218>
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8013ea8:	2100      	movs	r1, #0
 8013eaa:	6802      	ldr	r2, [r0, #0]
 8013eac:	7291      	strb	r1, [r2, #10]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8013eae:	72d1      	strb	r1, [r2, #11]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8013eb0:	4985      	ldr	r1, [pc, #532]	; (80140c8 <send_DHCP_REQUEST+0x238>)
 8013eb2:	780c      	ldrb	r4, [r1, #0]
 8013eb4:	7314      	strb	r4, [r2, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8013eb6:	784c      	ldrb	r4, [r1, #1]
 8013eb8:	7354      	strb	r4, [r2, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8013eba:	788c      	ldrb	r4, [r1, #2]
 8013ebc:	7394      	strb	r4, [r2, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8013ebe:	78c9      	ldrb	r1, [r1, #3]
 8013ec0:	73d1      	strb	r1, [r2, #15]
   	ip[0] = DHCP_SIP[0];
 8013ec2:	4a82      	ldr	r2, [pc, #520]	; (80140cc <send_DHCP_REQUEST+0x23c>)
 8013ec4:	7811      	ldrb	r1, [r2, #0]
 8013ec6:	7019      	strb	r1, [r3, #0]
   	ip[1] = DHCP_SIP[1];
 8013ec8:	7851      	ldrb	r1, [r2, #1]
 8013eca:	7059      	strb	r1, [r3, #1]
   	ip[2] = DHCP_SIP[2];
 8013ecc:	7891      	ldrb	r1, [r2, #2]
 8013ece:	7099      	strb	r1, [r3, #2]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8013ed0:	78d2      	ldrb	r2, [r2, #3]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8013ed2:	6804      	ldr	r4, [r0, #0]
   	ip[3] = 255;   	   	   	
 8013ed4:	70da      	strb	r2, [r3, #3]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8013ed6:	0022      	movs	r2, r4
 8013ed8:	497d      	ldr	r1, [pc, #500]	; (80140d0 <send_DHCP_REQUEST+0x240>)
 8013eda:	32f0      	adds	r2, #240	; 0xf0
 8013edc:	6011      	str	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = 0x07;
 8013ede:	2108      	movs	r1, #8
 8013ee0:	31ff      	adds	r1, #255	; 0xff
 8013ee2:	8091      	strh	r1, [r2, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8013ee4:	0021      	movs	r1, r4
 8013ee6:	4a7b      	ldr	r2, [pc, #492]	; (80140d4 <send_DHCP_REQUEST+0x244>)
 8013ee8:	31f6      	adds	r1, #246	; 0xf6
 8013eea:	7810      	ldrb	r0, [r2, #0]
 8013eec:	7008      	strb	r0, [r1, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8013eee:	7850      	ldrb	r0, [r2, #1]
 8013ef0:	7048      	strb	r0, [r1, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8013ef2:	7890      	ldrb	r0, [r2, #2]
 8013ef4:	7088      	strb	r0, [r1, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8013ef6:	78d7      	ldrb	r7, [r2, #3]
 8013ef8:	70cf      	strb	r7, [r1, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8013efa:	7911      	ldrb	r1, [r2, #4]
 8013efc:	9102      	str	r1, [sp, #8]
 8013efe:	0021      	movs	r1, r4
 8013f00:	9802      	ldr	r0, [sp, #8]
 8013f02:	31fa      	adds	r1, #250	; 0xfa
 8013f04:	7008      	strb	r0, [r1, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8013f06:	7952      	ldrb	r2, [r2, #5]
 8013f08:	9203      	str	r2, [sp, #12]
 8013f0a:	0022      	movs	r2, r4
 8013f0c:	9903      	ldr	r1, [sp, #12]
 8013f0e:	32fb      	adds	r2, #251	; 0xfb
 8013f10:	7011      	strb	r1, [r2, #0]
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8013f12:	78da      	ldrb	r2, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8013f14:	2310      	movs	r3, #16
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8013f16:	2aff      	cmp	r2, #255	; 0xff
 8013f18:	d11c      	bne.n	8013f54 <send_DHCP_REQUEST+0xc4>
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8013f1a:	0023      	movs	r3, r4
 8013f1c:	4a6e      	ldr	r2, [pc, #440]	; (80140d8 <send_DHCP_REQUEST+0x248>)
 8013f1e:	33fc      	adds	r3, #252	; 0xfc
 8013f20:	801a      	strh	r2, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8013f22:	0022      	movs	r2, r4
 8013f24:	4968      	ldr	r1, [pc, #416]	; (80140c8 <send_DHCP_REQUEST+0x238>)
 8013f26:	32fe      	adds	r2, #254	; 0xfe
 8013f28:	780b      	ldrb	r3, [r1, #0]
 8013f2a:	7013      	strb	r3, [r2, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8013f2c:	0023      	movs	r3, r4
 8013f2e:	7848      	ldrb	r0, [r1, #1]
 8013f30:	33ff      	adds	r3, #255	; 0xff
 8013f32:	7018      	strb	r0, [r3, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8013f34:	7888      	ldrb	r0, [r1, #2]
 8013f36:	7058      	strb	r0, [r3, #1]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8013f38:	78c9      	ldrb	r1, [r1, #3]
 8013f3a:	7099      	strb	r1, [r3, #2]
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8013f3c:	4967      	ldr	r1, [pc, #412]	; (80140dc <send_DHCP_REQUEST+0x24c>)
 8013f3e:	8091      	strh	r1, [r2, #4]
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8013f40:	4a62      	ldr	r2, [pc, #392]	; (80140cc <send_DHCP_REQUEST+0x23c>)
 8013f42:	7811      	ldrb	r1, [r2, #0]
 8013f44:	7159      	strb	r1, [r3, #5]
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8013f46:	7851      	ldrb	r1, [r2, #1]
 8013f48:	7199      	strb	r1, [r3, #6]
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8013f4a:	7891      	ldrb	r1, [r2, #2]
 8013f4c:	71d9      	strb	r1, [r3, #7]
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8013f4e:	78d2      	ldrb	r2, [r2, #3]
 8013f50:	721a      	strb	r2, [r3, #8]
 8013f52:	231c      	movs	r3, #28
	pDHCPMSG->OPT[k++] = hostName;
 8013f54:	210c      	movs	r1, #12
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8013f56:	2600      	movs	r6, #0
	pDHCPMSG->OPT[k++] = hostName;
 8013f58:	18e2      	adds	r2, r4, r3
 8013f5a:	32ec      	adds	r2, #236	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8013f5c:	1c9d      	adds	r5, r3, #2
 8013f5e:	18e3      	adds	r3, r4, r3
	pDHCPMSG->OPT[k++] = hostName;
 8013f60:	7011      	strb	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8013f62:	33ed      	adds	r3, #237	; 0xed
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8013f64:	4a5e      	ldr	r2, [pc, #376]	; (80140e0 <send_DHCP_REQUEST+0x250>)
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8013f66:	701e      	strb	r6, [r3, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8013f68:	5cb3      	ldrb	r3, [r6, r2]
 8013f6a:	9304      	str	r3, [sp, #16]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8013f6c:	1c6b      	adds	r3, r5, #1
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	9305      	str	r3, [sp, #20]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8013f72:	9b04      	ldr	r3, [sp, #16]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d000      	beq.n	8013f7a <send_DHCP_REQUEST+0xea>
 8013f78:	e09b      	b.n	80140b2 <send_DHCP_REQUEST+0x222>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8013f7a:	0938      	lsrs	r0, r7, #4
 8013f7c:	f7ff fe98 	bl	8013cb0 <NibbleToHex>
 8013f80:	1963      	adds	r3, r4, r5
 8013f82:	33ec      	adds	r3, #236	; 0xec
 8013f84:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8013f86:	0038      	movs	r0, r7
 8013f88:	f7ff fe92 	bl	8013cb0 <NibbleToHex>
 8013f8c:	9b05      	ldr	r3, [sp, #20]
 8013f8e:	18e3      	adds	r3, r4, r3
 8013f90:	33ec      	adds	r3, #236	; 0xec
 8013f92:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8013f94:	9b02      	ldr	r3, [sp, #8]
 8013f96:	0918      	lsrs	r0, r3, #4
 8013f98:	f7ff fe8a 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8013f9c:	1cab      	adds	r3, r5, #2
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	18e3      	adds	r3, r4, r3
 8013fa2:	33ec      	adds	r3, #236	; 0xec
 8013fa4:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8013fa6:	9802      	ldr	r0, [sp, #8]
 8013fa8:	f7ff fe82 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8013fac:	1ceb      	adds	r3, r5, #3
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	18e3      	adds	r3, r4, r3
 8013fb2:	33ec      	adds	r3, #236	; 0xec
 8013fb4:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8013fb6:	9b03      	ldr	r3, [sp, #12]
 8013fb8:	0918      	lsrs	r0, r3, #4
 8013fba:	f7ff fe79 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8013fbe:	1d2b      	adds	r3, r5, #4
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	18e3      	adds	r3, r4, r3
 8013fc4:	33ec      	adds	r3, #236	; 0xec
 8013fc6:	7018      	strb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8013fc8:	9803      	ldr	r0, [sp, #12]
 8013fca:	f7ff fe71 	bl	8013cb0 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8013fce:	1d6b      	adds	r3, r5, #5
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	18e3      	adds	r3, r4, r3
 8013fd4:	33ec      	adds	r3, #236	; 0xec
 8013fd6:	7018      	strb	r0, [r3, #0]
 8013fd8:	1dab      	adds	r3, r5, #6
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	1df2      	adds	r2, r6, #7
 8013fde:	1a9a      	subs	r2, r3, r2
 8013fe0:	18a2      	adds	r2, r4, r2
 8013fe2:	32ec      	adds	r2, #236	; 0xec
 8013fe4:	3606      	adds	r6, #6
 8013fe6:	7016      	strb	r6, [r2, #0]
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8013fe8:	2237      	movs	r2, #55	; 0x37
 8013fea:	18e3      	adds	r3, r4, r3
 8013fec:	33ec      	adds	r3, #236	; 0xec
 8013fee:	701a      	strb	r2, [r3, #0]
 8013ff0:	1deb      	adds	r3, r5, #7
	pDHCPMSG->OPT[k++] = 0x08;
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	18e3      	adds	r3, r4, r3
 8013ff6:	3a2f      	subs	r2, #47	; 0x2f
 8013ff8:	33ec      	adds	r3, #236	; 0xec
 8013ffa:	701a      	strb	r2, [r3, #0]
 8013ffc:	18ab      	adds	r3, r5, r2
	pDHCPMSG->OPT[k++] = subnetMask;
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	18e3      	adds	r3, r4, r3
 8014002:	33ec      	adds	r3, #236	; 0xec
 8014004:	3a07      	subs	r2, #7
 8014006:	701a      	strb	r2, [r3, #0]
 8014008:	002b      	movs	r3, r5
 801400a:	3309      	adds	r3, #9
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801400c:	b29b      	uxth	r3, r3
 801400e:	18e3      	adds	r3, r4, r3
 8014010:	33ec      	adds	r3, #236	; 0xec
 8014012:	3202      	adds	r2, #2
 8014014:	701a      	strb	r2, [r3, #0]
 8014016:	002b      	movs	r3, r5
 8014018:	330a      	adds	r3, #10
	pDHCPMSG->OPT[k++] = dns;
 801401a:	b29b      	uxth	r3, r3
 801401c:	18e3      	adds	r3, r4, r3
 801401e:	33ec      	adds	r3, #236	; 0xec
 8014020:	3203      	adds	r2, #3
 8014022:	701a      	strb	r2, [r3, #0]
 8014024:	002b      	movs	r3, r5
 8014026:	330b      	adds	r3, #11
	pDHCPMSG->OPT[k++] = domainName;
 8014028:	b29b      	uxth	r3, r3
 801402a:	18e3      	adds	r3, r4, r3
 801402c:	33ec      	adds	r3, #236	; 0xec
 801402e:	3209      	adds	r2, #9
 8014030:	701a      	strb	r2, [r3, #0]
 8014032:	002b      	movs	r3, r5
 8014034:	330c      	adds	r3, #12
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8014036:	b29b      	uxth	r3, r3
 8014038:	18e3      	adds	r3, r4, r3
 801403a:	33ec      	adds	r3, #236	; 0xec
 801403c:	322b      	adds	r2, #43	; 0x2b
 801403e:	701a      	strb	r2, [r3, #0]
 8014040:	002b      	movs	r3, r5
 8014042:	330d      	adds	r3, #13
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8014044:	b29b      	uxth	r3, r3
 8014046:	18e3      	adds	r3, r4, r3
 8014048:	33ec      	adds	r3, #236	; 0xec
 801404a:	3201      	adds	r2, #1
 801404c:	701a      	strb	r2, [r3, #0]
 801404e:	002b      	movs	r3, r5
 8014050:	330e      	adds	r3, #14
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8014052:	b29b      	uxth	r3, r3
 8014054:	18e3      	adds	r3, r4, r3
 8014056:	33ec      	adds	r3, #236	; 0xec
 8014058:	3a1c      	subs	r2, #28
 801405a:	701a      	strb	r2, [r3, #0]
 801405c:	002b      	movs	r3, r5
 801405e:	330f      	adds	r3, #15
	pDHCPMSG->OPT[k++] = staticRoute;
 8014060:	b29b      	uxth	r3, r3
 8014062:	18e3      	adds	r3, r4, r3
	pDHCPMSG->OPT[k++] = endOption;
 8014064:	0028      	movs	r0, r5
	pDHCPMSG->OPT[k++] = staticRoute;
 8014066:	33ec      	adds	r3, #236	; 0xec
 8014068:	3202      	adds	r2, #2
 801406a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = endOption;
 801406c:	23ff      	movs	r3, #255	; 0xff
	pDHCPMSG->OPT[k++] = staticRoute;
 801406e:	3510      	adds	r5, #16
	pDHCPMSG->OPT[k++] = endOption;
 8014070:	b2ad      	uxth	r5, r5
 8014072:	1965      	adds	r5, r4, r5
 8014074:	3011      	adds	r0, #17
 8014076:	35ec      	adds	r5, #236	; 0xec
 8014078:	702b      	strb	r3, [r5, #0]
 801407a:	b280      	uxth	r0, r0
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801407c:	3339      	adds	r3, #57	; 0x39
 801407e:	9a04      	ldr	r2, [sp, #16]
 8014080:	4298      	cmp	r0, r3
 8014082:	d800      	bhi.n	8014086 <send_DHCP_REQUEST+0x1f6>
 8014084:	1a1a      	subs	r2, r3, r0
 8014086:	30ec      	adds	r0, #236	; 0xec
 8014088:	2100      	movs	r1, #0
 801408a:	1820      	adds	r0, r4, r0
 801408c:	f004 fadd 	bl	801864a <memset>
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8014090:	4b14      	ldr	r3, [pc, #80]	; (80140e4 <send_DHCP_REQUEST+0x254>)
 8014092:	2289      	movs	r2, #137	; 0x89
 8014094:	7818      	ldrb	r0, [r3, #0]
 8014096:	2343      	movs	r3, #67	; 0x43
 8014098:	0021      	movs	r1, r4
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	0092      	lsls	r2, r2, #2
 801409e:	ab07      	add	r3, sp, #28
 80140a0:	f7fe ff02 	bl	8012ea8 <sendto>
}
 80140a4:	b009      	add	sp, #36	; 0x24
 80140a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   	ip[0] = 255;
 80140a8:	22ff      	movs	r2, #255	; 0xff
 80140aa:	701a      	strb	r2, [r3, #0]
   	ip[1] = 255;
 80140ac:	705a      	strb	r2, [r3, #1]
   	ip[2] = 255;
 80140ae:	709a      	strb	r2, [r3, #2]
 80140b0:	e70f      	b.n	8013ed2 <send_DHCP_REQUEST+0x42>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80140b2:	9b04      	ldr	r3, [sp, #16]
 80140b4:	1965      	adds	r5, r4, r5
 80140b6:	35ec      	adds	r5, #236	; 0xec
 80140b8:	702b      	strb	r3, [r5, #0]
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80140ba:	3601      	adds	r6, #1
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80140bc:	9d05      	ldr	r5, [sp, #20]
 80140be:	e753      	b.n	8013f68 <send_DHCP_REQUEST+0xd8>
 80140c0:	2000068d 	.word	0x2000068d
 80140c4:	20000694 	.word	0x20000694
 80140c8:	20000680 	.word	0x20000680
 80140cc:	2000066f 	.word	0x2000066f
 80140d0:	3d030135 	.word	0x3d030135
 80140d4:	20000665 	.word	0x20000665
 80140d8:	00000432 	.word	0x00000432
 80140dc:	00000436 	.word	0x00000436
 80140e0:	20000134 	.word	0x20000134
 80140e4:	20000673 	.word	0x20000673

080140e8 <check_DHCP_timeout>:
{
 80140e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80140ea:	2300      	movs	r3, #0
 80140ec:	4d1b      	ldr	r5, [pc, #108]	; (801415c <check_DHCP_timeout+0x74>)
 80140ee:	56eb      	ldrsb	r3, [r5, r3]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	dc1f      	bgt.n	8014134 <check_DHCP_timeout+0x4c>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80140f4:	4f1a      	ldr	r7, [pc, #104]	; (8014160 <check_DHCP_timeout+0x78>)
 80140f6:	4e1b      	ldr	r6, [pc, #108]	; (8014164 <check_DHCP_timeout+0x7c>)
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	6832      	ldr	r2, [r6, #0]
	uint8_t ret = DHCP_RUNNING;
 80140fc:	2401      	movs	r4, #1
		if (dhcp_tick_next < dhcp_tick_1s) {
 80140fe:	429a      	cmp	r2, r3
 8014100:	d213      	bcs.n	801412a <check_DHCP_timeout+0x42>
			switch ( dhcp_state ) {
 8014102:	22fd      	movs	r2, #253	; 0xfd
 8014104:	4b18      	ldr	r3, [pc, #96]	; (8014168 <check_DHCP_timeout+0x80>)
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	b25b      	sxtb	r3, r3
 801410a:	1e99      	subs	r1, r3, #2
 801410c:	4211      	tst	r1, r2
 801410e:	d00e      	beq.n	801412e <check_DHCP_timeout+0x46>
 8014110:	42a3      	cmp	r3, r4
 8014112:	d101      	bne.n	8014118 <check_DHCP_timeout+0x30>
					send_DHCP_DISCOVER();
 8014114:	f7ff fdd6 	bl	8013cc4 <send_DHCP_DISCOVER>
			dhcp_tick_1s = 0;
 8014118:	2300      	movs	r3, #0
			dhcp_retry_count++;
 801411a:	2401      	movs	r4, #1
			dhcp_tick_1s = 0;
 801411c:	603b      	str	r3, [r7, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	330a      	adds	r3, #10
 8014122:	6033      	str	r3, [r6, #0]
			dhcp_retry_count++;
 8014124:	782b      	ldrb	r3, [r5, #0]
 8014126:	3301      	adds	r3, #1
 8014128:	702b      	strb	r3, [r5, #0]
}
 801412a:	0020      	movs	r0, r4
 801412c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					send_DHCP_REQUEST();
 801412e:	f7ff feaf 	bl	8013e90 <send_DHCP_REQUEST>
				break;
 8014132:	e7f1      	b.n	8014118 <check_DHCP_timeout+0x30>
		switch(dhcp_state) {
 8014134:	2300      	movs	r3, #0
 8014136:	22fd      	movs	r2, #253	; 0xfd
 8014138:	4d0b      	ldr	r5, [pc, #44]	; (8014168 <check_DHCP_timeout+0x80>)
 801413a:	56eb      	ldrsb	r3, [r5, r3]
 801413c:	1e99      	subs	r1, r3, #2
 801413e:	4211      	tst	r1, r2
 8014140:	d007      	beq.n	8014152 <check_DHCP_timeout+0x6a>
 8014142:	2401      	movs	r4, #1
 8014144:	42a3      	cmp	r3, r4
 8014146:	d101      	bne.n	801414c <check_DHCP_timeout+0x64>
				dhcp_state = STATE_DHCP_INIT;
 8014148:	2400      	movs	r4, #0
				dhcp_state = STATE_DHCP_DISCOVER;
 801414a:	702c      	strb	r4, [r5, #0]
		reset_DHCP_timeout();
 801414c:	f7ff fd1c 	bl	8013b88 <reset_DHCP_timeout>
 8014150:	e7eb      	b.n	801412a <check_DHCP_timeout+0x42>
				send_DHCP_DISCOVER();
 8014152:	f7ff fdb7 	bl	8013cc4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8014156:	2401      	movs	r4, #1
 8014158:	e7f7      	b.n	801414a <check_DHCP_timeout+0x62>
 801415a:	46c0      	nop			; (mov r8, r8)
 801415c:	2000068c 	.word	0x2000068c
 8014160:	20000690 	.word	0x20000690
 8014164:	2000014c 	.word	0x2000014c
 8014168:	2000068d 	.word	0x2000068d

0801416c <DHCP_run>:
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801416c:	2300      	movs	r3, #0
{
 801416e:	b570      	push	{r4, r5, r6, lr}
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8014170:	4d51      	ldr	r5, [pc, #324]	; (80142b8 <DHCP_run+0x14c>)
 8014172:	2405      	movs	r4, #5
 8014174:	56eb      	ldrsb	r3, [r5, r3]
 8014176:	2b06      	cmp	r3, #6
 8014178:	d03c      	beq.n	80141f4 <DHCP_run+0x88>
	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801417a:	23c2      	movs	r3, #194	; 0xc2
 801417c:	4c4f      	ldr	r4, [pc, #316]	; (80142bc <DHCP_run+0x150>)
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	7820      	ldrb	r0, [r4, #0]
 8014182:	0140      	lsls	r0, r0, #5
 8014184:	18c0      	adds	r0, r0, r3
 8014186:	f7ff f847 	bl	8013218 <WIZCHIP_READ>
 801418a:	2822      	cmp	r0, #34	; 0x22
 801418c:	d005      	beq.n	801419a <DHCP_run+0x2e>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801418e:	2300      	movs	r3, #0
 8014190:	2244      	movs	r2, #68	; 0x44
 8014192:	2102      	movs	r1, #2
 8014194:	7820      	ldrb	r0, [r4, #0]
 8014196:	f7fe fdbb 	bl	8012d10 <socket>
	type = parseDHCPMSG();
 801419a:	f7ff fbdf 	bl	801395c <parseDHCPMSG>
 801419e:	b2c6      	uxtb	r6, r0
	switch ( dhcp_state ) {
 80141a0:	2000      	movs	r0, #0
 80141a2:	5628      	ldrsb	r0, [r5, r0]
 80141a4:	2401      	movs	r4, #1
 80141a6:	2804      	cmp	r0, #4
 80141a8:	d824      	bhi.n	80141f4 <DHCP_run+0x88>
 80141aa:	f7f3 fc3f 	bl	8007a2c <__gnu_thumb1_case_uqi>
 80141ae:	0e03      	.short	0x0e03
 80141b0:	3f25      	.short	0x3f25
 80141b2:	5c          	.byte	0x5c
 80141b3:	00          	.byte	0x00
         DHCP_allocated_ip[0] = 0;
 80141b4:	2200      	movs	r2, #0
 80141b6:	4b42      	ldr	r3, [pc, #264]	; (80142c0 <DHCP_run+0x154>)
 80141b8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80141ba:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80141bc:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80141be:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80141c0:	f7ff fd80 	bl	8013cc4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80141c4:	2401      	movs	r4, #1
				dhcp_state = STATE_DHCP_REREQUEST;
 80141c6:	702c      	strb	r4, [r5, #0]
 80141c8:	e014      	b.n	80141f4 <DHCP_run+0x88>
			if (type == DHCP_OFFER){
 80141ca:	2e02      	cmp	r6, #2
 80141cc:	d10f      	bne.n	80141ee <DHCP_run+0x82>
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80141ce:	4b3d      	ldr	r3, [pc, #244]	; (80142c4 <DHCP_run+0x158>)
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	4b3b      	ldr	r3, [pc, #236]	; (80142c0 <DHCP_run+0x154>)
 80141d4:	7c11      	ldrb	r1, [r2, #16]
 80141d6:	7019      	strb	r1, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80141d8:	7c51      	ldrb	r1, [r2, #17]
 80141da:	7059      	strb	r1, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80141dc:	7c91      	ldrb	r1, [r2, #18]
 80141de:	7099      	strb	r1, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80141e0:	7cd2      	ldrb	r2, [r2, #19]
 80141e2:	70da      	strb	r2, [r3, #3]
				send_DHCP_REQUEST();
 80141e4:	f7ff fe54 	bl	8013e90 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80141e8:	702e      	strb	r6, [r5, #0]
	ret = DHCP_RUNNING;
 80141ea:	2401      	movs	r4, #1
 80141ec:	e002      	b.n	80141f4 <DHCP_run+0x88>
			} else ret = check_DHCP_timeout();
 80141ee:	f7ff ff7b 	bl	80140e8 <check_DHCP_timeout>
 80141f2:	0004      	movs	r4, r0
}
 80141f4:	0020      	movs	r0, r4
 80141f6:	bd70      	pop	{r4, r5, r6, pc}
			if (type == DHCP_ACK) {
 80141f8:	2e05      	cmp	r6, #5
 80141fa:	d112      	bne.n	8014222 <DHCP_run+0xb6>
				if (check_DHCP_leasedIP()) {
 80141fc:	f7ff fc92 	bl	8013b24 <check_DHCP_leasedIP>
 8014200:	1e04      	subs	r4, r0, #0
 8014202:	d007      	beq.n	8014214 <DHCP_run+0xa8>
					dhcp_ip_assign();
 8014204:	4b30      	ldr	r3, [pc, #192]	; (80142c8 <DHCP_run+0x15c>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	4798      	blx	r3
					reset_DHCP_timeout();
 801420a:	f7ff fcbd 	bl	8013b88 <reset_DHCP_timeout>
					dhcp_state = STATE_DHCP_LEASED;
 801420e:	2303      	movs	r3, #3
 8014210:	702b      	strb	r3, [r5, #0]
 8014212:	e7ea      	b.n	80141ea <DHCP_run+0x7e>
					reset_DHCP_timeout();
 8014214:	f7ff fcb8 	bl	8013b88 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8014218:	4b2c      	ldr	r3, [pc, #176]	; (80142cc <DHCP_run+0x160>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801421e:	702c      	strb	r4, [r5, #0]
 8014220:	e7e3      	b.n	80141ea <DHCP_run+0x7e>
			} else if (type == DHCP_NAK) {
 8014222:	2e06      	cmp	r6, #6
 8014224:	d1e3      	bne.n	80141ee <DHCP_run+0x82>
				reset_DHCP_timeout();
 8014226:	f7ff fcaf 	bl	8013b88 <reset_DHCP_timeout>
 801422a:	e7cb      	b.n	80141c4 <DHCP_run+0x58>
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 801422c:	4b28      	ldr	r3, [pc, #160]	; (80142d0 <DHCP_run+0x164>)
		   ret = DHCP_IP_LEASED;
 801422e:	2404      	movs	r4, #4
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	1c5a      	adds	r2, r3, #1
 8014234:	d0de      	beq.n	80141f4 <DHCP_run+0x88>
 8014236:	4a27      	ldr	r2, [pc, #156]	; (80142d4 <DHCP_run+0x168>)
 8014238:	085b      	lsrs	r3, r3, #1
 801423a:	6812      	ldr	r2, [r2, #0]
 801423c:	4293      	cmp	r3, r2
 801423e:	d2d9      	bcs.n	80141f4 <DHCP_run+0x88>
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8014240:	4a1f      	ldr	r2, [pc, #124]	; (80142c0 <DHCP_run+0x154>)
 8014242:	4b25      	ldr	r3, [pc, #148]	; (80142d8 <DHCP_run+0x16c>)
 8014244:	7811      	ldrb	r1, [r2, #0]
 8014246:	7019      	strb	r1, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8014248:	7851      	ldrb	r1, [r2, #1]
 801424a:	7059      	strb	r1, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801424c:	7891      	ldrb	r1, [r2, #2]
 801424e:	7099      	strb	r1, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8014250:	78d2      	ldrb	r2, [r2, #3]
 8014252:	70da      	strb	r2, [r3, #3]
				DHCP_XID++;
 8014254:	4a21      	ldr	r2, [pc, #132]	; (80142dc <DHCP_run+0x170>)
 8014256:	6813      	ldr	r3, [r2, #0]
 8014258:	3301      	adds	r3, #1
 801425a:	6013      	str	r3, [r2, #0]
				send_DHCP_REQUEST();
 801425c:	f7ff fe18 	bl	8013e90 <send_DHCP_REQUEST>
				reset_DHCP_timeout();
 8014260:	f7ff fc92 	bl	8013b88 <reset_DHCP_timeout>
 8014264:	e7af      	b.n	80141c6 <DHCP_run+0x5a>
			if (type == DHCP_ACK) {
 8014266:	2e05      	cmp	r6, #5
 8014268:	d11e      	bne.n	80142a8 <DHCP_run+0x13c>
				dhcp_retry_count = 0;
 801426a:	2200      	movs	r2, #0
 801426c:	4b1c      	ldr	r3, [pc, #112]	; (80142e0 <DHCP_run+0x174>)
 801426e:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8014270:	4a19      	ldr	r2, [pc, #100]	; (80142d8 <DHCP_run+0x16c>)
 8014272:	4b13      	ldr	r3, [pc, #76]	; (80142c0 <DHCP_run+0x154>)
 8014274:	7810      	ldrb	r0, [r2, #0]
 8014276:	7819      	ldrb	r1, [r3, #0]
 8014278:	4288      	cmp	r0, r1
 801427a:	d10c      	bne.n	8014296 <DHCP_run+0x12a>
 801427c:	7850      	ldrb	r0, [r2, #1]
 801427e:	7859      	ldrb	r1, [r3, #1]
 8014280:	4288      	cmp	r0, r1
 8014282:	d108      	bne.n	8014296 <DHCP_run+0x12a>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8014284:	7890      	ldrb	r0, [r2, #2]
 8014286:	7899      	ldrb	r1, [r3, #2]
 8014288:	4288      	cmp	r0, r1
 801428a:	d104      	bne.n	8014296 <DHCP_run+0x12a>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801428c:	78d2      	ldrb	r2, [r2, #3]
 801428e:	78db      	ldrb	r3, [r3, #3]
		   ret = DHCP_IP_LEASED;
 8014290:	2404      	movs	r4, #4
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8014292:	429a      	cmp	r2, r3
 8014294:	d003      	beq.n	801429e <DHCP_run+0x132>
					dhcp_ip_update();
 8014296:	4b13      	ldr	r3, [pc, #76]	; (80142e4 <DHCP_run+0x178>)
					ret = DHCP_IP_CHANGED;
 8014298:	2403      	movs	r4, #3
					dhcp_ip_update();
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	4798      	blx	r3
				reset_DHCP_timeout();
 801429e:	f7ff fc73 	bl	8013b88 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80142a2:	2303      	movs	r3, #3
 80142a4:	702b      	strb	r3, [r5, #0]
 80142a6:	e7a5      	b.n	80141f4 <DHCP_run+0x88>
			} else if (type == DHCP_NAK) {
 80142a8:	2e06      	cmp	r6, #6
 80142aa:	d1a0      	bne.n	80141ee <DHCP_run+0x82>
				reset_DHCP_timeout();
 80142ac:	f7ff fc6c 	bl	8013b88 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80142b0:	2301      	movs	r3, #1
		   ret = DHCP_IP_LEASED;
 80142b2:	2404      	movs	r4, #4
				dhcp_state = STATE_DHCP_DISCOVER;
 80142b4:	702b      	strb	r3, [r5, #0]
 80142b6:	e79d      	b.n	80141f4 <DHCP_run+0x88>
 80142b8:	2000068d 	.word	0x2000068d
 80142bc:	20000673 	.word	0x20000673
 80142c0:	20000680 	.word	0x20000680
 80142c4:	20000694 	.word	0x20000694
 80142c8:	2000013c 	.word	0x2000013c
 80142cc:	20000140 	.word	0x20000140
 80142d0:	20000148 	.word	0x20000148
 80142d4:	20000690 	.word	0x20000690
 80142d8:	20000688 	.word	0x20000688
 80142dc:	20000674 	.word	0x20000674
 80142e0:	2000068c 	.word	0x2000068c
 80142e4:	20000144 	.word	0x20000144

080142e8 <LCD_Delay_us>:
#define LCD_5x10DOTS            0x04
#define LCD_5x8DOTS             0x00
//############################################################################################
void  LCD_Delay_us(uint16_t  us)
 {
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80142e8:	2200      	movs	r2, #0
 80142ea:	4b03      	ldr	r3, [pc, #12]	; (80142f8 <LCD_Delay_us+0x10>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us)
 80142f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142f2:	4282      	cmp	r2, r0
 80142f4:	d3fc      	bcc.n	80142f0 <LCD_Delay_us+0x8>
		;
}
 80142f6:	4770      	bx	lr
 80142f8:	200004cc 	.word	0x200004cc

080142fc <LCD_Cmd4bit>:
	LCD_Cmd4bit(data & 0x0F);
}
//############################################################################################
static void LCD_Cmd4bit(uint8_t cmd)
{
	HAL_GPIO_WritePin(_LCD_D7_PORT, _LCD_D7_PIN, (GPIO_PinState)(cmd & 0x08));
 80142fc:	2208      	movs	r2, #8
 80142fe:	2180      	movs	r1, #128	; 0x80
{
 8014300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014302:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(_LCD_D7_PORT, _LCD_D7_PIN, (GPIO_PinState)(cmd & 0x08));
 8014304:	4d16      	ldr	r5, [pc, #88]	; (8014360 <LCD_Cmd4bit+0x64>)
 8014306:	4002      	ands	r2, r0
 8014308:	0049      	lsls	r1, r1, #1
 801430a:	0028      	movs	r0, r5
 801430c:	f7fa fef6 	bl	800f0fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D6_PORT, _LCD_D6_PIN, (GPIO_PinState)(cmd & 0x04));
 8014310:	2604      	movs	r6, #4
 8014312:	0022      	movs	r2, r4
 8014314:	2180      	movs	r1, #128	; 0x80
 8014316:	4032      	ands	r2, r6
 8014318:	0028      	movs	r0, r5
 801431a:	0089      	lsls	r1, r1, #2
 801431c:	f7fa feee 	bl	800f0fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D5_PORT, _LCD_D5_PIN, (GPIO_PinState)(cmd & 0x02));
 8014320:	2702      	movs	r7, #2
 8014322:	0022      	movs	r2, r4
 8014324:	4d0f      	ldr	r5, [pc, #60]	; (8014364 <LCD_Cmd4bit+0x68>)
 8014326:	403a      	ands	r2, r7
 8014328:	0028      	movs	r0, r5
 801432a:	2101      	movs	r1, #1
 801432c:	f7fa fee6 	bl	800f0fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D4_PORT, _LCD_D4_PIN, (GPIO_PinState)(cmd & 0x01));
 8014330:	2201      	movs	r2, #1
 8014332:	0039      	movs	r1, r7
 8014334:	0028      	movs	r0, r5
 8014336:	4022      	ands	r2, r4
 8014338:	f7fa fee0 	bl	800f0fc <HAL_GPIO_WritePin>
	LCD_E_BLINK;
 801433c:	0031      	movs	r1, r6
 801433e:	0028      	movs	r0, r5
 8014340:	2201      	movs	r2, #1
 8014342:	f7fa fedb 	bl	800f0fc <HAL_GPIO_WritePin>
 8014346:	2032      	movs	r0, #50	; 0x32
 8014348:	f7ff ffce 	bl	80142e8 <LCD_Delay_us>
 801434c:	0031      	movs	r1, r6
 801434e:	0028      	movs	r0, r5
 8014350:	2200      	movs	r2, #0
 8014352:	f7fa fed3 	bl	800f0fc <HAL_GPIO_WritePin>
 8014356:	2032      	movs	r0, #50	; 0x32
 8014358:	f7ff ffc6 	bl	80142e8 <LCD_Delay_us>
}
 801435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801435e:	46c0      	nop			; (mov r8, r8)
 8014360:	48000400 	.word	0x48000400
 8014364:	48001000 	.word	0x48001000

08014368 <LCD_Cmd>:
{
 8014368:	b510      	push	{r4, lr}
 801436a:	0004      	movs	r4, r0
	LCD_RS_LOW;
 801436c:	2200      	movs	r2, #0
 801436e:	2120      	movs	r1, #32
 8014370:	4805      	ldr	r0, [pc, #20]	; (8014388 <LCD_Cmd+0x20>)
 8014372:	f7fa fec3 	bl	800f0fc <HAL_GPIO_WritePin>
	LCD_Cmd4bit(cmd >> 4);
 8014376:	0920      	lsrs	r0, r4, #4
 8014378:	f7ff ffc0 	bl	80142fc <LCD_Cmd4bit>
	LCD_Cmd4bit(cmd & 0x0F);
 801437c:	200f      	movs	r0, #15
 801437e:	4020      	ands	r0, r4
 8014380:	f7ff ffbc 	bl	80142fc <LCD_Cmd4bit>
}
 8014384:	bd10      	pop	{r4, pc}
 8014386:	46c0      	nop			; (mov r8, r8)
 8014388:	48001000 	.word	0x48001000

0801438c <LCD_CursorSet>:
//############################################################################################
static void LCD_CursorSet(uint8_t col, uint8_t row)
{
 801438c:	b507      	push	{r0, r1, r2, lr}
	const uint8_t row_offsets[] = {0x00, 0x40, 0x10, 0x50};
 801438e:	4b09      	ldr	r3, [pc, #36]	; (80143b4 <LCD_CursorSet+0x28>)
 8014390:	9301      	str	r3, [sp, #4]
	if (row >= _LCD_ROWS)
 8014392:	2903      	cmp	r1, #3
 8014394:	d900      	bls.n	8014398 <LCD_CursorSet+0xc>
		row = 0;
 8014396:	2100      	movs	r1, #0
	LCD_Opts.currentX = col;
 8014398:	4b07      	ldr	r3, [pc, #28]	; (80143b8 <LCD_CursorSet+0x2c>)
 801439a:	70d8      	strb	r0, [r3, #3]
	LCD_Opts.currentY = row;
 801439c:	7119      	strb	r1, [r3, #4]
	LCD_Cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 801439e:	ab01      	add	r3, sp, #4
 80143a0:	5c5b      	ldrb	r3, [r3, r1]
 80143a2:	18c0      	adds	r0, r0, r3
 80143a4:	2380      	movs	r3, #128	; 0x80
 80143a6:	425b      	negs	r3, r3
 80143a8:	4318      	orrs	r0, r3
 80143aa:	b2c0      	uxtb	r0, r0
 80143ac:	f7ff ffdc 	bl	8014368 <LCD_Cmd>
}
 80143b0:	bd07      	pop	{r0, r1, r2, pc}
 80143b2:	46c0      	nop			; (mov r8, r8)
 80143b4:	50104000 	.word	0x50104000
 80143b8:	20000698 	.word	0x20000698

080143bc <LCD_Data>:
{
 80143bc:	b510      	push	{r4, lr}
 80143be:	0004      	movs	r4, r0
	LCD_RS_HIGH;
 80143c0:	2201      	movs	r2, #1
 80143c2:	2120      	movs	r1, #32
 80143c4:	4805      	ldr	r0, [pc, #20]	; (80143dc <LCD_Data+0x20>)
 80143c6:	f7fa fe99 	bl	800f0fc <HAL_GPIO_WritePin>
	LCD_Cmd4bit(data >> 4);
 80143ca:	0920      	lsrs	r0, r4, #4
 80143cc:	f7ff ff96 	bl	80142fc <LCD_Cmd4bit>
	LCD_Cmd4bit(data & 0x0F);
 80143d0:	200f      	movs	r0, #15
 80143d2:	4020      	ands	r0, r4
 80143d4:	f7ff ff92 	bl	80142fc <LCD_Cmd4bit>
}
 80143d8:	bd10      	pop	{r4, pc}
 80143da:	46c0      	nop			; (mov r8, r8)
 80143dc:	48001000 	.word	0x48001000

080143e0 <LCD_Clear>:
{
 80143e0:	b510      	push	{r4, lr}
	LCD_Cmd(LCD_CLEARDISPLAY);
 80143e2:	2001      	movs	r0, #1
 80143e4:	f7ff ffc0 	bl	8014368 <LCD_Cmd>
  HAL_Delay(ms);
 80143e8:	2005      	movs	r0, #5
 80143ea:	f7fa fbbd 	bl	800eb68 <HAL_Delay>
}
 80143ee:	bd10      	pop	{r4, pc}

080143f0 <LCD_Puts>:
{
 80143f0:	b570      	push	{r4, r5, r6, lr}
 80143f2:	0015      	movs	r5, r2
	LCD_CursorSet(x, y);
 80143f4:	f7ff ffca 	bl	801438c <LCD_CursorSet>
	while (*str)
 80143f8:	782b      	ldrb	r3, [r5, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d100      	bne.n	8014400 <LCD_Puts+0x10>
}
 80143fe:	bd70      	pop	{r4, r5, r6, pc}
		if (LCD_Opts.currentX >= _LCD_COLS)
 8014400:	4c11      	ldr	r4, [pc, #68]	; (8014448 <LCD_Puts+0x58>)
 8014402:	78e3      	ldrb	r3, [r4, #3]
 8014404:	2b0f      	cmp	r3, #15
 8014406:	d907      	bls.n	8014418 <LCD_Puts+0x28>
			LCD_Opts.currentX = 0;
 8014408:	2000      	movs	r0, #0
			LCD_Opts.currentY++;
 801440a:	7921      	ldrb	r1, [r4, #4]
			LCD_Opts.currentX = 0;
 801440c:	70e0      	strb	r0, [r4, #3]
			LCD_Opts.currentY++;
 801440e:	3101      	adds	r1, #1
 8014410:	b2c9      	uxtb	r1, r1
 8014412:	7121      	strb	r1, [r4, #4]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 8014414:	f7ff ffba 	bl	801438c <LCD_CursorSet>
		if (*str == '\n')
 8014418:	7828      	ldrb	r0, [r5, #0]
 801441a:	280a      	cmp	r0, #10
 801441c:	d108      	bne.n	8014430 <LCD_Puts+0x40>
			LCD_Opts.currentY++;
 801441e:	7921      	ldrb	r1, [r4, #4]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 8014420:	78e0      	ldrb	r0, [r4, #3]
			LCD_Opts.currentY++;
 8014422:	3101      	adds	r1, #1
 8014424:	b2c9      	uxtb	r1, r1
 8014426:	7121      	strb	r1, [r4, #4]
			LCD_CursorSet(0, LCD_Opts.currentY);
 8014428:	f7ff ffb0 	bl	801438c <LCD_CursorSet>
		str++;
 801442c:	3501      	adds	r5, #1
 801442e:	e7e3      	b.n	80143f8 <LCD_Puts+0x8>
    else if (*str == '\r')
 8014430:	280d      	cmp	r0, #13
 8014432:	d102      	bne.n	801443a <LCD_Puts+0x4a>
			LCD_CursorSet(0, LCD_Opts.currentY);
 8014434:	2000      	movs	r0, #0
 8014436:	7921      	ldrb	r1, [r4, #4]
 8014438:	e7f6      	b.n	8014428 <LCD_Puts+0x38>
			LCD_Data(*str);
 801443a:	f7ff ffbf 	bl	80143bc <LCD_Data>
			LCD_Opts.currentX++;
 801443e:	78e3      	ldrb	r3, [r4, #3]
 8014440:	3301      	adds	r3, #1
 8014442:	70e3      	strb	r3, [r4, #3]
 8014444:	e7f2      	b.n	801442c <LCD_Puts+0x3c>
 8014446:	46c0      	nop			; (mov r8, r8)
 8014448:	20000698 	.word	0x20000698

0801444c <LCD_DisplayOn>:
	LCD_Opts.DisplayControl |= LCD_DISPLAYON;
 801444c:	2304      	movs	r3, #4
	LCD_Cmd(LCD_DISPLAYCONTROL | LCD_Opts.DisplayControl);
 801444e:	200c      	movs	r0, #12
{
 8014450:	b510      	push	{r4, lr}
	LCD_Opts.DisplayControl |= LCD_DISPLAYON;
 8014452:	4904      	ldr	r1, [pc, #16]	; (8014464 <LCD_DisplayOn+0x18>)
 8014454:	780a      	ldrb	r2, [r1, #0]
 8014456:	4313      	orrs	r3, r2
	LCD_Cmd(LCD_DISPLAYCONTROL | LCD_Opts.DisplayControl);
 8014458:	4310      	orrs	r0, r2
	LCD_Opts.DisplayControl |= LCD_DISPLAYON;
 801445a:	700b      	strb	r3, [r1, #0]
	LCD_Cmd(LCD_DISPLAYCONTROL | LCD_Opts.DisplayControl);
 801445c:	f7ff ff84 	bl	8014368 <LCD_Cmd>
}
 8014460:	bd10      	pop	{r4, pc}
 8014462:	46c0      	nop			; (mov r8, r8)
 8014464:	20000698 	.word	0x20000698

08014468 <LCD_Init>:
{	
 8014468:	b510      	push	{r4, lr}
	while(HAL_GetTick()<200)
 801446a:	f7fa fb77 	bl	800eb5c <HAL_GetTick>
 801446e:	28c7      	cmp	r0, #199	; 0xc7
 8014470:	d931      	bls.n	80144d6 <LCD_Init+0x6e>
	LCD_Opts.currentX = 0;
 8014472:	2300      	movs	r3, #0
 8014474:	4c1a      	ldr	r4, [pc, #104]	; (80144e0 <LCD_Init+0x78>)
	LCD_Cmd4bit(0x03);
 8014476:	2003      	movs	r0, #3
	LCD_Opts.currentX = 0;
 8014478:	70e3      	strb	r3, [r4, #3]
	LCD_Opts.currentY = 0;
 801447a:	7123      	strb	r3, [r4, #4]
		LCD_Opts.DisplayFunction |= LCD_2LINE;
 801447c:	3308      	adds	r3, #8
 801447e:	7063      	strb	r3, [r4, #1]
	LCD_Cmd4bit(0x03);
 8014480:	f7ff ff3c 	bl	80142fc <LCD_Cmd4bit>
  HAL_Delay(ms);
 8014484:	2005      	movs	r0, #5
 8014486:	f7fa fb6f 	bl	800eb68 <HAL_Delay>
	LCD_Cmd4bit(0x03);
 801448a:	2003      	movs	r0, #3
 801448c:	f7ff ff36 	bl	80142fc <LCD_Cmd4bit>
  HAL_Delay(ms);
 8014490:	2005      	movs	r0, #5
 8014492:	f7fa fb69 	bl	800eb68 <HAL_Delay>
	LCD_Cmd4bit(0x03);
 8014496:	2003      	movs	r0, #3
 8014498:	f7ff ff30 	bl	80142fc <LCD_Cmd4bit>
  HAL_Delay(ms);
 801449c:	2005      	movs	r0, #5
 801449e:	f7fa fb63 	bl	800eb68 <HAL_Delay>
	LCD_Cmd4bit(0x02);
 80144a2:	2002      	movs	r0, #2
 80144a4:	f7ff ff2a 	bl	80142fc <LCD_Cmd4bit>
  HAL_Delay(ms);
 80144a8:	2005      	movs	r0, #5
 80144aa:	f7fa fb5d 	bl	800eb68 <HAL_Delay>
	LCD_Cmd(LCD_FUNCTIONSET | LCD_Opts.DisplayFunction);
 80144ae:	2020      	movs	r0, #32
 80144b0:	7863      	ldrb	r3, [r4, #1]
 80144b2:	4318      	orrs	r0, r3
 80144b4:	f7ff ff58 	bl	8014368 <LCD_Cmd>
	LCD_Opts.DisplayControl = LCD_DISPLAYON;
 80144b8:	2304      	movs	r3, #4
 80144ba:	7023      	strb	r3, [r4, #0]
	LCD_DisplayOn();
 80144bc:	f7ff ffc6 	bl	801444c <LCD_DisplayOn>
	LCD_Clear();
 80144c0:	f7ff ff8e 	bl	80143e0 <LCD_Clear>
	LCD_Opts.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80144c4:	2302      	movs	r3, #2
	LCD_Cmd(LCD_ENTRYMODESET | LCD_Opts.DisplayMode);
 80144c6:	2006      	movs	r0, #6
	LCD_Opts.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80144c8:	70a3      	strb	r3, [r4, #2]
	LCD_Cmd(LCD_ENTRYMODESET | LCD_Opts.DisplayMode);
 80144ca:	f7ff ff4d 	bl	8014368 <LCD_Cmd>
  HAL_Delay(ms);
 80144ce:	2005      	movs	r0, #5
 80144d0:	f7fa fb4a 	bl	800eb68 <HAL_Delay>
}
 80144d4:	bd10      	pop	{r4, pc}
  HAL_Delay(ms);
 80144d6:	2001      	movs	r0, #1
 80144d8:	f7fa fb46 	bl	800eb68 <HAL_Delay>
}
 80144dc:	e7c5      	b.n	801446a <LCD_Init+0x2>
 80144de:	46c0      	nop			; (mov r8, r8)
 80144e0:	20000698 	.word	0x20000698

080144e4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80144e4:	23af      	movs	r3, #175	; 0xaf
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	58c3      	ldr	r3, [r0, r3]
{
 80144ea:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d00e      	beq.n	801450e <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80144f0:	22ae      	movs	r2, #174	; 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80144f2:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80144f4:	0092      	lsls	r2, r2, #2
 80144f6:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80144f8:	00ad      	lsls	r5, r5, #2
 80144fa:	5d60      	ldrb	r0, [r4, r5]
 80144fc:	28ff      	cmp	r0, #255	; 0xff
 80144fe:	d006      	beq.n	801450e <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014500:	4a04      	ldr	r2, [pc, #16]	; (8014514 <USBD_CDC_EP0_RxReady+0x30>)
 8014502:	689b      	ldr	r3, [r3, #8]
 8014504:	0021      	movs	r1, r4
 8014506:	5ca2      	ldrb	r2, [r4, r2]
 8014508:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 801450a:	23ff      	movs	r3, #255	; 0xff
 801450c:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 801450e:	2000      	movs	r0, #0
 8014510:	bd70      	pop	{r4, r5, r6, pc}
 8014512:	46c0      	nop			; (mov r8, r8)
 8014514:	00000201 	.word	0x00000201

08014518 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8014518:	2343      	movs	r3, #67	; 0x43
 801451a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 801451c:	4800      	ldr	r0, [pc, #0]	; (8014520 <USBD_CDC_GetFSCfgDesc+0x8>)
 801451e:	4770      	bx	lr
 8014520:	20000188 	.word	0x20000188

08014524 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8014524:	2343      	movs	r3, #67	; 0x43
 8014526:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8014528:	4800      	ldr	r0, [pc, #0]	; (801452c <USBD_CDC_GetHSCfgDesc+0x8>)
 801452a:	4770      	bx	lr
 801452c:	200001cc 	.word	0x200001cc

08014530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014530:	2343      	movs	r3, #67	; 0x43
 8014532:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8014534:	4800      	ldr	r0, [pc, #0]	; (8014538 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8014536:	4770      	bx	lr
 8014538:	2000021c 	.word	0x2000021c

0801453c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801453c:	230a      	movs	r3, #10
 801453e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8014540:	4800      	ldr	r0, [pc, #0]	; (8014544 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8014542:	4770      	bx	lr
 8014544:	20000210 	.word	0x20000210

08014548 <USBD_CDC_DataOut>:
{
 8014548:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801454a:	26ae      	movs	r6, #174	; 0xae
 801454c:	00b6      	lsls	r6, r6, #2
{
 801454e:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014550:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014552:	f003 f90b 	bl	801776c <USBD_LL_GetRxDataSize>
 8014556:	2383      	movs	r3, #131	; 0x83
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 801455c:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 801455e:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8014560:	2b00      	cmp	r3, #0
 8014562:	d00a      	beq.n	801457a <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014564:	2383      	movs	r3, #131	; 0x83
 8014566:	2281      	movs	r2, #129	; 0x81
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	18e9      	adds	r1, r5, r3
 801456c:	33b0      	adds	r3, #176	; 0xb0
 801456e:	58e3      	ldr	r3, [r4, r3]
 8014570:	0092      	lsls	r2, r2, #2
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	58a8      	ldr	r0, [r5, r2]
 8014576:	4798      	blx	r3
    return USBD_OK;
 8014578:	2000      	movs	r0, #0
}
 801457a:	bd70      	pop	{r4, r5, r6, pc}

0801457c <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801457c:	23ae      	movs	r3, #174	; 0xae
{
 801457e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	58c3      	ldr	r3, [r0, r3]
{
 8014584:	0005      	movs	r5, r0
 8014586:	000f      	movs	r7, r1
    return USBD_FAIL;
 8014588:	2002      	movs	r0, #2
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801458a:	9301      	str	r3, [sp, #4]
  if (pdev->pClassData != NULL)
 801458c:	2b00      	cmp	r3, #0
 801458e:	d018      	beq.n	80145c2 <USBD_CDC_DataIn+0x46>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014590:	2614      	movs	r6, #20
 8014592:	434e      	muls	r6, r1
 8014594:	19ae      	adds	r6, r5, r6
 8014596:	69f0      	ldr	r0, [r6, #28]
 8014598:	2800      	cmp	r0, #0
 801459a:	d013      	beq.n	80145c4 <USBD_CDC_DataIn+0x48>
 801459c:	2228      	movs	r2, #40	; 0x28
 801459e:	23b0      	movs	r3, #176	; 0xb0
 80145a0:	434a      	muls	r2, r1
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	58eb      	ldr	r3, [r5, r3]
 80145a6:	189b      	adds	r3, r3, r2
 80145a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80145aa:	f7f3 fae3 	bl	8007b74 <__aeabi_uidivmod>
 80145ae:	1e0c      	subs	r4, r1, #0
 80145b0:	d108      	bne.n	80145c4 <USBD_CDC_DataIn+0x48>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80145b2:	000b      	movs	r3, r1
 80145b4:	000a      	movs	r2, r1
      pdev->ep_in[epnum].total_length = 0U;
 80145b6:	61f1      	str	r1, [r6, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80145b8:	0028      	movs	r0, r5
 80145ba:	0039      	movs	r1, r7
 80145bc:	f003 f8c4 	bl	8017748 <USBD_LL_Transmit>
    return USBD_OK;
 80145c0:	0020      	movs	r0, r4
}
 80145c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80145c4:	2385      	movs	r3, #133	; 0x85
 80145c6:	2000      	movs	r0, #0
 80145c8:	9a01      	ldr	r2, [sp, #4]
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	50d0      	str	r0, [r2, r3]
 80145ce:	e7f8      	b.n	80145c2 <USBD_CDC_DataIn+0x46>

080145d0 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80145d0:	23ae      	movs	r3, #174	; 0xae
{
 80145d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 80145d8:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 80145da:	466a      	mov	r2, sp
{
 80145dc:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 80145de:	1d59      	adds	r1, r3, #5
 80145e0:	2300      	movs	r3, #0
{
 80145e2:	0005      	movs	r5, r0
  uint8_t ifalt = 0U;
 80145e4:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 80145e6:	80d3      	strh	r3, [r2, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145e8:	7833      	ldrb	r3, [r6, #0]
  uint16_t status_info = 0U;
 80145ea:	1d90      	adds	r0, r2, #6
 80145ec:	001c      	movs	r4, r3
 80145ee:	2260      	movs	r2, #96	; 0x60
 80145f0:	4014      	ands	r4, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145f2:	4213      	tst	r3, r2
 80145f4:	d02a      	beq.n	801464c <USBD_CDC_Setup+0x7c>
 80145f6:	2c20      	cmp	r4, #32
 80145f8:	d146      	bne.n	8014688 <USBD_CDC_Setup+0xb8>
      if (req->wLength)
 80145fa:	88f4      	ldrh	r4, [r6, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80145fc:	7870      	ldrb	r0, [r6, #1]
      if (req->wLength)
 80145fe:	2c00      	cmp	r4, #0
 8014600:	d01c      	beq.n	801463c <USBD_CDC_Setup+0x6c>
        if (req->bmRequest & 0x80U)
 8014602:	b25b      	sxtb	r3, r3
 8014604:	2b00      	cmp	r3, #0
 8014606:	da0e      	bge.n	8014626 <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014608:	23af      	movs	r3, #175	; 0xaf
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	58eb      	ldr	r3, [r5, r3]
 801460e:	0022      	movs	r2, r4
 8014610:	0039      	movs	r1, r7
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014616:	0039      	movs	r1, r7
 8014618:	0028      	movs	r0, r5
 801461a:	88f2      	ldrh	r2, [r6, #6]
 801461c:	f000 fcac 	bl	8014f78 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8014620:	2400      	movs	r4, #0
}
 8014622:	0020      	movs	r0, r4
 8014624:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 8014626:	2380      	movs	r3, #128	; 0x80
 8014628:	009b      	lsls	r3, r3, #2
 801462a:	54f8      	strb	r0, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801462c:	4b19      	ldr	r3, [pc, #100]	; (8014694 <USBD_CDC_Setup+0xc4>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801462e:	0022      	movs	r2, r4
 8014630:	0039      	movs	r1, r7
 8014632:	0028      	movs	r0, r5
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014634:	54fc      	strb	r4, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014636:	f000 fcb5 	bl	8014fa4 <USBD_CtlPrepareRx>
 801463a:	e7f1      	b.n	8014620 <USBD_CDC_Setup+0x50>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801463c:	23af      	movs	r3, #175	; 0xaf
 801463e:	009b      	lsls	r3, r3, #2
 8014640:	58eb      	ldr	r3, [r5, r3]
 8014642:	0022      	movs	r2, r4
 8014644:	0031      	movs	r1, r6
 8014646:	689b      	ldr	r3, [r3, #8]
 8014648:	4798      	blx	r3
 801464a:	e7ea      	b.n	8014622 <USBD_CDC_Setup+0x52>
      switch (req->bRequest)
 801464c:	7873      	ldrb	r3, [r6, #1]
 801464e:	2b0a      	cmp	r3, #10
 8014650:	d00e      	beq.n	8014670 <USBD_CDC_Setup+0xa0>
 8014652:	2b0b      	cmp	r3, #11
 8014654:	d013      	beq.n	801467e <USBD_CDC_Setup+0xae>
 8014656:	2b00      	cmp	r3, #0
 8014658:	d116      	bne.n	8014688 <USBD_CDC_Setup+0xb8>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801465a:	23a7      	movs	r3, #167	; 0xa7
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	5ceb      	ldrb	r3, [r5, r3]
 8014660:	2b03      	cmp	r3, #3
 8014662:	d111      	bne.n	8014688 <USBD_CDC_Setup+0xb8>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014664:	2202      	movs	r2, #2
 8014666:	0001      	movs	r1, r0
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8014668:	0028      	movs	r0, r5
 801466a:	f000 fc85 	bl	8014f78 <USBD_CtlSendData>
 801466e:	e7d8      	b.n	8014622 <USBD_CDC_Setup+0x52>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014670:	23a7      	movs	r3, #167	; 0xa7
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	5ceb      	ldrb	r3, [r5, r3]
 8014676:	2b03      	cmp	r3, #3
 8014678:	d106      	bne.n	8014688 <USBD_CDC_Setup+0xb8>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801467a:	2201      	movs	r2, #1
 801467c:	e7f4      	b.n	8014668 <USBD_CDC_Setup+0x98>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801467e:	23a7      	movs	r3, #167	; 0xa7
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	5ceb      	ldrb	r3, [r5, r3]
 8014684:	2b03      	cmp	r3, #3
 8014686:	d0cc      	beq.n	8014622 <USBD_CDC_Setup+0x52>
          USBD_CtlError(pdev, req);
 8014688:	0031      	movs	r1, r6
 801468a:	0028      	movs	r0, r5
 801468c:	f000 fc4c 	bl	8014f28 <USBD_CtlError>
          ret = USBD_FAIL;
 8014690:	2402      	movs	r4, #2
          break;
 8014692:	e7c6      	b.n	8014622 <USBD_CDC_Setup+0x52>
 8014694:	00000201 	.word	0x00000201

08014698 <USBD_CDC_DeInit>:
{
 8014698:	b570      	push	{r4, r5, r6, lr}
 801469a:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801469c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801469e:	2181      	movs	r1, #129	; 0x81
 80146a0:	f003 f819 	bl	80176d6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80146a4:	2101      	movs	r1, #1
 80146a6:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80146a8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80146aa:	f003 f814 	bl	80176d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80146ae:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 80146b0:	26ae      	movs	r6, #174	; 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80146b2:	33fc      	adds	r3, #252	; 0xfc
 80146b4:	671d      	str	r5, [r3, #112]	; 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80146b6:	2182      	movs	r1, #130	; 0x82
 80146b8:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 80146ba:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80146bc:	f003 f80b 	bl	80176d6 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80146c0:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80146c2:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80146c4:	42ab      	cmp	r3, r5
 80146c6:	d008      	beq.n	80146da <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80146c8:	23af      	movs	r3, #175	; 0xaf
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	58e3      	ldr	r3, [r4, r3]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80146d2:	59a0      	ldr	r0, [r4, r6]
 80146d4:	f003 f856 	bl	8017784 <USBD_static_free>
    pdev->pClassData = NULL;
 80146d8:	51a5      	str	r5, [r4, r6]
}
 80146da:	2000      	movs	r0, #0
 80146dc:	bd70      	pop	{r4, r5, r6, pc}

080146de <USBD_CDC_Init>:
{
 80146de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e0:	0006      	movs	r6, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146e2:	7c03      	ldrb	r3, [r0, #16]
{
 80146e4:	0004      	movs	r4, r0
 80146e6:	36fc      	adds	r6, #252	; 0xfc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d139      	bne.n	8014760 <USBD_CDC_Init+0x82>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80146ec:	2380      	movs	r3, #128	; 0x80
 80146ee:	2202      	movs	r2, #2
 80146f0:	009b      	lsls	r3, r3, #2
 80146f2:	2181      	movs	r1, #129	; 0x81
 80146f4:	f002 ffe3 	bl	80176be <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80146f8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80146fa:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80146fc:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80146fe:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014700:	0029      	movs	r1, r5
 8014702:	2202      	movs	r2, #2
 8014704:	0020      	movs	r0, r4
 8014706:	f002 ffda 	bl	80176be <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801470a:	2308      	movs	r3, #8
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801470c:	6735      	str	r5, [r6, #112]	; 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801470e:	2203      	movs	r2, #3
 8014710:	2182      	movs	r1, #130	; 0x82
 8014712:	0020      	movs	r0, r4
 8014714:	f002 ffd3 	bl	80176be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014718:	2701      	movs	r7, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801471a:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801471c:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801471e:	0080      	lsls	r0, r0, #2
 8014720:	f003 f82c 	bl	801777c <USBD_static_malloc>
 8014724:	23ae      	movs	r3, #174	; 0xae
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	0005      	movs	r5, r0
    ret = 1U;
 801472a:	003e      	movs	r6, r7
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801472c:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 801472e:	2800      	cmp	r0, #0
 8014730:	d014      	beq.n	801475c <USBD_CDC_Init+0x7e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014732:	3304      	adds	r3, #4
 8014734:	58e3      	ldr	r3, [r4, r3]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4798      	blx	r3
    hcdc->TxState = 0U;
 801473a:	2385      	movs	r3, #133	; 0x85
 801473c:	2200      	movs	r2, #0
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	50ea      	str	r2, [r5, r3]
    hcdc->RxState = 0U;
 8014742:	3304      	adds	r3, #4
 8014744:	50ea      	str	r2, [r5, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014746:	2281      	movs	r2, #129	; 0x81
 8014748:	7c26      	ldrb	r6, [r4, #16]
 801474a:	0092      	lsls	r2, r2, #2
 801474c:	2e00      	cmp	r6, #0
 801474e:	d110      	bne.n	8014772 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014750:	0039      	movs	r1, r7
 8014752:	0020      	movs	r0, r4
 8014754:	58aa      	ldr	r2, [r5, r2]
 8014756:	3b18      	subs	r3, #24
 8014758:	f002 ffff 	bl	801775a <USBD_LL_PrepareReceive>
}
 801475c:	0030      	movs	r0, r6
 801475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014760:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014762:	2340      	movs	r3, #64	; 0x40
 8014764:	2202      	movs	r2, #2
 8014766:	2181      	movs	r1, #129	; 0x81
 8014768:	f002 ffa9 	bl	80176be <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801476c:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801476e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014770:	e7c6      	b.n	8014700 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014772:	2340      	movs	r3, #64	; 0x40
 8014774:	0039      	movs	r1, r7
 8014776:	0020      	movs	r0, r4
 8014778:	58aa      	ldr	r2, [r5, r2]
 801477a:	f002 ffee 	bl	801775a <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 801477e:	2600      	movs	r6, #0
 8014780:	e7ec      	b.n	801475c <USBD_CDC_Init+0x7e>

08014782 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8014782:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 8014784:	2002      	movs	r0, #2

  if (fops != NULL)
 8014786:	2900      	cmp	r1, #0
 8014788:	d003      	beq.n	8014792 <USBD_CDC_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 801478a:	22af      	movs	r2, #175	; 0xaf
    ret = USBD_OK;
 801478c:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 801478e:	0092      	lsls	r2, r2, #2
 8014790:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 8014792:	4770      	bx	lr

08014794 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014794:	23ae      	movs	r3, #174	; 0xae
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 801479a:	2082      	movs	r0, #130	; 0x82
 801479c:	0080      	lsls	r0, r0, #2
 801479e:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 80147a0:	2184      	movs	r1, #132	; 0x84
 80147a2:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 80147a4:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 80147a6:	505a      	str	r2, [r3, r1]
}
 80147a8:	4770      	bx	lr

080147aa <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80147aa:	23ae      	movs	r3, #174	; 0xae
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	58c2      	ldr	r2, [r0, r3]
 80147b0:	3bb4      	subs	r3, #180	; 0xb4

  return USBD_OK;
}
 80147b2:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80147b4:	50d1      	str	r1, [r2, r3]
}
 80147b6:	4770      	bx	lr

080147b8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80147b8:	23ae      	movs	r3, #174	; 0xae
 80147ba:	009b      	lsls	r3, r3, #2
 80147bc:	58c2      	ldr	r2, [r0, r3]
{
 80147be:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80147c0:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 80147c2:	2a00      	cmp	r2, #0
 80147c4:	d012      	beq.n	80147ec <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 80147c6:	2185      	movs	r1, #133	; 0x85
 80147c8:	0089      	lsls	r1, r1, #2
 80147ca:	5854      	ldr	r4, [r2, r1]
 80147cc:	3b01      	subs	r3, #1
 80147ce:	2c00      	cmp	r4, #0
 80147d0:	d10c      	bne.n	80147ec <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 80147d2:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80147d4:	2384      	movs	r3, #132	; 0x84
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80147da:	390c      	subs	r1, #12
 80147dc:	5852      	ldr	r2, [r2, r1]
 80147de:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80147e0:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80147e2:	39ff      	subs	r1, #255	; 0xff
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	f002 ffaf 	bl	8017748 <USBD_LL_Transmit>
      return USBD_OK;
 80147ea:	0023      	movs	r3, r4
  }
}
 80147ec:	0018      	movs	r0, r3
 80147ee:	bd10      	pop	{r4, pc}

080147f0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80147f0:	23ae      	movs	r3, #174	; 0xae
 80147f2:	009b      	lsls	r3, r3, #2
 80147f4:	58c3      	ldr	r3, [r0, r3]
{
 80147f6:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 80147f8:	2402      	movs	r4, #2
  if (pdev->pClassData != NULL)
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d00a      	beq.n	8014814 <USBD_CDC_ReceivePacket+0x24>
      USBD_LL_PrepareReceive(pdev,
 80147fe:	2281      	movs	r2, #129	; 0x81
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014800:	7c04      	ldrb	r4, [r0, #16]
      USBD_LL_PrepareReceive(pdev,
 8014802:	0092      	lsls	r2, r2, #2
 8014804:	589a      	ldr	r2, [r3, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014806:	2c00      	cmp	r4, #0
 8014808:	d106      	bne.n	8014818 <USBD_CDC_ReceivePacket+0x28>
      USBD_LL_PrepareReceive(pdev,
 801480a:	2380      	movs	r3, #128	; 0x80
 801480c:	2101      	movs	r1, #1
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	f002 ffa3 	bl	801775a <USBD_LL_PrepareReceive>
  }
}
 8014814:	0020      	movs	r0, r4
 8014816:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8014818:	2340      	movs	r3, #64	; 0x40
 801481a:	2101      	movs	r1, #1
 801481c:	f002 ff9d 	bl	801775a <USBD_LL_PrepareReceive>
    return USBD_OK;
 8014820:	2400      	movs	r4, #0
 8014822:	e7f7      	b.n	8014814 <USBD_CDC_ReceivePacket+0x24>

08014824 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014824:	2302      	movs	r3, #2
{
 8014826:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8014828:	2800      	cmp	r0, #0
 801482a:	d013      	beq.n	8014854 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801482c:	23ad      	movs	r3, #173	; 0xad
 801482e:	009b      	lsls	r3, r3, #2
 8014830:	58c4      	ldr	r4, [r0, r3]
 8014832:	2c00      	cmp	r4, #0
 8014834:	d001      	beq.n	801483a <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8014836:	2400      	movs	r4, #0
 8014838:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801483a:	2900      	cmp	r1, #0
 801483c:	d002      	beq.n	8014844 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 801483e:	23ac      	movs	r3, #172	; 0xac
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014844:	23a7      	movs	r3, #167	; 0xa7
 8014846:	2101      	movs	r1, #1
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 801484c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801484e:	f002 feed 	bl	801762c <USBD_LL_Init>

  return USBD_OK;
 8014852:	2300      	movs	r3, #0
}
 8014854:	0018      	movs	r0, r3
 8014856:	bd10      	pop	{r4, pc}

08014858 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014858:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801485a:	2002      	movs	r0, #2
  if (pclass != NULL)
 801485c:	2900      	cmp	r1, #0
 801485e:	d003      	beq.n	8014868 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 8014860:	22ad      	movs	r2, #173	; 0xad
    status = USBD_OK;
 8014862:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8014864:	0092      	lsls	r2, r2, #2
 8014866:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 8014868:	4770      	bx	lr

0801486a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801486a:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801486c:	f002 ff1e 	bl	80176ac <USBD_LL_Start>

  return USBD_OK;
}
 8014870:	2000      	movs	r0, #0
 8014872:	bd10      	pop	{r4, pc}

08014874 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8014874:	23ad      	movs	r3, #173	; 0xad
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	58c3      	ldr	r3, [r0, r3]
{
 801487a:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 801487c:	2b00      	cmp	r3, #0
 801487e:	d101      	bne.n	8014884 <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014880:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8014882:	bd10      	pop	{r4, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	4798      	blx	r3
 8014888:	2800      	cmp	r0, #0
 801488a:	d0fa      	beq.n	8014882 <USBD_SetClassConfig+0xe>
 801488c:	e7f8      	b.n	8014880 <USBD_SetClassConfig+0xc>

0801488e <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801488e:	23ad      	movs	r3, #173	; 0xad
{
 8014890:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	58c3      	ldr	r3, [r0, r3]
 8014896:	685b      	ldr	r3, [r3, #4]
 8014898:	4798      	blx	r3

  return USBD_OK;
}
 801489a:	2000      	movs	r0, #0
 801489c:	bd10      	pop	{r4, pc}
	...

080148a0 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80148a0:	23aa      	movs	r3, #170	; 0xaa
 80148a2:	009b      	lsls	r3, r3, #2
{
 80148a4:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80148a6:	18c5      	adds	r5, r0, r3
{
 80148a8:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80148aa:	0028      	movs	r0, r5
 80148ac:	f000 fb28 	bl	8014f00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80148b0:	23a5      	movs	r3, #165	; 0xa5
 80148b2:	2201      	movs	r2, #1
 80148b4:	009b      	lsls	r3, r3, #2
 80148b6:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80148b8:	4b11      	ldr	r3, [pc, #68]	; (8014900 <USBD_LL_SetupStage+0x60>)
 80148ba:	5ae2      	ldrh	r2, [r4, r3]
 80148bc:	3b16      	subs	r3, #22
 80148be:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80148c0:	3310      	adds	r3, #16
 80148c2:	5ce1      	ldrb	r1, [r4, r3]
 80148c4:	231f      	movs	r3, #31
 80148c6:	400b      	ands	r3, r1
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d009      	beq.n	80148e0 <USBD_LL_SetupStage+0x40>
 80148cc:	2b02      	cmp	r3, #2
 80148ce:	d00c      	beq.n	80148ea <USBD_LL_SetupStage+0x4a>
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d10f      	bne.n	80148f4 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80148d4:	0029      	movs	r1, r5
 80148d6:	0020      	movs	r0, r4
 80148d8:	f000 f91e 	bl	8014b18 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80148dc:	2000      	movs	r0, #0
 80148de:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80148e0:	0029      	movs	r1, r5
 80148e2:	0020      	movs	r0, r4
 80148e4:	f000 fa4e 	bl	8014d84 <USBD_StdItfReq>
      break;
 80148e8:	e7f8      	b.n	80148dc <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 80148ea:	0029      	movs	r1, r5
 80148ec:	0020      	movs	r0, r4
 80148ee:	f000 fa71 	bl	8014dd4 <USBD_StdEPReq>
      break;
 80148f2:	e7f3      	b.n	80148dc <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80148f4:	237f      	movs	r3, #127	; 0x7f
 80148f6:	0020      	movs	r0, r4
 80148f8:	4399      	bics	r1, r3
 80148fa:	f002 fef5 	bl	80176e8 <USBD_LL_StallEP>
      break;
 80148fe:	e7ed      	b.n	80148dc <USBD_LL_SetupStage+0x3c>
 8014900:	000002ae 	.word	0x000002ae

08014904 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014904:	b570      	push	{r4, r5, r6, lr}
 8014906:	000d      	movs	r5, r1
 8014908:	0004      	movs	r4, r0
 801490a:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801490c:	2d00      	cmp	r5, #0
 801490e:	d12e      	bne.n	801496e <USBD_LL_DataOutStage+0x6a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014910:	23a5      	movs	r3, #165	; 0xa5
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	58c2      	ldr	r2, [r0, r3]
 8014916:	2a03      	cmp	r2, #3
 8014918:	d122      	bne.n	8014960 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 801491a:	0002      	movs	r2, r0
 801491c:	3255      	adds	r2, #85	; 0x55
 801491e:	32ff      	adds	r2, #255	; 0xff
 8014920:	68d3      	ldr	r3, [r2, #12]
 8014922:	6910      	ldr	r0, [r2, #16]
 8014924:	4283      	cmp	r3, r0
 8014926:	d90a      	bls.n	801493e <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8014928:	1a1b      	subs	r3, r3, r0
 801492a:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 801492c:	b282      	uxth	r2, r0
 801492e:	4298      	cmp	r0, r3
 8014930:	d900      	bls.n	8014934 <USBD_LL_DataOutStage+0x30>
 8014932:	b29a      	uxth	r2, r3
 8014934:	0020      	movs	r0, r4
 8014936:	f000 fb45 	bl	8014fc4 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 801493a:	0028      	movs	r0, r5
 801493c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801493e:	23ad      	movs	r3, #173	; 0xad
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	58e3      	ldr	r3, [r4, r3]
 8014944:	691b      	ldr	r3, [r3, #16]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d006      	beq.n	8014958 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801494a:	22a7      	movs	r2, #167	; 0xa7
 801494c:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801494e:	5ca2      	ldrb	r2, [r4, r2]
 8014950:	2a03      	cmp	r2, #3
 8014952:	d101      	bne.n	8014958 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8014954:	0020      	movs	r0, r4
 8014956:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8014958:	0020      	movs	r0, r4
 801495a:	f000 fb3b 	bl	8014fd4 <USBD_CtlSendStatus>
 801495e:	e7ec      	b.n	801493a <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8014960:	2a05      	cmp	r2, #5
 8014962:	d1ea      	bne.n	801493a <USBD_LL_DataOutStage+0x36>
        USBD_LL_StallEP(pdev, 0U);
 8014964:	0029      	movs	r1, r5
        pdev->ep0_state = USBD_EP0_IDLE;
 8014966:	50c5      	str	r5, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8014968:	f002 febe 	bl	80176e8 <USBD_LL_StallEP>
 801496c:	e7e5      	b.n	801493a <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 801496e:	23ad      	movs	r3, #173	; 0xad
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	58c3      	ldr	r3, [r0, r3]
 8014974:	699b      	ldr	r3, [r3, #24]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d008      	beq.n	801498c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801497a:	22a7      	movs	r2, #167	; 0xa7
 801497c:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 801497e:	5c82      	ldrb	r2, [r0, r2]
 8014980:	2a03      	cmp	r2, #3
 8014982:	d103      	bne.n	801498c <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8014984:	0029      	movs	r1, r5
 8014986:	4798      	blx	r3
  return USBD_OK;
 8014988:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 801498a:	e7d6      	b.n	801493a <USBD_LL_DataOutStage+0x36>
    return USBD_FAIL;
 801498c:	2502      	movs	r5, #2
 801498e:	e7d4      	b.n	801493a <USBD_LL_DataOutStage+0x36>

08014990 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014992:	000d      	movs	r5, r1
 8014994:	0004      	movs	r4, r0
 8014996:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8014998:	2d00      	cmp	r5, #0
 801499a:	d14d      	bne.n	8014a38 <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801499c:	23a5      	movs	r3, #165	; 0xa5
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	58c3      	ldr	r3, [r0, r3]
 80149a2:	2b02      	cmp	r3, #2
 80149a4:	d141      	bne.n	8014a2a <USBD_LL_DataInStage+0x9a>
    {
      if (pep->rem_length > pep->maxpacket)
 80149a6:	6a03      	ldr	r3, [r0, #32]
 80149a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80149aa:	42b3      	cmp	r3, r6
 80149ac:	d913      	bls.n	80149d6 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80149ae:	1b9b      	subs	r3, r3, r6
 80149b0:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80149b2:	b29a      	uxth	r2, r3
 80149b4:	f000 faee 	bl	8014f94 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80149b8:	002b      	movs	r3, r5
 80149ba:	002a      	movs	r2, r5
 80149bc:	0029      	movs	r1, r5
 80149be:	0020      	movs	r0, r4
 80149c0:	f002 fecb 	bl	801775a <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80149c4:	23a8      	movs	r3, #168	; 0xa8
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	5ce2      	ldrb	r2, [r4, r3]
 80149ca:	2a01      	cmp	r2, #1
 80149cc:	d101      	bne.n	80149d2 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80149ce:	2200      	movs	r2, #0
 80149d0:	54e2      	strb	r2, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80149d2:	0028      	movs	r0, r5
 80149d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80149d6:	69c7      	ldr	r7, [r0, #28]
 80149d8:	0031      	movs	r1, r6
 80149da:	0038      	movs	r0, r7
 80149dc:	f7f3 f8ca 	bl	8007b74 <__aeabi_uidivmod>
 80149e0:	2900      	cmp	r1, #0
 80149e2:	d10d      	bne.n	8014a00 <USBD_LL_DataInStage+0x70>
 80149e4:	42be      	cmp	r6, r7
 80149e6:	d80b      	bhi.n	8014a00 <USBD_LL_DataInStage+0x70>
            (pep->total_length < pdev->ep0_data_len))
 80149e8:	26a6      	movs	r6, #166	; 0xa6
 80149ea:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 80149ec:	59a3      	ldr	r3, [r4, r6]
 80149ee:	429f      	cmp	r7, r3
 80149f0:	d206      	bcs.n	8014a00 <USBD_LL_DataInStage+0x70>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80149f2:	002a      	movs	r2, r5
 80149f4:	0029      	movs	r1, r5
 80149f6:	0020      	movs	r0, r4
 80149f8:	f000 facc 	bl	8014f94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80149fc:	51a5      	str	r5, [r4, r6]
 80149fe:	e7db      	b.n	80149b8 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014a00:	23ad      	movs	r3, #173	; 0xad
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	58e3      	ldr	r3, [r4, r3]
 8014a06:	68db      	ldr	r3, [r3, #12]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d006      	beq.n	8014a1a <USBD_LL_DataInStage+0x8a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014a0c:	22a7      	movs	r2, #167	; 0xa7
 8014a0e:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014a10:	5ca2      	ldrb	r2, [r4, r2]
 8014a12:	2a03      	cmp	r2, #3
 8014a14:	d101      	bne.n	8014a1a <USBD_LL_DataInStage+0x8a>
            pdev->pClass->EP0_TxSent(pdev);
 8014a16:	0020      	movs	r0, r4
 8014a18:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8014a1a:	2180      	movs	r1, #128	; 0x80
 8014a1c:	0020      	movs	r0, r4
 8014a1e:	f002 fe63 	bl	80176e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8014a22:	0020      	movs	r0, r4
 8014a24:	f000 fae2 	bl	8014fec <USBD_CtlReceiveStatus>
 8014a28:	e7cc      	b.n	80149c4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8014a2a:	2204      	movs	r2, #4
 8014a2c:	4393      	bics	r3, r2
 8014a2e:	d1c9      	bne.n	80149c4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8014a30:	2180      	movs	r1, #128	; 0x80
 8014a32:	f002 fe59 	bl	80176e8 <USBD_LL_StallEP>
 8014a36:	e7c5      	b.n	80149c4 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8014a38:	23ad      	movs	r3, #173	; 0xad
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	58c3      	ldr	r3, [r0, r3]
 8014a3e:	695b      	ldr	r3, [r3, #20]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d008      	beq.n	8014a56 <USBD_LL_DataInStage+0xc6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014a44:	22a7      	movs	r2, #167	; 0xa7
 8014a46:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8014a48:	5c82      	ldrb	r2, [r0, r2]
 8014a4a:	2a03      	cmp	r2, #3
 8014a4c:	d103      	bne.n	8014a56 <USBD_LL_DataInStage+0xc6>
    pdev->pClass->DataIn(pdev, epnum);
 8014a4e:	0029      	movs	r1, r5
 8014a50:	4798      	blx	r3
  return USBD_OK;
 8014a52:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8014a54:	e7bd      	b.n	80149d2 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8014a56:	2502      	movs	r5, #2
 8014a58:	e7bb      	b.n	80149d2 <USBD_LL_DataInStage+0x42>

08014a5a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014a5a:	2200      	movs	r2, #0
{
 8014a5c:	b570      	push	{r4, r5, r6, lr}
 8014a5e:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014a60:	0011      	movs	r1, r2
 8014a62:	2340      	movs	r3, #64	; 0x40
 8014a64:	f002 fe2b 	bl	80176be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014a68:	0023      	movs	r3, r4
 8014a6a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014a6c:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014a6e:	33fc      	adds	r3, #252	; 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014a70:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014a72:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014a74:	669e      	str	r6, [r3, #104]	; 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014a76:	2200      	movs	r2, #0
 8014a78:	0033      	movs	r3, r6
 8014a7a:	0020      	movs	r0, r4
 8014a7c:	f002 fe1f 	bl	80176be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a80:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8014a82:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a84:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014a86:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014a88:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a8a:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8014a8c:	3b08      	subs	r3, #8
 8014a8e:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8014a90:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8014a92:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8014a94:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8014a96:	3314      	adds	r3, #20
 8014a98:	58e3      	ldr	r3, [r4, r3]
 8014a9a:	428b      	cmp	r3, r1
 8014a9c:	d005      	beq.n	8014aaa <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014a9e:	23ad      	movs	r3, #173	; 0xad
 8014aa0:	009b      	lsls	r3, r3, #2
 8014aa2:	58e3      	ldr	r3, [r4, r3]
 8014aa4:	0020      	movs	r0, r4
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	4798      	blx	r3
  }

  return USBD_OK;
}
 8014aaa:	2000      	movs	r0, #0
 8014aac:	bd70      	pop	{r4, r5, r6, pc}

08014aae <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8014aae:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	4770      	bx	lr

08014ab4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8014ab4:	23a7      	movs	r3, #167	; 0xa7
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	5cc1      	ldrb	r1, [r0, r3]
 8014aba:	4a03      	ldr	r2, [pc, #12]	; (8014ac8 <USBD_LL_Suspend+0x14>)
 8014abc:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8014abe:	2204      	movs	r2, #4
 8014ac0:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	4770      	bx	lr
 8014ac6:	46c0      	nop			; (mov r8, r8)
 8014ac8:	0000029d 	.word	0x0000029d

08014acc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014acc:	23a7      	movs	r3, #167	; 0xa7
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	5cc2      	ldrb	r2, [r0, r3]
 8014ad2:	2a04      	cmp	r2, #4
 8014ad4:	d102      	bne.n	8014adc <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014ad6:	4a02      	ldr	r2, [pc, #8]	; (8014ae0 <USBD_LL_Resume+0x14>)
 8014ad8:	5c82      	ldrb	r2, [r0, r2]
 8014ada:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8014adc:	2000      	movs	r0, #0
 8014ade:	4770      	bx	lr
 8014ae0:	0000029d 	.word	0x0000029d

08014ae4 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ae4:	23a7      	movs	r3, #167	; 0xa7
{
 8014ae6:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ae8:	009b      	lsls	r3, r3, #2
 8014aea:	5cc3      	ldrb	r3, [r0, r3]
 8014aec:	2b03      	cmp	r3, #3
 8014aee:	d106      	bne.n	8014afe <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8014af0:	23ad      	movs	r3, #173	; 0xad
 8014af2:	009b      	lsls	r3, r3, #2
 8014af4:	58c3      	ldr	r3, [r0, r3]
 8014af6:	69db      	ldr	r3, [r3, #28]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d000      	beq.n	8014afe <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8014afc:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8014afe:	2000      	movs	r0, #0
 8014b00:	bd10      	pop	{r4, pc}

08014b02 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8014b02:	b510      	push	{r4, lr}
 8014b04:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8014b06:	2180      	movs	r1, #128	; 0x80
 8014b08:	f002 fdee 	bl	80176e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	0020      	movs	r0, r4
 8014b10:	f002 fdea 	bl	80176e8 <USBD_LL_StallEP>
}
 8014b14:	bd10      	pop	{r4, pc}
	...

08014b18 <USBD_StdDevReq>:
{
 8014b18:	2260      	movs	r2, #96	; 0x60
 8014b1a:	780b      	ldrb	r3, [r1, #0]
 8014b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b1e:	4013      	ands	r3, r2
 8014b20:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b22:	0019      	movs	r1, r3
 8014b24:	1892      	adds	r2, r2, r2
 8014b26:	3920      	subs	r1, #32
{
 8014b28:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b2a:	4211      	tst	r1, r2
 8014b2c:	d012      	beq.n	8014b54 <USBD_StdDevReq+0x3c>
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d000      	beq.n	8014b34 <USBD_StdDevReq+0x1c>
 8014b32:	e096      	b.n	8014c62 <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 8014b34:	7868      	ldrb	r0, [r5, #1]
 8014b36:	2809      	cmp	r0, #9
 8014b38:	d900      	bls.n	8014b3c <USBD_StdDevReq+0x24>
 8014b3a:	e092      	b.n	8014c62 <USBD_StdDevReq+0x14a>
 8014b3c:	f7f2 ff8a 	bl	8007a54 <__gnu_thumb1_case_uhi>
 8014b40:	010e00f0 	.word	0x010e00f0
 8014b44:	01060091 	.word	0x01060091
 8014b48:	00830091 	.word	0x00830091
 8014b4c:	00910012 	.word	0x00910012
 8014b50:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 8014b54:	23ad      	movs	r3, #173	; 0xad
 8014b56:	009b      	lsls	r3, r3, #2
 8014b58:	58c3      	ldr	r3, [r0, r3]
 8014b5a:	0029      	movs	r1, r5
 8014b5c:	689b      	ldr	r3, [r3, #8]
 8014b5e:	4798      	blx	r3
}
 8014b60:	2000      	movs	r0, #0
 8014b62:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 8014b64:	2300      	movs	r3, #0
 8014b66:	466a      	mov	r2, sp
 8014b68:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8014b6a:	886b      	ldrh	r3, [r5, #2]
 8014b6c:	0a18      	lsrs	r0, r3, #8
 8014b6e:	3801      	subs	r0, #1
 8014b70:	2806      	cmp	r0, #6
 8014b72:	d876      	bhi.n	8014c62 <USBD_StdDevReq+0x14a>
 8014b74:	f7f2 ff5a 	bl	8007a2c <__gnu_thumb1_case_uqi>
 8014b78:	75261704 	.word	0x75261704
 8014b7c:	4075      	.short	0x4075
 8014b7e:	4b          	.byte	0x4b
 8014b7f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014b80:	23ac      	movs	r3, #172	; 0xac
 8014b82:	009b      	lsls	r3, r3, #2
 8014b84:	58e3      	ldr	r3, [r4, r3]
 8014b86:	7c20      	ldrb	r0, [r4, #16]
 8014b88:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014b8a:	466a      	mov	r2, sp
 8014b8c:	1d91      	adds	r1, r2, #6
 8014b8e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8014b90:	466b      	mov	r3, sp
 8014b92:	88d9      	ldrh	r1, [r3, #6]
 8014b94:	2900      	cmp	r1, #0
 8014b96:	d051      	beq.n	8014c3c <USBD_StdDevReq+0x124>
 8014b98:	88ea      	ldrh	r2, [r5, #6]
 8014b9a:	2a00      	cmp	r2, #0
 8014b9c:	d143      	bne.n	8014c26 <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 8014b9e:	0020      	movs	r0, r4
 8014ba0:	f000 fa18 	bl	8014fd4 <USBD_CtlSendStatus>
 8014ba4:	e7dc      	b.n	8014b60 <USBD_StdDevReq+0x48>
      pdev->pClass->Setup(pdev, req);
 8014ba6:	23ad      	movs	r3, #173	; 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ba8:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bae:	2a00      	cmp	r2, #0
 8014bb0:	d106      	bne.n	8014bc0 <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014bb4:	466a      	mov	r2, sp
 8014bb6:	1d90      	adds	r0, r2, #6
 8014bb8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014bba:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014bbc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014bbe:	e7e7      	b.n	8014b90 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc2:	e7f7      	b.n	8014bb4 <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8014bc4:	b2d8      	uxtb	r0, r3
 8014bc6:	2805      	cmp	r0, #5
 8014bc8:	d84b      	bhi.n	8014c62 <USBD_StdDevReq+0x14a>
 8014bca:	23ac      	movs	r3, #172	; 0xac
 8014bcc:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014bce:	58e3      	ldr	r3, [r4, r3]
 8014bd0:	f7f2 ff2c 	bl	8007a2c <__gnu_thumb1_case_uqi>
 8014bd4:	0c0a0803 	.word	0x0c0a0803
 8014bd8:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d040      	beq.n	8014c62 <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014be0:	7c20      	ldrb	r0, [r4, #16]
 8014be2:	e7d2      	b.n	8014b8a <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014be4:	689b      	ldr	r3, [r3, #8]
 8014be6:	e7f9      	b.n	8014bdc <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	e7f7      	b.n	8014bdc <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014bec:	691b      	ldr	r3, [r3, #16]
 8014bee:	e7f5      	b.n	8014bdc <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014bf0:	695b      	ldr	r3, [r3, #20]
 8014bf2:	e7f3      	b.n	8014bdc <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014bf4:	699b      	ldr	r3, [r3, #24]
 8014bf6:	e7f1      	b.n	8014bdc <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bf8:	7c23      	ldrb	r3, [r4, #16]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d131      	bne.n	8014c62 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014bfe:	23ad      	movs	r3, #173	; 0xad
 8014c00:	466a      	mov	r2, sp
 8014c02:	009b      	lsls	r3, r3, #2
 8014c04:	58e3      	ldr	r3, [r4, r3]
 8014c06:	1d90      	adds	r0, r2, #6
 8014c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c0a:	4798      	blx	r3
  if (err != 0U)
 8014c0c:	e7c0      	b.n	8014b90 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c0e:	7c23      	ldrb	r3, [r4, #16]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d126      	bne.n	8014c62 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014c14:	23ad      	movs	r3, #173	; 0xad
 8014c16:	466a      	mov	r2, sp
 8014c18:	009b      	lsls	r3, r3, #2
 8014c1a:	58e3      	ldr	r3, [r4, r3]
 8014c1c:	1d90      	adds	r0, r2, #6
 8014c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c20:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014c22:	2307      	movs	r3, #7
 8014c24:	e7ca      	b.n	8014bbc <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 8014c26:	1c0b      	adds	r3, r1, #0
 8014c28:	4291      	cmp	r1, r2
 8014c2a:	d900      	bls.n	8014c2e <USBD_StdDevReq+0x116>
 8014c2c:	1c13      	adds	r3, r2, #0
 8014c2e:	4669      	mov	r1, sp
 8014c30:	b29a      	uxth	r2, r3
 8014c32:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014c34:	0001      	movs	r1, r0
 8014c36:	0020      	movs	r0, r4
 8014c38:	f000 f99e 	bl	8014f78 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8014c3c:	88eb      	ldrh	r3, [r5, #6]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d000      	beq.n	8014c44 <USBD_StdDevReq+0x12c>
 8014c42:	e78d      	b.n	8014b60 <USBD_StdDevReq+0x48>
 8014c44:	e7ab      	b.n	8014b9e <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014c46:	88ab      	ldrh	r3, [r5, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d10a      	bne.n	8014c62 <USBD_StdDevReq+0x14a>
 8014c4c:	88eb      	ldrh	r3, [r5, #6]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d107      	bne.n	8014c62 <USBD_StdDevReq+0x14a>
 8014c52:	886e      	ldrh	r6, [r5, #2]
 8014c54:	2e7f      	cmp	r6, #127	; 0x7f
 8014c56:	d804      	bhi.n	8014c62 <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c58:	25a7      	movs	r5, #167	; 0xa7
 8014c5a:	00ad      	lsls	r5, r5, #2
 8014c5c:	5d63      	ldrb	r3, [r4, r5]
 8014c5e:	2b03      	cmp	r3, #3
 8014c60:	d103      	bne.n	8014c6a <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 8014c62:	0020      	movs	r0, r4
 8014c64:	f7ff ff4d 	bl	8014b02 <USBD_CtlError.constprop.0>
        break;
 8014c68:	e77a      	b.n	8014b60 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8014c6a:	4b44      	ldr	r3, [pc, #272]	; (8014d7c <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014c6c:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8014c6e:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014c70:	0020      	movs	r0, r4
 8014c72:	f002 fd60 	bl	8017736 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014c76:	0020      	movs	r0, r4
 8014c78:	f000 f9ac 	bl	8014fd4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c7c:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8014c7e:	2e00      	cmp	r6, #0
 8014c80:	d100      	bne.n	8014c84 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014c82:	2301      	movs	r3, #1
 8014c84:	5563      	strb	r3, [r4, r5]
 8014c86:	e76b      	b.n	8014b60 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8014c88:	78a9      	ldrb	r1, [r5, #2]
 8014c8a:	4d3d      	ldr	r5, [pc, #244]	; (8014d80 <USBD_StdDevReq+0x268>)
 8014c8c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014c8e:	2901      	cmp	r1, #1
 8014c90:	d8e7      	bhi.n	8014c62 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8014c92:	23a7      	movs	r3, #167	; 0xa7
 8014c94:	009b      	lsls	r3, r3, #2
 8014c96:	5ce2      	ldrb	r2, [r4, r3]
 8014c98:	2a02      	cmp	r2, #2
 8014c9a:	d009      	beq.n	8014cb0 <USBD_StdDevReq+0x198>
 8014c9c:	2a03      	cmp	r2, #3
 8014c9e:	d015      	beq.n	8014ccc <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 8014ca0:	0020      	movs	r0, r4
 8014ca2:	f7ff ff2e 	bl	8014b02 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014ca6:	0020      	movs	r0, r4
 8014ca8:	7829      	ldrb	r1, [r5, #0]
 8014caa:	f7ff fdf0 	bl	801488e <USBD_ClrClassConfig>
        break;
 8014cae:	e757      	b.n	8014b60 <USBD_StdDevReq+0x48>
        if (cfgidx)
 8014cb0:	2900      	cmp	r1, #0
 8014cb2:	d100      	bne.n	8014cb6 <USBD_StdDevReq+0x19e>
 8014cb4:	e773      	b.n	8014b9e <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 8014cb6:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014cb8:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8014cba:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014cbc:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014cbe:	0020      	movs	r0, r4
 8014cc0:	f7ff fdd8 	bl	8014874 <USBD_SetClassConfig>
 8014cc4:	2802      	cmp	r0, #2
 8014cc6:	d000      	beq.n	8014cca <USBD_StdDevReq+0x1b2>
 8014cc8:	e769      	b.n	8014b9e <USBD_StdDevReq+0x86>
 8014cca:	e7ca      	b.n	8014c62 <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8014ccc:	2900      	cmp	r1, #0
 8014cce:	d106      	bne.n	8014cde <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014cd0:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8014cd2:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014cd4:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8014cd6:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014cd8:	f7ff fdd9 	bl	801488e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014cdc:	e75f      	b.n	8014b9e <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 8014cde:	6861      	ldr	r1, [r4, #4]
 8014ce0:	2901      	cmp	r1, #1
 8014ce2:	d100      	bne.n	8014ce6 <USBD_StdDevReq+0x1ce>
 8014ce4:	e75b      	b.n	8014b9e <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ce6:	b2c9      	uxtb	r1, r1
 8014ce8:	0020      	movs	r0, r4
 8014cea:	f7ff fdd0 	bl	801488e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014cee:	7829      	ldrb	r1, [r5, #0]
 8014cf0:	6061      	str	r1, [r4, #4]
 8014cf2:	e7e4      	b.n	8014cbe <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 8014cf4:	88ea      	ldrh	r2, [r5, #6]
 8014cf6:	2a01      	cmp	r2, #1
 8014cf8:	d1b3      	bne.n	8014c62 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8014cfa:	23a7      	movs	r3, #167	; 0xa7
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	5ce3      	ldrb	r3, [r4, r3]
 8014d00:	2b02      	cmp	r3, #2
 8014d02:	d806      	bhi.n	8014d12 <USBD_StdDevReq+0x1fa>
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d0ac      	beq.n	8014c62 <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 8014d08:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014d0a:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8014d0c:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014d0e:	3108      	adds	r1, #8
 8014d10:	e002      	b.n	8014d18 <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014d12:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8014d14:	2b03      	cmp	r3, #3
 8014d16:	d1a4      	bne.n	8014c62 <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014d18:	0020      	movs	r0, r4
 8014d1a:	f000 f92d 	bl	8014f78 <USBD_CtlSendData>
      break;
 8014d1e:	e71f      	b.n	8014b60 <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8014d20:	23a7      	movs	r3, #167	; 0xa7
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	5ce3      	ldrb	r3, [r4, r3]
 8014d26:	3b01      	subs	r3, #1
 8014d28:	2b02      	cmp	r3, #2
 8014d2a:	d89a      	bhi.n	8014c62 <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 8014d2c:	88eb      	ldrh	r3, [r5, #6]
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	d197      	bne.n	8014c62 <USBD_StdDevReq+0x14a>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014d32:	3b01      	subs	r3, #1
 8014d34:	60e3      	str	r3, [r4, #12]
      if (pdev->dev_remote_wakeup)
 8014d36:	23a9      	movs	r3, #169	; 0xa9
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	58e3      	ldr	r3, [r4, r3]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d001      	beq.n	8014d44 <USBD_StdDevReq+0x22c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014d40:	2303      	movs	r3, #3
 8014d42:	60e3      	str	r3, [r4, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014d44:	0021      	movs	r1, r4
 8014d46:	2202      	movs	r2, #2
 8014d48:	310c      	adds	r1, #12
 8014d4a:	e7e5      	b.n	8014d18 <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014d4c:	886b      	ldrh	r3, [r5, #2]
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d000      	beq.n	8014d54 <USBD_StdDevReq+0x23c>
 8014d52:	e705      	b.n	8014b60 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8014d54:	22a9      	movs	r2, #169	; 0xa9
 8014d56:	0092      	lsls	r2, r2, #2
 8014d58:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8014d5a:	e720      	b.n	8014b9e <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 8014d5c:	23a7      	movs	r3, #167	; 0xa7
 8014d5e:	009b      	lsls	r3, r3, #2
 8014d60:	5ce3      	ldrb	r3, [r4, r3]
 8014d62:	3b01      	subs	r3, #1
 8014d64:	2b02      	cmp	r3, #2
 8014d66:	d900      	bls.n	8014d6a <USBD_StdDevReq+0x252>
 8014d68:	e77b      	b.n	8014c62 <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014d6a:	886b      	ldrh	r3, [r5, #2]
 8014d6c:	2b01      	cmp	r3, #1
 8014d6e:	d000      	beq.n	8014d72 <USBD_StdDevReq+0x25a>
 8014d70:	e6f6      	b.n	8014b60 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8014d72:	23a9      	movs	r3, #169	; 0xa9
 8014d74:	2200      	movs	r2, #0
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	50e2      	str	r2, [r4, r3]
 8014d7a:	e710      	b.n	8014b9e <USBD_StdDevReq+0x86>
 8014d7c:	0000029e 	.word	0x0000029e
 8014d80:	2000069d 	.word	0x2000069d

08014d84 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d84:	2360      	movs	r3, #96	; 0x60
 8014d86:	780a      	ldrb	r2, [r1, #0]
{
 8014d88:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d8a:	4013      	ands	r3, r2
{
 8014d8c:	0004      	movs	r4, r0
 8014d8e:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d90:	2b40      	cmp	r3, #64	; 0x40
 8014d92:	d001      	beq.n	8014d98 <USBD_StdItfReq+0x14>
 8014d94:	0653      	lsls	r3, r2, #25
 8014d96:	d419      	bmi.n	8014dcc <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8014d98:	23a7      	movs	r3, #167	; 0xa7
 8014d9a:	009b      	lsls	r3, r3, #2
 8014d9c:	5ce3      	ldrb	r3, [r4, r3]
 8014d9e:	3b01      	subs	r3, #1
 8014da0:	2b02      	cmp	r3, #2
 8014da2:	d813      	bhi.n	8014dcc <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014da4:	792b      	ldrb	r3, [r5, #4]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d810      	bhi.n	8014dcc <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014daa:	23ad      	movs	r3, #173	; 0xad
 8014dac:	009b      	lsls	r3, r3, #2
 8014dae:	58e3      	ldr	r3, [r4, r3]
 8014db0:	0029      	movs	r1, r5
 8014db2:	689b      	ldr	r3, [r3, #8]
 8014db4:	0020      	movs	r0, r4
 8014db6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014db8:	88eb      	ldrh	r3, [r5, #6]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d104      	bne.n	8014dc8 <USBD_StdItfReq+0x44>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d102      	bne.n	8014dc8 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8014dc2:	0020      	movs	r0, r4
 8014dc4:	f000 f906 	bl	8014fd4 <USBD_CtlSendStatus>
}
 8014dc8:	2000      	movs	r0, #0
 8014dca:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8014dcc:	0020      	movs	r0, r4
 8014dce:	f7ff fe98 	bl	8014b02 <USBD_CtlError.constprop.0>
          break;
 8014dd2:	e7f9      	b.n	8014dc8 <USBD_StdItfReq+0x44>

08014dd4 <USBD_StdEPReq>:
{
 8014dd4:	780a      	ldrb	r2, [r1, #0]
 8014dd6:	000b      	movs	r3, r1
 8014dd8:	2160      	movs	r1, #96	; 0x60
 8014dda:	400a      	ands	r2, r1
 8014ddc:	b570      	push	{r4, r5, r6, lr}
 8014dde:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014de0:	0010      	movs	r0, r2
 8014de2:	1849      	adds	r1, r1, r1
 8014de4:	3820      	subs	r0, #32
 8014de6:	4208      	tst	r0, r1
 8014de8:	d029      	beq.n	8014e3e <USBD_StdEPReq+0x6a>
 8014dea:	2a00      	cmp	r2, #0
 8014dec:	d137      	bne.n	8014e5e <USBD_StdEPReq+0x8a>
  ep_addr  = LOBYTE(req->wIndex);
 8014dee:	8898      	ldrh	r0, [r3, #4]
      switch (req->bRequest)
 8014df0:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8014df2:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8014df4:	2a01      	cmp	r2, #1
 8014df6:	d045      	beq.n	8014e84 <USBD_StdEPReq+0xb0>
 8014df8:	2a03      	cmp	r2, #3
 8014dfa:	d029      	beq.n	8014e50 <USBD_StdEPReq+0x7c>
 8014dfc:	2a00      	cmp	r2, #0
 8014dfe:	d12e      	bne.n	8014e5e <USBD_StdEPReq+0x8a>
          switch (pdev->dev_state)
 8014e00:	23a7      	movs	r3, #167	; 0xa7
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	5ce3      	ldrb	r3, [r4, r3]
 8014e06:	2b02      	cmp	r3, #2
 8014e08:	d056      	beq.n	8014eb8 <USBD_StdEPReq+0xe4>
 8014e0a:	2b03      	cmp	r3, #3
 8014e0c:	d127      	bne.n	8014e5e <USBD_StdEPReq+0x8a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014e0e:	220f      	movs	r2, #15
 8014e10:	2314      	movs	r3, #20
 8014e12:	400a      	ands	r2, r1
 8014e14:	435a      	muls	r2, r3
 8014e16:	18a2      	adds	r2, r4, r2
              if ((ep_addr & 0x80U) == 0x80U)
 8014e18:	0600      	lsls	r0, r0, #24
 8014e1a:	d55d      	bpl.n	8014ed8 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014e1c:	6992      	ldr	r2, [r2, #24]
 8014e1e:	2a00      	cmp	r2, #0
 8014e20:	d01d      	beq.n	8014e5e <USBD_StdEPReq+0x8a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e22:	257f      	movs	r5, #127	; 0x7f
 8014e24:	400d      	ands	r5, r1
 8014e26:	3501      	adds	r5, #1
 8014e28:	435d      	muls	r5, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014e2a:	237f      	movs	r3, #127	; 0x7f
 8014e2c:	000a      	movs	r2, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e2e:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014e30:	401a      	ands	r2, r3
 8014e32:	4219      	tst	r1, r3
 8014e34:	d15a      	bne.n	8014eec <USBD_StdEPReq+0x118>
                pep->status = 0x0000U;
 8014e36:	602a      	str	r2, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014e38:	2202      	movs	r2, #2
 8014e3a:	0029      	movs	r1, r5
 8014e3c:	e048      	b.n	8014ed0 <USBD_StdEPReq+0xfc>
      pdev->pClass->Setup(pdev, req);
 8014e3e:	22ad      	movs	r2, #173	; 0xad
 8014e40:	0092      	lsls	r2, r2, #2
 8014e42:	58a2      	ldr	r2, [r4, r2]
 8014e44:	0019      	movs	r1, r3
 8014e46:	0020      	movs	r0, r4
 8014e48:	6892      	ldr	r2, [r2, #8]
 8014e4a:	4790      	blx	r2
}
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8014e50:	22a7      	movs	r2, #167	; 0xa7
 8014e52:	0092      	lsls	r2, r2, #2
 8014e54:	5ca2      	ldrb	r2, [r4, r2]
 8014e56:	2a02      	cmp	r2, #2
 8014e58:	d024      	beq.n	8014ea4 <USBD_StdEPReq+0xd0>
 8014e5a:	2a03      	cmp	r2, #3
 8014e5c:	d003      	beq.n	8014e66 <USBD_StdEPReq+0x92>
              USBD_CtlError(pdev, req);
 8014e5e:	0020      	movs	r0, r4
 8014e60:	f7ff fe4f 	bl	8014b02 <USBD_CtlError.constprop.0>
              break;
 8014e64:	e7f2      	b.n	8014e4c <USBD_StdEPReq+0x78>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014e66:	885a      	ldrh	r2, [r3, #2]
 8014e68:	2a00      	cmp	r2, #0
 8014e6a:	d107      	bne.n	8014e7c <USBD_StdEPReq+0xa8>
                if ((ep_addr != 0x00U) &&
 8014e6c:	064a      	lsls	r2, r1, #25
 8014e6e:	d005      	beq.n	8014e7c <USBD_StdEPReq+0xa8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014e70:	88db      	ldrh	r3, [r3, #6]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d102      	bne.n	8014e7c <USBD_StdEPReq+0xa8>
                  USBD_LL_StallEP(pdev, ep_addr);
 8014e76:	0020      	movs	r0, r4
 8014e78:	f002 fc36 	bl	80176e8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8014e7c:	0020      	movs	r0, r4
 8014e7e:	f000 f8a9 	bl	8014fd4 <USBD_CtlSendStatus>
              break;
 8014e82:	e7e3      	b.n	8014e4c <USBD_StdEPReq+0x78>
          switch (pdev->dev_state)
 8014e84:	22a7      	movs	r2, #167	; 0xa7
 8014e86:	0092      	lsls	r2, r2, #2
 8014e88:	5ca2      	ldrb	r2, [r4, r2]
 8014e8a:	2a02      	cmp	r2, #2
 8014e8c:	d00a      	beq.n	8014ea4 <USBD_StdEPReq+0xd0>
 8014e8e:	2a03      	cmp	r2, #3
 8014e90:	d1e5      	bne.n	8014e5e <USBD_StdEPReq+0x8a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014e92:	885b      	ldrh	r3, [r3, #2]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d1d9      	bne.n	8014e4c <USBD_StdEPReq+0x78>
                if ((ep_addr & 0x7FU) != 0x00U)
 8014e98:	064b      	lsls	r3, r1, #25
 8014e9a:	d0ef      	beq.n	8014e7c <USBD_StdEPReq+0xa8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014e9c:	0020      	movs	r0, r4
 8014e9e:	f002 fc2c 	bl	80176fa <USBD_LL_ClearStallEP>
 8014ea2:	e7eb      	b.n	8014e7c <USBD_StdEPReq+0xa8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014ea4:	064b      	lsls	r3, r1, #25
 8014ea6:	d0da      	beq.n	8014e5e <USBD_StdEPReq+0x8a>
                USBD_LL_StallEP(pdev, ep_addr);
 8014ea8:	0020      	movs	r0, r4
 8014eaa:	f002 fc1d 	bl	80176e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014eae:	2180      	movs	r1, #128	; 0x80
 8014eb0:	0020      	movs	r0, r4
 8014eb2:	f002 fc19 	bl	80176e8 <USBD_LL_StallEP>
 8014eb6:	e7c9      	b.n	8014e4c <USBD_StdEPReq+0x78>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014eb8:	064b      	lsls	r3, r1, #25
 8014eba:	d1d0      	bne.n	8014e5e <USBD_StdEPReq+0x8a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ebc:	0021      	movs	r1, r4
 8014ebe:	3155      	adds	r1, #85	; 0x55
 8014ec0:	31ff      	adds	r1, #255	; 0xff
 8014ec2:	0603      	lsls	r3, r0, #24
 8014ec4:	d501      	bpl.n	8014eca <USBD_StdEPReq+0xf6>
 8014ec6:	3941      	subs	r1, #65	; 0x41
 8014ec8:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8014eca:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014ecc:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8014ece:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014ed0:	0020      	movs	r0, r4
 8014ed2:	f000 f851 	bl	8014f78 <USBD_CtlSendData>
              break;
 8014ed6:	e7b9      	b.n	8014e4c <USBD_StdEPReq+0x78>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014ed8:	32fc      	adds	r2, #252	; 0xfc
 8014eda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8014edc:	2a00      	cmp	r2, #0
 8014ede:	d0be      	beq.n	8014e5e <USBD_StdEPReq+0x8a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014ee0:	257f      	movs	r5, #127	; 0x7f
 8014ee2:	400d      	ands	r5, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ee4:	435d      	muls	r5, r3
 8014ee6:	3555      	adds	r5, #85	; 0x55
 8014ee8:	35ff      	adds	r5, #255	; 0xff
 8014eea:	e79e      	b.n	8014e2a <USBD_StdEPReq+0x56>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014eec:	0020      	movs	r0, r4
 8014eee:	f002 fc0d 	bl	801770c <USBD_LL_IsStallEP>
 8014ef2:	2800      	cmp	r0, #0
 8014ef4:	d002      	beq.n	8014efc <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	602b      	str	r3, [r5, #0]
 8014efa:	e79d      	b.n	8014e38 <USBD_StdEPReq+0x64>
                pep->status = 0x0000U;
 8014efc:	6028      	str	r0, [r5, #0]
 8014efe:	e79b      	b.n	8014e38 <USBD_StdEPReq+0x64>

08014f00 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8014f00:	780b      	ldrb	r3, [r1, #0]
 8014f02:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014f04:	784b      	ldrb	r3, [r1, #1]
 8014f06:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014f08:	78ca      	ldrb	r2, [r1, #3]
 8014f0a:	788b      	ldrb	r3, [r1, #2]
 8014f0c:	0212      	lsls	r2, r2, #8
 8014f0e:	189b      	adds	r3, r3, r2
 8014f10:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014f12:	794a      	ldrb	r2, [r1, #5]
 8014f14:	790b      	ldrb	r3, [r1, #4]
 8014f16:	0212      	lsls	r2, r2, #8
 8014f18:	189b      	adds	r3, r3, r2
 8014f1a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014f1c:	79ca      	ldrb	r2, [r1, #7]
 8014f1e:	798b      	ldrb	r3, [r1, #6]
 8014f20:	0212      	lsls	r2, r2, #8
 8014f22:	189b      	adds	r3, r3, r2
 8014f24:	80c3      	strh	r3, [r0, #6]
}
 8014f26:	4770      	bx	lr

08014f28 <USBD_CtlError>:
{
 8014f28:	b510      	push	{r4, lr}
 8014f2a:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8014f2c:	2180      	movs	r1, #128	; 0x80
 8014f2e:	f002 fbdb 	bl	80176e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014f32:	2100      	movs	r1, #0
 8014f34:	0020      	movs	r0, r4
 8014f36:	f002 fbd7 	bl	80176e8 <USBD_LL_StallEP>
}
 8014f3a:	bd10      	pop	{r4, pc}

08014f3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014f3c:	b570      	push	{r4, r5, r6, lr}
 8014f3e:	2500      	movs	r5, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8014f40:	1e46      	subs	r6, r0, #1
  if (desc != NULL)
 8014f42:	42a8      	cmp	r0, r5
 8014f44:	d00f      	beq.n	8014f66 <USBD_GetString+0x2a>
  while (*buf != '\0')
 8014f46:	002b      	movs	r3, r5
 8014f48:	3501      	adds	r5, #1
 8014f4a:	5d74      	ldrb	r4, [r6, r5]
 8014f4c:	2c00      	cmp	r4, #0
 8014f4e:	d1fa      	bne.n	8014f46 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	3301      	adds	r3, #1
 8014f54:	005b      	lsls	r3, r3, #1
 8014f56:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014f58:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014f5a:	2303      	movs	r3, #3
 8014f5c:	704b      	strb	r3, [r1, #1]
 8014f5e:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8014f60:	7805      	ldrb	r5, [r0, #0]
 8014f62:	2d00      	cmp	r5, #0
 8014f64:	d100      	bne.n	8014f68 <USBD_GetString+0x2c>
}
 8014f66:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8014f68:	1c5a      	adds	r2, r3, #1
 8014f6a:	54cd      	strb	r5, [r1, r3]
 8014f6c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8014f6e:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8014f70:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	548c      	strb	r4, [r1, r2]
 8014f76:	e7f3      	b.n	8014f60 <USBD_GetString+0x24>

08014f78 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014f78:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014f7a:	22a5      	movs	r2, #165	; 0xa5
{
 8014f7c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014f7e:	2402      	movs	r4, #2
 8014f80:	0092      	lsls	r2, r2, #2
 8014f82:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f84:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8014f86:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f88:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8014f8a:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f8c:	f002 fbdc 	bl	8017748 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014f90:	2000      	movs	r0, #0
 8014f92:	bd10      	pop	{r4, pc}

08014f94 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8014f94:	b510      	push	{r4, lr}
 8014f96:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f98:	000a      	movs	r2, r1
 8014f9a:	2100      	movs	r1, #0
 8014f9c:	f002 fbd4 	bl	8017748 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	bd10      	pop	{r4, pc}

08014fa4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8014fa4:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014fa6:	22a5      	movs	r2, #165	; 0xa5
{
 8014fa8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014faa:	2403      	movs	r4, #3
 8014fac:	0092      	lsls	r2, r2, #2
 8014fae:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8014fb0:	0002      	movs	r2, r0
 8014fb2:	32fc      	adds	r2, #252	; 0xfc
 8014fb4:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 8014fb6:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fb8:	000a      	movs	r2, r1
 8014fba:	2100      	movs	r1, #0
 8014fbc:	f002 fbcd 	bl	801775a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014fc0:	2000      	movs	r0, #0
 8014fc2:	bd10      	pop	{r4, pc}

08014fc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fc8:	000a      	movs	r2, r1
 8014fca:	2100      	movs	r1, #0
 8014fcc:	f002 fbc5 	bl	801775a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	bd10      	pop	{r4, pc}

08014fd4 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014fd4:	23a5      	movs	r3, #165	; 0xa5
 8014fd6:	2204      	movs	r2, #4
 8014fd8:	009b      	lsls	r3, r3, #2
{
 8014fda:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014fdc:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014fde:	2300      	movs	r3, #0
 8014fe0:	001a      	movs	r2, r3
 8014fe2:	0019      	movs	r1, r3
 8014fe4:	f002 fbb0 	bl	8017748 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014fe8:	2000      	movs	r0, #0
 8014fea:	bd10      	pop	{r4, pc}

08014fec <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014fec:	23a5      	movs	r3, #165	; 0xa5
 8014fee:	2205      	movs	r2, #5
 8014ff0:	009b      	lsls	r3, r3, #2
{
 8014ff2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014ff4:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	001a      	movs	r2, r3
 8014ffa:	0019      	movs	r1, r3
 8014ffc:	f002 fbad 	bl	801775a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8015000:	2000      	movs	r0, #0
 8015002:	bd10      	pop	{r4, pc}

08015004 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8015004:	0003      	movs	r3, r0
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8015006:	4a05      	ldr	r2, [pc, #20]	; (801501c <disk_status+0x18>)
{
 8015008:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	18d3      	adds	r3, r2, r3
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	1811      	adds	r1, r2, r0
 8015012:	7a08      	ldrb	r0, [r1, #8]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	4798      	blx	r3
  return stat;
}
 8015018:	bd10      	pop	{r4, pc}
 801501a:	46c0      	nop			; (mov r8, r8)
 801501c:	200008c0 	.word	0x200008c0

08015020 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8015020:	4a08      	ldr	r2, [pc, #32]	; (8015044 <disk_initialize+0x24>)
{
 8015022:	0003      	movs	r3, r0
  if(disk.is_initialized[pdrv] == 0)
 8015024:	5c11      	ldrb	r1, [r2, r0]
  DSTATUS stat = RES_OK;
 8015026:	2000      	movs	r0, #0
{
 8015028:	b510      	push	{r4, lr}
  if(disk.is_initialized[pdrv] == 0)
 801502a:	4281      	cmp	r1, r0
 801502c:	d108      	bne.n	8015040 <disk_initialize+0x20>
  { 
    disk.is_initialized[pdrv] = 1;
 801502e:	2101      	movs	r1, #1
 8015030:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015032:	18d1      	adds	r1, r2, r3
 8015034:	009b      	lsls	r3, r3, #2
 8015036:	18d3      	adds	r3, r2, r3
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	7a08      	ldrb	r0, [r1, #8]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	4798      	blx	r3
  }
  return stat;
}
 8015040:	bd10      	pop	{r4, pc}
 8015042:	46c0      	nop			; (mov r8, r8)
 8015044:	200008c0 	.word	0x200008c0

08015048 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015048:	b570      	push	{r4, r5, r6, lr}
 801504a:	0004      	movs	r4, r0
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801504c:	4d04      	ldr	r5, [pc, #16]	; (8015060 <disk_read+0x18>)
 801504e:	00a4      	lsls	r4, r4, #2
 8015050:	1828      	adds	r0, r5, r0
 8015052:	192d      	adds	r5, r5, r4
 8015054:	686c      	ldr	r4, [r5, #4]
 8015056:	7a00      	ldrb	r0, [r0, #8]
 8015058:	68a4      	ldr	r4, [r4, #8]
 801505a:	47a0      	blx	r4
  return res;
}
 801505c:	bd70      	pop	{r4, r5, r6, pc}
 801505e:	46c0      	nop			; (mov r8, r8)
 8015060:	200008c0 	.word	0x200008c0

08015064 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015064:	b570      	push	{r4, r5, r6, lr}
 8015066:	0004      	movs	r4, r0
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015068:	4d04      	ldr	r5, [pc, #16]	; (801507c <disk_write+0x18>)
 801506a:	00a4      	lsls	r4, r4, #2
 801506c:	1828      	adds	r0, r5, r0
 801506e:	192d      	adds	r5, r5, r4
 8015070:	686c      	ldr	r4, [r5, #4]
 8015072:	7a00      	ldrb	r0, [r0, #8]
 8015074:	68e4      	ldr	r4, [r4, #12]
 8015076:	47a0      	blx	r4
  return res;
}
 8015078:	bd70      	pop	{r4, r5, r6, pc}
 801507a:	46c0      	nop			; (mov r8, r8)
 801507c:	200008c0 	.word	0x200008c0

08015080 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015080:	0003      	movs	r3, r0
 8015082:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015084:	4c04      	ldr	r4, [pc, #16]	; (8015098 <disk_ioctl+0x18>)
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	1820      	adds	r0, r4, r0
 801508a:	18e4      	adds	r4, r4, r3
 801508c:	6863      	ldr	r3, [r4, #4]
 801508e:	7a00      	ldrb	r0, [r0, #8]
 8015090:	691b      	ldr	r3, [r3, #16]
 8015092:	4798      	blx	r3
  return res;
}
 8015094:	bd10      	pop	{r4, pc}
 8015096:	46c0      	nop			; (mov r8, r8)
 8015098:	200008c0 	.word	0x200008c0

0801509c <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 801509c:	2300      	movs	r3, #0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801509e:	b510      	push	{r4, lr}
	while (cnt--)
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d100      	bne.n	80150a6 <mem_cpy+0xa>
		*d++ = *s++;
}
 80150a4:	bd10      	pop	{r4, pc}
		*d++ = *s++;
 80150a6:	5ccc      	ldrb	r4, [r1, r3]
 80150a8:	54c4      	strb	r4, [r0, r3]
 80150aa:	3301      	adds	r3, #1
 80150ac:	e7f8      	b.n	80150a0 <mem_cpy+0x4>

080150ae <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80150ae:	1882      	adds	r2, r0, r2
 80150b0:	4290      	cmp	r0, r2
 80150b2:	d100      	bne.n	80150b6 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 80150b4:	4770      	bx	lr
		*d++ = (BYTE)val;
 80150b6:	7001      	strb	r1, [r0, #0]
 80150b8:	3001      	adds	r0, #1
 80150ba:	e7f9      	b.n	80150b0 <mem_set+0x2>

080150bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80150bc:	b530      	push	{r4, r5, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 80150be:	4c1f      	ldr	r4, [pc, #124]	; (801513c <chk_lock+0x80>)
{
 80150c0:	0003      	movs	r3, r0
		if (Files[i].fs) {	/* Existing entry */
 80150c2:	6820      	ldr	r0, [r4, #0]
 80150c4:	2800      	cmp	r0, #0
 80150c6:	d01c      	beq.n	8015102 <chk_lock+0x46>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80150c8:	2280      	movs	r2, #128	; 0x80
 80150ca:	0152      	lsls	r2, r2, #5
 80150cc:	589d      	ldr	r5, [r3, r2]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80150ce:	2200      	movs	r2, #0
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80150d0:	4285      	cmp	r5, r0
 80150d2:	d117      	bne.n	8015104 <chk_lock+0x48>
 80150d4:	481a      	ldr	r0, [pc, #104]	; (8015140 <chk_lock+0x84>)
 80150d6:	6865      	ldr	r5, [r4, #4]
 80150d8:	5818      	ldr	r0, [r3, r0]
 80150da:	4285      	cmp	r5, r0
 80150dc:	d112      	bne.n	8015104 <chk_lock+0x48>
				Files[i].clu == dp->sclust &&
 80150de:	4819      	ldr	r0, [pc, #100]	; (8015144 <chk_lock+0x88>)
 80150e0:	8925      	ldrh	r5, [r4, #8]
 80150e2:	5a18      	ldrh	r0, [r3, r0]
 80150e4:	4285      	cmp	r5, r0
 80150e6:	d10d      	bne.n	8015104 <chk_lock+0x48>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80150e8:	2010      	movs	r0, #16
 80150ea:	2900      	cmp	r1, #0
 80150ec:	d123      	bne.n	8015136 <chk_lock+0x7a>
 80150ee:	230c      	movs	r3, #12
 80150f0:	435a      	muls	r2, r3
 80150f2:	18a4      	adds	r4, r4, r2
 80150f4:	8960      	ldrh	r0, [r4, #10]
 80150f6:	3801      	subs	r0, #1
 80150f8:	38ff      	subs	r0, #255	; 0xff
 80150fa:	4243      	negs	r3, r0
 80150fc:	4158      	adcs	r0, r3
 80150fe:	0100      	lsls	r0, r0, #4
 8015100:	e019      	b.n	8015136 <chk_lock+0x7a>
			be = 1;
 8015102:	2201      	movs	r2, #1
		if (Files[i].fs) {	/* Existing entry */
 8015104:	68e5      	ldr	r5, [r4, #12]
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015106:	1e28      	subs	r0, r5, #0
		if (Files[i].fs) {	/* Existing entry */
 8015108:	d015      	beq.n	8015136 <chk_lock+0x7a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 801510a:	2080      	movs	r0, #128	; 0x80
 801510c:	0140      	lsls	r0, r0, #5
 801510e:	5818      	ldr	r0, [r3, r0]
 8015110:	4285      	cmp	r5, r0
 8015112:	d109      	bne.n	8015128 <chk_lock+0x6c>
 8015114:	480a      	ldr	r0, [pc, #40]	; (8015140 <chk_lock+0x84>)
 8015116:	6925      	ldr	r5, [r4, #16]
 8015118:	5818      	ldr	r0, [r3, r0]
 801511a:	4285      	cmp	r5, r0
 801511c:	d104      	bne.n	8015128 <chk_lock+0x6c>
				Files[i].clu == dp->sclust &&
 801511e:	4d09      	ldr	r5, [pc, #36]	; (8015144 <chk_lock+0x88>)
 8015120:	8aa0      	ldrh	r0, [r4, #20]
 8015122:	5b5b      	ldrh	r3, [r3, r5]
 8015124:	4298      	cmp	r0, r3
 8015126:	d007      	beq.n	8015138 <chk_lock+0x7c>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015128:	2000      	movs	r0, #0
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801512a:	4282      	cmp	r2, r0
 801512c:	d103      	bne.n	8015136 <chk_lock+0x7a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801512e:	0010      	movs	r0, r2
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015130:	2902      	cmp	r1, #2
 8015132:	d000      	beq.n	8015136 <chk_lock+0x7a>
 8015134:	2012      	movs	r0, #18
}
 8015136:	bd30      	pop	{r4, r5, pc}
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015138:	2201      	movs	r2, #1
 801513a:	e7d5      	b.n	80150e8 <chk_lock+0x2c>
 801513c:	200006a4 	.word	0x200006a4
 8015140:	00001008 	.word	0x00001008
 8015144:	00001006 	.word	0x00001006

08015148 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8015148:	2380      	movs	r3, #128	; 0x80
 801514a:	015b      	lsls	r3, r3, #5
{
 801514c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 801514e:	58c5      	ldr	r5, [r0, r3]
 8015150:	4b25      	ldr	r3, [pc, #148]	; (80151e8 <inc_lock+0xa0>)
{
 8015152:	0004      	movs	r4, r0
		if (Files[i].fs == dp->fs &&
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	4295      	cmp	r5, r2
 8015158:	d109      	bne.n	801516e <inc_lock+0x26>
 801515a:	4824      	ldr	r0, [pc, #144]	; (80151ec <inc_lock+0xa4>)
 801515c:	685e      	ldr	r6, [r3, #4]
 801515e:	5820      	ldr	r0, [r4, r0]
 8015160:	4286      	cmp	r6, r0
 8015162:	d104      	bne.n	801516e <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
 8015164:	4822      	ldr	r0, [pc, #136]	; (80151f0 <inc_lock+0xa8>)
			Files[i].clu == dp->sclust &&
 8015166:	5a26      	ldrh	r6, [r4, r0]
 8015168:	8918      	ldrh	r0, [r3, #8]
 801516a:	4286      	cmp	r6, r0
 801516c:	d02c      	beq.n	80151c8 <inc_lock+0x80>
		if (Files[i].fs == dp->fs &&
 801516e:	68de      	ldr	r6, [r3, #12]
 8015170:	42ae      	cmp	r6, r5
 8015172:	d109      	bne.n	8015188 <inc_lock+0x40>
 8015174:	481d      	ldr	r0, [pc, #116]	; (80151ec <inc_lock+0xa4>)
 8015176:	691f      	ldr	r7, [r3, #16]
 8015178:	5820      	ldr	r0, [r4, r0]
 801517a:	4287      	cmp	r7, r0
 801517c:	d104      	bne.n	8015188 <inc_lock+0x40>
			Files[i].clu == dp->sclust &&
 801517e:	481c      	ldr	r0, [pc, #112]	; (80151f0 <inc_lock+0xa8>)
 8015180:	8a9f      	ldrh	r7, [r3, #20]
 8015182:	5a20      	ldrh	r0, [r4, r0]
 8015184:	4287      	cmp	r7, r0
 8015186:	d02c      	beq.n	80151e2 <inc_lock+0x9a>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015188:	2a00      	cmp	r2, #0
 801518a:	d003      	beq.n	8015194 <inc_lock+0x4c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801518c:	2000      	movs	r0, #0
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801518e:	4286      	cmp	r6, r0
 8015190:	d119      	bne.n	80151c6 <inc_lock+0x7e>
 8015192:	2201      	movs	r2, #1
		Files[i].fs = dp->fs;
 8015194:	200c      	movs	r0, #12
 8015196:	4350      	muls	r0, r2
 8015198:	501d      	str	r5, [r3, r0]
		Files[i].clu = dp->sclust;
 801519a:	4d14      	ldr	r5, [pc, #80]	; (80151ec <inc_lock+0xa4>)
 801519c:	1818      	adds	r0, r3, r0
 801519e:	5965      	ldr	r5, [r4, r5]
 80151a0:	6045      	str	r5, [r0, #4]
		Files[i].idx = dp->index;
 80151a2:	4d13      	ldr	r5, [pc, #76]	; (80151f0 <inc_lock+0xa8>)
 80151a4:	5b64      	ldrh	r4, [r4, r5]
 80151a6:	8104      	strh	r4, [r0, #8]
		Files[i].ctr = 0;
 80151a8:	2400      	movs	r4, #0
 80151aa:	8144      	strh	r4, [r0, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80151ac:	42a1      	cmp	r1, r4
 80151ae:	d115      	bne.n	80151dc <inc_lock+0x94>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80151b0:	210c      	movs	r1, #12
 80151b2:	4351      	muls	r1, r2
 80151b4:	1859      	adds	r1, r3, r1
 80151b6:	8949      	ldrh	r1, [r1, #10]
 80151b8:	3101      	adds	r1, #1
 80151ba:	b289      	uxth	r1, r1
 80151bc:	200c      	movs	r0, #12
 80151be:	4350      	muls	r0, r2
 80151c0:	181b      	adds	r3, r3, r0
 80151c2:	8159      	strh	r1, [r3, #10]

	return i + 1;
 80151c4:	1c50      	adds	r0, r2, #1
}
 80151c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80151c8:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80151ca:	2900      	cmp	r1, #0
 80151cc:	d0f0      	beq.n	80151b0 <inc_lock+0x68>
 80151ce:	210c      	movs	r1, #12
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80151d0:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80151d2:	4351      	muls	r1, r2
 80151d4:	1859      	adds	r1, r3, r1
 80151d6:	8949      	ldrh	r1, [r1, #10]
 80151d8:	4281      	cmp	r1, r0
 80151da:	d1f4      	bne.n	80151c6 <inc_lock+0x7e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80151dc:	2180      	movs	r1, #128	; 0x80
 80151de:	0049      	lsls	r1, r1, #1
 80151e0:	e7ec      	b.n	80151bc <inc_lock+0x74>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80151e2:	2201      	movs	r2, #1
 80151e4:	e7f1      	b.n	80151ca <inc_lock+0x82>
 80151e6:	46c0      	nop			; (mov r8, r8)
 80151e8:	200006a4 	.word	0x200006a4
 80151ec:	00001008 	.word	0x00001008
 80151f0:	00001006 	.word	0x00001006

080151f4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80151f4:	1e41      	subs	r1, r0, #1
{
 80151f6:	b510      	push	{r4, lr}
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80151f8:	2002      	movs	r0, #2
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80151fa:	2901      	cmp	r1, #1
 80151fc:	d816      	bhi.n	801522c <dec_lock+0x38>
		n = Files[i].ctr;
 80151fe:	220c      	movs	r2, #12
 8015200:	434a      	muls	r2, r1
 8015202:	4c0b      	ldr	r4, [pc, #44]	; (8015230 <dec_lock+0x3c>)
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015204:	30fe      	adds	r0, #254	; 0xfe
		n = Files[i].ctr;
 8015206:	18a2      	adds	r2, r4, r2
 8015208:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801520a:	4283      	cmp	r3, r0
 801520c:	d106      	bne.n	801521c <dec_lock+0x28>
		Files[i].ctr = n;
 801520e:	2300      	movs	r3, #0
 8015210:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015212:	200c      	movs	r0, #12
 8015214:	4341      	muls	r1, r0
 8015216:	2000      	movs	r0, #0
 8015218:	5060      	str	r0, [r4, r1]
 801521a:	e007      	b.n	801522c <dec_lock+0x38>
		if (n) n--;					/* Decrement read mode open count */
 801521c:	2b00      	cmp	r3, #0
 801521e:	d0f8      	beq.n	8015212 <dec_lock+0x1e>
 8015220:	3b01      	subs	r3, #1
 8015222:	b29b      	uxth	r3, r3
		res = FR_OK;
 8015224:	2000      	movs	r0, #0
		Files[i].ctr = n;
 8015226:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015228:	2b00      	cmp	r3, #0
 801522a:	d0f2      	beq.n	8015212 <dec_lock+0x1e>
	}
	return res;
}
 801522c:	bd10      	pop	{r4, pc}
 801522e:	46c0      	nop			; (mov r8, r8)
 8015230:	200006a4 	.word	0x200006a4

08015234 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015234:	4b05      	ldr	r3, [pc, #20]	; (801524c <clear_lock+0x18>)
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	4290      	cmp	r0, r2
 801523a:	d101      	bne.n	8015240 <clear_lock+0xc>
 801523c:	2200      	movs	r2, #0
 801523e:	601a      	str	r2, [r3, #0]
 8015240:	68da      	ldr	r2, [r3, #12]
 8015242:	4290      	cmp	r0, r2
 8015244:	d101      	bne.n	801524a <clear_lock+0x16>
 8015246:	2200      	movs	r2, #0
 8015248:	60da      	str	r2, [r3, #12]
	}
}
 801524a:	4770      	bx	lr
 801524c:	200006a4 	.word	0x200006a4

08015250 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8015250:	0003      	movs	r3, r0
 8015252:	b570      	push	{r4, r5, r6, lr}
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015254:	4a0c      	ldr	r2, [pc, #48]	; (8015288 <clmt_clust+0x38>)
{
 8015256:	0008      	movs	r0, r1
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015258:	589c      	ldr	r4, [r3, r2]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 801525a:	3a24      	subs	r2, #36	; 0x24
 801525c:	589d      	ldr	r5, [r3, r2]
 801525e:	4b0b      	ldr	r3, [pc, #44]	; (801528c <clmt_clust+0x3c>)
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015260:	3404      	adds	r4, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8015262:	5ae9      	ldrh	r1, [r5, r3]
 8015264:	f7f2 fc00 	bl	8007a68 <__udivsi3>
 8015268:	4b09      	ldr	r3, [pc, #36]	; (8015290 <clmt_clust+0x40>)
 801526a:	5ce9      	ldrb	r1, [r5, r3]
 801526c:	f7f2 fbfc 	bl	8007a68 <__udivsi3>
 8015270:	0003      	movs	r3, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015272:	6820      	ldr	r0, [r4, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8015274:	2800      	cmp	r0, #0
 8015276:	d006      	beq.n	8015286 <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 8015278:	4283      	cmp	r3, r0
 801527a:	d302      	bcc.n	8015282 <clmt_clust+0x32>
		cl -= ncl; tbl++;		/* Next fragment */
 801527c:	1a1b      	subs	r3, r3, r0
 801527e:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015280:	e7f7      	b.n	8015272 <clmt_clust+0x22>
	}
	return cl + *tbl;	/* Return the cluster number */
 8015282:	6860      	ldr	r0, [r4, #4]
 8015284:	1818      	adds	r0, r3, r0
}
 8015286:	bd70      	pop	{r4, r5, r6, pc}
 8015288:	00001024 	.word	0x00001024
 801528c:	0000100a 	.word	0x0000100a
 8015290:	00001002 	.word	0x00001002

08015294 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
 8015294:	0001      	movs	r1, r0
{
 8015296:	0003      	movs	r3, r0
	BYTE sum = 0;
 8015298:	2000      	movs	r0, #0
 801529a:	310b      	adds	r1, #11

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 801529c:	0842      	lsrs	r2, r0, #1
 801529e:	01c0      	lsls	r0, r0, #7
 80152a0:	4310      	orrs	r0, r2
 80152a2:	781a      	ldrb	r2, [r3, #0]
 80152a4:	3301      	adds	r3, #1
 80152a6:	1880      	adds	r0, r0, r2
 80152a8:	b2c0      	uxtb	r0, r0
 80152aa:	428b      	cmp	r3, r1
 80152ac:	d1f6      	bne.n	801529c <sum_sfn+0x8>
	return sum;
}
 80152ae:	4770      	bx	lr

080152b0 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80152b0:	6802      	ldr	r2, [r0, #0]
 80152b2:	1e13      	subs	r3, r2, #0
 80152b4:	d103      	bne.n	80152be <get_ldnumber+0xe>
	int vol = -1;
 80152b6:	2001      	movs	r0, #1
 80152b8:	4240      	negs	r0, r0
 80152ba:	e00e      	b.n	80152da <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80152bc:	3301      	adds	r3, #1
 80152be:	7819      	ldrb	r1, [r3, #0]
 80152c0:	291f      	cmp	r1, #31
 80152c2:	d909      	bls.n	80152d8 <get_ldnumber+0x28>
 80152c4:	293a      	cmp	r1, #58	; 0x3a
 80152c6:	d1f9      	bne.n	80152bc <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80152c8:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80152ca:	428b      	cmp	r3, r1
 80152cc:	d1f3      	bne.n	80152b6 <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80152ce:	7812      	ldrb	r2, [r2, #0]
 80152d0:	2a30      	cmp	r2, #48	; 0x30
 80152d2:	d1f0      	bne.n	80152b6 <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 80152d4:	3301      	adds	r3, #1
 80152d6:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80152d8:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80152da:	4770      	bx	lr

080152dc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80152dc:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80152de:	2800      	cmp	r0, #0
 80152e0:	d016      	beq.n	8015310 <validate+0x34>
 80152e2:	2280      	movs	r2, #128	; 0x80
 80152e4:	0152      	lsls	r2, r2, #5
 80152e6:	5883      	ldr	r3, [r0, r2]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d011      	beq.n	8015310 <validate+0x34>
 80152ec:	5c9a      	ldrb	r2, [r3, r2]
 80152ee:	2a00      	cmp	r2, #0
 80152f0:	d00e      	beq.n	8015310 <validate+0x34>
 80152f2:	4a09      	ldr	r2, [pc, #36]	; (8015318 <validate+0x3c>)
 80152f4:	5a99      	ldrh	r1, [r3, r2]
 80152f6:	4a09      	ldr	r2, [pc, #36]	; (801531c <validate+0x40>)
 80152f8:	5a82      	ldrh	r2, [r0, r2]
 80152fa:	4291      	cmp	r1, r2
 80152fc:	d108      	bne.n	8015310 <validate+0x34>
 80152fe:	4a08      	ldr	r2, [pc, #32]	; (8015320 <validate+0x44>)
 8015300:	5c98      	ldrb	r0, [r3, r2]
 8015302:	f7ff fe7f 	bl	8015004 <disk_status>
 8015306:	2201      	movs	r2, #1
 8015308:	0003      	movs	r3, r0
 801530a:	4013      	ands	r3, r2
 801530c:	4210      	tst	r0, r2
 801530e:	d000      	beq.n	8015312 <validate+0x36>
		return FR_INVALID_OBJECT;
 8015310:	2309      	movs	r3, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8015312:	0018      	movs	r0, r3
 8015314:	bd10      	pop	{r4, pc}
 8015316:	46c0      	nop			; (mov r8, r8)
 8015318:	00001006 	.word	0x00001006
 801531c:	00001004 	.word	0x00001004
 8015320:	00001001 	.word	0x00001001

08015324 <sync_window.part.0>:
FRESULT sync_window (
 8015324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015326:	0004      	movs	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8015328:	4b14      	ldr	r3, [pc, #80]	; (801537c <sync_window.part.0+0x58>)
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 801532a:	0021      	movs	r1, r4
		wsect = fs->winsect;	/* Current sector number */
 801532c:	58c6      	ldr	r6, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 801532e:	4b14      	ldr	r3, [pc, #80]	; (8015380 <sync_window.part.0+0x5c>)
 8015330:	0032      	movs	r2, r6
 8015332:	5cc0      	ldrb	r0, [r0, r3]
 8015334:	2301      	movs	r3, #1
 8015336:	f7ff fe95 	bl	8015064 <disk_write>
 801533a:	1e05      	subs	r5, r0, #0
 801533c:	d11c      	bne.n	8015378 <sync_window.part.0+0x54>
			fs->wflag = 0;
 801533e:	4b11      	ldr	r3, [pc, #68]	; (8015384 <sync_window.part.0+0x60>)
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015340:	4f11      	ldr	r7, [pc, #68]	; (8015388 <sync_window.part.0+0x64>)
			fs->wflag = 0;
 8015342:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015344:	331c      	adds	r3, #28
 8015346:	58e3      	ldr	r3, [r4, r3]
 8015348:	59e2      	ldr	r2, [r4, r7]
 801534a:	1af3      	subs	r3, r6, r3
 801534c:	4293      	cmp	r3, r2
 801534e:	d205      	bcs.n	801535c <sync_window.part.0+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015350:	4b0e      	ldr	r3, [pc, #56]	; (801538c <sync_window.part.0+0x68>)
 8015352:	5ce3      	ldrb	r3, [r4, r3]
 8015354:	9301      	str	r3, [sp, #4]
 8015356:	9b01      	ldr	r3, [sp, #4]
 8015358:	2b01      	cmp	r3, #1
 801535a:	d801      	bhi.n	8015360 <sync_window.part.0+0x3c>
}
 801535c:	0028      	movs	r0, r5
 801535e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 8015360:	59e3      	ldr	r3, [r4, r7]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8015362:	0021      	movs	r1, r4
					wsect += fs->fsize;
 8015364:	18f6      	adds	r6, r6, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8015366:	4b06      	ldr	r3, [pc, #24]	; (8015380 <sync_window.part.0+0x5c>)
 8015368:	0032      	movs	r2, r6
 801536a:	5ce0      	ldrb	r0, [r4, r3]
 801536c:	2301      	movs	r3, #1
 801536e:	f7ff fe79 	bl	8015064 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015372:	9b01      	ldr	r3, [sp, #4]
 8015374:	3b01      	subs	r3, #1
 8015376:	e7ed      	b.n	8015354 <sync_window.part.0+0x30>
			res = FR_DISK_ERR;
 8015378:	2501      	movs	r5, #1
 801537a:	e7ef      	b.n	801535c <sync_window.part.0+0x38>
 801537c:	0000102c 	.word	0x0000102c
 8015380:	00001001 	.word	0x00001001
 8015384:	00001004 	.word	0x00001004
 8015388:	00001018 	.word	0x00001018
 801538c:	00001003 	.word	0x00001003

08015390 <sync_window>:
{
 8015390:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015392:	4a04      	ldr	r2, [pc, #16]	; (80153a4 <sync_window+0x14>)
{
 8015394:	0003      	movs	r3, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015396:	5c80      	ldrb	r0, [r0, r2]
 8015398:	2800      	cmp	r0, #0
 801539a:	d002      	beq.n	80153a2 <sync_window+0x12>
 801539c:	0018      	movs	r0, r3
 801539e:	f7ff ffc1 	bl	8015324 <sync_window.part.0>
}
 80153a2:	bd10      	pop	{r4, pc}
 80153a4:	00001004 	.word	0x00001004

080153a8 <move_window>:
{
 80153a8:	b570      	push	{r4, r5, r6, lr}
 80153aa:	0004      	movs	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153ac:	4e0c      	ldr	r6, [pc, #48]	; (80153e0 <move_window+0x38>)
{
 80153ae:	000d      	movs	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153b0:	59a3      	ldr	r3, [r4, r6]
	FRESULT res = FR_OK;
 80153b2:	2000      	movs	r0, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153b4:	428b      	cmp	r3, r1
 80153b6:	d011      	beq.n	80153dc <move_window+0x34>
		res = sync_window(fs);		/* Write-back changes */
 80153b8:	0020      	movs	r0, r4
 80153ba:	f7ff ffe9 	bl	8015390 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80153be:	2800      	cmp	r0, #0
 80153c0:	d10c      	bne.n	80153dc <move_window+0x34>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80153c2:	4b08      	ldr	r3, [pc, #32]	; (80153e4 <move_window+0x3c>)
 80153c4:	002a      	movs	r2, r5
 80153c6:	5ce0      	ldrb	r0, [r4, r3]
 80153c8:	0021      	movs	r1, r4
 80153ca:	2301      	movs	r3, #1
 80153cc:	f7ff fe3c 	bl	8015048 <disk_read>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	d002      	beq.n	80153da <move_window+0x32>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80153d4:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 80153d6:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80153d8:	426d      	negs	r5, r5
			fs->winsect = sector;
 80153da:	51a5      	str	r5, [r4, r6]
}
 80153dc:	bd70      	pop	{r4, r5, r6, pc}
 80153de:	46c0      	nop			; (mov r8, r8)
 80153e0:	0000102c 	.word	0x0000102c
 80153e4:	00001001 	.word	0x00001001

080153e8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80153e8:	2200      	movs	r2, #0
 80153ea:	4b15      	ldr	r3, [pc, #84]	; (8015440 <check_fs+0x58>)
{
 80153ec:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80153ee:	54c2      	strb	r2, [r0, r3]
 80153f0:	4b14      	ldr	r3, [pc, #80]	; (8015444 <check_fs+0x5c>)
 80153f2:	3a01      	subs	r2, #1
 80153f4:	50c2      	str	r2, [r0, r3]
{
 80153f6:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80153f8:	f7ff ffd6 	bl	80153a8 <move_window>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	d11b      	bne.n	8015438 <check_fs+0x50>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8015400:	23ff      	movs	r3, #255	; 0xff
 8015402:	005b      	lsls	r3, r3, #1
 8015404:	5ae2      	ldrh	r2, [r4, r3]
 8015406:	4b10      	ldr	r3, [pc, #64]	; (8015448 <check_fs+0x60>)
 8015408:	429a      	cmp	r2, r3
 801540a:	d117      	bne.n	801543c <check_fs+0x54>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 801540c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801540e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015410:	041b      	lsls	r3, r3, #16
 8015412:	430b      	orrs	r3, r1
 8015414:	4a0d      	ldr	r2, [pc, #52]	; (801544c <check_fs+0x64>)
 8015416:	021b      	lsls	r3, r3, #8
 8015418:	0a1b      	lsrs	r3, r3, #8
 801541a:	4293      	cmp	r3, r2
 801541c:	d00b      	beq.n	8015436 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801541e:	3452      	adds	r4, #82	; 0x52
 8015420:	8860      	ldrh	r0, [r4, #2]
 8015422:	8822      	ldrh	r2, [r4, #0]
 8015424:	0400      	lsls	r0, r0, #16
 8015426:	4310      	orrs	r0, r2
 8015428:	4b09      	ldr	r3, [pc, #36]	; (8015450 <check_fs+0x68>)
 801542a:	0200      	lsls	r0, r0, #8
 801542c:	0a00      	lsrs	r0, r0, #8
 801542e:	18c0      	adds	r0, r0, r3
 8015430:	1e43      	subs	r3, r0, #1
 8015432:	4198      	sbcs	r0, r3
		return 3;
 8015434:	b2c0      	uxtb	r0, r0
}
 8015436:	bd10      	pop	{r4, pc}
		return 3;
 8015438:	2003      	movs	r0, #3
 801543a:	e7fc      	b.n	8015436 <check_fs+0x4e>
		return 2;
 801543c:	2002      	movs	r0, #2
 801543e:	e7fa      	b.n	8015436 <check_fs+0x4e>
 8015440:	00001004 	.word	0x00001004
 8015444:	0000102c 	.word	0x0000102c
 8015448:	0000aa55 	.word	0x0000aa55
 801544c:	00544146 	.word	0x00544146
 8015450:	ffabbeba 	.word	0xffabbeba

08015454 <find_volume>:
{
 8015454:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8015456:	2300      	movs	r3, #0
{
 8015458:	0005      	movs	r5, r0
 801545a:	b08d      	sub	sp, #52	; 0x34
 801545c:	0008      	movs	r0, r1
	*rfs = 0;
 801545e:	602b      	str	r3, [r5, #0]
{
 8015460:	9201      	str	r2, [sp, #4]
	vol = get_ldnumber(path);
 8015462:	f7ff ff25 	bl	80152b0 <get_ldnumber>
 8015466:	1e04      	subs	r4, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 8015468:	da00      	bge.n	801546c <find_volume+0x18>
 801546a:	e151      	b.n	8015710 <find_volume+0x2bc>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801546c:	4bab      	ldr	r3, [pc, #684]	; (801571c <find_volume+0x2c8>)
 801546e:	0082      	lsls	r2, r0, #2
 8015470:	58d6      	ldr	r6, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015472:	2e00      	cmp	r6, #0
 8015474:	d100      	bne.n	8015478 <find_volume+0x24>
 8015476:	e14d      	b.n	8015714 <find_volume+0x2c0>
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015478:	2380      	movs	r3, #128	; 0x80
	*rfs = fs;							/* Return pointer to the file system object */
 801547a:	602e      	str	r6, [r5, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801547c:	015b      	lsls	r3, r3, #5
 801547e:	5cf3      	ldrb	r3, [r6, r3]
 8015480:	4da7      	ldr	r5, [pc, #668]	; (8015720 <find_volume+0x2cc>)
 8015482:	2b00      	cmp	r3, #0
 8015484:	d012      	beq.n	80154ac <find_volume+0x58>
		stat = disk_status(fs->drv);
 8015486:	5d70      	ldrb	r0, [r6, r5]
 8015488:	f7ff fdbc 	bl	8015004 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801548c:	07c3      	lsls	r3, r0, #31
 801548e:	d40d      	bmi.n	80154ac <find_volume+0x58>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8015490:	9b01      	ldr	r3, [sp, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d100      	bne.n	8015498 <find_volume+0x44>
 8015496:	e125      	b.n	80156e4 <find_volume+0x290>
 8015498:	2304      	movs	r3, #4
 801549a:	0002      	movs	r2, r0
 801549c:	401a      	ands	r2, r3
 801549e:	9201      	str	r2, [sp, #4]
 80154a0:	4218      	tst	r0, r3
 80154a2:	d100      	bne.n	80154a6 <find_volume+0x52>
 80154a4:	e11e      	b.n	80156e4 <find_volume+0x290>
				return FR_WRITE_PROTECTED;
 80154a6:	230a      	movs	r3, #10
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80154a8:	9301      	str	r3, [sp, #4]
 80154aa:	e11b      	b.n	80156e4 <find_volume+0x290>
	fs->fs_type = 0;					/* Clear the file system object */
 80154ac:	2380      	movs	r3, #128	; 0x80
 80154ae:	2200      	movs	r2, #0
 80154b0:	015b      	lsls	r3, r3, #5
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80154b2:	b2e0      	uxtb	r0, r4
	fs->fs_type = 0;					/* Clear the file system object */
 80154b4:	54f2      	strb	r2, [r6, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80154b6:	5570      	strb	r0, [r6, r5]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80154b8:	f7ff fdb2 	bl	8015020 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80154bc:	07c3      	lsls	r3, r0, #31
 80154be:	d500      	bpl.n	80154c2 <find_volume+0x6e>
 80154c0:	e12a      	b.n	8015718 <find_volume+0x2c4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80154c2:	9b01      	ldr	r3, [sp, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d001      	beq.n	80154cc <find_volume+0x78>
 80154c8:	0743      	lsls	r3, r0, #29
 80154ca:	d4ec      	bmi.n	80154a6 <find_volume+0x52>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80154cc:	4b95      	ldr	r3, [pc, #596]	; (8015724 <find_volume+0x2d0>)
 80154ce:	2102      	movs	r1, #2
 80154d0:	5d70      	ldrb	r0, [r6, r5]
 80154d2:	18f2      	adds	r2, r6, r3
 80154d4:	f7ff fdd4 	bl	8015080 <disk_ioctl>
 80154d8:	9001      	str	r0, [sp, #4]
 80154da:	2800      	cmp	r0, #0
 80154dc:	d001      	beq.n	80154e2 <find_volume+0x8e>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80154de:	2301      	movs	r3, #1
 80154e0:	e7e2      	b.n	80154a8 <find_volume+0x54>
 80154e2:	4d90      	ldr	r5, [pc, #576]	; (8015724 <find_volume+0x2d0>)
 80154e4:	4a90      	ldr	r2, [pc, #576]	; (8015728 <find_volume+0x2d4>)
 80154e6:	5b73      	ldrh	r3, [r6, r5]
 80154e8:	189b      	adds	r3, r3, r2
 80154ea:	22e0      	movs	r2, #224	; 0xe0
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	0112      	lsls	r2, r2, #4
 80154f0:	4293      	cmp	r3, r2
 80154f2:	d8f4      	bhi.n	80154de <find_volume+0x8a>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80154f4:	0030      	movs	r0, r6
 80154f6:	9901      	ldr	r1, [sp, #4]
 80154f8:	f7ff ff76 	bl	80153e8 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80154fc:	2801      	cmp	r0, #1
 80154fe:	d12d      	bne.n	801555c <find_volume+0x108>
 8015500:	0033      	movs	r3, r6
 8015502:	0030      	movs	r0, r6
 8015504:	33bf      	adds	r3, #191	; 0xbf
 8015506:	30ff      	adds	r0, #255	; 0xff
 8015508:	a908      	add	r1, sp, #32
 801550a:	33ff      	adds	r3, #255	; 0xff
 801550c:	30ff      	adds	r0, #255	; 0xff
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801550e:	2200      	movs	r2, #0
 8015510:	791c      	ldrb	r4, [r3, #4]
 8015512:	4294      	cmp	r4, r2
 8015514:	d009      	beq.n	801552a <find_volume+0xd6>
 8015516:	7a5a      	ldrb	r2, [r3, #9]
 8015518:	7a1c      	ldrb	r4, [r3, #8]
 801551a:	0212      	lsls	r2, r2, #8
 801551c:	4322      	orrs	r2, r4
 801551e:	7a9c      	ldrb	r4, [r3, #10]
 8015520:	0424      	lsls	r4, r4, #16
 8015522:	4314      	orrs	r4, r2
 8015524:	7ada      	ldrb	r2, [r3, #11]
 8015526:	0612      	lsls	r2, r2, #24
 8015528:	4322      	orrs	r2, r4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801552a:	3310      	adds	r3, #16
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801552c:	c104      	stmia	r1!, {r2}
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801552e:	4283      	cmp	r3, r0
 8015530:	d1ed      	bne.n	801550e <find_volume+0xba>
 8015532:	2400      	movs	r4, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8015534:	2702      	movs	r7, #2
			bsect = br[i];
 8015536:	00a3      	lsls	r3, r4, #2
 8015538:	aa08      	add	r2, sp, #32
 801553a:	58d3      	ldr	r3, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 801553c:	0038      	movs	r0, r7
			bsect = br[i];
 801553e:	9302      	str	r3, [sp, #8]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8015540:	2b00      	cmp	r3, #0
 8015542:	d005      	beq.n	8015550 <find_volume+0xfc>
 8015544:	0019      	movs	r1, r3
 8015546:	0030      	movs	r0, r6
 8015548:	f7ff ff4e 	bl	80153e8 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 801554c:	2800      	cmp	r0, #0
 801554e:	d00d      	beq.n	801556c <find_volume+0x118>
 8015550:	3401      	adds	r4, #1
 8015552:	2c04      	cmp	r4, #4
 8015554:	d1ef      	bne.n	8015536 <find_volume+0xe2>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015556:	2803      	cmp	r0, #3
 8015558:	d106      	bne.n	8015568 <find_volume+0x114>
 801555a:	e7c0      	b.n	80154de <find_volume+0x8a>
 801555c:	2803      	cmp	r0, #3
 801555e:	d0be      	beq.n	80154de <find_volume+0x8a>
	bsect = 0;
 8015560:	9b01      	ldr	r3, [sp, #4]
 8015562:	9302      	str	r3, [sp, #8]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8015564:	2800      	cmp	r0, #0
 8015566:	d001      	beq.n	801556c <find_volume+0x118>
 8015568:	230d      	movs	r3, #13
 801556a:	e79d      	b.n	80154a8 <find_volume+0x54>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801556c:	5b73      	ldrh	r3, [r6, r5]
 801556e:	7af2      	ldrb	r2, [r6, #11]
 8015570:	9305      	str	r3, [sp, #20]
 8015572:	7b33      	ldrb	r3, [r6, #12]
 8015574:	021b      	lsls	r3, r3, #8
 8015576:	4313      	orrs	r3, r2
 8015578:	9a05      	ldr	r2, [sp, #20]
 801557a:	429a      	cmp	r2, r3
 801557c:	d1f4      	bne.n	8015568 <find_volume+0x114>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 801557e:	8af3      	ldrh	r3, [r6, #22]
 8015580:	9303      	str	r3, [sp, #12]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8015582:	2b00      	cmp	r3, #0
 8015584:	d101      	bne.n	801558a <find_volume+0x136>
 8015586:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015588:	9303      	str	r3, [sp, #12]
	fs->fsize = fasize;
 801558a:	4b68      	ldr	r3, [pc, #416]	; (801572c <find_volume+0x2d8>)
 801558c:	9a03      	ldr	r2, [sp, #12]
 801558e:	50f2      	str	r2, [r6, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8015590:	7c33      	ldrb	r3, [r6, #16]
 8015592:	9307      	str	r3, [sp, #28]
 8015594:	9a07      	ldr	r2, [sp, #28]
 8015596:	4b66      	ldr	r3, [pc, #408]	; (8015730 <find_volume+0x2dc>)
 8015598:	54f2      	strb	r2, [r6, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 801559a:	0013      	movs	r3, r2
 801559c:	3b01      	subs	r3, #1
 801559e:	2b01      	cmp	r3, #1
 80155a0:	d8e2      	bhi.n	8015568 <find_volume+0x114>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80155a2:	7b77      	ldrb	r7, [r6, #13]
 80155a4:	4b63      	ldr	r3, [pc, #396]	; (8015734 <find_volume+0x2e0>)
 80155a6:	54f7      	strb	r7, [r6, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80155a8:	2f00      	cmp	r7, #0
 80155aa:	d0dd      	beq.n	8015568 <find_volume+0x114>
 80155ac:	1e7b      	subs	r3, r7, #1
 80155ae:	421f      	tst	r7, r3
 80155b0:	d1da      	bne.n	8015568 <find_volume+0x114>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80155b2:	7cb3      	ldrb	r3, [r6, #18]
 80155b4:	7c72      	ldrb	r2, [r6, #17]
 80155b6:	021b      	lsls	r3, r3, #8
 80155b8:	4313      	orrs	r3, r2
 80155ba:	9304      	str	r3, [sp, #16]
 80155bc:	9a04      	ldr	r2, [sp, #16]
 80155be:	4b5e      	ldr	r3, [pc, #376]	; (8015738 <find_volume+0x2e4>)
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80155c0:	0010      	movs	r0, r2
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80155c2:	52f2      	strh	r2, [r6, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80155c4:	9b05      	ldr	r3, [sp, #20]
 80155c6:	095d      	lsrs	r5, r3, #5
 80155c8:	0029      	movs	r1, r5
 80155ca:	f7f2 fad3 	bl	8007b74 <__aeabi_uidivmod>
 80155ce:	b289      	uxth	r1, r1
 80155d0:	2900      	cmp	r1, #0
 80155d2:	d1c9      	bne.n	8015568 <find_volume+0x114>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80155d4:	7d34      	ldrb	r4, [r6, #20]
 80155d6:	7cf3      	ldrb	r3, [r6, #19]
 80155d8:	0224      	lsls	r4, r4, #8
 80155da:	431c      	orrs	r4, r3
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80155dc:	d100      	bne.n	80155e0 <find_volume+0x18c>
 80155de:	6a34      	ldr	r4, [r6, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80155e0:	89f3      	ldrh	r3, [r6, #14]
 80155e2:	9306      	str	r3, [sp, #24]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d0bf      	beq.n	8015568 <find_volume+0x114>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80155e8:	9b07      	ldr	r3, [sp, #28]
 80155ea:	9a03      	ldr	r2, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80155ec:	0029      	movs	r1, r5
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80155ee:	4353      	muls	r3, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80155f0:	9804      	ldr	r0, [sp, #16]
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80155f2:	9307      	str	r3, [sp, #28]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80155f4:	f7f2 fa38 	bl	8007a68 <__udivsi3>
 80155f8:	9b06      	ldr	r3, [sp, #24]
 80155fa:	b285      	uxth	r5, r0
 80155fc:	18ed      	adds	r5, r5, r3
 80155fe:	9b07      	ldr	r3, [sp, #28]
 8015600:	18ed      	adds	r5, r5, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015602:	42ac      	cmp	r4, r5
 8015604:	d3b0      	bcc.n	8015568 <find_volume+0x114>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8015606:	1b64      	subs	r4, r4, r5
 8015608:	0039      	movs	r1, r7
 801560a:	0020      	movs	r0, r4
 801560c:	f7f2 fa2c 	bl	8007a68 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8015610:	42bc      	cmp	r4, r7
 8015612:	d3a9      	bcc.n	8015568 <find_volume+0x114>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8015614:	4b49      	ldr	r3, [pc, #292]	; (801573c <find_volume+0x2e8>)
	fmt = FS_FAT12;
 8015616:	2701      	movs	r7, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8015618:	4298      	cmp	r0, r3
 801561a:	d904      	bls.n	8015626 <find_volume+0x1d2>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 801561c:	4f48      	ldr	r7, [pc, #288]	; (8015740 <find_volume+0x2ec>)
 801561e:	4287      	cmp	r7, r0
 8015620:	41bf      	sbcs	r7, r7
 8015622:	427f      	negs	r7, r7
 8015624:	3702      	adds	r7, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8015626:	4b47      	ldr	r3, [pc, #284]	; (8015744 <find_volume+0x2f0>)
 8015628:	3002      	adds	r0, #2
 801562a:	50f0      	str	r0, [r6, r3]
	fs->volbase = bsect;								/* Volume start sector */
 801562c:	9a02      	ldr	r2, [sp, #8]
 801562e:	4b46      	ldr	r3, [pc, #280]	; (8015748 <find_volume+0x2f4>)
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8015630:	4694      	mov	ip, r2
	fs->volbase = bsect;								/* Volume start sector */
 8015632:	50f2      	str	r2, [r6, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8015634:	2281      	movs	r2, #129	; 0x81
 8015636:	9b06      	ldr	r3, [sp, #24]
 8015638:	0152      	lsls	r2, r2, #5
 801563a:	4463      	add	r3, ip
 801563c:	50b3      	str	r3, [r6, r2]
	fs->database = bsect + sysect;						/* Data start sector */
 801563e:	4662      	mov	r2, ip
 8015640:	18ad      	adds	r5, r5, r2
 8015642:	4a42      	ldr	r2, [pc, #264]	; (801574c <find_volume+0x2f8>)
 8015644:	50b5      	str	r5, [r6, r2]
	if (fmt == FS_FAT32) {
 8015646:	2f03      	cmp	r7, #3
 8015648:	d14f      	bne.n	80156ea <find_volume+0x296>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 801564a:	9b04      	ldr	r3, [sp, #16]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d18b      	bne.n	8015568 <find_volume+0x114>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8015650:	4b3f      	ldr	r3, [pc, #252]	; (8015750 <find_volume+0x2fc>)
 8015652:	6af2      	ldr	r2, [r6, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8015654:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8015656:	50f2      	str	r2, [r6, r3]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8015658:	9b05      	ldr	r3, [sp, #20]
 801565a:	9905      	ldr	r1, [sp, #20]
 801565c:	3b01      	subs	r3, #1
 801565e:	1818      	adds	r0, r3, r0
 8015660:	f7f2 fa02 	bl	8007a68 <__udivsi3>
 8015664:	9b03      	ldr	r3, [sp, #12]
 8015666:	4298      	cmp	r0, r3
 8015668:	d900      	bls.n	801566c <find_volume+0x218>
 801566a:	e77d      	b.n	8015568 <find_volume+0x114>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801566c:	2301      	movs	r3, #1
 801566e:	4d39      	ldr	r5, [pc, #228]	; (8015754 <find_volume+0x300>)
 8015670:	4c39      	ldr	r4, [pc, #228]	; (8015758 <find_volume+0x304>)
 8015672:	425b      	negs	r3, r3
	fs->fsi_flag = 0x80;
 8015674:	4a39      	ldr	r2, [pc, #228]	; (801575c <find_volume+0x308>)
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8015676:	5173      	str	r3, [r6, r5]
 8015678:	5133      	str	r3, [r6, r4]
	fs->fsi_flag = 0x80;
 801567a:	3381      	adds	r3, #129	; 0x81
 801567c:	54b3      	strb	r3, [r6, r2]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 801567e:	2f03      	cmp	r7, #3
 8015680:	d123      	bne.n	80156ca <find_volume+0x276>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8015682:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8015684:	2b01      	cmp	r3, #1
 8015686:	d120      	bne.n	80156ca <find_volume+0x276>
		&& move_window(fs, bsect + 1) == FR_OK)
 8015688:	9902      	ldr	r1, [sp, #8]
 801568a:	0030      	movs	r0, r6
 801568c:	3101      	adds	r1, #1
 801568e:	f7ff fe8b 	bl	80153a8 <move_window>
 8015692:	2800      	cmp	r0, #0
 8015694:	d119      	bne.n	80156ca <find_volume+0x276>
		fs->fsi_flag = 0;
 8015696:	4b31      	ldr	r3, [pc, #196]	; (801575c <find_volume+0x308>)
 8015698:	54f0      	strb	r0, [r6, r3]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801569a:	23ff      	movs	r3, #255	; 0xff
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	5af2      	ldrh	r2, [r6, r3]
 80156a0:	4b2f      	ldr	r3, [pc, #188]	; (8015760 <find_volume+0x30c>)
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d111      	bne.n	80156ca <find_volume+0x276>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80156a6:	4b2f      	ldr	r3, [pc, #188]	; (8015764 <find_volume+0x310>)
 80156a8:	6832      	ldr	r2, [r6, #0]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d10d      	bne.n	80156ca <find_volume+0x276>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80156ae:	22f2      	movs	r2, #242	; 0xf2
 80156b0:	0052      	lsls	r2, r2, #1
 80156b2:	4b2d      	ldr	r3, [pc, #180]	; (8015768 <find_volume+0x314>)
 80156b4:	58b2      	ldr	r2, [r6, r2]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d107      	bne.n	80156ca <find_volume+0x276>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80156ba:	23f4      	movs	r3, #244	; 0xf4
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	58f3      	ldr	r3, [r6, r3]
 80156c0:	5173      	str	r3, [r6, r5]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80156c2:	23f6      	movs	r3, #246	; 0xf6
 80156c4:	005b      	lsls	r3, r3, #1
 80156c6:	58f3      	ldr	r3, [r6, r3]
 80156c8:	5133      	str	r3, [r6, r4]
	fs->fs_type = fmt;	/* FAT sub-type */
 80156ca:	2380      	movs	r3, #128	; 0x80
	fs->id = ++Fsid;	/* File system mount ID */
 80156cc:	4a27      	ldr	r2, [pc, #156]	; (801576c <find_volume+0x318>)
	fs->fs_type = fmt;	/* FAT sub-type */
 80156ce:	015b      	lsls	r3, r3, #5
 80156d0:	54f7      	strb	r7, [r6, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80156d2:	8813      	ldrh	r3, [r2, #0]
	clear_lock(fs);
 80156d4:	0030      	movs	r0, r6
	fs->id = ++Fsid;	/* File system mount ID */
 80156d6:	3301      	adds	r3, #1
 80156d8:	b29b      	uxth	r3, r3
 80156da:	8013      	strh	r3, [r2, #0]
 80156dc:	4a24      	ldr	r2, [pc, #144]	; (8015770 <find_volume+0x31c>)
 80156de:	52b3      	strh	r3, [r6, r2]
	clear_lock(fs);
 80156e0:	f7ff fda8 	bl	8015234 <clear_lock>
}
 80156e4:	9801      	ldr	r0, [sp, #4]
 80156e6:	b00d      	add	sp, #52	; 0x34
 80156e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80156ea:	9a04      	ldr	r2, [sp, #16]
 80156ec:	2a00      	cmp	r2, #0
 80156ee:	d100      	bne.n	80156f2 <find_volume+0x29e>
 80156f0:	e73a      	b.n	8015568 <find_volume+0x114>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80156f2:	9a07      	ldr	r2, [sp, #28]
 80156f4:	189a      	adds	r2, r3, r2
 80156f6:	4b16      	ldr	r3, [pc, #88]	; (8015750 <find_volume+0x2fc>)
 80156f8:	50f2      	str	r2, [r6, r3]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80156fa:	2f02      	cmp	r7, #2
 80156fc:	d101      	bne.n	8015702 <find_volume+0x2ae>
 80156fe:	0040      	lsls	r0, r0, #1
 8015700:	e7aa      	b.n	8015658 <find_volume+0x204>
 8015702:	2303      	movs	r3, #3
 8015704:	2201      	movs	r2, #1
 8015706:	4343      	muls	r3, r0
 8015708:	4010      	ands	r0, r2
 801570a:	085b      	lsrs	r3, r3, #1
 801570c:	1818      	adds	r0, r3, r0
 801570e:	e7a3      	b.n	8015658 <find_volume+0x204>
	if (vol < 0) return FR_INVALID_DRIVE;
 8015710:	230b      	movs	r3, #11
 8015712:	e6c9      	b.n	80154a8 <find_volume+0x54>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015714:	230c      	movs	r3, #12
 8015716:	e6c7      	b.n	80154a8 <find_volume+0x54>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015718:	2303      	movs	r3, #3
 801571a:	e6c5      	b.n	80154a8 <find_volume+0x54>
 801571c:	200006a0 	.word	0x200006a0
 8015720:	00001001 	.word	0x00001001
 8015724:	0000100a 	.word	0x0000100a
 8015728:	fffffe00 	.word	0xfffffe00
 801572c:	00001018 	.word	0x00001018
 8015730:	00001003 	.word	0x00001003
 8015734:	00001002 	.word	0x00001002
 8015738:	00001008 	.word	0x00001008
 801573c:	00000ff5 	.word	0x00000ff5
 8015740:	0000fff5 	.word	0x0000fff5
 8015744:	00001014 	.word	0x00001014
 8015748:	0000101c 	.word	0x0000101c
 801574c:	00001028 	.word	0x00001028
 8015750:	00001024 	.word	0x00001024
 8015754:	00001010 	.word	0x00001010
 8015758:	0000100c 	.word	0x0000100c
 801575c:	00001005 	.word	0x00001005
 8015760:	0000aa55 	.word	0x0000aa55
 8015764:	41615252 	.word	0x41615252
 8015768:	61417272 	.word	0x61417272
 801576c:	200006bc 	.word	0x200006bc
 8015770:	00001006 	.word	0x00001006

08015774 <sync_fs>:
{
 8015774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015776:	0004      	movs	r4, r0
	res = sync_window(fs);
 8015778:	f7ff fe0a 	bl	8015390 <sync_window>
 801577c:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 801577e:	d137      	bne.n	80157f0 <sync_fs+0x7c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015780:	2380      	movs	r3, #128	; 0x80
 8015782:	015b      	lsls	r3, r3, #5
 8015784:	5ce3      	ldrb	r3, [r4, r3]
 8015786:	2b03      	cmp	r3, #3
 8015788:	d129      	bne.n	80157de <sync_fs+0x6a>
 801578a:	4e1a      	ldr	r6, [pc, #104]	; (80157f4 <sync_fs+0x80>)
 801578c:	5da7      	ldrb	r7, [r4, r6]
 801578e:	2f01      	cmp	r7, #1
 8015790:	d125      	bne.n	80157de <sync_fs+0x6a>
			mem_set(fs->win.d8, 0, SS(fs));
 8015792:	4b19      	ldr	r3, [pc, #100]	; (80157f8 <sync_fs+0x84>)
 8015794:	0001      	movs	r1, r0
 8015796:	5ae2      	ldrh	r2, [r4, r3]
 8015798:	0020      	movs	r0, r4
 801579a:	f7ff fc88 	bl	80150ae <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 801579e:	23ff      	movs	r3, #255	; 0xff
 80157a0:	4a16      	ldr	r2, [pc, #88]	; (80157fc <sync_fs+0x88>)
 80157a2:	005b      	lsls	r3, r3, #1
 80157a4:	52e2      	strh	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80157a6:	4b16      	ldr	r3, [pc, #88]	; (8015800 <sync_fs+0x8c>)
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80157a8:	4a16      	ldr	r2, [pc, #88]	; (8015804 <sync_fs+0x90>)
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80157aa:	6023      	str	r3, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80157ac:	23f2      	movs	r3, #242	; 0xf2
 80157ae:	005b      	lsls	r3, r3, #1
 80157b0:	50e2      	str	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80157b2:	4b15      	ldr	r3, [pc, #84]	; (8015808 <sync_fs+0x94>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80157b4:	0021      	movs	r1, r4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80157b6:	58e2      	ldr	r2, [r4, r3]
 80157b8:	23f4      	movs	r3, #244	; 0xf4
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	50e2      	str	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80157be:	4b13      	ldr	r3, [pc, #76]	; (801580c <sync_fs+0x98>)
 80157c0:	58e2      	ldr	r2, [r4, r3]
 80157c2:	23f6      	movs	r3, #246	; 0xf6
 80157c4:	005b      	lsls	r3, r3, #1
 80157c6:	50e2      	str	r2, [r4, r3]
			fs->winsect = fs->volbase + 1;
 80157c8:	4b11      	ldr	r3, [pc, #68]	; (8015810 <sync_fs+0x9c>)
 80157ca:	58e2      	ldr	r2, [r4, r3]
 80157cc:	4b11      	ldr	r3, [pc, #68]	; (8015814 <sync_fs+0xa0>)
 80157ce:	3201      	adds	r2, #1
 80157d0:	50e2      	str	r2, [r4, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80157d2:	4b11      	ldr	r3, [pc, #68]	; (8015818 <sync_fs+0xa4>)
 80157d4:	5ce0      	ldrb	r0, [r4, r3]
 80157d6:	003b      	movs	r3, r7
 80157d8:	f7ff fc44 	bl	8015064 <disk_write>
			fs->fsi_flag = 0;
 80157dc:	55a5      	strb	r5, [r4, r6]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80157de:	2200      	movs	r2, #0
 80157e0:	4b0d      	ldr	r3, [pc, #52]	; (8015818 <sync_fs+0xa4>)
 80157e2:	0011      	movs	r1, r2
 80157e4:	5ce0      	ldrb	r0, [r4, r3]
 80157e6:	f7ff fc4b 	bl	8015080 <disk_ioctl>
 80157ea:	1e43      	subs	r3, r0, #1
 80157ec:	4198      	sbcs	r0, r3
	res = sync_window(fs);
 80157ee:	b2c0      	uxtb	r0, r0
}
 80157f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157f2:	46c0      	nop			; (mov r8, r8)
 80157f4:	00001005 	.word	0x00001005
 80157f8:	0000100a 	.word	0x0000100a
 80157fc:	ffffaa55 	.word	0xffffaa55
 8015800:	41615252 	.word	0x41615252
 8015804:	61417272 	.word	0x61417272
 8015808:	00001010 	.word	0x00001010
 801580c:	0000100c 	.word	0x0000100c
 8015810:	0000101c 	.word	0x0000101c
 8015814:	0000102c 	.word	0x0000102c
 8015818:	00001001 	.word	0x00001001

0801581c <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 801581c:	7ecb      	ldrb	r3, [r1, #27]
 801581e:	7e8a      	ldrb	r2, [r1, #26]
 8015820:	021b      	lsls	r3, r3, #8
 8015822:	4313      	orrs	r3, r2
	if (fs->fs_type == FS_FAT32)
 8015824:	2803      	cmp	r0, #3
 8015826:	d105      	bne.n	8015834 <ld_clust.isra.0+0x18>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8015828:	7d4a      	ldrb	r2, [r1, #21]
 801582a:	7d08      	ldrb	r0, [r1, #20]
 801582c:	0212      	lsls	r2, r2, #8
 801582e:	4302      	orrs	r2, r0
 8015830:	0412      	lsls	r2, r2, #16
 8015832:	4313      	orrs	r3, r2
}
 8015834:	0018      	movs	r0, r3
 8015836:	4770      	bx	lr

08015838 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015838:	4a07      	ldr	r2, [pc, #28]	; (8015858 <clust2sect+0x20>)
	clst -= 2;
 801583a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801583c:	5882      	ldr	r2, [r0, r2]
{
 801583e:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015840:	3a02      	subs	r2, #2
 8015842:	2000      	movs	r0, #0
 8015844:	428a      	cmp	r2, r1
 8015846:	d905      	bls.n	8015854 <clust2sect+0x1c>
	return clst * fs->csize + fs->database;
 8015848:	4a04      	ldr	r2, [pc, #16]	; (801585c <clust2sect+0x24>)
 801584a:	5c98      	ldrb	r0, [r3, r2]
 801584c:	4a04      	ldr	r2, [pc, #16]	; (8015860 <clust2sect+0x28>)
 801584e:	4341      	muls	r1, r0
 8015850:	5898      	ldr	r0, [r3, r2]
 8015852:	1808      	adds	r0, r1, r0
}
 8015854:	4770      	bx	lr
 8015856:	46c0      	nop			; (mov r8, r8)
 8015858:	00001014 	.word	0x00001014
 801585c:	00001002 	.word	0x00001002
 8015860:	00001028 	.word	0x00001028

08015864 <get_fat>:
{
 8015864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 8015866:	2501      	movs	r5, #1
{
 8015868:	0004      	movs	r4, r0
 801586a:	000e      	movs	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801586c:	42a9      	cmp	r1, r5
 801586e:	d91f      	bls.n	80158b0 <get_fat+0x4c>
 8015870:	4b40      	ldr	r3, [pc, #256]	; (8015974 <get_fat+0x110>)
 8015872:	58c3      	ldr	r3, [r0, r3]
 8015874:	428b      	cmp	r3, r1
 8015876:	d91b      	bls.n	80158b0 <get_fat+0x4c>
		switch (fs->fs_type) {
 8015878:	2380      	movs	r3, #128	; 0x80
 801587a:	015b      	lsls	r3, r3, #5
 801587c:	5cc3      	ldrb	r3, [r0, r3]
 801587e:	2b02      	cmp	r3, #2
 8015880:	d03e      	beq.n	8015900 <get_fat+0x9c>
 8015882:	2b03      	cmp	r3, #3
 8015884:	d055      	beq.n	8015932 <get_fat+0xce>
 8015886:	42ab      	cmp	r3, r5
 8015888:	d112      	bne.n	80158b0 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801588a:	4b3b      	ldr	r3, [pc, #236]	; (8015978 <get_fat+0x114>)
			bc = (UINT)clst; bc += bc / 2;
 801588c:	084f      	lsrs	r7, r1, #1
 801588e:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015890:	5ac1      	ldrh	r1, [r0, r3]
 8015892:	0038      	movs	r0, r7
 8015894:	f7f2 f8e8 	bl	8007a68 <__udivsi3>
 8015898:	2381      	movs	r3, #129	; 0x81
 801589a:	015b      	lsls	r3, r3, #5
 801589c:	58e3      	ldr	r3, [r4, r3]
 801589e:	18c1      	adds	r1, r0, r3
 80158a0:	0020      	movs	r0, r4
 80158a2:	9300      	str	r3, [sp, #0]
 80158a4:	f7ff fd80 	bl	80153a8 <move_window>
 80158a8:	2800      	cmp	r0, #0
 80158aa:	d003      	beq.n	80158b4 <get_fat+0x50>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80158ac:	2501      	movs	r5, #1
 80158ae:	426d      	negs	r5, r5
}
 80158b0:	0028      	movs	r0, r5
 80158b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 80158b4:	1c7b      	adds	r3, r7, #1
 80158b6:	9300      	str	r3, [sp, #0]
 80158b8:	4b2f      	ldr	r3, [pc, #188]	; (8015978 <get_fat+0x114>)
 80158ba:	0038      	movs	r0, r7
 80158bc:	5ae2      	ldrh	r2, [r4, r3]
 80158be:	0011      	movs	r1, r2
 80158c0:	9201      	str	r2, [sp, #4]
 80158c2:	f7f2 f957 	bl	8007b74 <__aeabi_uidivmod>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80158c6:	9800      	ldr	r0, [sp, #0]
			wc = fs->win.d8[bc++ % SS(fs)];
 80158c8:	5c67      	ldrb	r7, [r4, r1]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80158ca:	9901      	ldr	r1, [sp, #4]
 80158cc:	f7f2 f8cc 	bl	8007a68 <__udivsi3>
 80158d0:	2281      	movs	r2, #129	; 0x81
 80158d2:	0152      	lsls	r2, r2, #5
 80158d4:	58a1      	ldr	r1, [r4, r2]
 80158d6:	1841      	adds	r1, r0, r1
 80158d8:	0020      	movs	r0, r4
 80158da:	f7ff fd65 	bl	80153a8 <move_window>
 80158de:	2800      	cmp	r0, #0
 80158e0:	d1e4      	bne.n	80158ac <get_fat+0x48>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80158e2:	4b25      	ldr	r3, [pc, #148]	; (8015978 <get_fat+0x114>)
 80158e4:	9800      	ldr	r0, [sp, #0]
 80158e6:	5ae1      	ldrh	r1, [r4, r3]
 80158e8:	f7f2 f944 	bl	8007b74 <__aeabi_uidivmod>
 80158ec:	5c63      	ldrb	r3, [r4, r1]
 80158ee:	021b      	lsls	r3, r3, #8
 80158f0:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80158f2:	422e      	tst	r6, r5
 80158f4:	d001      	beq.n	80158fa <get_fat+0x96>
 80158f6:	093d      	lsrs	r5, r7, #4
 80158f8:	e7da      	b.n	80158b0 <get_fat+0x4c>
 80158fa:	053f      	lsls	r7, r7, #20
 80158fc:	0d3d      	lsrs	r5, r7, #20
 80158fe:	e7d7      	b.n	80158b0 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015900:	4d1d      	ldr	r5, [pc, #116]	; (8015978 <get_fat+0x114>)
 8015902:	5b41      	ldrh	r1, [r0, r5]
 8015904:	0030      	movs	r0, r6
 8015906:	0849      	lsrs	r1, r1, #1
 8015908:	f7f2 f8ae 	bl	8007a68 <__udivsi3>
 801590c:	2381      	movs	r3, #129	; 0x81
 801590e:	015b      	lsls	r3, r3, #5
 8015910:	58e1      	ldr	r1, [r4, r3]
 8015912:	1841      	adds	r1, r0, r1
 8015914:	0020      	movs	r0, r4
 8015916:	f7ff fd47 	bl	80153a8 <move_window>
 801591a:	2800      	cmp	r0, #0
 801591c:	d1c6      	bne.n	80158ac <get_fat+0x48>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 801591e:	5b61      	ldrh	r1, [r4, r5]
 8015920:	0070      	lsls	r0, r6, #1
 8015922:	f7f2 f927 	bl	8007b74 <__aeabi_uidivmod>
			val = LD_WORD(p);
 8015926:	1863      	adds	r3, r4, r1
 8015928:	785d      	ldrb	r5, [r3, #1]
 801592a:	5c63      	ldrb	r3, [r4, r1]
 801592c:	022d      	lsls	r5, r5, #8
 801592e:	431d      	orrs	r5, r3
			break;
 8015930:	e7be      	b.n	80158b0 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015932:	4d11      	ldr	r5, [pc, #68]	; (8015978 <get_fat+0x114>)
 8015934:	5b41      	ldrh	r1, [r0, r5]
 8015936:	0030      	movs	r0, r6
 8015938:	0889      	lsrs	r1, r1, #2
 801593a:	f7f2 f895 	bl	8007a68 <__udivsi3>
 801593e:	2381      	movs	r3, #129	; 0x81
 8015940:	015b      	lsls	r3, r3, #5
 8015942:	58e1      	ldr	r1, [r4, r3]
 8015944:	1841      	adds	r1, r0, r1
 8015946:	0020      	movs	r0, r4
 8015948:	f7ff fd2e 	bl	80153a8 <move_window>
 801594c:	2800      	cmp	r0, #0
 801594e:	d1ad      	bne.n	80158ac <get_fat+0x48>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8015950:	5b61      	ldrh	r1, [r4, r5]
 8015952:	00b0      	lsls	r0, r6, #2
 8015954:	f7f2 f90e 	bl	8007b74 <__aeabi_uidivmod>
 8015958:	1863      	adds	r3, r4, r1
			val = LD_DWORD(p) & 0x0FFFFFFF;
 801595a:	78dd      	ldrb	r5, [r3, #3]
 801595c:	789a      	ldrb	r2, [r3, #2]
 801595e:	062d      	lsls	r5, r5, #24
 8015960:	0412      	lsls	r2, r2, #16
 8015962:	4315      	orrs	r5, r2
 8015964:	785b      	ldrb	r3, [r3, #1]
 8015966:	5c62      	ldrb	r2, [r4, r1]
 8015968:	021b      	lsls	r3, r3, #8
 801596a:	4315      	orrs	r5, r2
 801596c:	431d      	orrs	r5, r3
 801596e:	012d      	lsls	r5, r5, #4
 8015970:	092d      	lsrs	r5, r5, #4
			break;
 8015972:	e79d      	b.n	80158b0 <get_fat+0x4c>
 8015974:	00001014 	.word	0x00001014
 8015978:	0000100a 	.word	0x0000100a

0801597c <dir_sdi>:
	dp->index = (WORD)idx;	/* Current index */
 801597c:	4b2e      	ldr	r3, [pc, #184]	; (8015a38 <dir_sdi+0xbc>)
{
 801597e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015980:	000e      	movs	r6, r1
	dp->index = (WORD)idx;	/* Current index */
 8015982:	52c1      	strh	r1, [r0, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8015984:	492d      	ldr	r1, [pc, #180]	; (8015a3c <dir_sdi+0xc0>)
{
 8015986:	0005      	movs	r5, r0
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8015988:	5844      	ldr	r4, [r0, r1]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 801598a:	2c01      	cmp	r4, #1
 801598c:	d101      	bne.n	8015992 <dir_sdi+0x16>
		return FR_INT_ERR;
 801598e:	2002      	movs	r0, #2
}
 8015990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8015992:	2280      	movs	r2, #128	; 0x80
 8015994:	0152      	lsls	r2, r2, #5
 8015996:	5883      	ldr	r3, [r0, r2]
 8015998:	4f29      	ldr	r7, [pc, #164]	; (8015a40 <dir_sdi+0xc4>)
 801599a:	59d8      	ldr	r0, [r3, r7]
 801599c:	42a0      	cmp	r0, r4
 801599e:	d9f6      	bls.n	801598e <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80159a0:	2c00      	cmp	r4, #0
 80159a2:	d124      	bne.n	80159ee <dir_sdi+0x72>
 80159a4:	5c9a      	ldrb	r2, [r3, r2]
 80159a6:	2a03      	cmp	r2, #3
 80159a8:	d103      	bne.n	80159b2 <dir_sdi+0x36>
		clst = dp->fs->dirbase;
 80159aa:	4a26      	ldr	r2, [pc, #152]	; (8015a44 <dir_sdi+0xc8>)
 80159ac:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	d11c      	bne.n	80159ec <dir_sdi+0x70>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80159b2:	5a5a      	ldrh	r2, [r3, r1]
 80159b4:	42b2      	cmp	r2, r6
 80159b6:	d9ea      	bls.n	801598e <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 80159b8:	4a22      	ldr	r2, [pc, #136]	; (8015a44 <dir_sdi+0xc8>)
 80159ba:	589b      	ldr	r3, [r3, r2]
 80159bc:	9300      	str	r3, [sp, #0]
	dp->clust = clst;	/* Current cluster# */
 80159be:	4b22      	ldr	r3, [pc, #136]	; (8015a48 <dir_sdi+0xcc>)
 80159c0:	50ec      	str	r4, [r5, r3]
	if (!sect) return FR_INT_ERR;
 80159c2:	9b00      	ldr	r3, [sp, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d0e2      	beq.n	801598e <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80159c8:	2380      	movs	r3, #128	; 0x80
 80159ca:	015b      	lsls	r3, r3, #5
 80159cc:	58ec      	ldr	r4, [r5, r3]
 80159ce:	4b1f      	ldr	r3, [pc, #124]	; (8015a4c <dir_sdi+0xd0>)
 80159d0:	0030      	movs	r0, r6
 80159d2:	5ae1      	ldrh	r1, [r4, r3]
 80159d4:	0949      	lsrs	r1, r1, #5
 80159d6:	f7f2 f8cd 	bl	8007b74 <__aeabi_uidivmod>
 80159da:	9b00      	ldr	r3, [sp, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80159dc:	0149      	lsls	r1, r1, #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80159de:	18c0      	adds	r0, r0, r3
 80159e0:	4b1b      	ldr	r3, [pc, #108]	; (8015a50 <dir_sdi+0xd4>)
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80159e2:	1864      	adds	r4, r4, r1
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80159e4:	50e8      	str	r0, [r5, r3]
	return FR_OK;
 80159e6:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80159e8:	51ec      	str	r4, [r5, r7]
	return FR_OK;
 80159ea:	e7d1      	b.n	8015990 <dir_sdi+0x14>
 80159ec:	0014      	movs	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80159ee:	4a17      	ldr	r2, [pc, #92]	; (8015a4c <dir_sdi+0xd0>)
 80159f0:	4918      	ldr	r1, [pc, #96]	; (8015a54 <dir_sdi+0xd8>)
 80159f2:	5a9a      	ldrh	r2, [r3, r2]
 80159f4:	5c5b      	ldrb	r3, [r3, r1]
 80159f6:	0952      	lsrs	r2, r2, #5
 80159f8:	4353      	muls	r3, r2
 80159fa:	9300      	str	r3, [sp, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80159fc:	2380      	movs	r3, #128	; 0x80
 80159fe:	015b      	lsls	r3, r3, #5
 8015a00:	58e8      	ldr	r0, [r5, r3]
		while (idx >= ic) {	/* Follow cluster chain */
 8015a02:	9b00      	ldr	r3, [sp, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8015a04:	0021      	movs	r1, r4
		while (idx >= ic) {	/* Follow cluster chain */
 8015a06:	429e      	cmp	r6, r3
 8015a08:	d203      	bcs.n	8015a12 <dir_sdi+0x96>
		sect = clust2sect(dp->fs, clst);
 8015a0a:	f7ff ff15 	bl	8015838 <clust2sect>
 8015a0e:	9000      	str	r0, [sp, #0]
 8015a10:	e7d5      	b.n	80159be <dir_sdi+0x42>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8015a12:	f7ff ff27 	bl	8015864 <get_fat>
 8015a16:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015a18:	1c43      	adds	r3, r0, #1
 8015a1a:	d00b      	beq.n	8015a34 <dir_sdi+0xb8>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8015a1c:	2801      	cmp	r0, #1
 8015a1e:	d9b6      	bls.n	801598e <dir_sdi+0x12>
 8015a20:	2380      	movs	r3, #128	; 0x80
 8015a22:	015b      	lsls	r3, r3, #5
 8015a24:	58eb      	ldr	r3, [r5, r3]
 8015a26:	9301      	str	r3, [sp, #4]
 8015a28:	59db      	ldr	r3, [r3, r7]
 8015a2a:	4283      	cmp	r3, r0
 8015a2c:	d9af      	bls.n	801598e <dir_sdi+0x12>
			idx -= ic;
 8015a2e:	9b00      	ldr	r3, [sp, #0]
 8015a30:	1af6      	subs	r6, r6, r3
 8015a32:	e7e3      	b.n	80159fc <dir_sdi+0x80>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015a34:	2001      	movs	r0, #1
 8015a36:	e7ab      	b.n	8015990 <dir_sdi+0x14>
 8015a38:	00001006 	.word	0x00001006
 8015a3c:	00001008 	.word	0x00001008
 8015a40:	00001014 	.word	0x00001014
 8015a44:	00001024 	.word	0x00001024
 8015a48:	0000100c 	.word	0x0000100c
 8015a4c:	0000100a 	.word	0x0000100a
 8015a50:	00001010 	.word	0x00001010
 8015a54:	00001002 	.word	0x00001002

08015a58 <put_fat>:
{
 8015a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	0004      	movs	r4, r0
 8015a5e:	000e      	movs	r6, r1
		res = FR_INT_ERR;
 8015a60:	2502      	movs	r5, #2
{
 8015a62:	9201      	str	r2, [sp, #4]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8015a64:	2901      	cmp	r1, #1
 8015a66:	d955      	bls.n	8015b14 <put_fat+0xbc>
 8015a68:	4b50      	ldr	r3, [pc, #320]	; (8015bac <put_fat+0x154>)
 8015a6a:	58c3      	ldr	r3, [r0, r3]
 8015a6c:	428b      	cmp	r3, r1
 8015a6e:	d951      	bls.n	8015b14 <put_fat+0xbc>
		switch (fs->fs_type) {
 8015a70:	2380      	movs	r3, #128	; 0x80
 8015a72:	015b      	lsls	r3, r3, #5
 8015a74:	5cc3      	ldrb	r3, [r0, r3]
 8015a76:	9302      	str	r3, [sp, #8]
 8015a78:	42ab      	cmp	r3, r5
 8015a7a:	d056      	beq.n	8015b2a <put_fat+0xd2>
 8015a7c:	2b03      	cmp	r3, #3
 8015a7e:	d100      	bne.n	8015a82 <put_fat+0x2a>
 8015a80:	e071      	b.n	8015b66 <put_fat+0x10e>
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d146      	bne.n	8015b14 <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015a86:	4b4a      	ldr	r3, [pc, #296]	; (8015bb0 <put_fat+0x158>)
			bc = (UINT)clst; bc += bc / 2;
 8015a88:	084f      	lsrs	r7, r1, #1
 8015a8a:	187f      	adds	r7, r7, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015a8c:	5ac1      	ldrh	r1, [r0, r3]
 8015a8e:	0038      	movs	r0, r7
 8015a90:	f7f1 ffea 	bl	8007a68 <__udivsi3>
 8015a94:	2381      	movs	r3, #129	; 0x81
 8015a96:	015b      	lsls	r3, r3, #5
 8015a98:	58e1      	ldr	r1, [r4, r3]
 8015a9a:	1841      	adds	r1, r0, r1
 8015a9c:	0020      	movs	r0, r4
 8015a9e:	f7ff fc83 	bl	80153a8 <move_window>
 8015aa2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8015aa4:	d136      	bne.n	8015b14 <put_fat+0xbc>
			p = &fs->win.d8[bc++ % SS(fs)];
 8015aa6:	4b42      	ldr	r3, [pc, #264]	; (8015bb0 <put_fat+0x158>)
 8015aa8:	1c7a      	adds	r2, r7, #1
 8015aaa:	5ae5      	ldrh	r5, [r4, r3]
 8015aac:	0038      	movs	r0, r7
 8015aae:	0029      	movs	r1, r5
 8015ab0:	9203      	str	r2, [sp, #12]
 8015ab2:	f7f2 f85f 	bl	8007b74 <__aeabi_uidivmod>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015ab6:	466b      	mov	r3, sp
 8015ab8:	9f02      	ldr	r7, [sp, #8]
 8015aba:	9a02      	ldr	r2, [sp, #8]
 8015abc:	791b      	ldrb	r3, [r3, #4]
 8015abe:	4037      	ands	r7, r6
 8015ac0:	4216      	tst	r6, r2
 8015ac2:	d009      	beq.n	8015ad8 <put_fat+0x80>
 8015ac4:	220f      	movs	r2, #15
 8015ac6:	20ff      	movs	r0, #255	; 0xff
 8015ac8:	5c63      	ldrb	r3, [r4, r1]
 8015aca:	0100      	lsls	r0, r0, #4
 8015acc:	4013      	ands	r3, r2
 8015ace:	9a01      	ldr	r2, [sp, #4]
 8015ad0:	0112      	lsls	r2, r2, #4
 8015ad2:	4002      	ands	r2, r0
 8015ad4:	4313      	orrs	r3, r2
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	5463      	strb	r3, [r4, r1]
			fs->wflag = 1;
 8015ada:	2301      	movs	r3, #1
 8015adc:	4e35      	ldr	r6, [pc, #212]	; (8015bb4 <put_fat+0x15c>)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015ade:	0029      	movs	r1, r5
 8015ae0:	9803      	ldr	r0, [sp, #12]
			fs->wflag = 1;
 8015ae2:	55a3      	strb	r3, [r4, r6]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015ae4:	f7f1 ffc0 	bl	8007a68 <__udivsi3>
 8015ae8:	2381      	movs	r3, #129	; 0x81
 8015aea:	015b      	lsls	r3, r3, #5
 8015aec:	58e1      	ldr	r1, [r4, r3]
 8015aee:	1841      	adds	r1, r0, r1
 8015af0:	0020      	movs	r0, r4
 8015af2:	f7ff fc59 	bl	80153a8 <move_window>
 8015af6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8015af8:	d10c      	bne.n	8015b14 <put_fat+0xbc>
			p = &fs->win.d8[bc % SS(fs)];
 8015afa:	4b2d      	ldr	r3, [pc, #180]	; (8015bb0 <put_fat+0x158>)
 8015afc:	9803      	ldr	r0, [sp, #12]
 8015afe:	5ae1      	ldrh	r1, [r4, r3]
 8015b00:	f7f2 f838 	bl	8007b74 <__aeabi_uidivmod>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015b04:	2f00      	cmp	r7, #0
 8015b06:	d008      	beq.n	8015b1a <put_fat+0xc2>
 8015b08:	9b01      	ldr	r3, [sp, #4]
 8015b0a:	091a      	lsrs	r2, r3, #4
 8015b0c:	b2d2      	uxtb	r2, r2
			fs->wflag = 1;
 8015b0e:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015b10:	5462      	strb	r2, [r4, r1]
			fs->wflag = 1;
 8015b12:	55a3      	strb	r3, [r4, r6]
}
 8015b14:	0028      	movs	r0, r5
 8015b16:	b005      	add	sp, #20
 8015b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015b1a:	200f      	movs	r0, #15
 8015b1c:	9b01      	ldr	r3, [sp, #4]
 8015b1e:	5c62      	ldrb	r2, [r4, r1]
 8015b20:	0a1b      	lsrs	r3, r3, #8
 8015b22:	4382      	bics	r2, r0
 8015b24:	4003      	ands	r3, r0
 8015b26:	431a      	orrs	r2, r3
 8015b28:	e7f1      	b.n	8015b0e <put_fat+0xb6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015b2a:	4f21      	ldr	r7, [pc, #132]	; (8015bb0 <put_fat+0x158>)
 8015b2c:	5bc1      	ldrh	r1, [r0, r7]
 8015b2e:	0030      	movs	r0, r6
 8015b30:	0849      	lsrs	r1, r1, #1
 8015b32:	f7f1 ff99 	bl	8007a68 <__udivsi3>
 8015b36:	2381      	movs	r3, #129	; 0x81
 8015b38:	015b      	lsls	r3, r3, #5
 8015b3a:	58e1      	ldr	r1, [r4, r3]
 8015b3c:	1841      	adds	r1, r0, r1
 8015b3e:	0020      	movs	r0, r4
 8015b40:	f7ff fc32 	bl	80153a8 <move_window>
 8015b44:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8015b46:	d1e5      	bne.n	8015b14 <put_fat+0xbc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8015b48:	5be1      	ldrh	r1, [r4, r7]
 8015b4a:	0070      	lsls	r0, r6, #1
 8015b4c:	f7f2 f812 	bl	8007b74 <__aeabi_uidivmod>
			ST_WORD(p, (WORD)val);
 8015b50:	9b01      	ldr	r3, [sp, #4]
 8015b52:	5463      	strb	r3, [r4, r1]
 8015b54:	466b      	mov	r3, sp
 8015b56:	889a      	ldrh	r2, [r3, #4]
 8015b58:	1861      	adds	r1, r4, r1
 8015b5a:	0a12      	lsrs	r2, r2, #8
 8015b5c:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 8015b5e:	2201      	movs	r2, #1
 8015b60:	4b14      	ldr	r3, [pc, #80]	; (8015bb4 <put_fat+0x15c>)
 8015b62:	54e2      	strb	r2, [r4, r3]
			break;
 8015b64:	e7d6      	b.n	8015b14 <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015b66:	4f12      	ldr	r7, [pc, #72]	; (8015bb0 <put_fat+0x158>)
 8015b68:	5bc1      	ldrh	r1, [r0, r7]
 8015b6a:	0030      	movs	r0, r6
 8015b6c:	0889      	lsrs	r1, r1, #2
 8015b6e:	f7f1 ff7b 	bl	8007a68 <__udivsi3>
 8015b72:	2381      	movs	r3, #129	; 0x81
 8015b74:	015b      	lsls	r3, r3, #5
 8015b76:	58e1      	ldr	r1, [r4, r3]
 8015b78:	1841      	adds	r1, r0, r1
 8015b7a:	0020      	movs	r0, r4
 8015b7c:	f7ff fc14 	bl	80153a8 <move_window>
 8015b80:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8015b82:	d1c7      	bne.n	8015b14 <put_fat+0xbc>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8015b84:	5be1      	ldrh	r1, [r4, r7]
 8015b86:	00b0      	lsls	r0, r6, #2
 8015b88:	f7f1 fff4 	bl	8007b74 <__aeabi_uidivmod>
 8015b8c:	1863      	adds	r3, r4, r1
			val |= LD_DWORD(p) & 0xF0000000;
 8015b8e:	78da      	ldrb	r2, [r3, #3]
 8015b90:	9801      	ldr	r0, [sp, #4]
 8015b92:	0912      	lsrs	r2, r2, #4
 8015b94:	0712      	lsls	r2, r2, #28
 8015b96:	4302      	orrs	r2, r0
			ST_DWORD(p, val);
 8015b98:	5462      	strb	r2, [r4, r1]
 8015b9a:	b291      	uxth	r1, r2
 8015b9c:	0a09      	lsrs	r1, r1, #8
 8015b9e:	7059      	strb	r1, [r3, #1]
 8015ba0:	0c11      	lsrs	r1, r2, #16
 8015ba2:	0e12      	lsrs	r2, r2, #24
 8015ba4:	7099      	strb	r1, [r3, #2]
 8015ba6:	70da      	strb	r2, [r3, #3]
 8015ba8:	e7d9      	b.n	8015b5e <put_fat+0x106>
 8015baa:	46c0      	nop			; (mov r8, r8)
 8015bac:	00001014 	.word	0x00001014
 8015bb0:	0000100a 	.word	0x0000100a
 8015bb4:	00001004 	.word	0x00001004

08015bb8 <create_chain>:
{
 8015bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bba:	0005      	movs	r5, r0
 8015bbc:	1e0e      	subs	r6, r1, #0
	if (clst == 0) {		/* Create a new chain */
 8015bbe:	d109      	bne.n	8015bd4 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
 8015bc0:	4b29      	ldr	r3, [pc, #164]	; (8015c68 <create_chain+0xb0>)
 8015bc2:	58c7      	ldr	r7, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8015bc4:	2f00      	cmp	r7, #0
 8015bc6:	d003      	beq.n	8015bd0 <create_chain+0x18>
 8015bc8:	4b28      	ldr	r3, [pc, #160]	; (8015c6c <create_chain+0xb4>)
 8015bca:	58c3      	ldr	r3, [r0, r3]
 8015bcc:	429f      	cmp	r7, r3
 8015bce:	d310      	bcc.n	8015bf2 <create_chain+0x3a>
 8015bd0:	2701      	movs	r7, #1
 8015bd2:	e00e      	b.n	8015bf2 <create_chain+0x3a>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8015bd4:	f7ff fe46 	bl	8015864 <get_fat>
 8015bd8:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8015bda:	2801      	cmp	r0, #1
 8015bdc:	d802      	bhi.n	8015be4 <create_chain+0x2c>
 8015bde:	2401      	movs	r4, #1
}
 8015be0:	0020      	movs	r0, r4
 8015be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015be4:	1c43      	adds	r3, r0, #1
 8015be6:	d03c      	beq.n	8015c62 <create_chain+0xaa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015be8:	4b20      	ldr	r3, [pc, #128]	; (8015c6c <create_chain+0xb4>)
 8015bea:	0037      	movs	r7, r6
 8015bec:	58eb      	ldr	r3, [r5, r3]
 8015bee:	4283      	cmp	r3, r0
 8015bf0:	d8f6      	bhi.n	8015be0 <create_chain+0x28>
	ncl = scl;				/* Start cluster */
 8015bf2:	003c      	movs	r4, r7
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8015bf4:	4b1d      	ldr	r3, [pc, #116]	; (8015c6c <create_chain+0xb4>)
		ncl++;							/* Next cluster */
 8015bf6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8015bf8:	58eb      	ldr	r3, [r5, r3]
 8015bfa:	42a3      	cmp	r3, r4
 8015bfc:	d804      	bhi.n	8015c08 <create_chain+0x50>
			if (ncl > scl) return 0;	/* No free cluster */
 8015bfe:	2f01      	cmp	r7, #1
 8015c00:	d801      	bhi.n	8015c06 <create_chain+0x4e>
 8015c02:	2400      	movs	r4, #0
 8015c04:	e7ec      	b.n	8015be0 <create_chain+0x28>
			ncl = 2;
 8015c06:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8015c08:	0021      	movs	r1, r4
 8015c0a:	0028      	movs	r0, r5
 8015c0c:	f7ff fe2a 	bl	8015864 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d006      	beq.n	8015c22 <create_chain+0x6a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8015c14:	1c43      	adds	r3, r0, #1
 8015c16:	d024      	beq.n	8015c62 <create_chain+0xaa>
 8015c18:	2801      	cmp	r0, #1
 8015c1a:	d0e0      	beq.n	8015bde <create_chain+0x26>
		if (ncl == scl) return 0;		/* No free cluster */
 8015c1c:	42bc      	cmp	r4, r7
 8015c1e:	d1e9      	bne.n	8015bf4 <create_chain+0x3c>
 8015c20:	e7ef      	b.n	8015c02 <create_chain+0x4a>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8015c22:	0021      	movs	r1, r4
 8015c24:	0028      	movs	r0, r5
 8015c26:	4a12      	ldr	r2, [pc, #72]	; (8015c70 <create_chain+0xb8>)
 8015c28:	f7ff ff16 	bl	8015a58 <put_fat>
	if (res == FR_OK && clst != 0) {
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	d116      	bne.n	8015c5e <create_chain+0xa6>
 8015c30:	2e00      	cmp	r6, #0
 8015c32:	d10d      	bne.n	8015c50 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
 8015c34:	4b0c      	ldr	r3, [pc, #48]	; (8015c68 <create_chain+0xb0>)
		if (fs->free_clust != 0xFFFFFFFF) {
 8015c36:	4a0f      	ldr	r2, [pc, #60]	; (8015c74 <create_chain+0xbc>)
		fs->last_clust = ncl;			/* Update FSINFO */
 8015c38:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8015c3a:	58ab      	ldr	r3, [r5, r2]
 8015c3c:	1c59      	adds	r1, r3, #1
 8015c3e:	d0cf      	beq.n	8015be0 <create_chain+0x28>
			fs->free_clust--;
 8015c40:	3b01      	subs	r3, #1
 8015c42:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 8015c44:	2301      	movs	r3, #1
 8015c46:	4a0c      	ldr	r2, [pc, #48]	; (8015c78 <create_chain+0xc0>)
 8015c48:	5ca9      	ldrb	r1, [r5, r2]
 8015c4a:	430b      	orrs	r3, r1
 8015c4c:	54ab      	strb	r3, [r5, r2]
 8015c4e:	e7c7      	b.n	8015be0 <create_chain+0x28>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8015c50:	0022      	movs	r2, r4
 8015c52:	0031      	movs	r1, r6
 8015c54:	0028      	movs	r0, r5
 8015c56:	f7ff feff 	bl	8015a58 <put_fat>
	if (res == FR_OK) {
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	d0ea      	beq.n	8015c34 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8015c5e:	2801      	cmp	r0, #1
 8015c60:	d1bd      	bne.n	8015bde <create_chain+0x26>
 8015c62:	2401      	movs	r4, #1
 8015c64:	4264      	negs	r4, r4
 8015c66:	e7bb      	b.n	8015be0 <create_chain+0x28>
 8015c68:	0000100c 	.word	0x0000100c
 8015c6c:	00001014 	.word	0x00001014
 8015c70:	0fffffff 	.word	0x0fffffff
 8015c74:	00001010 	.word	0x00001010
 8015c78:	00001005 	.word	0x00001005

08015c7c <dir_next>:
{
 8015c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	i = dp->index + 1;
 8015c7e:	4b4e      	ldr	r3, [pc, #312]	; (8015db8 <dir_next+0x13c>)
{
 8015c80:	b085      	sub	sp, #20
 8015c82:	9103      	str	r1, [sp, #12]
	i = dp->index + 1;
 8015c84:	5ac3      	ldrh	r3, [r0, r3]
{
 8015c86:	0004      	movs	r4, r0
	i = dp->index + 1;
 8015c88:	9302      	str	r3, [sp, #8]
 8015c8a:	3301      	adds	r3, #1
 8015c8c:	9301      	str	r3, [sp, #4]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8015c8e:	466b      	mov	r3, sp
 8015c90:	889b      	ldrh	r3, [r3, #4]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d102      	bne.n	8015c9c <dir_next+0x20>
		return FR_NO_FILE;
 8015c96:	2004      	movs	r0, #4
}
 8015c98:	b005      	add	sp, #20
 8015c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8015c9c:	4b47      	ldr	r3, [pc, #284]	; (8015dbc <dir_next+0x140>)
 8015c9e:	58c7      	ldr	r7, [r0, r3]
 8015ca0:	2f00      	cmp	r7, #0
 8015ca2:	d0f8      	beq.n	8015c96 <dir_next+0x1a>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8015ca4:	2680      	movs	r6, #128	; 0x80
 8015ca6:	0176      	lsls	r6, r6, #5
 8015ca8:	5985      	ldr	r5, [r0, r6]
 8015caa:	4a45      	ldr	r2, [pc, #276]	; (8015dc0 <dir_next+0x144>)
 8015cac:	9801      	ldr	r0, [sp, #4]
 8015cae:	5aa9      	ldrh	r1, [r5, r2]
 8015cb0:	0949      	lsrs	r1, r1, #5
 8015cb2:	f7f1 ff5f 	bl	8007b74 <__aeabi_uidivmod>
 8015cb6:	2900      	cmp	r1, #0
 8015cb8:	d10b      	bne.n	8015cd2 <dir_next+0x56>
		dp->sect++;					/* Next sector */
 8015cba:	4b40      	ldr	r3, [pc, #256]	; (8015dbc <dir_next+0x140>)
 8015cbc:	3701      	adds	r7, #1
 8015cbe:	50e7      	str	r7, [r4, r3]
		if (!dp->clust) {		/* Static table */
 8015cc0:	4b40      	ldr	r3, [pc, #256]	; (8015dc4 <dir_next+0x148>)
 8015cc2:	58e1      	ldr	r1, [r4, r3]
 8015cc4:	2900      	cmp	r1, #0
 8015cc6:	d117      	bne.n	8015cf8 <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8015cc8:	4b3f      	ldr	r3, [pc, #252]	; (8015dc8 <dir_next+0x14c>)
 8015cca:	9a01      	ldr	r2, [sp, #4]
 8015ccc:	5aeb      	ldrh	r3, [r5, r3]
 8015cce:	4293      	cmp	r3, r2
 8015cd0:	d9e1      	bls.n	8015c96 <dir_next+0x1a>
	dp->index = (WORD)i;	/* Current index */
 8015cd2:	9b02      	ldr	r3, [sp, #8]
 8015cd4:	4a38      	ldr	r2, [pc, #224]	; (8015db8 <dir_next+0x13c>)
 8015cd6:	3301      	adds	r3, #1
 8015cd8:	52a3      	strh	r3, [r4, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8015cda:	2380      	movs	r3, #128	; 0x80
 8015cdc:	015b      	lsls	r3, r3, #5
 8015cde:	58e5      	ldr	r5, [r4, r3]
 8015ce0:	4b37      	ldr	r3, [pc, #220]	; (8015dc0 <dir_next+0x144>)
 8015ce2:	9801      	ldr	r0, [sp, #4]
 8015ce4:	5ae9      	ldrh	r1, [r5, r3]
 8015ce6:	0949      	lsrs	r1, r1, #5
 8015ce8:	f7f1 ff44 	bl	8007b74 <__aeabi_uidivmod>
 8015cec:	4b37      	ldr	r3, [pc, #220]	; (8015dcc <dir_next+0x150>)
 8015cee:	0149      	lsls	r1, r1, #5
 8015cf0:	186d      	adds	r5, r5, r1
	return FR_OK;
 8015cf2:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8015cf4:	50e5      	str	r5, [r4, r3]
	return FR_OK;
 8015cf6:	e7cf      	b.n	8015c98 <dir_next+0x1c>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8015cf8:	0002      	movs	r2, r0
 8015cfa:	4b35      	ldr	r3, [pc, #212]	; (8015dd0 <dir_next+0x154>)
 8015cfc:	5ceb      	ldrb	r3, [r5, r3]
 8015cfe:	3b01      	subs	r3, #1
 8015d00:	401a      	ands	r2, r3
 8015d02:	9200      	str	r2, [sp, #0]
 8015d04:	4218      	tst	r0, r3
 8015d06:	d1e4      	bne.n	8015cd2 <dir_next+0x56>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8015d08:	0028      	movs	r0, r5
 8015d0a:	f7ff fdab 	bl	8015864 <get_fat>
 8015d0e:	0005      	movs	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8015d10:	2801      	cmp	r0, #1
 8015d12:	d801      	bhi.n	8015d18 <dir_next+0x9c>
 8015d14:	2002      	movs	r0, #2
 8015d16:	e7bf      	b.n	8015c98 <dir_next+0x1c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8015d18:	1c43      	adds	r3, r0, #1
 8015d1a:	d101      	bne.n	8015d20 <dir_next+0xa4>
 8015d1c:	2001      	movs	r0, #1
 8015d1e:	e7bb      	b.n	8015c98 <dir_next+0x1c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8015d20:	59a0      	ldr	r0, [r4, r6]
 8015d22:	4b2a      	ldr	r3, [pc, #168]	; (8015dcc <dir_next+0x150>)
 8015d24:	58c3      	ldr	r3, [r0, r3]
 8015d26:	42ab      	cmp	r3, r5
 8015d28:	d82d      	bhi.n	8015d86 <dir_next+0x10a>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8015d2a:	9b03      	ldr	r3, [sp, #12]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d0b2      	beq.n	8015c96 <dir_next+0x1a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8015d30:	4b24      	ldr	r3, [pc, #144]	; (8015dc4 <dir_next+0x148>)
 8015d32:	58e1      	ldr	r1, [r4, r3]
 8015d34:	f7ff ff40 	bl	8015bb8 <create_chain>
 8015d38:	0005      	movs	r5, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015d3a:	2007      	movs	r0, #7
 8015d3c:	2d00      	cmp	r5, #0
 8015d3e:	d0ab      	beq.n	8015c98 <dir_next+0x1c>
					if (clst == 1) return FR_INT_ERR;
 8015d40:	2d01      	cmp	r5, #1
 8015d42:	d0e7      	beq.n	8015d14 <dir_next+0x98>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8015d44:	1c6b      	adds	r3, r5, #1
 8015d46:	d0e9      	beq.n	8015d1c <dir_next+0xa0>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8015d48:	2780      	movs	r7, #128	; 0x80
 8015d4a:	017f      	lsls	r7, r7, #5
 8015d4c:	59e0      	ldr	r0, [r4, r7]
 8015d4e:	f7ff fb1f 	bl	8015390 <sync_window>
 8015d52:	1e01      	subs	r1, r0, #0
 8015d54:	d1e2      	bne.n	8015d1c <dir_next+0xa0>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8015d56:	59e3      	ldr	r3, [r4, r7]
 8015d58:	4a19      	ldr	r2, [pc, #100]	; (8015dc0 <dir_next+0x144>)
 8015d5a:	0018      	movs	r0, r3
 8015d5c:	5a9a      	ldrh	r2, [r3, r2]
 8015d5e:	f7ff f9a6 	bl	80150ae <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8015d62:	59e3      	ldr	r3, [r4, r7]
 8015d64:	0029      	movs	r1, r5
 8015d66:	0018      	movs	r0, r3
 8015d68:	9303      	str	r3, [sp, #12]
 8015d6a:	f7ff fd65 	bl	8015838 <clust2sect>
 8015d6e:	4e19      	ldr	r6, [pc, #100]	; (8015dd4 <dir_next+0x158>)
 8015d70:	9b03      	ldr	r3, [sp, #12]
 8015d72:	5198      	str	r0, [r3, r6]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8015d74:	59e0      	ldr	r0, [r4, r7]
 8015d76:	4b16      	ldr	r3, [pc, #88]	; (8015dd0 <dir_next+0x154>)
 8015d78:	9a00      	ldr	r2, [sp, #0]
 8015d7a:	5cc3      	ldrb	r3, [r0, r3]
 8015d7c:	4293      	cmp	r3, r2
 8015d7e:	d80c      	bhi.n	8015d9a <dir_next+0x11e>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8015d80:	5983      	ldr	r3, [r0, r6]
 8015d82:	1a9b      	subs	r3, r3, r2
 8015d84:	5183      	str	r3, [r0, r6]
				dp->clust = clst;				/* Initialize data for new cluster */
 8015d86:	4b0f      	ldr	r3, [pc, #60]	; (8015dc4 <dir_next+0x148>)
				dp->sect = clust2sect(dp->fs, clst);
 8015d88:	0029      	movs	r1, r5
				dp->clust = clst;				/* Initialize data for new cluster */
 8015d8a:	50e5      	str	r5, [r4, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8015d8c:	3b0c      	subs	r3, #12
 8015d8e:	58e0      	ldr	r0, [r4, r3]
 8015d90:	f7ff fd52 	bl	8015838 <clust2sect>
 8015d94:	4b09      	ldr	r3, [pc, #36]	; (8015dbc <dir_next+0x140>)
 8015d96:	50e0      	str	r0, [r4, r3]
 8015d98:	e79b      	b.n	8015cd2 <dir_next+0x56>
						dp->fs->wflag = 1;
 8015d9a:	2201      	movs	r2, #1
 8015d9c:	4b0e      	ldr	r3, [pc, #56]	; (8015dd8 <dir_next+0x15c>)
 8015d9e:	54c2      	strb	r2, [r0, r3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015da0:	f7ff fac0 	bl	8015324 <sync_window.part.0>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d1b9      	bne.n	8015d1c <dir_next+0xa0>
						dp->fs->winsect++;
 8015da8:	59e2      	ldr	r2, [r4, r7]
 8015daa:	5993      	ldr	r3, [r2, r6]
 8015dac:	3301      	adds	r3, #1
 8015dae:	5193      	str	r3, [r2, r6]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8015db0:	9b00      	ldr	r3, [sp, #0]
 8015db2:	3301      	adds	r3, #1
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	e7dd      	b.n	8015d74 <dir_next+0xf8>
 8015db8:	00001006 	.word	0x00001006
 8015dbc:	00001010 	.word	0x00001010
 8015dc0:	0000100a 	.word	0x0000100a
 8015dc4:	0000100c 	.word	0x0000100c
 8015dc8:	00001008 	.word	0x00001008
 8015dcc:	00001014 	.word	0x00001014
 8015dd0:	00001002 	.word	0x00001002
 8015dd4:	0000102c 	.word	0x0000102c
 8015dd8:	00001004 	.word	0x00001004

08015ddc <dir_find>:
{
 8015ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015dde:	2100      	movs	r1, #0
{
 8015de0:	b087      	sub	sp, #28
 8015de2:	0005      	movs	r5, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015de4:	f7ff fdca 	bl	801597c <dir_sdi>
 8015de8:	1e06      	subs	r6, r0, #0
	if (res != FR_OK) return res;
 8015dea:	d000      	beq.n	8015dee <dir_find+0x12>
 8015dec:	e097      	b.n	8015f1e <dir_find+0x142>
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8015dee:	2201      	movs	r2, #1
 8015df0:	4b4d      	ldr	r3, [pc, #308]	; (8015f28 <dir_find+0x14c>)
 8015df2:	4252      	negs	r2, r2
 8015df4:	52ea      	strh	r2, [r5, r3]
 8015df6:	23ff      	movs	r3, #255	; 0xff
 8015df8:	001c      	movs	r4, r3
 8015dfa:	9303      	str	r3, [sp, #12]
		res = move_window(dp->fs, dp->sect);
 8015dfc:	4b4b      	ldr	r3, [pc, #300]	; (8015f2c <dir_find+0x150>)
 8015dfe:	58e9      	ldr	r1, [r5, r3]
 8015e00:	3b10      	subs	r3, #16
 8015e02:	58e8      	ldr	r0, [r5, r3]
 8015e04:	f7ff fad0 	bl	80153a8 <move_window>
 8015e08:	1e06      	subs	r6, r0, #0
		if (res != FR_OK) break;
 8015e0a:	d000      	beq.n	8015e0e <dir_find+0x32>
 8015e0c:	e087      	b.n	8015f1e <dir_find+0x142>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8015e0e:	4b48      	ldr	r3, [pc, #288]	; (8015f30 <dir_find+0x154>)
 8015e10:	58ef      	ldr	r7, [r5, r3]
		c = dir[DIR_Name];
 8015e12:	783b      	ldrb	r3, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d100      	bne.n	8015e1a <dir_find+0x3e>
 8015e18:	e084      	b.n	8015f24 <dir_find+0x148>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015e1a:	2be5      	cmp	r3, #229	; 0xe5
 8015e1c:	d006      	beq.n	8015e2c <dir_find+0x50>
		a = dir[DIR_Attr] & AM_MASK;
 8015e1e:	223f      	movs	r2, #63	; 0x3f
 8015e20:	7af9      	ldrb	r1, [r7, #11]
 8015e22:	400a      	ands	r2, r1
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015e24:	0709      	lsls	r1, r1, #28
 8015e26:	d506      	bpl.n	8015e36 <dir_find+0x5a>
 8015e28:	2a0f      	cmp	r2, #15
 8015e2a:	d006      	beq.n	8015e3a <dir_find+0x5e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8015e2c:	2201      	movs	r2, #1
 8015e2e:	4b3e      	ldr	r3, [pc, #248]	; (8015f28 <dir_find+0x14c>)
 8015e30:	4252      	negs	r2, r2
 8015e32:	52ea      	strh	r2, [r5, r3]
 8015e34:	e054      	b.n	8015ee0 <dir_find+0x104>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015e36:	2a0f      	cmp	r2, #15
 8015e38:	d158      	bne.n	8015eec <dir_find+0x110>
				if (dp->lfn) {
 8015e3a:	2281      	movs	r2, #129	; 0x81
 8015e3c:	0152      	lsls	r2, r2, #5
 8015e3e:	58aa      	ldr	r2, [r5, r2]
 8015e40:	9202      	str	r2, [sp, #8]
 8015e42:	2a00      	cmp	r2, #0
 8015e44:	d043      	beq.n	8015ece <dir_find+0xf2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015e46:	2240      	movs	r2, #64	; 0x40
 8015e48:	4213      	tst	r3, r2
 8015e4a:	d047      	beq.n	8015edc <dir_find+0x100>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8015e4c:	4393      	bics	r3, r2
 8015e4e:	001c      	movs	r4, r3
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8015e50:	4b38      	ldr	r3, [pc, #224]	; (8015f34 <dir_find+0x158>)
						sum = dir[LDIR_Chksum];
 8015e52:	7b79      	ldrb	r1, [r7, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8015e54:	5aeb      	ldrh	r3, [r5, r3]
 8015e56:	4a34      	ldr	r2, [pc, #208]	; (8015f28 <dir_find+0x14c>)
						sum = dir[LDIR_Chksum];
 8015e58:	9103      	str	r1, [sp, #12]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8015e5a:	52ab      	strh	r3, [r5, r2]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8015e5c:	7b7b      	ldrb	r3, [r7, #13]
 8015e5e:	9a03      	ldr	r2, [sp, #12]
 8015e60:	4293      	cmp	r3, r2
 8015e62:	d13d      	bne.n	8015ee0 <dir_find+0x104>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8015e64:	2340      	movs	r3, #64	; 0x40
	s = 0; wc = 1;
 8015e66:	2200      	movs	r2, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8015e68:	783e      	ldrb	r6, [r7, #0]
	s = 0; wc = 1;
 8015e6a:	9201      	str	r2, [sp, #4]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8015e6c:	439e      	bics	r6, r3
 8015e6e:	3e01      	subs	r6, #1
 8015e70:	3b33      	subs	r3, #51	; 0x33
 8015e72:	435e      	muls	r6, r3
	s = 0; wc = 1;
 8015e74:	3b0c      	subs	r3, #12
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8015e76:	4a30      	ldr	r2, [pc, #192]	; (8015f38 <dir_find+0x15c>)
 8015e78:	9901      	ldr	r1, [sp, #4]
 8015e7a:	5c89      	ldrb	r1, [r1, r2]
 8015e7c:	187a      	adds	r2, r7, r1
 8015e7e:	7852      	ldrb	r2, [r2, #1]
 8015e80:	5c78      	ldrb	r0, [r7, r1]
 8015e82:	0212      	lsls	r2, r2, #8
 8015e84:	4310      	orrs	r0, r2
		if (wc) {	/* Last character has not been processed */
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d02c      	beq.n	8015ee4 <dir_find+0x108>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8015e8a:	f001 f93d 	bl	8017108 <ff_wtoupper>
 8015e8e:	9005      	str	r0, [sp, #20]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8015e90:	2efe      	cmp	r6, #254	; 0xfe
 8015e92:	d825      	bhi.n	8015ee0 <dir_find+0x104>
 8015e94:	1c73      	adds	r3, r6, #1
 8015e96:	9304      	str	r3, [sp, #16]
 8015e98:	9b02      	ldr	r3, [sp, #8]
 8015e9a:	0076      	lsls	r6, r6, #1
 8015e9c:	5af0      	ldrh	r0, [r6, r3]
 8015e9e:	f001 f933 	bl	8017108 <ff_wtoupper>
 8015ea2:	9a05      	ldr	r2, [sp, #20]
 8015ea4:	0003      	movs	r3, r0
 8015ea6:	4282      	cmp	r2, r0
 8015ea8:	d11a      	bne.n	8015ee0 <dir_find+0x104>
 8015eaa:	9e04      	ldr	r6, [sp, #16]
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8015eac:	9a01      	ldr	r2, [sp, #4]
 8015eae:	3201      	adds	r2, #1
 8015eb0:	9201      	str	r2, [sp, #4]
 8015eb2:	2a0d      	cmp	r2, #13
 8015eb4:	d1df      	bne.n	8015e76 <dir_find+0x9a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8015eb6:	783a      	ldrb	r2, [r7, #0]
 8015eb8:	0652      	lsls	r2, r2, #25
 8015eba:	d506      	bpl.n	8015eca <dir_find+0xee>
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d004      	beq.n	8015eca <dir_find+0xee>
 8015ec0:	9b02      	ldr	r3, [sp, #8]
 8015ec2:	0076      	lsls	r6, r6, #1
 8015ec4:	5af3      	ldrh	r3, [r6, r3]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d10a      	bne.n	8015ee0 <dir_find+0x104>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8015eca:	3c01      	subs	r4, #1
 8015ecc:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8015ece:	2100      	movs	r1, #0
 8015ed0:	0028      	movs	r0, r5
 8015ed2:	f7ff fed3 	bl	8015c7c <dir_next>
 8015ed6:	1e06      	subs	r6, r0, #0
	} while (res == FR_OK);
 8015ed8:	d090      	beq.n	8015dfc <dir_find+0x20>
 8015eda:	e020      	b.n	8015f1e <dir_find+0x142>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8015edc:	42a3      	cmp	r3, r4
 8015ede:	d0bd      	beq.n	8015e5c <dir_find+0x80>
 8015ee0:	24ff      	movs	r4, #255	; 0xff
 8015ee2:	e7f4      	b.n	8015ece <dir_find+0xf2>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8015ee4:	4a15      	ldr	r2, [pc, #84]	; (8015f3c <dir_find+0x160>)
 8015ee6:	4290      	cmp	r0, r2
 8015ee8:	d0e0      	beq.n	8015eac <dir_find+0xd0>
 8015eea:	e7f9      	b.n	8015ee0 <dir_find+0x104>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8015eec:	2c00      	cmp	r4, #0
 8015eee:	d105      	bne.n	8015efc <dir_find+0x120>
 8015ef0:	0038      	movs	r0, r7
 8015ef2:	f7ff f9cf 	bl	8015294 <sum_sfn>
 8015ef6:	9b03      	ldr	r3, [sp, #12]
 8015ef8:	4298      	cmp	r0, r3
 8015efa:	d010      	beq.n	8015f1e <dir_find+0x142>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8015efc:	4b10      	ldr	r3, [pc, #64]	; (8015f40 <dir_find+0x164>)
 8015efe:	58ea      	ldr	r2, [r5, r3]
 8015f00:	2301      	movs	r3, #1
 8015f02:	7ad1      	ldrb	r1, [r2, #11]
 8015f04:	000e      	movs	r6, r1
 8015f06:	401e      	ands	r6, r3
 8015f08:	4219      	tst	r1, r3
 8015f0a:	d18f      	bne.n	8015e2c <dir_find+0x50>
 8015f0c:	0033      	movs	r3, r6
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8015f0e:	3a01      	subs	r2, #1
 8015f10:	5cf9      	ldrb	r1, [r7, r3]
 8015f12:	3301      	adds	r3, #1
 8015f14:	5cd0      	ldrb	r0, [r2, r3]
 8015f16:	4288      	cmp	r0, r1
 8015f18:	d188      	bne.n	8015e2c <dir_find+0x50>
 8015f1a:	2b0b      	cmp	r3, #11
 8015f1c:	d1f8      	bne.n	8015f10 <dir_find+0x134>
}
 8015f1e:	0030      	movs	r0, r6
 8015f20:	b007      	add	sp, #28
 8015f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015f24:	2604      	movs	r6, #4
 8015f26:	e7fa      	b.n	8015f1e <dir_find+0x142>
 8015f28:	00001024 	.word	0x00001024
 8015f2c:	00001010 	.word	0x00001010
 8015f30:	00001014 	.word	0x00001014
 8015f34:	00001006 	.word	0x00001006
 8015f38:	0801bf56 	.word	0x0801bf56
 8015f3c:	0000ffff 	.word	0x0000ffff
 8015f40:	00001018 	.word	0x00001018

08015f44 <follow_path>:
{
 8015f44:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8015f46:	780b      	ldrb	r3, [r1, #0]
{
 8015f48:	b087      	sub	sp, #28
 8015f4a:	0007      	movs	r7, r0
 8015f4c:	9100      	str	r1, [sp, #0]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8015f4e:	2b2f      	cmp	r3, #47	; 0x2f
 8015f50:	d001      	beq.n	8015f56 <follow_path+0x12>
 8015f52:	2b5c      	cmp	r3, #92	; 0x5c
 8015f54:	d102      	bne.n	8015f5c <follow_path+0x18>
		path++;
 8015f56:	9b00      	ldr	r3, [sp, #0]
 8015f58:	3301      	adds	r3, #1
 8015f5a:	9300      	str	r3, [sp, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8015f5c:	2400      	movs	r4, #0
 8015f5e:	4b93      	ldr	r3, [pc, #588]	; (80161ac <follow_path+0x268>)
 8015f60:	50fc      	str	r4, [r7, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015f62:	9b00      	ldr	r3, [sp, #0]
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	2b1f      	cmp	r3, #31
 8015f68:	d80a      	bhi.n	8015f80 <follow_path+0x3c>
		res = dir_sdi(dp, 0);
 8015f6a:	0021      	movs	r1, r4
 8015f6c:	0038      	movs	r0, r7
 8015f6e:	f7ff fd05 	bl	801597c <dir_sdi>
		dp->dir = 0;
 8015f72:	4b8f      	ldr	r3, [pc, #572]	; (80161b0 <follow_path+0x26c>)
 8015f74:	50fc      	str	r4, [r7, r3]
}
 8015f76:	b007      	add	sp, #28
 8015f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8015f7a:	9b00      	ldr	r3, [sp, #0]
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	9b00      	ldr	r3, [sp, #0]
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	2b2f      	cmp	r3, #47	; 0x2f
 8015f86:	d0f8      	beq.n	8015f7a <follow_path+0x36>
 8015f88:	2b5c      	cmp	r3, #92	; 0x5c
 8015f8a:	d0f6      	beq.n	8015f7a <follow_path+0x36>
	lfn = dp->lfn;
 8015f8c:	2381      	movs	r3, #129	; 0x81
 8015f8e:	2500      	movs	r5, #0
 8015f90:	015b      	lsls	r3, r3, #5
 8015f92:	58fb      	ldr	r3, [r7, r3]
 8015f94:	9304      	str	r3, [sp, #16]
		w = p[si++];					/* Get a character */
 8015f96:	9b00      	ldr	r3, [sp, #0]
 8015f98:	1c6c      	adds	r4, r5, #1
 8015f9a:	5d58      	ldrb	r0, [r3, r5]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8015f9c:	281f      	cmp	r0, #31
 8015f9e:	d91b      	bls.n	8015fd8 <follow_path+0x94>
 8015fa0:	282f      	cmp	r0, #47	; 0x2f
 8015fa2:	d019      	beq.n	8015fd8 <follow_path+0x94>
 8015fa4:	285c      	cmp	r0, #92	; 0x5c
 8015fa6:	d017      	beq.n	8015fd8 <follow_path+0x94>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8015fa8:	2dff      	cmp	r5, #255	; 0xff
 8015faa:	d00e      	beq.n	8015fca <follow_path+0x86>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015fac:	2101      	movs	r1, #1
 8015fae:	f001 f88f 	bl	80170d0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015fb2:	2800      	cmp	r0, #0
 8015fb4:	d009      	beq.n	8015fca <follow_path+0x86>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8015fb6:	287f      	cmp	r0, #127	; 0x7f
 8015fb8:	d809      	bhi.n	8015fce <follow_path+0x8a>
 8015fba:	4b7e      	ldr	r3, [pc, #504]	; (80161b4 <follow_path+0x270>)
 8015fbc:	e000      	b.n	8015fc0 <follow_path+0x7c>
	while (*str && *str != chr) str++;
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	781a      	ldrb	r2, [r3, #0]
 8015fc2:	2a00      	cmp	r2, #0
 8015fc4:	d003      	beq.n	8015fce <follow_path+0x8a>
 8015fc6:	4282      	cmp	r2, r0
 8015fc8:	d1f9      	bne.n	8015fbe <follow_path+0x7a>
				cf |= NS_LOSS | NS_LFN; break;
 8015fca:	2006      	movs	r0, #6
 8015fcc:	e7d3      	b.n	8015f76 <follow_path+0x32>
		lfn[di++] = w;					/* Store the Unicode character */
 8015fce:	9b04      	ldr	r3, [sp, #16]
 8015fd0:	006d      	lsls	r5, r5, #1
 8015fd2:	5358      	strh	r0, [r3, r5]
		w = p[si++];					/* Get a character */
 8015fd4:	0025      	movs	r5, r4
 8015fd6:	e7de      	b.n	8015f96 <follow_path+0x52>
	*path = &p[si];						/* Return pointer to the next segment */
 8015fd8:	9b00      	ldr	r3, [sp, #0]
 8015fda:	191b      	adds	r3, r3, r4
 8015fdc:	9300      	str	r3, [sp, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8015fde:	2404      	movs	r4, #4
 8015fe0:	281f      	cmp	r0, #31
 8015fe2:	d900      	bls.n	8015fe6 <follow_path+0xa2>
 8015fe4:	2400      	movs	r4, #0
	while (di) {						/* Strip trailing spaces and dots */
 8015fe6:	9b04      	ldr	r3, [sp, #16]
 8015fe8:	3b02      	subs	r3, #2
 8015fea:	9301      	str	r3, [sp, #4]
 8015fec:	2d00      	cmp	r5, #0
 8015fee:	d0ec      	beq.n	8015fca <follow_path+0x86>
		w = lfn[di - 1];
 8015ff0:	9a01      	ldr	r2, [sp, #4]
 8015ff2:	006b      	lsls	r3, r5, #1
 8015ff4:	5ad2      	ldrh	r2, [r2, r3]
		if (w != ' ' && w != '.') break;
 8015ff6:	2a20      	cmp	r2, #32
 8015ff8:	d002      	beq.n	8016000 <follow_path+0xbc>
 8015ffa:	2a2e      	cmp	r2, #46	; 0x2e
 8015ffc:	d000      	beq.n	8016000 <follow_path+0xbc>
 8015ffe:	e0bc      	b.n	801617a <follow_path+0x236>
		di--;
 8016000:	3d01      	subs	r5, #1
 8016002:	e7f3      	b.n	8015fec <follow_path+0xa8>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016004:	3301      	adds	r3, #1
 8016006:	9904      	ldr	r1, [sp, #16]
 8016008:	005a      	lsls	r2, r3, #1
 801600a:	5a8a      	ldrh	r2, [r1, r2]
 801600c:	2a20      	cmp	r2, #32
 801600e:	d0f9      	beq.n	8016004 <follow_path+0xc0>
 8016010:	2a2e      	cmp	r2, #46	; 0x2e
 8016012:	d0f7      	beq.n	8016004 <follow_path+0xc0>
	if (si) cf |= NS_LOSS | NS_LFN;
 8016014:	2b00      	cmp	r3, #0
 8016016:	d001      	beq.n	801601c <follow_path+0xd8>
 8016018:	2203      	movs	r2, #3
 801601a:	4314      	orrs	r4, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801601c:	9901      	ldr	r1, [sp, #4]
 801601e:	006a      	lsls	r2, r5, #1
 8016020:	5a8a      	ldrh	r2, [r1, r2]
 8016022:	2a2e      	cmp	r2, #46	; 0x2e
 8016024:	d002      	beq.n	801602c <follow_path+0xe8>
 8016026:	3d01      	subs	r5, #1
 8016028:	2d00      	cmp	r5, #0
 801602a:	d1f7      	bne.n	801601c <follow_path+0xd8>
		dp->fn[i++] = (BYTE)w;
 801602c:	2208      	movs	r2, #8
 801602e:	9201      	str	r2, [sp, #4]
 8016030:	2200      	movs	r2, #0
 8016032:	0016      	movs	r6, r2
 8016034:	9203      	str	r2, [sp, #12]
		w = lfn[si++];					/* Get an LFN character */
 8016036:	1c5a      	adds	r2, r3, #1
 8016038:	9202      	str	r2, [sp, #8]
 801603a:	9a04      	ldr	r2, [sp, #16]
 801603c:	005b      	lsls	r3, r3, #1
 801603e:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
 8016040:	2800      	cmp	r0, #0
 8016042:	d01c      	beq.n	801607e <follow_path+0x13a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016044:	2820      	cmp	r0, #32
 8016046:	d004      	beq.n	8016052 <follow_path+0x10e>
 8016048:	282e      	cmp	r0, #46	; 0x2e
 801604a:	d106      	bne.n	801605a <follow_path+0x116>
 801604c:	9b02      	ldr	r3, [sp, #8]
 801604e:	429d      	cmp	r5, r3
 8016050:	d00a      	beq.n	8016068 <follow_path+0x124>
			cf |= NS_LOSS | NS_LFN; continue;
 8016052:	2303      	movs	r3, #3
 8016054:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 8016056:	9b02      	ldr	r3, [sp, #8]
 8016058:	e7ed      	b.n	8016036 <follow_path+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801605a:	9b03      	ldr	r3, [sp, #12]
 801605c:	9a01      	ldr	r2, [sp, #4]
 801605e:	4293      	cmp	r3, r2
 8016060:	d206      	bcs.n	8016070 <follow_path+0x12c>
 8016062:	9b02      	ldr	r3, [sp, #8]
 8016064:	429d      	cmp	r5, r3
 8016066:	d14e      	bne.n	8016106 <follow_path+0x1c2>
			if (ni == 11) {				/* Long extension */
 8016068:	9b01      	ldr	r3, [sp, #4]
 801606a:	2b0b      	cmp	r3, #11
 801606c:	d143      	bne.n	80160f6 <follow_path+0x1b2>
 801606e:	e002      	b.n	8016076 <follow_path+0x132>
 8016070:	9b01      	ldr	r3, [sp, #4]
 8016072:	2b0b      	cmp	r3, #11
 8016074:	d137      	bne.n	80160e6 <follow_path+0x1a2>
				cf |= NS_LOSS | NS_LFN; break;
 8016076:	2303      	movs	r3, #3
 8016078:	431c      	orrs	r4, r3
 801607a:	3308      	adds	r3, #8
 801607c:	9301      	str	r3, [sp, #4]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 801607e:	4b4e      	ldr	r3, [pc, #312]	; (80161b8 <follow_path+0x274>)
 8016080:	58fb      	ldr	r3, [r7, r3]
 8016082:	781a      	ldrb	r2, [r3, #0]
 8016084:	2ae5      	cmp	r2, #229	; 0xe5
 8016086:	d101      	bne.n	801608c <follow_path+0x148>
 8016088:	3ae0      	subs	r2, #224	; 0xe0
 801608a:	701a      	strb	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 801608c:	9b01      	ldr	r3, [sp, #4]
 801608e:	2b08      	cmp	r3, #8
 8016090:	d101      	bne.n	8016096 <follow_path+0x152>
 8016092:	00b6      	lsls	r6, r6, #2
 8016094:	b2f6      	uxtb	r6, r6
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8016096:	230c      	movs	r3, #12
 8016098:	4033      	ands	r3, r6
 801609a:	2b0c      	cmp	r3, #12
 801609c:	d002      	beq.n	80160a4 <follow_path+0x160>
 801609e:	43f2      	mvns	r2, r6
 80160a0:	0792      	lsls	r2, r2, #30
 80160a2:	d101      	bne.n	80160a8 <follow_path+0x164>
		cf |= NS_LFN;
 80160a4:	2202      	movs	r2, #2
 80160a6:	4314      	orrs	r4, r2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80160a8:	07a2      	lsls	r2, r4, #30
 80160aa:	d409      	bmi.n	80160c0 <follow_path+0x17c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80160ac:	2203      	movs	r2, #3
 80160ae:	4016      	ands	r6, r2
 80160b0:	2e01      	cmp	r6, #1
 80160b2:	d101      	bne.n	80160b8 <follow_path+0x174>
 80160b4:	320d      	adds	r2, #13
 80160b6:	4314      	orrs	r4, r2
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80160b8:	2b04      	cmp	r3, #4
 80160ba:	d101      	bne.n	80160c0 <follow_path+0x17c>
 80160bc:	3304      	adds	r3, #4
 80160be:	431c      	orrs	r4, r3
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80160c0:	4d3d      	ldr	r5, [pc, #244]	; (80161b8 <follow_path+0x274>)
			res = dir_find(dp);				/* Find an object with the sagment name */
 80160c2:	0038      	movs	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80160c4:	597b      	ldr	r3, [r7, r5]
 80160c6:	72dc      	strb	r4, [r3, #11]
 80160c8:	9301      	str	r3, [sp, #4]
			res = dir_find(dp);				/* Find an object with the sagment name */
 80160ca:	f7ff fe87 	bl	8015ddc <dir_find>
			ns = dp->fn[NSFLAG];
 80160ce:	597b      	ldr	r3, [r7, r5]
 80160d0:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80160d2:	2800      	cmp	r0, #0
 80160d4:	d03d      	beq.n	8016152 <follow_path+0x20e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80160d6:	2804      	cmp	r0, #4
 80160d8:	d000      	beq.n	80160dc <follow_path+0x198>
 80160da:	e74c      	b.n	8015f76 <follow_path+0x32>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80160dc:	4203      	tst	r3, r0
 80160de:	d000      	beq.n	80160e2 <follow_path+0x19e>
 80160e0:	e749      	b.n	8015f76 <follow_path+0x32>
 80160e2:	3001      	adds	r0, #1
 80160e4:	e747      	b.n	8015f76 <follow_path+0x32>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80160e6:	9b02      	ldr	r3, [sp, #8]
 80160e8:	429d      	cmp	r5, r3
 80160ea:	d004      	beq.n	80160f6 <follow_path+0x1b2>
 80160ec:	2303      	movs	r3, #3
 80160ee:	431c      	orrs	r4, r3
			if (si > di) break;			/* No extension */
 80160f0:	9b02      	ldr	r3, [sp, #8]
 80160f2:	429d      	cmp	r5, r3
 80160f4:	d3c3      	bcc.n	801607e <follow_path+0x13a>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80160f6:	230b      	movs	r3, #11
			b <<= 2; continue;
 80160f8:	00b6      	lsls	r6, r6, #2
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80160fa:	9301      	str	r3, [sp, #4]
			b <<= 2; continue;
 80160fc:	b2f6      	uxtb	r6, r6
 80160fe:	9502      	str	r5, [sp, #8]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016100:	3b03      	subs	r3, #3
		dp->fn[i++] = (BYTE)w;
 8016102:	9303      	str	r3, [sp, #12]
 8016104:	e7a7      	b.n	8016056 <follow_path+0x112>
		if (w >= 0x80) {				/* Non ASCII character */
 8016106:	287f      	cmp	r0, #127	; 0x7f
 8016108:	d90d      	bls.n	8016126 <follow_path+0x1e2>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801610a:	2100      	movs	r1, #0
 801610c:	f000 ffe0 	bl	80170d0 <ff_convert>
			cf |= NS_LFN;				/* Force create LFN entry */
 8016110:	2202      	movs	r2, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016112:	0003      	movs	r3, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8016114:	4314      	orrs	r4, r2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016116:	2800      	cmp	r0, #0
 8016118:	d00b      	beq.n	8016132 <follow_path+0x1ee>
 801611a:	4828      	ldr	r0, [pc, #160]	; (80161bc <follow_path+0x278>)
 801611c:	18c0      	adds	r0, r0, r3
 801611e:	3880      	subs	r0, #128	; 0x80
 8016120:	7800      	ldrb	r0, [r0, #0]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016122:	2800      	cmp	r0, #0
 8016124:	d005      	beq.n	8016132 <follow_path+0x1ee>
	while (*str && *str != chr) str++;
 8016126:	4b26      	ldr	r3, [pc, #152]	; (80161c0 <follow_path+0x27c>)
 8016128:	781a      	ldrb	r2, [r3, #0]
 801612a:	2a00      	cmp	r2, #0
 801612c:	d030      	beq.n	8016190 <follow_path+0x24c>
 801612e:	4282      	cmp	r2, r0
 8016130:	d10a      	bne.n	8016148 <follow_path+0x204>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016132:	2303      	movs	r3, #3
 8016134:	205f      	movs	r0, #95	; 0x5f
 8016136:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 8016138:	4b1f      	ldr	r3, [pc, #124]	; (80161b8 <follow_path+0x274>)
 801613a:	9a03      	ldr	r2, [sp, #12]
 801613c:	58fb      	ldr	r3, [r7, r3]
 801613e:	9305      	str	r3, [sp, #20]
 8016140:	5498      	strb	r0, [r3, r2]
 8016142:	0013      	movs	r3, r2
 8016144:	3301      	adds	r3, #1
 8016146:	e7dc      	b.n	8016102 <follow_path+0x1be>
	while (*str && *str != chr) str++;
 8016148:	3301      	adds	r3, #1
 801614a:	e7ed      	b.n	8016128 <follow_path+0x1e4>
					b |= 2;
 801614c:	2302      	movs	r3, #2
 801614e:	431e      	orrs	r6, r3
 8016150:	e7f2      	b.n	8016138 <follow_path+0x1f4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016152:	2204      	movs	r2, #4
 8016154:	4213      	tst	r3, r2
 8016156:	d000      	beq.n	801615a <follow_path+0x216>
 8016158:	e70d      	b.n	8015f76 <follow_path+0x32>
			dir = dp->dir;						/* Follow the sub-directory */
 801615a:	4b15      	ldr	r3, [pc, #84]	; (80161b0 <follow_path+0x26c>)
 801615c:	58f9      	ldr	r1, [r7, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 801615e:	7acb      	ldrb	r3, [r1, #11]
 8016160:	06db      	lsls	r3, r3, #27
 8016162:	d508      	bpl.n	8016176 <follow_path+0x232>
			dp->sclust = ld_clust(dp->fs, dir);
 8016164:	2380      	movs	r3, #128	; 0x80
 8016166:	015b      	lsls	r3, r3, #5
 8016168:	58fa      	ldr	r2, [r7, r3]
 801616a:	5cd0      	ldrb	r0, [r2, r3]
 801616c:	f7ff fb56 	bl	801581c <ld_clust.isra.0>
 8016170:	4b0e      	ldr	r3, [pc, #56]	; (80161ac <follow_path+0x268>)
 8016172:	50f8      	str	r0, [r7, r3]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8016174:	e704      	b.n	8015f80 <follow_path+0x3c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016176:	2005      	movs	r0, #5
	return res;
 8016178:	e6fd      	b.n	8015f76 <follow_path+0x32>
	lfn[di] = 0;						/* LFN is created */
 801617a:	2600      	movs	r6, #0
 801617c:	9a04      	ldr	r2, [sp, #16]
	mem_set(dp->fn, ' ', 11);
 801617e:	2120      	movs	r1, #32
	lfn[di] = 0;						/* LFN is created */
 8016180:	52d6      	strh	r6, [r2, r3]
	mem_set(dp->fn, ' ', 11);
 8016182:	4b0d      	ldr	r3, [pc, #52]	; (80161b8 <follow_path+0x274>)
 8016184:	220b      	movs	r2, #11
 8016186:	58f8      	ldr	r0, [r7, r3]
 8016188:	f7fe ff91 	bl	80150ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801618c:	0033      	movs	r3, r6
 801618e:	e73a      	b.n	8016006 <follow_path+0xc2>
				if (IsUpper(w)) {		/* ASCII large capital */
 8016190:	0003      	movs	r3, r0
 8016192:	3b41      	subs	r3, #65	; 0x41
 8016194:	2b19      	cmp	r3, #25
 8016196:	d9d9      	bls.n	801614c <follow_path+0x208>
					if (IsLower(w)) {	/* ASCII small capital */
 8016198:	0003      	movs	r3, r0
 801619a:	3b61      	subs	r3, #97	; 0x61
 801619c:	2b19      	cmp	r3, #25
 801619e:	d8cb      	bhi.n	8016138 <follow_path+0x1f4>
						b |= 1; w -= 0x20;
 80161a0:	2301      	movs	r3, #1
 80161a2:	3820      	subs	r0, #32
 80161a4:	431e      	orrs	r6, r3
 80161a6:	b280      	uxth	r0, r0
 80161a8:	e7c6      	b.n	8016138 <follow_path+0x1f4>
 80161aa:	46c0      	nop			; (mov r8, r8)
 80161ac:	00001008 	.word	0x00001008
 80161b0:	00001014 	.word	0x00001014
 80161b4:	0801bec6 	.word	0x0801bec6
 80161b8:	00001018 	.word	0x00001018
 80161bc:	0801bed6 	.word	0x0801bed6
 80161c0:	0801becf 	.word	0x0801becf

080161c4 <dir_register>:
{
 80161c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	fn = dp->fn; lfn = dp->lfn;
 80161c6:	2481      	movs	r4, #129	; 0x81
 80161c8:	4b99      	ldr	r3, [pc, #612]	; (8016430 <dir_register+0x26c>)
{
 80161ca:	b089      	sub	sp, #36	; 0x24
	fn = dp->fn; lfn = dp->lfn;
 80161cc:	58c6      	ldr	r6, [r0, r3]
 80161ce:	0164      	lsls	r4, r4, #5
 80161d0:	5903      	ldr	r3, [r0, r4]
	mem_cpy(sn, fn, 12);
 80161d2:	ad05      	add	r5, sp, #20
{
 80161d4:	0007      	movs	r7, r0
	mem_cpy(sn, fn, 12);
 80161d6:	220c      	movs	r2, #12
 80161d8:	0028      	movs	r0, r5
 80161da:	0031      	movs	r1, r6
	fn = dp->fn; lfn = dp->lfn;
 80161dc:	9300      	str	r3, [sp, #0]
	mem_cpy(sn, fn, 12);
 80161de:	f7fe ff5d 	bl	801509c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80161e2:	7aeb      	ldrb	r3, [r5, #11]
 80161e4:	2501      	movs	r5, #1
 80161e6:	422b      	tst	r3, r5
 80161e8:	d100      	bne.n	80161ec <dir_register+0x28>
 80161ea:	e118      	b.n	801641e <dir_register+0x25a>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80161ec:	2300      	movs	r3, #0
 80161ee:	72f3      	strb	r3, [r6, #11]
 80161f0:	513b      	str	r3, [r7, r4]
	mem_cpy(dst, src, 11);
 80161f2:	220b      	movs	r2, #11
 80161f4:	0030      	movs	r0, r6
 80161f6:	a905      	add	r1, sp, #20
 80161f8:	f7fe ff50 	bl	801509c <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80161fc:	002b      	movs	r3, r5
 80161fe:	2d05      	cmp	r5, #5
 8016200:	d848      	bhi.n	8016294 <dir_register+0xd0>
		c = (seq % 16) + '0';
 8016202:	210f      	movs	r1, #15
 8016204:	2207      	movs	r2, #7
 8016206:	468c      	mov	ip, r1
		ns[i--] = c;
 8016208:	a903      	add	r1, sp, #12
		c = (seq % 16) + '0';
 801620a:	4664      	mov	r4, ip
 801620c:	401c      	ands	r4, r3
 801620e:	0020      	movs	r0, r4
 8016210:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
 8016212:	2839      	cmp	r0, #57	; 0x39
 8016214:	d900      	bls.n	8016218 <dir_register+0x54>
 8016216:	3007      	adds	r0, #7
		ns[i--] = c;
 8016218:	3a01      	subs	r2, #1
 801621a:	1854      	adds	r4, r2, r1
 801621c:	7060      	strb	r0, [r4, #1]
		seq /= 16;
 801621e:	0918      	lsrs	r0, r3, #4
	} while (seq);
 8016220:	2b0f      	cmp	r3, #15
 8016222:	d839      	bhi.n	8016298 <dir_register+0xd4>
	ns[i] = '~';
 8016224:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016226:	1e70      	subs	r0, r6, #1
	ns[i] = '~';
 8016228:	548b      	strb	r3, [r1, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801622a:	4684      	mov	ip, r0
 801622c:	2300      	movs	r3, #0
 801622e:	429a      	cmp	r2, r3
 8016230:	d004      	beq.n	801623c <dir_register+0x78>
 8016232:	4664      	mov	r4, ip
 8016234:	1c58      	adds	r0, r3, #1
 8016236:	5c24      	ldrb	r4, [r4, r0]
 8016238:	2c20      	cmp	r4, #32
 801623a:	d12f      	bne.n	801629c <dir_register+0xd8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801623c:	2420      	movs	r4, #32
 801623e:	0020      	movs	r0, r4
 8016240:	2a07      	cmp	r2, #7
 8016242:	d801      	bhi.n	8016248 <dir_register+0x84>
 8016244:	5c88      	ldrb	r0, [r1, r2]
 8016246:	3201      	adds	r2, #1
 8016248:	54f0      	strb	r0, [r6, r3]
	} while (j < 8);
 801624a:	3301      	adds	r3, #1
 801624c:	2b07      	cmp	r3, #7
 801624e:	d9f6      	bls.n	801623e <dir_register+0x7a>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016250:	0038      	movs	r0, r7
 8016252:	f7ff fdc3 	bl	8015ddc <dir_find>
 8016256:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 8016258:	d000      	beq.n	801625c <dir_register+0x98>
 801625a:	e0d6      	b.n	801640a <dir_register+0x246>
		for (n = 1; n < 100; n++) {
 801625c:	3501      	adds	r5, #1
 801625e:	2d64      	cmp	r5, #100	; 0x64
 8016260:	d1c7      	bne.n	80161f2 <dir_register+0x2e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8016262:	2407      	movs	r4, #7
}
 8016264:	0020      	movs	r0, r4
 8016266:	b009      	add	sp, #36	; 0x24
 8016268:	bdf0      	pop	{r4, r5, r6, r7, pc}
			wc = *lfn++;
 801626a:	2010      	movs	r0, #16
 801626c:	3102      	adds	r1, #2
				sr = (sr << 1) + (wc & 1);
 801626e:	2401      	movs	r4, #1
 8016270:	4014      	ands	r4, r2
 8016272:	46a4      	mov	ip, r4
				if (sr & 0x10000) sr ^= 0x11021;
 8016274:	2480      	movs	r4, #128	; 0x80
				sr = (sr << 1) + (wc & 1);
 8016276:	005b      	lsls	r3, r3, #1
 8016278:	4463      	add	r3, ip
				if (sr & 0x10000) sr ^= 0x11021;
 801627a:	0264      	lsls	r4, r4, #9
				wc >>= 1;
 801627c:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801627e:	4223      	tst	r3, r4
 8016280:	d001      	beq.n	8016286 <dir_register+0xc2>
 8016282:	4c6c      	ldr	r4, [pc, #432]	; (8016434 <dir_register+0x270>)
 8016284:	4063      	eors	r3, r4
			for (i = 0; i < 16; i++) {
 8016286:	3801      	subs	r0, #1
 8016288:	2800      	cmp	r0, #0
 801628a:	d1f0      	bne.n	801626e <dir_register+0xaa>
		while (*lfn) {	/* Create a CRC */
 801628c:	880a      	ldrh	r2, [r1, #0]
 801628e:	2a00      	cmp	r2, #0
 8016290:	d1eb      	bne.n	801626a <dir_register+0xa6>
 8016292:	e7b6      	b.n	8016202 <dir_register+0x3e>
 8016294:	9900      	ldr	r1, [sp, #0]
 8016296:	e7f9      	b.n	801628c <dir_register+0xc8>
		seq /= 16;
 8016298:	0003      	movs	r3, r0
 801629a:	e7b6      	b.n	801620a <dir_register+0x46>
 801629c:	0003      	movs	r3, r0
 801629e:	e7c6      	b.n	801622e <dir_register+0x6a>
		for (n = 0; lfn[n]; n++) ;
 80162a0:	3001      	adds	r0, #1
 80162a2:	9a00      	ldr	r2, [sp, #0]
 80162a4:	0043      	lsls	r3, r0, #1
 80162a6:	5ad3      	ldrh	r3, [r2, r3]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d1f9      	bne.n	80162a0 <dir_register+0xdc>
		nent = (n + 25) / 13;
 80162ac:	210d      	movs	r1, #13
 80162ae:	3019      	adds	r0, #25
 80162b0:	f7f1 fbda 	bl	8007a68 <__udivsi3>
 80162b4:	0005      	movs	r5, r0
	res = dir_sdi(dp, 0);
 80162b6:	2100      	movs	r1, #0
 80162b8:	0038      	movs	r0, r7
 80162ba:	f7ff fb5f 	bl	801597c <dir_sdi>
 80162be:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 80162c0:	d000      	beq.n	80162c4 <dir_register+0x100>
 80162c2:	e09e      	b.n	8016402 <dir_register+0x23e>
		n = 0;
 80162c4:	0006      	movs	r6, r0
			res = move_window(dp->fs, dp->sect);
 80162c6:	4b5c      	ldr	r3, [pc, #368]	; (8016438 <dir_register+0x274>)
 80162c8:	58f9      	ldr	r1, [r7, r3]
 80162ca:	3b10      	subs	r3, #16
 80162cc:	58f8      	ldr	r0, [r7, r3]
 80162ce:	f7ff f86b 	bl	80153a8 <move_window>
 80162d2:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 80162d4:	d000      	beq.n	80162d8 <dir_register+0x114>
 80162d6:	e094      	b.n	8016402 <dir_register+0x23e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80162d8:	4b58      	ldr	r3, [pc, #352]	; (801643c <dir_register+0x278>)
 80162da:	58fb      	ldr	r3, [r7, r3]
 80162dc:	9300      	str	r3, [sp, #0]
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	2be5      	cmp	r3, #229	; 0xe5
 80162e2:	d002      	beq.n	80162ea <dir_register+0x126>
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d000      	beq.n	80162ea <dir_register+0x126>
 80162e8:	e083      	b.n	80163f2 <dir_register+0x22e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80162ea:	3601      	adds	r6, #1
 80162ec:	42b5      	cmp	r5, r6
 80162ee:	d000      	beq.n	80162f2 <dir_register+0x12e>
 80162f0:	e080      	b.n	80163f4 <dir_register+0x230>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80162f2:	1e6e      	subs	r6, r5, #1
 80162f4:	2d01      	cmp	r5, #1
 80162f6:	d05a      	beq.n	80163ae <dir_register+0x1ea>
		res = dir_sdi(dp, dp->index - nent);
 80162f8:	4b51      	ldr	r3, [pc, #324]	; (8016440 <dir_register+0x27c>)
 80162fa:	0038      	movs	r0, r7
 80162fc:	5af9      	ldrh	r1, [r7, r3]
 80162fe:	1b89      	subs	r1, r1, r6
 8016300:	f7ff fb3c 	bl	801597c <dir_sdi>
 8016304:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 8016306:	d1ad      	bne.n	8016264 <dir_register+0xa0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8016308:	4b49      	ldr	r3, [pc, #292]	; (8016430 <dir_register+0x26c>)
 801630a:	58f8      	ldr	r0, [r7, r3]
 801630c:	f7fe ffc2 	bl	8015294 <sum_sfn>
 8016310:	9001      	str	r0, [sp, #4]
				res = move_window(dp->fs, dp->sect);
 8016312:	4b49      	ldr	r3, [pc, #292]	; (8016438 <dir_register+0x274>)
 8016314:	58f9      	ldr	r1, [r7, r3]
 8016316:	3b10      	subs	r3, #16
 8016318:	58f8      	ldr	r0, [r7, r3]
 801631a:	f7ff f845 	bl	80153a8 <move_window>
 801631e:	1e04      	subs	r4, r0, #0
				if (res != FR_OK) break;
 8016320:	d1a0      	bne.n	8016264 <dir_register+0xa0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8016322:	2381      	movs	r3, #129	; 0x81
 8016324:	015b      	lsls	r3, r3, #5
 8016326:	58fb      	ldr	r3, [r7, r3]
 8016328:	b2f2      	uxtb	r2, r6
 801632a:	9300      	str	r3, [sp, #0]
 801632c:	4b43      	ldr	r3, [pc, #268]	; (801643c <dir_register+0x278>)
 801632e:	4694      	mov	ip, r2
 8016330:	58fb      	ldr	r3, [r7, r3]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8016332:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8016334:	210d      	movs	r1, #13
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8016336:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016338:	220f      	movs	r2, #15
 801633a:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 801633c:	b2f2      	uxtb	r2, r6
 801633e:	3a01      	subs	r2, #1
 8016340:	434a      	muls	r2, r1
	s = wc = 0;
 8016342:	0001      	movs	r1, r0
	dir[LDIR_Type] = 0;
 8016344:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8016346:	7698      	strb	r0, [r3, #26]
 8016348:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 801634a:	4c3e      	ldr	r4, [pc, #248]	; (8016444 <dir_register+0x280>)
 801634c:	42a0      	cmp	r0, r4
 801634e:	d003      	beq.n	8016358 <dir_register+0x194>
 8016350:	9c00      	ldr	r4, [sp, #0]
 8016352:	0050      	lsls	r0, r2, #1
 8016354:	5b00      	ldrh	r0, [r0, r4]
 8016356:	3201      	adds	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8016358:	4c3b      	ldr	r4, [pc, #236]	; (8016448 <dir_register+0x284>)
 801635a:	5d0c      	ldrb	r4, [r1, r4]
 801635c:	5518      	strb	r0, [r3, r4]
 801635e:	191c      	adds	r4, r3, r4
 8016360:	0025      	movs	r5, r4
 8016362:	0a04      	lsrs	r4, r0, #8
 8016364:	706c      	strb	r4, [r5, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8016366:	2800      	cmp	r0, #0
 8016368:	d100      	bne.n	801636c <dir_register+0x1a8>
 801636a:	4836      	ldr	r0, [pc, #216]	; (8016444 <dir_register+0x280>)
	} while (++s < 13);
 801636c:	3101      	adds	r1, #1
 801636e:	290d      	cmp	r1, #13
 8016370:	d1eb      	bne.n	801634a <dir_register+0x186>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8016372:	4934      	ldr	r1, [pc, #208]	; (8016444 <dir_register+0x280>)
 8016374:	4288      	cmp	r0, r1
 8016376:	d004      	beq.n	8016382 <dir_register+0x1be>
 8016378:	9900      	ldr	r1, [sp, #0]
 801637a:	0052      	lsls	r2, r2, #1
 801637c:	5a52      	ldrh	r2, [r2, r1]
 801637e:	2a00      	cmp	r2, #0
 8016380:	d103      	bne.n	801638a <dir_register+0x1c6>
 8016382:	4661      	mov	r1, ip
 8016384:	2240      	movs	r2, #64	; 0x40
 8016386:	4311      	orrs	r1, r2
 8016388:	468c      	mov	ip, r1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801638a:	4662      	mov	r2, ip
				dp->fs->wflag = 1;
 801638c:	2180      	movs	r1, #128	; 0x80
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801638e:	701a      	strb	r2, [r3, #0]
				dp->fs->wflag = 1;
 8016390:	2201      	movs	r2, #1
 8016392:	0149      	lsls	r1, r1, #5
 8016394:	5879      	ldr	r1, [r7, r1]
 8016396:	4b2d      	ldr	r3, [pc, #180]	; (801644c <dir_register+0x288>)
				res = dir_next(dp, 0);	/* Next entry */
 8016398:	0038      	movs	r0, r7
				dp->fs->wflag = 1;
 801639a:	54ca      	strb	r2, [r1, r3]
				res = dir_next(dp, 0);	/* Next entry */
 801639c:	2100      	movs	r1, #0
 801639e:	f7ff fc6d 	bl	8015c7c <dir_next>
 80163a2:	1e04      	subs	r4, r0, #0
			} while (res == FR_OK && --nent);
 80163a4:	d000      	beq.n	80163a8 <dir_register+0x1e4>
 80163a6:	e75d      	b.n	8016264 <dir_register+0xa0>
 80163a8:	3e01      	subs	r6, #1
 80163aa:	2e00      	cmp	r6, #0
 80163ac:	d1b1      	bne.n	8016312 <dir_register+0x14e>
		res = move_window(dp->fs, dp->sect);
 80163ae:	2580      	movs	r5, #128	; 0x80
 80163b0:	4b21      	ldr	r3, [pc, #132]	; (8016438 <dir_register+0x274>)
 80163b2:	016d      	lsls	r5, r5, #5
 80163b4:	58f9      	ldr	r1, [r7, r3]
 80163b6:	5978      	ldr	r0, [r7, r5]
 80163b8:	f7fe fff6 	bl	80153a8 <move_window>
 80163bc:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 80163be:	d000      	beq.n	80163c2 <dir_register+0x1fe>
 80163c0:	e750      	b.n	8016264 <dir_register+0xa0>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80163c2:	4e1e      	ldr	r6, [pc, #120]	; (801643c <dir_register+0x278>)
 80163c4:	0001      	movs	r1, r0
 80163c6:	2220      	movs	r2, #32
 80163c8:	59b8      	ldr	r0, [r7, r6]
 80163ca:	f7fe fe70 	bl	80150ae <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80163ce:	4b18      	ldr	r3, [pc, #96]	; (8016430 <dir_register+0x26c>)
 80163d0:	220b      	movs	r2, #11
 80163d2:	58f9      	ldr	r1, [r7, r3]
 80163d4:	59b8      	ldr	r0, [r7, r6]
 80163d6:	f7fe fe61 	bl	801509c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80163da:	2118      	movs	r1, #24
 80163dc:	4b14      	ldr	r3, [pc, #80]	; (8016430 <dir_register+0x26c>)
 80163de:	59ba      	ldr	r2, [r7, r6]
 80163e0:	58fb      	ldr	r3, [r7, r3]
 80163e2:	7adb      	ldrb	r3, [r3, #11]
 80163e4:	400b      	ands	r3, r1
 80163e6:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 80163e8:	597a      	ldr	r2, [r7, r5]
 80163ea:	4b18      	ldr	r3, [pc, #96]	; (801644c <dir_register+0x288>)
 80163ec:	3917      	subs	r1, #23
 80163ee:	54d1      	strb	r1, [r2, r3]
 80163f0:	e738      	b.n	8016264 <dir_register+0xa0>
				n = 0;					/* Not a blank entry. Restart to search */
 80163f2:	0006      	movs	r6, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80163f4:	2101      	movs	r1, #1
 80163f6:	0038      	movs	r0, r7
 80163f8:	f7ff fc40 	bl	8015c7c <dir_next>
 80163fc:	1e04      	subs	r4, r0, #0
		} while (res == FR_OK);
 80163fe:	d100      	bne.n	8016402 <dir_register+0x23e>
 8016400:	e761      	b.n	80162c6 <dir_register+0x102>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016402:	2c04      	cmp	r4, #4
 8016404:	d100      	bne.n	8016408 <dir_register+0x244>
 8016406:	e72c      	b.n	8016262 <dir_register+0x9e>
 8016408:	e72c      	b.n	8016264 <dir_register+0xa0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801640a:	2804      	cmp	r0, #4
 801640c:	d000      	beq.n	8016410 <dir_register+0x24c>
 801640e:	e729      	b.n	8016264 <dir_register+0xa0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8016410:	ab05      	add	r3, sp, #20
 8016412:	7adb      	ldrb	r3, [r3, #11]
 8016414:	9a00      	ldr	r2, [sp, #0]
 8016416:	72f3      	strb	r3, [r6, #11]
 8016418:	2381      	movs	r3, #129	; 0x81
 801641a:	015b      	lsls	r3, r3, #5
 801641c:	50fa      	str	r2, [r7, r3]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 801641e:	ab05      	add	r3, sp, #20
 8016420:	7adb      	ldrb	r3, [r3, #11]
		nent = 1;
 8016422:	2501      	movs	r5, #1
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8016424:	079b      	lsls	r3, r3, #30
 8016426:	d400      	bmi.n	801642a <dir_register+0x266>
 8016428:	e745      	b.n	80162b6 <dir_register+0xf2>
		for (n = 0; lfn[n]; n++) ;
 801642a:	2000      	movs	r0, #0
 801642c:	e739      	b.n	80162a2 <dir_register+0xde>
 801642e:	46c0      	nop			; (mov r8, r8)
 8016430:	00001018 	.word	0x00001018
 8016434:	00011021 	.word	0x00011021
 8016438:	00001010 	.word	0x00001010
 801643c:	00001014 	.word	0x00001014
 8016440:	00001006 	.word	0x00001006
 8016444:	0000ffff 	.word	0x0000ffff
 8016448:	0801bf56 	.word	0x0801bf56
 801644c:	00001004 	.word	0x00001004

08016450 <remove_chain>:
{
 8016450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016452:	0005      	movs	r5, r0
 8016454:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8016456:	2901      	cmp	r1, #1
 8016458:	d926      	bls.n	80164a8 <remove_chain+0x58>
 801645a:	4e15      	ldr	r6, [pc, #84]	; (80164b0 <remove_chain+0x60>)
 801645c:	5983      	ldr	r3, [r0, r6]
 801645e:	428b      	cmp	r3, r1
 8016460:	d922      	bls.n	80164a8 <remove_chain+0x58>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8016462:	0021      	movs	r1, r4
 8016464:	0028      	movs	r0, r5
 8016466:	f7ff f9fd 	bl	8015864 <get_fat>
 801646a:	0027      	movs	r7, r4
 801646c:	1e04      	subs	r4, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
 801646e:	d101      	bne.n	8016474 <remove_chain+0x24>
		res = FR_INT_ERR;
 8016470:	2000      	movs	r0, #0
}
 8016472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8016474:	2801      	cmp	r0, #1
 8016476:	d017      	beq.n	80164a8 <remove_chain+0x58>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8016478:	1c43      	adds	r3, r0, #1
 801647a:	d017      	beq.n	80164ac <remove_chain+0x5c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 801647c:	2200      	movs	r2, #0
 801647e:	0039      	movs	r1, r7
 8016480:	0028      	movs	r0, r5
 8016482:	f7ff fae9 	bl	8015a58 <put_fat>
			if (res != FR_OK) break;
 8016486:	2800      	cmp	r0, #0
 8016488:	d1f3      	bne.n	8016472 <remove_chain+0x22>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 801648a:	4a0a      	ldr	r2, [pc, #40]	; (80164b4 <remove_chain+0x64>)
 801648c:	58ab      	ldr	r3, [r5, r2]
 801648e:	1c59      	adds	r1, r3, #1
 8016490:	d006      	beq.n	80164a0 <remove_chain+0x50>
				fs->fsi_flag |= 1;
 8016492:	2101      	movs	r1, #1
				fs->free_clust++;
 8016494:	3301      	adds	r3, #1
 8016496:	50ab      	str	r3, [r5, r2]
				fs->fsi_flag |= 1;
 8016498:	4a07      	ldr	r2, [pc, #28]	; (80164b8 <remove_chain+0x68>)
 801649a:	5cab      	ldrb	r3, [r5, r2]
 801649c:	430b      	orrs	r3, r1
 801649e:	54ab      	strb	r3, [r5, r2]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80164a0:	59ab      	ldr	r3, [r5, r6]
 80164a2:	429c      	cmp	r4, r3
 80164a4:	d3dd      	bcc.n	8016462 <remove_chain+0x12>
 80164a6:	e7e3      	b.n	8016470 <remove_chain+0x20>
		res = FR_INT_ERR;
 80164a8:	2002      	movs	r0, #2
 80164aa:	e7e2      	b.n	8016472 <remove_chain+0x22>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80164ac:	2001      	movs	r0, #1
 80164ae:	e7e0      	b.n	8016472 <remove_chain+0x22>
 80164b0:	00001014 	.word	0x00001014
 80164b4:	00001010 	.word	0x00001010
 80164b8:	00001005 	.word	0x00001005

080164bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80164bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164be:	b085      	sub	sp, #20
 80164c0:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 80164c2:	a803      	add	r0, sp, #12
{
 80164c4:	0015      	movs	r5, r2
 80164c6:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80164c8:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80164ca:	f7fe fef1 	bl	80152b0 <get_ldnumber>
 80164ce:	0004      	movs	r4, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 80164d0:	200b      	movs	r0, #11
 80164d2:	2c00      	cmp	r4, #0
 80164d4:	db1d      	blt.n	8016512 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80164d6:	4e10      	ldr	r6, [pc, #64]	; (8016518 <f_mount+0x5c>)
 80164d8:	00a4      	lsls	r4, r4, #2
 80164da:	59a7      	ldr	r7, [r4, r6]

	if (cfs) {
 80164dc:	2f00      	cmp	r7, #0
 80164de:	d006      	beq.n	80164ee <f_mount+0x32>
#if _FS_LOCK
		clear_lock(cfs);
 80164e0:	0038      	movs	r0, r7
 80164e2:	f7fe fea7 	bl	8015234 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80164e6:	2380      	movs	r3, #128	; 0x80
 80164e8:	2200      	movs	r2, #0
 80164ea:	015b      	lsls	r3, r3, #5
 80164ec:	54fa      	strb	r2, [r7, r3]
	}

	if (fs) {
 80164ee:	9b01      	ldr	r3, [sp, #4]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d003      	beq.n	80164fc <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 80164f4:	2280      	movs	r2, #128	; 0x80
 80164f6:	2100      	movs	r1, #0
 80164f8:	0152      	lsls	r2, r2, #5
 80164fa:	5499      	strb	r1, [r3, r2]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80164fc:	1e18      	subs	r0, r3, #0
	FatFs[vol] = fs;					/* Register new fs object */
 80164fe:	5133      	str	r3, [r6, r4]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016500:	d007      	beq.n	8016512 <f_mount+0x56>
 8016502:	2000      	movs	r0, #0
 8016504:	2d01      	cmp	r5, #1
 8016506:	d104      	bne.n	8016512 <f_mount+0x56>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8016508:	0002      	movs	r2, r0
 801650a:	4669      	mov	r1, sp
 801650c:	a801      	add	r0, sp, #4
 801650e:	f7fe ffa1 	bl	8015454 <find_volume>
	LEAVE_FF(fs, res);
}
 8016512:	b005      	add	sp, #20
 8016514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016516:	46c0      	nop			; (mov r8, r8)
 8016518:	200006a0 	.word	0x200006a0

0801651c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801651e:	4c80      	ldr	r4, [pc, #512]	; (8016720 <f_open+0x204>)
 8016520:	0007      	movs	r7, r0
 8016522:	44a5      	add	sp, r4
 8016524:	0016      	movs	r6, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8016526:	2009      	movs	r0, #9
{
 8016528:	9103      	str	r1, [sp, #12]
	if (!fp) return FR_INVALID_OBJECT;
 801652a:	2f00      	cmp	r7, #0
 801652c:	d046      	beq.n	80165bc <f_open+0xa0>
	fp->fs = 0;			/* Clear file object */
 801652e:	2380      	movs	r3, #128	; 0x80
 8016530:	2200      	movs	r2, #0
 8016532:	015b      	lsls	r3, r3, #5

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8016534:	487b      	ldr	r0, [pc, #492]	; (8016724 <f_open+0x208>)
	fp->fs = 0;			/* Clear file object */
 8016536:	50fa      	str	r2, [r7, r3]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8016538:	321e      	adds	r2, #30
 801653a:	ab02      	add	r3, sp, #8
 801653c:	4032      	ands	r2, r6
 801653e:	a903      	add	r1, sp, #12
 8016540:	18c0      	adds	r0, r0, r3
 8016542:	f7fe ff87 	bl	8015454 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8016546:	2800      	cmp	r0, #0
 8016548:	d138      	bne.n	80165bc <f_open+0xa0>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 801654a:	231f      	movs	r3, #31
		INIT_BUF(dj);
 801654c:	2518      	movs	r5, #24
 801654e:	4975      	ldr	r1, [pc, #468]	; (8016724 <f_open+0x208>)
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8016550:	4033      	ands	r3, r6
		INIT_BUF(dj);
 8016552:	aa02      	add	r2, sp, #8
 8016554:	1952      	adds	r2, r2, r5
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8016556:	9301      	str	r3, [sp, #4]
		INIT_BUF(dj);
 8016558:	ab05      	add	r3, sp, #20
 801655a:	5053      	str	r3, [r2, r1]
 801655c:	2381      	movs	r3, #129	; 0x81
 801655e:	4a72      	ldr	r2, [pc, #456]	; (8016728 <f_open+0x20c>)
 8016560:	a902      	add	r1, sp, #8
 8016562:	015b      	lsls	r3, r3, #5
 8016564:	1949      	adds	r1, r1, r5
 8016566:	50ca      	str	r2, [r1, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8016568:	a808      	add	r0, sp, #32
 801656a:	9903      	ldr	r1, [sp, #12]
 801656c:	f7ff fcea 	bl	8015f44 <follow_path>
		dir = dj.dir;
 8016570:	4c6e      	ldr	r4, [pc, #440]	; (801672c <f_open+0x210>)
 8016572:	ab02      	add	r3, sp, #8
 8016574:	195b      	adds	r3, r3, r5
 8016576:	591d      	ldr	r5, [r3, r4]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016578:	2800      	cmp	r0, #0
 801657a:	d10a      	bne.n	8016592 <f_open+0x76>
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
 801657c:	3006      	adds	r0, #6
			if (!dir)	/* Default directory itself */
 801657e:	2d00      	cmp	r5, #0
 8016580:	d007      	beq.n	8016592 <f_open+0x76>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016582:	2301      	movs	r3, #1
 8016584:	9901      	ldr	r1, [sp, #4]
 8016586:	a808      	add	r0, sp, #32
 8016588:	4399      	bics	r1, r3
 801658a:	1e4b      	subs	r3, r1, #1
 801658c:	4199      	sbcs	r1, r3
 801658e:	f7fe fd95 	bl	80150bc <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016592:	231c      	movs	r3, #28
 8016594:	421e      	tst	r6, r3
 8016596:	d100      	bne.n	801659a <f_open+0x7e>
 8016598:	e087      	b.n	80166aa <f_open+0x18e>
			if (res != FR_OK) {					/* No file, create new */
 801659a:	2800      	cmp	r0, #0
 801659c:	d011      	beq.n	80165c2 <f_open+0xa6>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 801659e:	2804      	cmp	r0, #4
 80165a0:	d10c      	bne.n	80165bc <f_open+0xa0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80165a2:	4b63      	ldr	r3, [pc, #396]	; (8016730 <f_open+0x214>)
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	2a00      	cmp	r2, #0
 80165a8:	d003      	beq.n	80165b2 <f_open+0x96>
 80165aa:	68db      	ldr	r3, [r3, #12]
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80165ac:	300e      	adds	r0, #14
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d104      	bne.n	80165bc <f_open+0xa0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80165b2:	a808      	add	r0, sp, #32
 80165b4:	f7ff fe06 	bl	80161c4 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80165b8:	2800      	cmp	r0, #0
 80165ba:	d00d      	beq.n	80165d8 <f_open+0xbc>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80165bc:	4b5d      	ldr	r3, [pc, #372]	; (8016734 <f_open+0x218>)
 80165be:	449d      	add	sp, r3
 80165c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80165c2:	2311      	movs	r3, #17
 80165c4:	7aea      	ldrb	r2, [r5, #11]
					res = FR_DENIED;
 80165c6:	2007      	movs	r0, #7
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80165c8:	421a      	tst	r2, r3
 80165ca:	d1f7      	bne.n	80165bc <f_open+0xa0>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80165cc:	3001      	adds	r0, #1
 80165ce:	0773      	lsls	r3, r6, #29
 80165d0:	d4f4      	bmi.n	80165bc <f_open+0xa0>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80165d2:	4206      	tst	r6, r0
 80165d4:	d046      	beq.n	8016664 <f_open+0x148>
 80165d6:	e007      	b.n	80165e8 <f_open+0xcc>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80165d8:	2308      	movs	r3, #8
 80165da:	9a01      	ldr	r2, [sp, #4]
 80165dc:	431a      	orrs	r2, r3
 80165de:	9201      	str	r2, [sp, #4]
				dir = dj.dir;					/* New entry */
 80165e0:	2218      	movs	r2, #24
 80165e2:	ab02      	add	r3, sp, #8
 80165e4:	189b      	adds	r3, r3, r2
 80165e6:	591d      	ldr	r5, [r3, r4]
				dw = GET_FATTIME();				/* Created time */
 80165e8:	f7fc fab0 	bl	8012b4c <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 80165ec:	b283      	uxth	r3, r0
 80165ee:	0a1b      	lsrs	r3, r3, #8
 80165f0:	73eb      	strb	r3, [r5, #15]
 80165f2:	0c03      	lsrs	r3, r0, #16
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80165f4:	2400      	movs	r4, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 80165f6:	742b      	strb	r3, [r5, #16]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80165f8:	2680      	movs	r6, #128	; 0x80
 80165fa:	2318      	movs	r3, #24
				ST_DWORD(dir + DIR_CrtTime, dw);
 80165fc:	73a8      	strb	r0, [r5, #14]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80165fe:	aa02      	add	r2, sp, #8
				ST_DWORD(dir + DIR_CrtTime, dw);
 8016600:	0e00      	lsrs	r0, r0, #24
 8016602:	7468      	strb	r0, [r5, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8016604:	72ec      	strb	r4, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8016606:	772c      	strb	r4, [r5, #28]
 8016608:	776c      	strb	r4, [r5, #29]
 801660a:	77ac      	strb	r4, [r5, #30]
 801660c:	77ec      	strb	r4, [r5, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 801660e:	0176      	lsls	r6, r6, #5
 8016610:	18d2      	adds	r2, r2, r3
 8016612:	5992      	ldr	r2, [r2, r6]
 8016614:	0029      	movs	r1, r5
 8016616:	5d90      	ldrb	r0, [r2, r6]
 8016618:	9202      	str	r2, [sp, #8]
 801661a:	f7ff f8ff 	bl	801581c <ld_clust.isra.0>
				dj.fs->wflag = 1;
 801661e:	2318      	movs	r3, #24
 8016620:	aa02      	add	r2, sp, #8
 8016622:	18d3      	adds	r3, r2, r3
 8016624:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 8016626:	76ac      	strb	r4, [r5, #26]
 8016628:	76ec      	strb	r4, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 801662a:	752c      	strb	r4, [r5, #20]
 801662c:	756c      	strb	r4, [r5, #21]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 801662e:	9002      	str	r0, [sp, #8]
				dj.fs->wflag = 1;
 8016630:	5998      	ldr	r0, [r3, r6]
 8016632:	4b41      	ldr	r3, [pc, #260]	; (8016738 <f_open+0x21c>)
 8016634:	54c2      	strb	r2, [r0, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8016636:	9b02      	ldr	r3, [sp, #8]
 8016638:	42a3      	cmp	r3, r4
 801663a:	d013      	beq.n	8016664 <f_open+0x148>
					dw = dj.fs->winsect;
 801663c:	4b3f      	ldr	r3, [pc, #252]	; (801673c <f_open+0x220>)
					res = remove_chain(dj.fs, cl);
 801663e:	9902      	ldr	r1, [sp, #8]
					dw = dj.fs->winsect;
 8016640:	58c4      	ldr	r4, [r0, r3]
					res = remove_chain(dj.fs, cl);
 8016642:	f7ff ff05 	bl	8016450 <remove_chain>
					if (res == FR_OK) {
 8016646:	2800      	cmp	r0, #0
 8016648:	d1b8      	bne.n	80165bc <f_open+0xa0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801664a:	2218      	movs	r2, #24
 801664c:	ab02      	add	r3, sp, #8
 801664e:	189b      	adds	r3, r3, r2
 8016650:	5998      	ldr	r0, [r3, r6]
 8016652:	9b02      	ldr	r3, [sp, #8]
 8016654:	4a3a      	ldr	r2, [pc, #232]	; (8016740 <f_open+0x224>)
 8016656:	3b01      	subs	r3, #1
						res = move_window(dj.fs, dw);
 8016658:	0021      	movs	r1, r4
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801665a:	5083      	str	r3, [r0, r2]
						res = move_window(dj.fs, dw);
 801665c:	f7fe fea4 	bl	80153a8 <move_window>
		if (res == FR_OK) {
 8016660:	2800      	cmp	r0, #0
 8016662:	d1ab      	bne.n	80165bc <f_open+0xa0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016664:	9b01      	ldr	r3, [sp, #4]
 8016666:	071b      	lsls	r3, r3, #28
 8016668:	d503      	bpl.n	8016672 <f_open+0x156>
				mode |= FA__WRITTEN;
 801666a:	2320      	movs	r3, #32
 801666c:	9a01      	ldr	r2, [sp, #4]
 801666e:	431a      	orrs	r2, r3
 8016670:	9201      	str	r2, [sp, #4]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8016672:	2218      	movs	r2, #24
 8016674:	2680      	movs	r6, #128	; 0x80
 8016676:	ab02      	add	r3, sp, #8
 8016678:	189b      	adds	r3, r3, r2
 801667a:	0176      	lsls	r6, r6, #5
 801667c:	599b      	ldr	r3, [r3, r6]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801667e:	9901      	ldr	r1, [sp, #4]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8016680:	9302      	str	r3, [sp, #8]
 8016682:	9a02      	ldr	r2, [sp, #8]
 8016684:	4b2d      	ldr	r3, [pc, #180]	; (801673c <f_open+0x220>)
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016686:	a808      	add	r0, sp, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8016688:	58d2      	ldr	r2, [r2, r3]
 801668a:	4b2e      	ldr	r3, [pc, #184]	; (8016744 <f_open+0x228>)
 801668c:	50fa      	str	r2, [r7, r3]
			fp->dir_ptr = dir;
 801668e:	3304      	adds	r3, #4
 8016690:	50fd      	str	r5, [r7, r3]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016692:	2301      	movs	r3, #1
 8016694:	4399      	bics	r1, r3
 8016696:	1e4b      	subs	r3, r1, #1
 8016698:	4199      	sbcs	r1, r3
 801669a:	f7fe fd55 	bl	8015148 <inc_lock>
 801669e:	4b2a      	ldr	r3, [pc, #168]	; (8016748 <f_open+0x22c>)
 80166a0:	50f8      	str	r0, [r7, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 80166a2:	2800      	cmp	r0, #0
 80166a4:	d110      	bne.n	80166c8 <f_open+0x1ac>
 80166a6:	3002      	adds	r0, #2
 80166a8:	e788      	b.n	80165bc <f_open+0xa0>
			if (res == FR_OK) {					/* Follow succeeded */
 80166aa:	2800      	cmp	r0, #0
 80166ac:	d000      	beq.n	80166b0 <f_open+0x194>
 80166ae:	e785      	b.n	80165bc <f_open+0xa0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80166b0:	7aeb      	ldrb	r3, [r5, #11]
					res = FR_NO_FILE;
 80166b2:	3004      	adds	r0, #4
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80166b4:	06da      	lsls	r2, r3, #27
 80166b6:	d500      	bpl.n	80166ba <f_open+0x19e>
 80166b8:	e780      	b.n	80165bc <f_open+0xa0>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80166ba:	07b2      	lsls	r2, r6, #30
 80166bc:	d5d2      	bpl.n	8016664 <f_open+0x148>
					res = FR_DENIED;
 80166be:	3003      	adds	r0, #3
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80166c0:	07db      	lsls	r3, r3, #31
 80166c2:	d500      	bpl.n	80166c6 <f_open+0x1aa>
 80166c4:	e77a      	b.n	80165bc <f_open+0xa0>
 80166c6:	e7cd      	b.n	8016664 <f_open+0x148>
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80166c8:	2118      	movs	r1, #24
			fp->err = 0;						/* Clear error flag */
 80166ca:	2400      	movs	r4, #0
			fp->flag = mode;					/* File access mode */
 80166cc:	9a01      	ldr	r2, [sp, #4]
 80166ce:	4b1f      	ldr	r3, [pc, #124]	; (801674c <f_open+0x230>)
 80166d0:	54fa      	strb	r2, [r7, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80166d2:	aa02      	add	r2, sp, #8
			fp->err = 0;						/* Clear error flag */
 80166d4:	4b1e      	ldr	r3, [pc, #120]	; (8016750 <f_open+0x234>)
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80166d6:	1852      	adds	r2, r2, r1
 80166d8:	5992      	ldr	r2, [r2, r6]
			fp->err = 0;						/* Clear error flag */
 80166da:	54fc      	strb	r4, [r7, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80166dc:	5d90      	ldrb	r0, [r2, r6]
 80166de:	0029      	movs	r1, r5
 80166e0:	9201      	str	r2, [sp, #4]
 80166e2:	f7ff f89b 	bl	801581c <ld_clust.isra.0>
 80166e6:	4b1b      	ldr	r3, [pc, #108]	; (8016754 <f_open+0x238>)
 80166e8:	50f8      	str	r0, [r7, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80166ea:	7f69      	ldrb	r1, [r5, #29]
 80166ec:	7f2b      	ldrb	r3, [r5, #28]
 80166ee:	7faa      	ldrb	r2, [r5, #30]
 80166f0:	0209      	lsls	r1, r1, #8
 80166f2:	4319      	orrs	r1, r3
 80166f4:	7feb      	ldrb	r3, [r5, #31]
 80166f6:	0412      	lsls	r2, r2, #16
 80166f8:	4311      	orrs	r1, r2
 80166fa:	061b      	lsls	r3, r3, #24
 80166fc:	4a10      	ldr	r2, [pc, #64]	; (8016740 <f_open+0x224>)
 80166fe:	430b      	orrs	r3, r1
 8016700:	50bb      	str	r3, [r7, r2]
			fp->fptr = 0;						/* File pointer */
 8016702:	4b15      	ldr	r3, [pc, #84]	; (8016758 <f_open+0x23c>)
			fp->dsect = 0;
 8016704:	4a07      	ldr	r2, [pc, #28]	; (8016724 <f_open+0x208>)
			fp->fptr = 0;						/* File pointer */
 8016706:	50fc      	str	r4, [r7, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 8016708:	4b14      	ldr	r3, [pc, #80]	; (801675c <f_open+0x240>)
			fp->dsect = 0;
 801670a:	50bc      	str	r4, [r7, r2]
			fp->fs = dj.fs;	 					/* Validate file object */
 801670c:	9a01      	ldr	r2, [sp, #4]
			fp->cltbl = 0;						/* Normal seek mode */
 801670e:	50fc      	str	r4, [r7, r3]
			fp->id = fp->fs->id;
 8016710:	4b0e      	ldr	r3, [pc, #56]	; (801674c <f_open+0x230>)
			fp->fs = dj.fs;	 					/* Validate file object */
 8016712:	51ba      	str	r2, [r7, r6]
			fp->id = fp->fs->id;
 8016714:	5ad2      	ldrh	r2, [r2, r3]
 8016716:	4b08      	ldr	r3, [pc, #32]	; (8016738 <f_open+0x21c>)
 8016718:	0020      	movs	r0, r4
 801671a:	52fa      	strh	r2, [r7, r3]
 801671c:	e74e      	b.n	80165bc <f_open+0xa0>
 801671e:	46c0      	nop			; (mov r8, r8)
 8016720:	ffffefb4 	.word	0xffffefb4
 8016724:	00001018 	.word	0x00001018
 8016728:	200006be 	.word	0x200006be
 801672c:	00001014 	.word	0x00001014
 8016730:	200006a4 	.word	0x200006a4
 8016734:	0000104c 	.word	0x0000104c
 8016738:	00001004 	.word	0x00001004
 801673c:	0000102c 	.word	0x0000102c
 8016740:	0000100c 	.word	0x0000100c
 8016744:	0000101c 	.word	0x0000101c
 8016748:	00001028 	.word	0x00001028
 801674c:	00001006 	.word	0x00001006
 8016750:	00001007 	.word	0x00001007
 8016754:	00001010 	.word	0x00001010
 8016758:	00001008 	.word	0x00001008
 801675c:	00001024 	.word	0x00001024

08016760 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8016760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016762:	b087      	sub	sp, #28
 8016764:	9304      	str	r3, [sp, #16]
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8016766:	2300      	movs	r3, #0
{
 8016768:	0015      	movs	r5, r2
	*br = 0;	/* Clear read byte counter */
 801676a:	9a04      	ldr	r2, [sp, #16]
{
 801676c:	0004      	movs	r4, r0
	*br = 0;	/* Clear read byte counter */
 801676e:	6013      	str	r3, [r2, #0]
{
 8016770:	9102      	str	r1, [sp, #8]

	res = validate(fp);							/* Check validity */
 8016772:	f7fe fdb3 	bl	80152dc <validate>
 8016776:	9001      	str	r0, [sp, #4]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8016778:	2800      	cmp	r0, #0
 801677a:	d137      	bne.n	80167ec <f_read+0x8c>
	if (fp->err)								/* Check error */
 801677c:	4b72      	ldr	r3, [pc, #456]	; (8016948 <f_read+0x1e8>)
 801677e:	5ce3      	ldrb	r3, [r4, r3]
 8016780:	9301      	str	r3, [sp, #4]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d132      	bne.n	80167ec <f_read+0x8c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8016786:	4b71      	ldr	r3, [pc, #452]	; (801694c <f_read+0x1ec>)
 8016788:	5ce2      	ldrb	r2, [r4, r3]
 801678a:	2301      	movs	r3, #1
 801678c:	0011      	movs	r1, r2
 801678e:	4019      	ands	r1, r3
 8016790:	9105      	str	r1, [sp, #20]
 8016792:	421a      	tst	r2, r3
 8016794:	d100      	bne.n	8016798 <f_read+0x38>
 8016796:	e0d5      	b.n	8016944 <f_read+0x1e4>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8016798:	4b6d      	ldr	r3, [pc, #436]	; (8016950 <f_read+0x1f0>)
 801679a:	4a6e      	ldr	r2, [pc, #440]	; (8016954 <f_read+0x1f4>)
 801679c:	58e3      	ldr	r3, [r4, r3]
 801679e:	58a2      	ldr	r2, [r4, r2]
 80167a0:	1a9b      	subs	r3, r3, r2
 80167a2:	9300      	str	r3, [sp, #0]
 80167a4:	42ab      	cmp	r3, r5
 80167a6:	d900      	bls.n	80167aa <f_read+0x4a>
 80167a8:	9500      	str	r5, [sp, #0]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80167aa:	9b00      	ldr	r3, [sp, #0]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d01d      	beq.n	80167ec <f_read+0x8c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80167b0:	4b68      	ldr	r3, [pc, #416]	; (8016954 <f_read+0x1f4>)
 80167b2:	58e6      	ldr	r6, [r4, r3]
 80167b4:	3b08      	subs	r3, #8
 80167b6:	58e5      	ldr	r5, [r4, r3]
 80167b8:	4b67      	ldr	r3, [pc, #412]	; (8016958 <f_read+0x1f8>)
 80167ba:	0030      	movs	r0, r6
 80167bc:	5ae9      	ldrh	r1, [r5, r3]
 80167be:	f7f1 f9d9 	bl	8007b74 <__aeabi_uidivmod>
 80167c2:	2900      	cmp	r1, #0
 80167c4:	d000      	beq.n	80167c8 <f_read+0x68>
 80167c6:	e0a5      	b.n	8016914 <f_read+0x1b4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80167c8:	4b64      	ldr	r3, [pc, #400]	; (801695c <f_read+0x1fc>)
 80167ca:	5ceb      	ldrb	r3, [r5, r3]
 80167cc:	3b01      	subs	r3, #1
 80167ce:	4018      	ands	r0, r3
 80167d0:	b2c3      	uxtb	r3, r0
 80167d2:	9303      	str	r3, [sp, #12]
			if (!csect) {						/* On the cluster boundary? */
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d125      	bne.n	8016824 <f_read+0xc4>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80167d8:	2e00      	cmp	r6, #0
 80167da:	d10a      	bne.n	80167f2 <f_read+0x92>
					clst = fp->sclust;			/* Follow from the origin */
 80167dc:	4b60      	ldr	r3, [pc, #384]	; (8016960 <f_read+0x200>)
 80167de:	58e0      	ldr	r0, [r4, r3]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80167e0:	2801      	cmp	r0, #1
 80167e2:	d815      	bhi.n	8016810 <f_read+0xb0>
 80167e4:	2002      	movs	r0, #2
 80167e6:	4b58      	ldr	r3, [pc, #352]	; (8016948 <f_read+0x1e8>)
 80167e8:	9001      	str	r0, [sp, #4]
 80167ea:	54e0      	strb	r0, [r4, r3]
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 80167ec:	9801      	ldr	r0, [sp, #4]
 80167ee:	b007      	add	sp, #28
 80167f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (fp->cltbl)
 80167f2:	4b5c      	ldr	r3, [pc, #368]	; (8016964 <f_read+0x204>)
 80167f4:	58e3      	ldr	r3, [r4, r3]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d004      	beq.n	8016804 <f_read+0xa4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80167fa:	0031      	movs	r1, r6
 80167fc:	0020      	movs	r0, r4
 80167fe:	f7fe fd27 	bl	8015250 <clmt_clust>
 8016802:	e7ed      	b.n	80167e0 <f_read+0x80>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8016804:	4b58      	ldr	r3, [pc, #352]	; (8016968 <f_read+0x208>)
 8016806:	0028      	movs	r0, r5
 8016808:	58e1      	ldr	r1, [r4, r3]
 801680a:	f7ff f82b 	bl	8015864 <get_fat>
 801680e:	e7e7      	b.n	80167e0 <f_read+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016810:	1c43      	adds	r3, r0, #1
 8016812:	d105      	bne.n	8016820 <f_read+0xc0>
 8016814:	2301      	movs	r3, #1
 8016816:	4a4c      	ldr	r2, [pc, #304]	; (8016948 <f_read+0x1e8>)
 8016818:	54a3      	strb	r3, [r4, r2]
 801681a:	9b05      	ldr	r3, [sp, #20]
		LEAVE_FF(fp->fs, FR_DENIED);
 801681c:	9301      	str	r3, [sp, #4]
 801681e:	e7e5      	b.n	80167ec <f_read+0x8c>
				fp->clust = clst;				/* Update current cluster */
 8016820:	4b51      	ldr	r3, [pc, #324]	; (8016968 <f_read+0x208>)
 8016822:	50e0      	str	r0, [r4, r3]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8016824:	2380      	movs	r3, #128	; 0x80
 8016826:	015b      	lsls	r3, r3, #5
 8016828:	58e6      	ldr	r6, [r4, r3]
 801682a:	4b4f      	ldr	r3, [pc, #316]	; (8016968 <f_read+0x208>)
 801682c:	0030      	movs	r0, r6
 801682e:	58e1      	ldr	r1, [r4, r3]
 8016830:	f7ff f802 	bl	8015838 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8016834:	2800      	cmp	r0, #0
 8016836:	d0d5      	beq.n	80167e4 <f_read+0x84>
			sect += csect;
 8016838:	9b03      	ldr	r3, [sp, #12]
 801683a:	18c5      	adds	r5, r0, r3
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 801683c:	4b46      	ldr	r3, [pc, #280]	; (8016958 <f_read+0x1f8>)
 801683e:	5af1      	ldrh	r1, [r6, r3]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016840:	9b00      	ldr	r3, [sp, #0]
 8016842:	4299      	cmp	r1, r3
 8016844:	d841      	bhi.n	80168ca <f_read+0x16a>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8016846:	0018      	movs	r0, r3
 8016848:	f7f1 f90e 	bl	8007a68 <__udivsi3>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801684c:	4b43      	ldr	r3, [pc, #268]	; (801695c <f_read+0x1fc>)
 801684e:	9a03      	ldr	r2, [sp, #12]
 8016850:	5cf3      	ldrb	r3, [r6, r3]
 8016852:	1812      	adds	r2, r2, r0
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8016854:	0007      	movs	r7, r0
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8016856:	429a      	cmp	r2, r3
 8016858:	d901      	bls.n	801685e <f_read+0xfe>
					cc = fp->fs->csize - csect;
 801685a:	9a03      	ldr	r2, [sp, #12]
 801685c:	1a9f      	subs	r7, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 801685e:	4b43      	ldr	r3, [pc, #268]	; (801696c <f_read+0x20c>)
 8016860:	002a      	movs	r2, r5
 8016862:	5cf0      	ldrb	r0, [r6, r3]
 8016864:	9902      	ldr	r1, [sp, #8]
 8016866:	003b      	movs	r3, r7
 8016868:	f7fe fbee 	bl	8015048 <disk_read>
 801686c:	2800      	cmp	r0, #0
 801686e:	d1d1      	bne.n	8016814 <f_read+0xb4>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8016870:	2240      	movs	r2, #64	; 0x40
 8016872:	4b36      	ldr	r3, [pc, #216]	; (801694c <f_read+0x1ec>)
 8016874:	5ce3      	ldrb	r3, [r4, r3]
 8016876:	4213      	tst	r3, r2
 8016878:	d00f      	beq.n	801689a <f_read+0x13a>
 801687a:	4b3d      	ldr	r3, [pc, #244]	; (8016970 <f_read+0x210>)
 801687c:	58e0      	ldr	r0, [r4, r3]
 801687e:	1b45      	subs	r5, r0, r5
 8016880:	42af      	cmp	r7, r5
 8016882:	d90a      	bls.n	801689a <f_read+0x13a>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8016884:	3b18      	subs	r3, #24
 8016886:	58e3      	ldr	r3, [r4, r3]
 8016888:	4a33      	ldr	r2, [pc, #204]	; (8016958 <f_read+0x1f8>)
 801688a:	9303      	str	r3, [sp, #12]
 801688c:	5a9a      	ldrh	r2, [r3, r2]
 801688e:	9b02      	ldr	r3, [sp, #8]
 8016890:	4355      	muls	r5, r2
 8016892:	0021      	movs	r1, r4
 8016894:	1958      	adds	r0, r3, r5
 8016896:	f7fe fc01 	bl	801509c <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 801689a:	2380      	movs	r3, #128	; 0x80
 801689c:	015b      	lsls	r3, r3, #5
 801689e:	58e3      	ldr	r3, [r4, r3]
 80168a0:	4a2d      	ldr	r2, [pc, #180]	; (8016958 <f_read+0x1f8>)
 80168a2:	9303      	str	r3, [sp, #12]
 80168a4:	5a98      	ldrh	r0, [r3, r2]
 80168a6:	4347      	muls	r7, r0
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80168a8:	9b02      	ldr	r3, [sp, #8]
 80168aa:	4a2a      	ldr	r2, [pc, #168]	; (8016954 <f_read+0x1f4>)
 80168ac:	19db      	adds	r3, r3, r7
 80168ae:	9302      	str	r3, [sp, #8]
 80168b0:	58a3      	ldr	r3, [r4, r2]
 80168b2:	19db      	adds	r3, r3, r7
 80168b4:	50a3      	str	r3, [r4, r2]
 80168b6:	9b04      	ldr	r3, [sp, #16]
 80168b8:	9a04      	ldr	r2, [sp, #16]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	9303      	str	r3, [sp, #12]
 80168be:	19db      	adds	r3, r3, r7
 80168c0:	6013      	str	r3, [r2, #0]
 80168c2:	9b00      	ldr	r3, [sp, #0]
 80168c4:	1bdb      	subs	r3, r3, r7
 80168c6:	9300      	str	r3, [sp, #0]
 80168c8:	e76f      	b.n	80167aa <f_read+0x4a>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80168ca:	4b29      	ldr	r3, [pc, #164]	; (8016970 <f_read+0x210>)
 80168cc:	58e2      	ldr	r2, [r4, r3]
 80168ce:	4295      	cmp	r5, r2
 80168d0:	d01e      	beq.n	8016910 <f_read+0x1b0>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80168d2:	2140      	movs	r1, #64	; 0x40
 80168d4:	4b1d      	ldr	r3, [pc, #116]	; (801694c <f_read+0x1ec>)
 80168d6:	4f25      	ldr	r7, [pc, #148]	; (801696c <f_read+0x20c>)
 80168d8:	5ce3      	ldrb	r3, [r4, r3]
 80168da:	420b      	tst	r3, r1
 80168dc:	d00b      	beq.n	80168f6 <f_read+0x196>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80168de:	2301      	movs	r3, #1
 80168e0:	0021      	movs	r1, r4
 80168e2:	5df0      	ldrb	r0, [r6, r7]
 80168e4:	f7fe fbbe 	bl	8015064 <disk_write>
 80168e8:	2800      	cmp	r0, #0
 80168ea:	d193      	bne.n	8016814 <f_read+0xb4>
					fp->flag &= ~FA__DIRTY;
 80168ec:	2140      	movs	r1, #64	; 0x40
 80168ee:	4a17      	ldr	r2, [pc, #92]	; (801694c <f_read+0x1ec>)
 80168f0:	5ca3      	ldrb	r3, [r4, r2]
 80168f2:	438b      	bics	r3, r1
 80168f4:	54a3      	strb	r3, [r4, r2]
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80168f6:	2380      	movs	r3, #128	; 0x80
 80168f8:	015b      	lsls	r3, r3, #5
 80168fa:	58e3      	ldr	r3, [r4, r3]
 80168fc:	002a      	movs	r2, r5
 80168fe:	9303      	str	r3, [sp, #12]
 8016900:	5dd8      	ldrb	r0, [r3, r7]
 8016902:	0021      	movs	r1, r4
 8016904:	2301      	movs	r3, #1
 8016906:	f7fe fb9f 	bl	8015048 <disk_read>
 801690a:	2800      	cmp	r0, #0
 801690c:	d000      	beq.n	8016910 <f_read+0x1b0>
 801690e:	e781      	b.n	8016814 <f_read+0xb4>
			fp->dsect = sect;
 8016910:	4b17      	ldr	r3, [pc, #92]	; (8016970 <f_read+0x210>)
 8016912:	50e5      	str	r5, [r4, r3]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8016914:	2380      	movs	r3, #128	; 0x80
 8016916:	015b      	lsls	r3, r3, #5
 8016918:	58e3      	ldr	r3, [r4, r3]
 801691a:	4a0f      	ldr	r2, [pc, #60]	; (8016958 <f_read+0x1f8>)
 801691c:	9303      	str	r3, [sp, #12]
 801691e:	5a9d      	ldrh	r5, [r3, r2]
 8016920:	4b0c      	ldr	r3, [pc, #48]	; (8016954 <f_read+0x1f4>)
 8016922:	0029      	movs	r1, r5
 8016924:	58e3      	ldr	r3, [r4, r3]
 8016926:	0018      	movs	r0, r3
 8016928:	9303      	str	r3, [sp, #12]
 801692a:	f7f1 f923 	bl	8007b74 <__aeabi_uidivmod>
 801692e:	9f00      	ldr	r7, [sp, #0]
 8016930:	1a6d      	subs	r5, r5, r1
		if (rcnt > btr) rcnt = btr;
 8016932:	42af      	cmp	r7, r5
 8016934:	d900      	bls.n	8016938 <f_read+0x1d8>
 8016936:	002f      	movs	r7, r5
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8016938:	003a      	movs	r2, r7
 801693a:	9802      	ldr	r0, [sp, #8]
 801693c:	1861      	adds	r1, r4, r1
 801693e:	f7fe fbad 	bl	801509c <mem_cpy>
 8016942:	e7b1      	b.n	80168a8 <f_read+0x148>
		LEAVE_FF(fp->fs, FR_DENIED);
 8016944:	2307      	movs	r3, #7
 8016946:	e769      	b.n	801681c <f_read+0xbc>
 8016948:	00001007 	.word	0x00001007
 801694c:	00001006 	.word	0x00001006
 8016950:	0000100c 	.word	0x0000100c
 8016954:	00001008 	.word	0x00001008
 8016958:	0000100a 	.word	0x0000100a
 801695c:	00001002 	.word	0x00001002
 8016960:	00001010 	.word	0x00001010
 8016964:	00001024 	.word	0x00001024
 8016968:	00001014 	.word	0x00001014
 801696c:	00001001 	.word	0x00001001
 8016970:	00001018 	.word	0x00001018

08016974 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016976:	b087      	sub	sp, #28
 8016978:	9305      	str	r3, [sp, #20]
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801697a:	2300      	movs	r3, #0
{
 801697c:	9200      	str	r2, [sp, #0]
	*bw = 0;	/* Clear write byte counter */
 801697e:	9a05      	ldr	r2, [sp, #20]
{
 8016980:	0004      	movs	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8016982:	6013      	str	r3, [r2, #0]
{
 8016984:	9103      	str	r1, [sp, #12]

	res = validate(fp);						/* Check validity */
 8016986:	f7fe fca9 	bl	80152dc <validate>
 801698a:	9001      	str	r0, [sp, #4]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801698c:	2800      	cmp	r0, #0
 801698e:	d12c      	bne.n	80169ea <f_write+0x76>
	if (fp->err)							/* Check error */
 8016990:	4b81      	ldr	r3, [pc, #516]	; (8016b98 <f_write+0x224>)
 8016992:	5ce3      	ldrb	r3, [r4, r3]
 8016994:	9301      	str	r3, [sp, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d127      	bne.n	80169ea <f_write+0x76>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 801699a:	4b80      	ldr	r3, [pc, #512]	; (8016b9c <f_write+0x228>)
 801699c:	5ce3      	ldrb	r3, [r4, r3]
 801699e:	079b      	lsls	r3, r3, #30
 80169a0:	d400      	bmi.n	80169a4 <f_write+0x30>
 80169a2:	e0f6      	b.n	8016b92 <f_write+0x21e>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80169a4:	4f7e      	ldr	r7, [pc, #504]	; (8016ba0 <f_write+0x22c>)
 80169a6:	9a00      	ldr	r2, [sp, #0]
 80169a8:	59e3      	ldr	r3, [r4, r7]
 80169aa:	18d2      	adds	r2, r2, r3
 80169ac:	4293      	cmp	r3, r2
 80169ae:	d800      	bhi.n	80169b2 <f_write+0x3e>
 80169b0:	e09a      	b.n	8016ae8 <f_write+0x174>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80169b2:	4b7c      	ldr	r3, [pc, #496]	; (8016ba4 <f_write+0x230>)
 80169b4:	59e2      	ldr	r2, [r4, r7]
 80169b6:	58e1      	ldr	r1, [r4, r3]
 80169b8:	428a      	cmp	r2, r1
 80169ba:	d900      	bls.n	80169be <f_write+0x4a>
 80169bc:	e0e7      	b.n	8016b8e <f_write+0x21a>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80169be:	2320      	movs	r3, #32
 80169c0:	4976      	ldr	r1, [pc, #472]	; (8016b9c <f_write+0x228>)
 80169c2:	5c62      	ldrb	r2, [r4, r1]
 80169c4:	4313      	orrs	r3, r2
 80169c6:	5463      	strb	r3, [r4, r1]

	LEAVE_FF(fp->fs, FR_OK);
 80169c8:	e00f      	b.n	80169ea <f_write+0x76>
					if (fp->cltbl)
 80169ca:	4b77      	ldr	r3, [pc, #476]	; (8016ba8 <f_write+0x234>)
 80169cc:	58e3      	ldr	r3, [r4, r3]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d00e      	beq.n	80169f0 <f_write+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80169d2:	0031      	movs	r1, r6
 80169d4:	0020      	movs	r0, r4
 80169d6:	f7fe fc3b 	bl	8015250 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80169da:	1e01      	subs	r1, r0, #0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80169dc:	d0e9      	beq.n	80169b2 <f_write+0x3e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80169de:	2901      	cmp	r1, #1
 80169e0:	d109      	bne.n	80169f6 <f_write+0x82>
 80169e2:	2002      	movs	r0, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80169e4:	4b6c      	ldr	r3, [pc, #432]	; (8016b98 <f_write+0x224>)
 80169e6:	9001      	str	r0, [sp, #4]
 80169e8:	54e0      	strb	r0, [r4, r3]
}
 80169ea:	9801      	ldr	r0, [sp, #4]
 80169ec:	b007      	add	sp, #28
 80169ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80169f0:	4b6e      	ldr	r3, [pc, #440]	; (8016bac <f_write+0x238>)
 80169f2:	58e1      	ldr	r1, [r4, r3]
 80169f4:	e098      	b.n	8016b28 <f_write+0x1b4>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80169f6:	1c4b      	adds	r3, r1, #1
 80169f8:	d101      	bne.n	80169fe <f_write+0x8a>
 80169fa:	2001      	movs	r0, #1
 80169fc:	e7f2      	b.n	80169e4 <f_write+0x70>
				fp->clust = clst;			/* Update current cluster */
 80169fe:	4b6b      	ldr	r3, [pc, #428]	; (8016bac <f_write+0x238>)
 8016a00:	50e1      	str	r1, [r4, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8016a02:	4b6b      	ldr	r3, [pc, #428]	; (8016bb0 <f_write+0x23c>)
 8016a04:	58e2      	ldr	r2, [r4, r3]
 8016a06:	2a00      	cmp	r2, #0
 8016a08:	d100      	bne.n	8016a0c <f_write+0x98>
 8016a0a:	50e1      	str	r1, [r4, r3]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8016a0c:	2240      	movs	r2, #64	; 0x40
 8016a0e:	4b63      	ldr	r3, [pc, #396]	; (8016b9c <f_write+0x228>)
 8016a10:	5ce3      	ldrb	r3, [r4, r3]
 8016a12:	4213      	tst	r3, r2
 8016a14:	d013      	beq.n	8016a3e <f_write+0xca>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8016a16:	2380      	movs	r3, #128	; 0x80
 8016a18:	015b      	lsls	r3, r3, #5
 8016a1a:	58e3      	ldr	r3, [r4, r3]
 8016a1c:	0021      	movs	r1, r4
 8016a1e:	9302      	str	r3, [sp, #8]
 8016a20:	9a02      	ldr	r2, [sp, #8]
 8016a22:	4b64      	ldr	r3, [pc, #400]	; (8016bb4 <f_write+0x240>)
 8016a24:	5cd0      	ldrb	r0, [r2, r3]
 8016a26:	4a64      	ldr	r2, [pc, #400]	; (8016bb8 <f_write+0x244>)
 8016a28:	2301      	movs	r3, #1
 8016a2a:	58a2      	ldr	r2, [r4, r2]
 8016a2c:	f7fe fb1a 	bl	8015064 <disk_write>
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d1e2      	bne.n	80169fa <f_write+0x86>
				fp->flag &= ~FA__DIRTY;
 8016a34:	2140      	movs	r1, #64	; 0x40
 8016a36:	4a59      	ldr	r2, [pc, #356]	; (8016b9c <f_write+0x228>)
 8016a38:	5ca3      	ldrb	r3, [r4, r2]
 8016a3a:	438b      	bics	r3, r1
 8016a3c:	54a3      	strb	r3, [r4, r2]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8016a3e:	2380      	movs	r3, #128	; 0x80
 8016a40:	015b      	lsls	r3, r3, #5
 8016a42:	58e3      	ldr	r3, [r4, r3]
 8016a44:	9302      	str	r3, [sp, #8]
 8016a46:	4b59      	ldr	r3, [pc, #356]	; (8016bac <f_write+0x238>)
 8016a48:	9802      	ldr	r0, [sp, #8]
 8016a4a:	58e1      	ldr	r1, [r4, r3]
 8016a4c:	f7fe fef4 	bl	8015838 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8016a50:	2800      	cmp	r0, #0
 8016a52:	d0c6      	beq.n	80169e2 <f_write+0x6e>
			sect += csect;
 8016a54:	9b04      	ldr	r3, [sp, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8016a56:	4a59      	ldr	r2, [pc, #356]	; (8016bbc <f_write+0x248>)
			sect += csect;
 8016a58:	18c5      	adds	r5, r0, r3
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8016a5a:	9b02      	ldr	r3, [sp, #8]
 8016a5c:	5a99      	ldrh	r1, [r3, r2]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016a5e:	9b00      	ldr	r3, [sp, #0]
 8016a60:	4299      	cmp	r1, r3
 8016a62:	d865      	bhi.n	8016b30 <f_write+0x1bc>
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8016a64:	0018      	movs	r0, r3
 8016a66:	f7f0 ffff 	bl	8007a68 <__udivsi3>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8016a6a:	4a55      	ldr	r2, [pc, #340]	; (8016bc0 <f_write+0x24c>)
 8016a6c:	9b02      	ldr	r3, [sp, #8]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8016a6e:	0006      	movs	r6, r0
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8016a70:	5c9b      	ldrb	r3, [r3, r2]
 8016a72:	9a04      	ldr	r2, [sp, #16]
 8016a74:	1812      	adds	r2, r2, r0
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d901      	bls.n	8016a7e <f_write+0x10a>
					cc = fp->fs->csize - csect;
 8016a7a:	9a04      	ldr	r2, [sp, #16]
 8016a7c:	1a9e      	subs	r6, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8016a7e:	4b4d      	ldr	r3, [pc, #308]	; (8016bb4 <f_write+0x240>)
 8016a80:	9a02      	ldr	r2, [sp, #8]
 8016a82:	9903      	ldr	r1, [sp, #12]
 8016a84:	5cd0      	ldrb	r0, [r2, r3]
 8016a86:	0033      	movs	r3, r6
 8016a88:	002a      	movs	r2, r5
 8016a8a:	f7fe faeb 	bl	8015064 <disk_write>
 8016a8e:	2800      	cmp	r0, #0
 8016a90:	d1b3      	bne.n	80169fa <f_write+0x86>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016a92:	4b49      	ldr	r3, [pc, #292]	; (8016bb8 <f_write+0x244>)
 8016a94:	58e1      	ldr	r1, [r4, r3]
 8016a96:	1b4d      	subs	r5, r1, r5
 8016a98:	42ae      	cmp	r6, r5
 8016a9a:	d90f      	bls.n	8016abc <f_write+0x148>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8016a9c:	3b18      	subs	r3, #24
 8016a9e:	58e3      	ldr	r3, [r4, r3]
 8016aa0:	4a46      	ldr	r2, [pc, #280]	; (8016bbc <f_write+0x248>)
 8016aa2:	9302      	str	r3, [sp, #8]
 8016aa4:	5a9a      	ldrh	r2, [r3, r2]
 8016aa6:	9b03      	ldr	r3, [sp, #12]
 8016aa8:	4355      	muls	r5, r2
 8016aaa:	0020      	movs	r0, r4
 8016aac:	1959      	adds	r1, r3, r5
 8016aae:	f7fe faf5 	bl	801509c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8016ab2:	2140      	movs	r1, #64	; 0x40
 8016ab4:	4a39      	ldr	r2, [pc, #228]	; (8016b9c <f_write+0x228>)
 8016ab6:	5ca3      	ldrb	r3, [r4, r2]
 8016ab8:	438b      	bics	r3, r1
 8016aba:	54a3      	strb	r3, [r4, r2]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8016abc:	2380      	movs	r3, #128	; 0x80
 8016abe:	015b      	lsls	r3, r3, #5
 8016ac0:	58e3      	ldr	r3, [r4, r3]
 8016ac2:	4a3e      	ldr	r2, [pc, #248]	; (8016bbc <f_write+0x248>)
 8016ac4:	9302      	str	r3, [sp, #8]
 8016ac6:	5a98      	ldrh	r0, [r3, r2]
 8016ac8:	4346      	muls	r6, r0
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8016aca:	9b03      	ldr	r3, [sp, #12]
 8016acc:	9a05      	ldr	r2, [sp, #20]
 8016ace:	199b      	adds	r3, r3, r6
 8016ad0:	9303      	str	r3, [sp, #12]
 8016ad2:	59e3      	ldr	r3, [r4, r7]
 8016ad4:	199b      	adds	r3, r3, r6
 8016ad6:	51e3      	str	r3, [r4, r7]
 8016ad8:	9b05      	ldr	r3, [sp, #20]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	9302      	str	r3, [sp, #8]
 8016ade:	199b      	adds	r3, r3, r6
 8016ae0:	6013      	str	r3, [r2, #0]
 8016ae2:	9b00      	ldr	r3, [sp, #0]
 8016ae4:	1b9b      	subs	r3, r3, r6
 8016ae6:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8016ae8:	9b00      	ldr	r3, [sp, #0]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8016aea:	59e6      	ldr	r6, [r4, r7]
	for ( ;  btw;							/* Repeat until all data written */
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d100      	bne.n	8016af2 <f_write+0x17e>
 8016af0:	e75f      	b.n	80169b2 <f_write+0x3e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8016af2:	2380      	movs	r3, #128	; 0x80
 8016af4:	015b      	lsls	r3, r3, #5
 8016af6:	58e5      	ldr	r5, [r4, r3]
 8016af8:	4b30      	ldr	r3, [pc, #192]	; (8016bbc <f_write+0x248>)
 8016afa:	0030      	movs	r0, r6
 8016afc:	5ae9      	ldrh	r1, [r5, r3]
 8016afe:	f7f1 f839 	bl	8007b74 <__aeabi_uidivmod>
 8016b02:	2900      	cmp	r1, #0
 8016b04:	d129      	bne.n	8016b5a <f_write+0x1e6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8016b06:	4b2e      	ldr	r3, [pc, #184]	; (8016bc0 <f_write+0x24c>)
 8016b08:	5ceb      	ldrb	r3, [r5, r3]
 8016b0a:	3b01      	subs	r3, #1
 8016b0c:	4018      	ands	r0, r3
 8016b0e:	b2c3      	uxtb	r3, r0
 8016b10:	9304      	str	r3, [sp, #16]
			if (!csect) {					/* On the cluster boundary? */
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d000      	beq.n	8016b18 <f_write+0x1a4>
 8016b16:	e779      	b.n	8016a0c <f_write+0x98>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016b18:	2e00      	cmp	r6, #0
 8016b1a:	d000      	beq.n	8016b1e <f_write+0x1aa>
 8016b1c:	e755      	b.n	80169ca <f_write+0x56>
					clst = fp->sclust;		/* Follow from the origin */
 8016b1e:	4b24      	ldr	r3, [pc, #144]	; (8016bb0 <f_write+0x23c>)
 8016b20:	58e1      	ldr	r1, [r4, r3]
					if (clst == 0)			/* When no cluster is allocated, */
 8016b22:	2900      	cmp	r1, #0
 8016b24:	d000      	beq.n	8016b28 <f_write+0x1b4>
 8016b26:	e75a      	b.n	80169de <f_write+0x6a>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016b28:	0028      	movs	r0, r5
 8016b2a:	f7ff f845 	bl	8015bb8 <create_chain>
 8016b2e:	e754      	b.n	80169da <f_write+0x66>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8016b30:	4e21      	ldr	r6, [pc, #132]	; (8016bb8 <f_write+0x244>)
 8016b32:	59a3      	ldr	r3, [r4, r6]
 8016b34:	429d      	cmp	r5, r3
 8016b36:	d00f      	beq.n	8016b58 <f_write+0x1e4>
				if (fp->fptr < fp->fsize &&
 8016b38:	4b1a      	ldr	r3, [pc, #104]	; (8016ba4 <f_write+0x230>)
 8016b3a:	59e2      	ldr	r2, [r4, r7]
 8016b3c:	58e3      	ldr	r3, [r4, r3]
 8016b3e:	4293      	cmp	r3, r2
 8016b40:	d90a      	bls.n	8016b58 <f_write+0x1e4>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8016b42:	4b1c      	ldr	r3, [pc, #112]	; (8016bb4 <f_write+0x240>)
 8016b44:	9a02      	ldr	r2, [sp, #8]
 8016b46:	0021      	movs	r1, r4
 8016b48:	5cd0      	ldrb	r0, [r2, r3]
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	002a      	movs	r2, r5
 8016b4e:	f7fe fa7b 	bl	8015048 <disk_read>
				if (fp->fptr < fp->fsize &&
 8016b52:	2800      	cmp	r0, #0
 8016b54:	d000      	beq.n	8016b58 <f_write+0x1e4>
 8016b56:	e750      	b.n	80169fa <f_write+0x86>
			fp->dsect = sect;
 8016b58:	51a5      	str	r5, [r4, r6]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8016b5a:	2380      	movs	r3, #128	; 0x80
 8016b5c:	015b      	lsls	r3, r3, #5
 8016b5e:	58e3      	ldr	r3, [r4, r3]
 8016b60:	4a16      	ldr	r2, [pc, #88]	; (8016bbc <f_write+0x248>)
 8016b62:	9302      	str	r3, [sp, #8]
 8016b64:	5a9d      	ldrh	r5, [r3, r2]
 8016b66:	59e0      	ldr	r0, [r4, r7]
 8016b68:	0029      	movs	r1, r5
 8016b6a:	f7f1 f803 	bl	8007b74 <__aeabi_uidivmod>
 8016b6e:	9e00      	ldr	r6, [sp, #0]
 8016b70:	1a6d      	subs	r5, r5, r1
		if (wcnt > btw) wcnt = btw;
 8016b72:	42ae      	cmp	r6, r5
 8016b74:	d900      	bls.n	8016b78 <f_write+0x204>
 8016b76:	002e      	movs	r6, r5
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8016b78:	0032      	movs	r2, r6
 8016b7a:	1860      	adds	r0, r4, r1
 8016b7c:	9903      	ldr	r1, [sp, #12]
 8016b7e:	f7fe fa8d 	bl	801509c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8016b82:	2140      	movs	r1, #64	; 0x40
 8016b84:	4a05      	ldr	r2, [pc, #20]	; (8016b9c <f_write+0x228>)
 8016b86:	5ca3      	ldrb	r3, [r4, r2]
 8016b88:	430b      	orrs	r3, r1
 8016b8a:	54a3      	strb	r3, [r4, r2]
 8016b8c:	e79d      	b.n	8016aca <f_write+0x156>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8016b8e:	50e2      	str	r2, [r4, r3]
 8016b90:	e715      	b.n	80169be <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8016b92:	2307      	movs	r3, #7
 8016b94:	9301      	str	r3, [sp, #4]
 8016b96:	e728      	b.n	80169ea <f_write+0x76>
 8016b98:	00001007 	.word	0x00001007
 8016b9c:	00001006 	.word	0x00001006
 8016ba0:	00001008 	.word	0x00001008
 8016ba4:	0000100c 	.word	0x0000100c
 8016ba8:	00001024 	.word	0x00001024
 8016bac:	00001014 	.word	0x00001014
 8016bb0:	00001010 	.word	0x00001010
 8016bb4:	00001001 	.word	0x00001001
 8016bb8:	00001018 	.word	0x00001018
 8016bbc:	0000100a 	.word	0x0000100a
 8016bc0:	00001002 	.word	0x00001002

08016bc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bc6:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8016bc8:	f7fe fb88 	bl	80152dc <validate>
 8016bcc:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) {
 8016bce:	d159      	bne.n	8016c84 <f_sync+0xc0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8016bd0:	4f2d      	ldr	r7, [pc, #180]	; (8016c88 <f_sync+0xc4>)
 8016bd2:	2220      	movs	r2, #32
 8016bd4:	5de3      	ldrb	r3, [r4, r7]
 8016bd6:	001e      	movs	r6, r3
 8016bd8:	4016      	ands	r6, r2
 8016bda:	4213      	tst	r3, r2
 8016bdc:	d052      	beq.n	8016c84 <f_sync+0xc0>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8016bde:	2540      	movs	r5, #64	; 0x40
 8016be0:	422b      	tst	r3, r5
 8016be2:	d010      	beq.n	8016c06 <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8016be4:	2380      	movs	r3, #128	; 0x80
 8016be6:	015b      	lsls	r3, r3, #5
 8016be8:	58e2      	ldr	r2, [r4, r3]
 8016bea:	4b28      	ldr	r3, [pc, #160]	; (8016c8c <f_sync+0xc8>)
 8016bec:	0021      	movs	r1, r4
 8016bee:	5cd0      	ldrb	r0, [r2, r3]
 8016bf0:	4a27      	ldr	r2, [pc, #156]	; (8016c90 <f_sync+0xcc>)
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	58a2      	ldr	r2, [r4, r2]
 8016bf6:	f7fe fa35 	bl	8015064 <disk_write>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8016bfa:	2601      	movs	r6, #1
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	d141      	bne.n	8016c84 <f_sync+0xc0>
				fp->flag &= ~FA__DIRTY;
 8016c00:	5de3      	ldrb	r3, [r4, r7]
 8016c02:	43ab      	bics	r3, r5
 8016c04:	55e3      	strb	r3, [r4, r7]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8016c06:	4b23      	ldr	r3, [pc, #140]	; (8016c94 <f_sync+0xd0>)
 8016c08:	58e1      	ldr	r1, [r4, r3]
 8016c0a:	3b1c      	subs	r3, #28
 8016c0c:	58e0      	ldr	r0, [r4, r3]
 8016c0e:	f7fe fbcb 	bl	80153a8 <move_window>
 8016c12:	1e06      	subs	r6, r0, #0
			if (res == FR_OK) {
 8016c14:	d136      	bne.n	8016c84 <f_sync+0xc0>
				dir = fp->dir_ptr;
 8016c16:	2381      	movs	r3, #129	; 0x81
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8016c18:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
 8016c1a:	015b      	lsls	r3, r3, #5
 8016c1c:	58e5      	ldr	r5, [r4, r3]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8016c1e:	7aeb      	ldrb	r3, [r5, #11]
 8016c20:	4313      	orrs	r3, r2
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8016c22:	4a1d      	ldr	r2, [pc, #116]	; (8016c98 <f_sync+0xd4>)
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8016c24:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8016c26:	58a3      	ldr	r3, [r4, r2]
 8016c28:	772b      	strb	r3, [r5, #28]
 8016c2a:	58a3      	ldr	r3, [r4, r2]
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	0a1b      	lsrs	r3, r3, #8
 8016c30:	776b      	strb	r3, [r5, #29]
 8016c32:	58a3      	ldr	r3, [r4, r2]
 8016c34:	0c1b      	lsrs	r3, r3, #16
 8016c36:	77ab      	strb	r3, [r5, #30]
 8016c38:	58a3      	ldr	r3, [r4, r2]
 8016c3a:	0e1b      	lsrs	r3, r3, #24
 8016c3c:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8016c3e:	4b17      	ldr	r3, [pc, #92]	; (8016c9c <f_sync+0xd8>)
 8016c40:	58e3      	ldr	r3, [r4, r3]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8016c42:	76ab      	strb	r3, [r5, #26]
 8016c44:	b29a      	uxth	r2, r3
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8016c46:	0c1b      	lsrs	r3, r3, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8016c48:	0a12      	lsrs	r2, r2, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8016c4a:	752b      	strb	r3, [r5, #20]
 8016c4c:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8016c4e:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8016c50:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8016c52:	f7fb ff7b 	bl	8012b4c <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
				ST_WORD(dir + DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
 8016c56:	2220      	movs	r2, #32
				ST_DWORD(dir + DIR_WrtTime, tm);
 8016c58:	b283      	uxth	r3, r0
 8016c5a:	0a1b      	lsrs	r3, r3, #8
 8016c5c:	75a8      	strb	r0, [r5, #22]
 8016c5e:	75eb      	strb	r3, [r5, #23]
 8016c60:	0c03      	lsrs	r3, r0, #16
 8016c62:	0e00      	lsrs	r0, r0, #24
				ST_WORD(dir + DIR_LstAccDate, 0);
 8016c64:	74ae      	strb	r6, [r5, #18]
 8016c66:	74ee      	strb	r6, [r5, #19]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8016c68:	762b      	strb	r3, [r5, #24]
 8016c6a:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 8016c6c:	5de3      	ldrb	r3, [r4, r7]
 8016c6e:	4393      	bics	r3, r2
 8016c70:	55e3      	strb	r3, [r4, r7]
				fp->fs->wflag = 1;
 8016c72:	2380      	movs	r3, #128	; 0x80
 8016c74:	015b      	lsls	r3, r3, #5
 8016c76:	58e0      	ldr	r0, [r4, r3]
 8016c78:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <f_sync+0xdc>)
 8016c7a:	3a1f      	subs	r2, #31
 8016c7c:	54c2      	strb	r2, [r0, r3]
				res = sync_fs(fp->fs);
 8016c7e:	f7fe fd79 	bl	8015774 <sync_fs>
 8016c82:	0006      	movs	r6, r0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8016c84:	0030      	movs	r0, r6
 8016c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c88:	00001006 	.word	0x00001006
 8016c8c:	00001001 	.word	0x00001001
 8016c90:	00001018 	.word	0x00001018
 8016c94:	0000101c 	.word	0x0000101c
 8016c98:	0000100c 	.word	0x0000100c
 8016c9c:	00001010 	.word	0x00001010
 8016ca0:	00001004 	.word	0x00001004

08016ca4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8016ca4:	b510      	push	{r4, lr}
 8016ca6:	0004      	movs	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016ca8:	f7ff ff8c 	bl	8016bc4 <f_sync>
	if (res == FR_OK)
 8016cac:	2800      	cmp	r0, #0
 8016cae:	d10d      	bne.n	8016ccc <f_close+0x28>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8016cb0:	0020      	movs	r0, r4
 8016cb2:	f7fe fb13 	bl	80152dc <validate>
		if (res == FR_OK) {
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	d108      	bne.n	8016ccc <f_close+0x28>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8016cba:	4b05      	ldr	r3, [pc, #20]	; (8016cd0 <f_close+0x2c>)
 8016cbc:	58e0      	ldr	r0, [r4, r3]
 8016cbe:	f7fe fa99 	bl	80151f4 <dec_lock>
			if (res == FR_OK)
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	d102      	bne.n	8016ccc <f_close+0x28>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8016cc6:	2380      	movs	r3, #128	; 0x80
 8016cc8:	015b      	lsls	r3, r3, #5
 8016cca:	50e0      	str	r0, [r4, r3]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8016ccc:	bd10      	pop	{r4, pc}
 8016cce:	46c0      	nop			; (mov r8, r8)
 8016cd0:	00001028 	.word	0x00001028

08016cd4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8016cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cd6:	b085      	sub	sp, #20
 8016cd8:	0007      	movs	r7, r0
 8016cda:	000d      	movs	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8016cdc:	f7fe fafe 	bl	80152dc <validate>
 8016ce0:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8016ce2:	2800      	cmp	r0, #0
 8016ce4:	d129      	bne.n	8016d3a <f_lseek+0x66>
	if (fp->err)						/* Check error */
 8016ce6:	4bb8      	ldr	r3, [pc, #736]	; (8016fc8 <f_lseek+0x2f4>)
 8016ce8:	5cfb      	ldrb	r3, [r7, r3]
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d124      	bne.n	8016d3a <f_lseek+0x66>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8016cf0:	4bb6      	ldr	r3, [pc, #728]	; (8016fcc <f_lseek+0x2f8>)
 8016cf2:	58fc      	ldr	r4, [r7, r3]
 8016cf4:	2c00      	cmp	r4, #0
 8016cf6:	d100      	bne.n	8016cfa <f_lseek+0x26>
 8016cf8:	e096      	b.n	8016e28 <f_lseek+0x154>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8016cfa:	1c6b      	adds	r3, r5, #1
 8016cfc:	d143      	bne.n	8016d86 <f_lseek+0xb2>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016cfe:	cc08      	ldmia	r4!, {r3}
 8016d00:	3503      	adds	r5, #3
 8016d02:	9303      	str	r3, [sp, #12]
			cl = fp->sclust;			/* Top of the chain */
 8016d04:	4bb2      	ldr	r3, [pc, #712]	; (8016fd0 <f_lseek+0x2fc>)
 8016d06:	58fb      	ldr	r3, [r7, r3]
 8016d08:	9301      	str	r3, [sp, #4]
			if (cl) {
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d102      	bne.n	8016d14 <f_lseek+0x40>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016d0e:	2502      	movs	r5, #2
 8016d10:	e02f      	b.n	8016d72 <f_lseek+0x9e>
 8016d12:	9001      	str	r0, [sp, #4]
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8016d14:	2300      	movs	r3, #0
 8016d16:	9801      	ldr	r0, [sp, #4]
 8016d18:	9302      	str	r3, [sp, #8]
					do {
						pcl = cl; ncl++;
 8016d1a:	9b02      	ldr	r3, [sp, #8]
 8016d1c:	0006      	movs	r6, r0
 8016d1e:	3301      	adds	r3, #1
 8016d20:	9302      	str	r3, [sp, #8]
						cl = get_fat(fp->fs, cl);
 8016d22:	2380      	movs	r3, #128	; 0x80
 8016d24:	015b      	lsls	r3, r3, #5
 8016d26:	0001      	movs	r1, r0
 8016d28:	58f8      	ldr	r0, [r7, r3]
 8016d2a:	f7fe fd9b 	bl	8015864 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8016d2e:	2801      	cmp	r0, #1
 8016d30:	d806      	bhi.n	8016d40 <f_lseek+0x6c>
 8016d32:	2002      	movs	r0, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016d34:	4ba4      	ldr	r3, [pc, #656]	; (8016fc8 <f_lseek+0x2f4>)
 8016d36:	9000      	str	r0, [sp, #0]
 8016d38:	54f8      	strb	r0, [r7, r3]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8016d3a:	9800      	ldr	r0, [sp, #0]
 8016d3c:	b005      	add	sp, #20
 8016d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016d40:	1c43      	adds	r3, r0, #1
 8016d42:	d101      	bne.n	8016d48 <f_lseek+0x74>
 8016d44:	2001      	movs	r0, #1
 8016d46:	e7f5      	b.n	8016d34 <f_lseek+0x60>
					} while (cl == pcl + 1);
 8016d48:	3601      	adds	r6, #1
 8016d4a:	4286      	cmp	r6, r0
 8016d4c:	d0e5      	beq.n	8016d1a <f_lseek+0x46>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8016d4e:	9b03      	ldr	r3, [sp, #12]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8016d50:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8016d52:	42ab      	cmp	r3, r5
 8016d54:	d304      	bcc.n	8016d60 <f_lseek+0x8c>
						*tbl++ = ncl; *tbl++ = tcl;
 8016d56:	9b02      	ldr	r3, [sp, #8]
 8016d58:	6023      	str	r3, [r4, #0]
 8016d5a:	9b01      	ldr	r3, [sp, #4]
 8016d5c:	6063      	str	r3, [r4, #4]
 8016d5e:	3408      	adds	r4, #8
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8016d60:	2380      	movs	r3, #128	; 0x80
 8016d62:	015b      	lsls	r3, r3, #5
 8016d64:	58fb      	ldr	r3, [r7, r3]
 8016d66:	9301      	str	r3, [sp, #4]
 8016d68:	9a01      	ldr	r2, [sp, #4]
 8016d6a:	4b9a      	ldr	r3, [pc, #616]	; (8016fd4 <f_lseek+0x300>)
 8016d6c:	58d3      	ldr	r3, [r2, r3]
 8016d6e:	4283      	cmp	r3, r0
 8016d70:	d8cf      	bhi.n	8016d12 <f_lseek+0x3e>
			*fp->cltbl = ulen;	/* Number of items used */
 8016d72:	4b96      	ldr	r3, [pc, #600]	; (8016fcc <f_lseek+0x2f8>)
 8016d74:	58fb      	ldr	r3, [r7, r3]
 8016d76:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 8016d78:	9b03      	ldr	r3, [sp, #12]
 8016d7a:	429d      	cmp	r5, r3
 8016d7c:	d900      	bls.n	8016d80 <f_lseek+0xac>
 8016d7e:	e120      	b.n	8016fc2 <f_lseek+0x2ee>
				*tbl = 0;		/* Terminate table */
 8016d80:	2300      	movs	r3, #0
 8016d82:	6023      	str	r3, [r4, #0]
 8016d84:	e7d9      	b.n	8016d3a <f_lseek+0x66>
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8016d86:	4b94      	ldr	r3, [pc, #592]	; (8016fd8 <f_lseek+0x304>)
 8016d88:	58fc      	ldr	r4, [r7, r3]
 8016d8a:	42ac      	cmp	r4, r5
 8016d8c:	d900      	bls.n	8016d90 <f_lseek+0xbc>
 8016d8e:	002c      	movs	r4, r5
			fp->fptr = ofs;				/* Set file pointer */
 8016d90:	4b92      	ldr	r3, [pc, #584]	; (8016fdc <f_lseek+0x308>)
 8016d92:	50fc      	str	r4, [r7, r3]
			if (ofs) {
 8016d94:	2c00      	cmp	r4, #0
 8016d96:	d0d0      	beq.n	8016d3a <f_lseek+0x66>
				fp->clust = clmt_clust(fp, ofs - 1);
 8016d98:	1e66      	subs	r6, r4, #1
 8016d9a:	0031      	movs	r1, r6
 8016d9c:	0038      	movs	r0, r7
 8016d9e:	f7fe fa57 	bl	8015250 <clmt_clust>
 8016da2:	4b8c      	ldr	r3, [pc, #560]	; (8016fd4 <f_lseek+0x300>)
 8016da4:	0001      	movs	r1, r0
 8016da6:	50f8      	str	r0, [r7, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8016da8:	3b14      	subs	r3, #20
 8016daa:	58fd      	ldr	r5, [r7, r3]
 8016dac:	0028      	movs	r0, r5
 8016dae:	f7fe fd43 	bl	8015838 <clust2sect>
 8016db2:	9002      	str	r0, [sp, #8]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8016db4:	2800      	cmp	r0, #0
 8016db6:	d0bc      	beq.n	8016d32 <f_lseek+0x5e>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8016db8:	4b89      	ldr	r3, [pc, #548]	; (8016fe0 <f_lseek+0x30c>)
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8016dba:	0020      	movs	r0, r4
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8016dbc:	5aeb      	ldrh	r3, [r5, r3]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8016dbe:	0019      	movs	r1, r3
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8016dc0:	9301      	str	r3, [sp, #4]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8016dc2:	f7f0 fed7 	bl	8007b74 <__aeabi_uidivmod>
 8016dc6:	2900      	cmp	r1, #0
 8016dc8:	d0b7      	beq.n	8016d3a <f_lseek+0x66>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8016dca:	4b86      	ldr	r3, [pc, #536]	; (8016fe4 <f_lseek+0x310>)
 8016dcc:	0030      	movs	r0, r6
 8016dce:	9901      	ldr	r1, [sp, #4]
 8016dd0:	5cec      	ldrb	r4, [r5, r3]
 8016dd2:	f7f0 fe49 	bl	8007a68 <__udivsi3>
 8016dd6:	3c01      	subs	r4, #1
 8016dd8:	9b02      	ldr	r3, [sp, #8]
 8016dda:	4004      	ands	r4, r0
 8016ddc:	18e4      	adds	r4, r4, r3
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8016dde:	4b82      	ldr	r3, [pc, #520]	; (8016fe8 <f_lseek+0x314>)
 8016de0:	58fa      	ldr	r2, [r7, r3]
 8016de2:	42a2      	cmp	r2, r4
 8016de4:	d0a9      	beq.n	8016d3a <f_lseek+0x66>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8016de6:	2140      	movs	r1, #64	; 0x40
 8016de8:	4e80      	ldr	r6, [pc, #512]	; (8016fec <f_lseek+0x318>)
 8016dea:	5dbb      	ldrb	r3, [r7, r6]
 8016dec:	420b      	tst	r3, r1
 8016dee:	d00b      	beq.n	8016e08 <f_lseek+0x134>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8016df0:	4b7f      	ldr	r3, [pc, #508]	; (8016ff0 <f_lseek+0x31c>)
 8016df2:	0039      	movs	r1, r7
 8016df4:	5ce8      	ldrb	r0, [r5, r3]
 8016df6:	2301      	movs	r3, #1
 8016df8:	f7fe f934 	bl	8015064 <disk_write>
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	d1a1      	bne.n	8016d44 <f_lseek+0x70>
						fp->flag &= ~FA__DIRTY;
 8016e00:	2140      	movs	r1, #64	; 0x40
 8016e02:	5dbb      	ldrb	r3, [r7, r6]
 8016e04:	438b      	bics	r3, r1
 8016e06:	55bb      	strb	r3, [r7, r6]
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8016e08:	2380      	movs	r3, #128	; 0x80
 8016e0a:	015b      	lsls	r3, r3, #5
 8016e0c:	58fb      	ldr	r3, [r7, r3]
 8016e0e:	4a78      	ldr	r2, [pc, #480]	; (8016ff0 <f_lseek+0x31c>)
 8016e10:	0039      	movs	r1, r7
 8016e12:	5c98      	ldrb	r0, [r3, r2]
 8016e14:	2301      	movs	r3, #1
 8016e16:	0022      	movs	r2, r4
 8016e18:	f7fe f916 	bl	8015048 <disk_read>
 8016e1c:	9000      	str	r0, [sp, #0]
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	d190      	bne.n	8016d44 <f_lseek+0x70>
					fp->dsect = dsc;
 8016e22:	4b71      	ldr	r3, [pc, #452]	; (8016fe8 <f_lseek+0x314>)
 8016e24:	50fc      	str	r4, [r7, r3]
 8016e26:	e788      	b.n	8016d3a <f_lseek+0x66>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8016e28:	4b6b      	ldr	r3, [pc, #428]	; (8016fd8 <f_lseek+0x304>)
 8016e2a:	58fb      	ldr	r3, [r7, r3]
 8016e2c:	42ab      	cmp	r3, r5
 8016e2e:	d204      	bcs.n	8016e3a <f_lseek+0x166>
			 && !(fp->flag & FA_WRITE)
 8016e30:	4a6e      	ldr	r2, [pc, #440]	; (8016fec <f_lseek+0x318>)
 8016e32:	5cba      	ldrb	r2, [r7, r2]
 8016e34:	0792      	lsls	r2, r2, #30
 8016e36:	d400      	bmi.n	8016e3a <f_lseek+0x166>
 8016e38:	001d      	movs	r5, r3
		fp->fptr = nsect = 0;
 8016e3a:	2300      	movs	r3, #0
		ifptr = fp->fptr;
 8016e3c:	4a67      	ldr	r2, [pc, #412]	; (8016fdc <f_lseek+0x308>)
 8016e3e:	58bc      	ldr	r4, [r7, r2]
		fp->fptr = nsect = 0;
 8016e40:	50bb      	str	r3, [r7, r2]
		if (ofs) {
 8016e42:	429d      	cmp	r5, r3
 8016e44:	d141      	bne.n	8016eca <f_lseek+0x1f6>
		fp->fptr = nsect = 0;
 8016e46:	2400      	movs	r4, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8016e48:	2380      	movs	r3, #128	; 0x80
 8016e4a:	015b      	lsls	r3, r3, #5
 8016e4c:	58fe      	ldr	r6, [r7, r3]
 8016e4e:	4b64      	ldr	r3, [pc, #400]	; (8016fe0 <f_lseek+0x30c>)
 8016e50:	5af1      	ldrh	r1, [r6, r3]
 8016e52:	4b62      	ldr	r3, [pc, #392]	; (8016fdc <f_lseek+0x308>)
 8016e54:	58fb      	ldr	r3, [r7, r3]
 8016e56:	0018      	movs	r0, r3
 8016e58:	9301      	str	r3, [sp, #4]
 8016e5a:	f7f0 fe8b 	bl	8007b74 <__aeabi_uidivmod>
 8016e5e:	2900      	cmp	r1, #0
 8016e60:	d024      	beq.n	8016eac <f_lseek+0x1d8>
 8016e62:	4b61      	ldr	r3, [pc, #388]	; (8016fe8 <f_lseek+0x314>)
 8016e64:	58fa      	ldr	r2, [r7, r3]
 8016e66:	42a2      	cmp	r2, r4
 8016e68:	d020      	beq.n	8016eac <f_lseek+0x1d8>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8016e6a:	2140      	movs	r1, #64	; 0x40
 8016e6c:	4d5f      	ldr	r5, [pc, #380]	; (8016fec <f_lseek+0x318>)
 8016e6e:	5d7b      	ldrb	r3, [r7, r5]
 8016e70:	420b      	tst	r3, r1
 8016e72:	d00c      	beq.n	8016e8e <f_lseek+0x1ba>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8016e74:	4b5e      	ldr	r3, [pc, #376]	; (8016ff0 <f_lseek+0x31c>)
 8016e76:	0039      	movs	r1, r7
 8016e78:	5cf0      	ldrb	r0, [r6, r3]
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	f7fe f8f2 	bl	8015064 <disk_write>
 8016e80:	2800      	cmp	r0, #0
 8016e82:	d000      	beq.n	8016e86 <f_lseek+0x1b2>
 8016e84:	e75e      	b.n	8016d44 <f_lseek+0x70>
				fp->flag &= ~FA__DIRTY;
 8016e86:	2140      	movs	r1, #64	; 0x40
 8016e88:	5d7b      	ldrb	r3, [r7, r5]
 8016e8a:	438b      	bics	r3, r1
 8016e8c:	557b      	strb	r3, [r7, r5]
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8016e8e:	2380      	movs	r3, #128	; 0x80
 8016e90:	015b      	lsls	r3, r3, #5
 8016e92:	58fb      	ldr	r3, [r7, r3]
 8016e94:	4a56      	ldr	r2, [pc, #344]	; (8016ff0 <f_lseek+0x31c>)
 8016e96:	0039      	movs	r1, r7
 8016e98:	5c98      	ldrb	r0, [r3, r2]
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	0022      	movs	r2, r4
 8016e9e:	f7fe f8d3 	bl	8015048 <disk_read>
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	d000      	beq.n	8016ea8 <f_lseek+0x1d4>
 8016ea6:	e74d      	b.n	8016d44 <f_lseek+0x70>
			fp->dsect = nsect;
 8016ea8:	4b4f      	ldr	r3, [pc, #316]	; (8016fe8 <f_lseek+0x314>)
 8016eaa:	50fc      	str	r4, [r7, r3]
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8016eac:	4b4b      	ldr	r3, [pc, #300]	; (8016fdc <f_lseek+0x308>)
 8016eae:	4a4a      	ldr	r2, [pc, #296]	; (8016fd8 <f_lseek+0x304>)
 8016eb0:	58fb      	ldr	r3, [r7, r3]
 8016eb2:	58b9      	ldr	r1, [r7, r2]
 8016eb4:	9101      	str	r1, [sp, #4]
 8016eb6:	428b      	cmp	r3, r1
 8016eb8:	d800      	bhi.n	8016ebc <f_lseek+0x1e8>
 8016eba:	e73e      	b.n	8016d3a <f_lseek+0x66>
			fp->fsize = fp->fptr;
 8016ebc:	50bb      	str	r3, [r7, r2]
			fp->flag |= FA__WRITTEN;
 8016ebe:	2320      	movs	r3, #32
 8016ec0:	4a4a      	ldr	r2, [pc, #296]	; (8016fec <f_lseek+0x318>)
 8016ec2:	5cb9      	ldrb	r1, [r7, r2]
 8016ec4:	430b      	orrs	r3, r1
 8016ec6:	54bb      	strb	r3, [r7, r2]
 8016ec8:	e737      	b.n	8016d3a <f_lseek+0x66>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8016eca:	2380      	movs	r3, #128	; 0x80
 8016ecc:	015b      	lsls	r3, r3, #5
 8016ece:	58fb      	ldr	r3, [r7, r3]
 8016ed0:	9301      	str	r3, [sp, #4]
 8016ed2:	9a01      	ldr	r2, [sp, #4]
 8016ed4:	4b43      	ldr	r3, [pc, #268]	; (8016fe4 <f_lseek+0x310>)
 8016ed6:	5cd6      	ldrb	r6, [r2, r3]
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8016ed8:	0013      	movs	r3, r2
 8016eda:	4a41      	ldr	r2, [pc, #260]	; (8016fe0 <f_lseek+0x30c>)
 8016edc:	5a9a      	ldrh	r2, [r3, r2]
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8016ede:	4356      	muls	r6, r2
			if (ifptr > 0 &&
 8016ee0:	2c00      	cmp	r4, #0
 8016ee2:	d033      	beq.n	8016f4c <f_lseek+0x278>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8016ee4:	0031      	movs	r1, r6
 8016ee6:	1e68      	subs	r0, r5, #1
 8016ee8:	f7f0 fdbe 	bl	8007a68 <__udivsi3>
 8016eec:	3c01      	subs	r4, #1
 8016eee:	9002      	str	r0, [sp, #8]
 8016ef0:	0031      	movs	r1, r6
 8016ef2:	0020      	movs	r0, r4
 8016ef4:	f7f0 fdb8 	bl	8007a68 <__udivsi3>
			if (ifptr > 0 &&
 8016ef8:	9b02      	ldr	r3, [sp, #8]
 8016efa:	4283      	cmp	r3, r0
 8016efc:	d326      	bcc.n	8016f4c <f_lseek+0x278>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8016efe:	4273      	negs	r3, r6
 8016f00:	401c      	ands	r4, r3
 8016f02:	4b36      	ldr	r3, [pc, #216]	; (8016fdc <f_lseek+0x308>)
				ofs -= fp->fptr;
 8016f04:	1b2d      	subs	r5, r5, r4
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8016f06:	50fc      	str	r4, [r7, r3]
				clst = fp->clust;
 8016f08:	4b32      	ldr	r3, [pc, #200]	; (8016fd4 <f_lseek+0x300>)
 8016f0a:	58fc      	ldr	r4, [r7, r3]
			if (clst != 0) {
 8016f0c:	2c00      	cmp	r4, #0
 8016f0e:	d09a      	beq.n	8016e46 <f_lseek+0x172>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8016f10:	2380      	movs	r3, #128	; 0x80
 8016f12:	015b      	lsls	r3, r3, #5
 8016f14:	58f8      	ldr	r0, [r7, r3]
				while (ofs > bcs) {						/* Cluster following loop */
 8016f16:	42b5      	cmp	r5, r6
 8016f18:	d82c      	bhi.n	8016f74 <f_lseek+0x2a0>
				fp->fptr += ofs;
 8016f1a:	4a30      	ldr	r2, [pc, #192]	; (8016fdc <f_lseek+0x308>)
 8016f1c:	0028      	movs	r0, r5
 8016f1e:	58bb      	ldr	r3, [r7, r2]
 8016f20:	9301      	str	r3, [sp, #4]
 8016f22:	195b      	adds	r3, r3, r5
 8016f24:	50bb      	str	r3, [r7, r2]
				if (ofs % SS(fp->fs)) {
 8016f26:	2380      	movs	r3, #128	; 0x80
 8016f28:	015b      	lsls	r3, r3, #5
 8016f2a:	58fe      	ldr	r6, [r7, r3]
 8016f2c:	4b2c      	ldr	r3, [pc, #176]	; (8016fe0 <f_lseek+0x30c>)
 8016f2e:	5af1      	ldrh	r1, [r6, r3]
 8016f30:	f7f0 fe20 	bl	8007b74 <__aeabi_uidivmod>
 8016f34:	0005      	movs	r5, r0
 8016f36:	2900      	cmp	r1, #0
 8016f38:	d085      	beq.n	8016e46 <f_lseek+0x172>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8016f3a:	0021      	movs	r1, r4
 8016f3c:	0030      	movs	r0, r6
 8016f3e:	f7fe fc7b 	bl	8015838 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8016f42:	2800      	cmp	r0, #0
 8016f44:	d100      	bne.n	8016f48 <f_lseek+0x274>
 8016f46:	e6f4      	b.n	8016d32 <f_lseek+0x5e>
					nsect += ofs / SS(fp->fs);
 8016f48:	182c      	adds	r4, r5, r0
 8016f4a:	e77d      	b.n	8016e48 <f_lseek+0x174>
				clst = fp->sclust;						/* start from the first cluster */
 8016f4c:	4b20      	ldr	r3, [pc, #128]	; (8016fd0 <f_lseek+0x2fc>)
 8016f4e:	58fc      	ldr	r4, [r7, r3]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8016f50:	2c00      	cmp	r4, #0
 8016f52:	d10c      	bne.n	8016f6e <f_lseek+0x29a>
					clst = create_chain(fp->fs, 0);
 8016f54:	0021      	movs	r1, r4
 8016f56:	9801      	ldr	r0, [sp, #4]
 8016f58:	f7fe fe2e 	bl	8015bb8 <create_chain>
 8016f5c:	0004      	movs	r4, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8016f5e:	2801      	cmp	r0, #1
 8016f60:	d100      	bne.n	8016f64 <f_lseek+0x290>
 8016f62:	e6e6      	b.n	8016d32 <f_lseek+0x5e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016f64:	1c43      	adds	r3, r0, #1
 8016f66:	d100      	bne.n	8016f6a <f_lseek+0x296>
 8016f68:	e6ec      	b.n	8016d44 <f_lseek+0x70>
					fp->sclust = clst;
 8016f6a:	4b19      	ldr	r3, [pc, #100]	; (8016fd0 <f_lseek+0x2fc>)
 8016f6c:	50f8      	str	r0, [r7, r3]
				fp->clust = clst;
 8016f6e:	4b19      	ldr	r3, [pc, #100]	; (8016fd4 <f_lseek+0x300>)
 8016f70:	50fc      	str	r4, [r7, r3]
 8016f72:	e7cb      	b.n	8016f0c <f_lseek+0x238>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8016f74:	2202      	movs	r2, #2
 8016f76:	4b1d      	ldr	r3, [pc, #116]	; (8016fec <f_lseek+0x318>)
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8016f78:	0021      	movs	r1, r4
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8016f7a:	5cfb      	ldrb	r3, [r7, r3]
 8016f7c:	4213      	tst	r3, r2
 8016f7e:	d005      	beq.n	8016f8c <f_lseek+0x2b8>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8016f80:	f7fe fe1a 	bl	8015bb8 <create_chain>
 8016f84:	1e04      	subs	r4, r0, #0
						if (clst == 0) {				/* When disk gets full, clip file size */
 8016f86:	d104      	bne.n	8016f92 <f_lseek+0x2be>
 8016f88:	0035      	movs	r5, r6
 8016f8a:	e7c6      	b.n	8016f1a <f_lseek+0x246>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8016f8c:	f7fe fc6a 	bl	8015864 <get_fat>
 8016f90:	0004      	movs	r4, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016f92:	1c63      	adds	r3, r4, #1
 8016f94:	d100      	bne.n	8016f98 <f_lseek+0x2c4>
 8016f96:	e6d5      	b.n	8016d44 <f_lseek+0x70>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8016f98:	2c01      	cmp	r4, #1
 8016f9a:	d800      	bhi.n	8016f9e <f_lseek+0x2ca>
 8016f9c:	e6c9      	b.n	8016d32 <f_lseek+0x5e>
 8016f9e:	2380      	movs	r3, #128	; 0x80
 8016fa0:	015b      	lsls	r3, r3, #5
 8016fa2:	58fb      	ldr	r3, [r7, r3]
 8016fa4:	9301      	str	r3, [sp, #4]
 8016fa6:	9a01      	ldr	r2, [sp, #4]
 8016fa8:	4b0a      	ldr	r3, [pc, #40]	; (8016fd4 <f_lseek+0x300>)
 8016faa:	58d2      	ldr	r2, [r2, r3]
 8016fac:	42a2      	cmp	r2, r4
 8016fae:	d800      	bhi.n	8016fb2 <f_lseek+0x2de>
 8016fb0:	e6bf      	b.n	8016d32 <f_lseek+0x5e>
					fp->fptr += bcs;
 8016fb2:	4a0a      	ldr	r2, [pc, #40]	; (8016fdc <f_lseek+0x308>)
					fp->clust = clst;
 8016fb4:	50fc      	str	r4, [r7, r3]
					fp->fptr += bcs;
 8016fb6:	58bb      	ldr	r3, [r7, r2]
					ofs -= bcs;
 8016fb8:	1bad      	subs	r5, r5, r6
					fp->fptr += bcs;
 8016fba:	9301      	str	r3, [sp, #4]
 8016fbc:	199b      	adds	r3, r3, r6
 8016fbe:	50bb      	str	r3, [r7, r2]
					ofs -= bcs;
 8016fc0:	e7a6      	b.n	8016f10 <f_lseek+0x23c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8016fc2:	2311      	movs	r3, #17
 8016fc4:	9300      	str	r3, [sp, #0]
 8016fc6:	e6b8      	b.n	8016d3a <f_lseek+0x66>
 8016fc8:	00001007 	.word	0x00001007
 8016fcc:	00001024 	.word	0x00001024
 8016fd0:	00001010 	.word	0x00001010
 8016fd4:	00001014 	.word	0x00001014
 8016fd8:	0000100c 	.word	0x0000100c
 8016fdc:	00001008 	.word	0x00001008
 8016fe0:	0000100a 	.word	0x0000100a
 8016fe4:	00001002 	.word	0x00001002
 8016fe8:	00001018 	.word	0x00001018
 8016fec:	00001006 	.word	0x00001006
 8016ff0:	00001001 	.word	0x00001001

08016ff4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8016ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ff6:	0005      	movs	r5, r0
 8016ff8:	0017      	movs	r7, r2
 8016ffa:	0006      	movs	r6, r0
	int n = 0;
 8016ffc:	2400      	movs	r4, #0
{
 8016ffe:	b085      	sub	sp, #20
 8017000:	9101      	str	r1, [sp, #4]
 8017002:	9600      	str	r6, [sp, #0]
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8017004:	9b01      	ldr	r3, [sp, #4]
 8017006:	3b01      	subs	r3, #1
 8017008:	429c      	cmp	r4, r3
 801700a:	da12      	bge.n	8017032 <f_gets+0x3e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801700c:	ab03      	add	r3, sp, #12
 801700e:	2201      	movs	r2, #1
 8017010:	0038      	movs	r0, r7
 8017012:	a902      	add	r1, sp, #8
 8017014:	f7ff fba4 	bl	8016760 <f_read>
		if (rc != 1) break;
 8017018:	9b03      	ldr	r3, [sp, #12]
 801701a:	2b01      	cmp	r3, #1
 801701c:	d109      	bne.n	8017032 <f_gets+0x3e>
		c = s[0];
 801701e:	ab02      	add	r3, sp, #8
 8017020:	781b      	ldrb	r3, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8017022:	2b0d      	cmp	r3, #13
 8017024:	d0ee      	beq.n	8017004 <f_gets+0x10>
		*p++ = c;
 8017026:	9a00      	ldr	r2, [sp, #0]
 8017028:	3601      	adds	r6, #1
 801702a:	7013      	strb	r3, [r2, #0]
		n++;
 801702c:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
 801702e:	2b0a      	cmp	r3, #10
 8017030:	d1e7      	bne.n	8017002 <f_gets+0xe>
	}
	*p = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	7033      	strb	r3, [r6, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8017036:	1e63      	subs	r3, r4, #1
 8017038:	419c      	sbcs	r4, r3
 801703a:	4264      	negs	r4, r4
 801703c:	4025      	ands	r5, r4
}
 801703e:	0028      	movs	r0, r5
 8017040:	b005      	add	sp, #20
 8017042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017044 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017044:	b530      	push	{r4, r5, lr}
 8017046:	0005      	movs	r5, r0
  uint8_t ret = 1;
 8017048:	2001      	movs	r0, #1
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 801704a:	4b0d      	ldr	r3, [pc, #52]	; (8017080 <FATFS_LinkDriverEx+0x3c>)
 801704c:	7a5c      	ldrb	r4, [r3, #9]
 801704e:	4284      	cmp	r4, r0
 8017050:	d815      	bhi.n	801707e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017052:	2000      	movs	r0, #0
 8017054:	7a5c      	ldrb	r4, [r3, #9]
 8017056:	b2e4      	uxtb	r4, r4
 8017058:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;  
 801705a:	7a5c      	ldrb	r4, [r3, #9]
 801705c:	00a4      	lsls	r4, r4, #2
 801705e:	191c      	adds	r4, r3, r4
 8017060:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;  
 8017062:	7a5c      	ldrb	r4, [r3, #9]
 8017064:	191c      	adds	r4, r3, r4
 8017066:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8017068:	7a5a      	ldrb	r2, [r3, #9]
 801706a:	1c54      	adds	r4, r2, #1
 801706c:	b2e4      	uxtb	r4, r4
 801706e:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8017070:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8017072:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8017074:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8017076:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8017078:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 801707a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 801707c:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 801707e:	bd30      	pop	{r4, r5, pc}
 8017080:	200008c0 	.word	0x200008c0

08017084 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8017084:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8017086:	2200      	movs	r2, #0
 8017088:	f7ff ffdc 	bl	8017044 <FATFS_LinkDriverEx>
}
 801708c:	bd10      	pop	{r4, pc}
	...

08017090 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path  
  * @param  lun : not used   
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
 8017090:	b510      	push	{r4, lr}
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 8017092:	4a0b      	ldr	r2, [pc, #44]	; (80170c0 <FATFS_UnLinkDriverEx+0x30>)
{ 
 8017094:	0003      	movs	r3, r0
  if(disk.nbr >= 1)
 8017096:	7a51      	ldrb	r1, [r2, #9]
  uint8_t ret = 1;
 8017098:	2001      	movs	r0, #1
  if(disk.nbr >= 1)
 801709a:	2900      	cmp	r1, #0
 801709c:	d00f      	beq.n	80170be <FATFS_UnLinkDriverEx+0x2e>
  {    
    DiskNum = path[0] - '0';
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 80170a2:	b2db      	uxtb	r3, r3
 80170a4:	0099      	lsls	r1, r3, #2
 80170a6:	1851      	adds	r1, r2, r1
 80170a8:	684c      	ldr	r4, [r1, #4]
 80170aa:	2c00      	cmp	r4, #0
 80170ac:	d007      	beq.n	80170be <FATFS_UnLinkDriverEx+0x2e>
    {
      disk.drv[DiskNum] = 0;
 80170ae:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 80170b0:	18d3      	adds	r3, r2, r3
      disk.drv[DiskNum] = 0;
 80170b2:	6048      	str	r0, [r1, #4]
      disk.lun[DiskNum] = 0;
 80170b4:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 80170b6:	7a53      	ldrb	r3, [r2, #9]
 80170b8:	3b01      	subs	r3, #1
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	7253      	strb	r3, [r2, #9]
      ret = 0;
    }
  }
  
  return ret;
}
 80170be:	bd10      	pop	{r4, pc}
 80170c0:	200008c0 	.word	0x200008c0

080170c4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
 80170c4:	b510      	push	{r4, lr}
  return FATFS_UnLinkDriverEx(path, 0);
 80170c6:	2100      	movs	r1, #0
 80170c8:	f7ff ffe2 	bl	8017090 <FATFS_UnLinkDriverEx>
}
 80170cc:	bd10      	pop	{r4, pc}
	...

080170d0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80170d0:	287f      	cmp	r0, #127	; 0x7f
 80170d2:	d907      	bls.n	80170e4 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80170d4:	2900      	cmp	r1, #0
 80170d6:	d006      	beq.n	80170e6 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80170d8:	28ff      	cmp	r0, #255	; 0xff
 80170da:	d810      	bhi.n	80170fe <ff_convert+0x2e>
 80170dc:	4b09      	ldr	r3, [pc, #36]	; (8017104 <ff_convert+0x34>)
 80170de:	3880      	subs	r0, #128	; 0x80
 80170e0:	0040      	lsls	r0, r0, #1
 80170e2:	5ac0      	ldrh	r0, [r0, r3]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80170e4:	4770      	bx	lr
 80170e6:	4b07      	ldr	r3, [pc, #28]	; (8017104 <ff_convert+0x34>)
				if (chr == Tbl[c]) break;
 80170e8:	881a      	ldrh	r2, [r3, #0]
 80170ea:	4282      	cmp	r2, r0
 80170ec:	d004      	beq.n	80170f8 <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 80170ee:	3101      	adds	r1, #1
 80170f0:	b289      	uxth	r1, r1
 80170f2:	3302      	adds	r3, #2
 80170f4:	2980      	cmp	r1, #128	; 0x80
 80170f6:	d1f7      	bne.n	80170e8 <ff_convert+0x18>
			c = (c + 0x80) & 0xFF;
 80170f8:	3180      	adds	r1, #128	; 0x80
 80170fa:	b2c8      	uxtb	r0, r1
 80170fc:	e7f2      	b.n	80170e4 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80170fe:	2000      	movs	r0, #0
 8017100:	e7f0      	b.n	80170e4 <ff_convert+0x14>
 8017102:	46c0      	nop			; (mov r8, r8)
 8017104:	0801bf64 	.word	0x0801bf64

08017108 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8017108:	2300      	movs	r3, #0
{
 801710a:	b510      	push	{r4, lr}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 801710c:	4c05      	ldr	r4, [pc, #20]	; (8017124 <ff_wtoupper+0x1c>)
 801710e:	005a      	lsls	r2, r3, #1
 8017110:	5aa1      	ldrh	r1, [r4, r2]
 8017112:	2900      	cmp	r1, #0
 8017114:	d003      	beq.n	801711e <ff_wtoupper+0x16>
 8017116:	4281      	cmp	r1, r0
 8017118:	d102      	bne.n	8017120 <ff_wtoupper+0x18>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 801711a:	4b03      	ldr	r3, [pc, #12]	; (8017128 <ff_wtoupper+0x20>)
 801711c:	5ad0      	ldrh	r0, [r2, r3]
}
 801711e:	bd10      	pop	{r4, pc}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8017120:	3301      	adds	r3, #1
 8017122:	e7f4      	b.n	801710e <ff_wtoupper+0x6>
 8017124:	0801c064 	.word	0x0801c064
 8017128:	0801c244 	.word	0x0801c244

0801712c <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 801712c:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 801712e:	f000 f865 	bl	80171fc <eMBTCPDoInit>
 8017132:	1e04      	subs	r4, r0, #0
 8017134:	d004      	beq.n	8017140 <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8017136:	2201      	movs	r2, #1
 8017138:	4b0d      	ldr	r3, [pc, #52]	; (8017170 <eMBTCPInit+0x44>)
 801713a:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 801713c:	0020      	movs	r0, r4
 801713e:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 8017140:	f000 f89e 	bl	8017280 <xMBPortEventInit>
 8017144:	2800      	cmp	r0, #0
 8017146:	d011      	beq.n	801716c <eMBTCPInit+0x40>
        pvMBFrameStartCur = eMBTCPStart;
 8017148:	4b0a      	ldr	r3, [pc, #40]	; (8017174 <eMBTCPInit+0x48>)
 801714a:	4a0b      	ldr	r2, [pc, #44]	; (8017178 <eMBTCPInit+0x4c>)
 801714c:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 801714e:	4b0b      	ldr	r3, [pc, #44]	; (801717c <eMBTCPInit+0x50>)
 8017150:	4a0b      	ldr	r2, [pc, #44]	; (8017180 <eMBTCPInit+0x54>)
 8017152:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8017154:	4b0b      	ldr	r3, [pc, #44]	; (8017184 <eMBTCPInit+0x58>)
 8017156:	4a0c      	ldr	r2, [pc, #48]	; (8017188 <eMBTCPInit+0x5c>)
 8017158:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 801715a:	4b0c      	ldr	r3, [pc, #48]	; (801718c <eMBTCPInit+0x60>)
 801715c:	4a0c      	ldr	r2, [pc, #48]	; (8017190 <eMBTCPInit+0x64>)
 801715e:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8017160:	22ff      	movs	r2, #255	; 0xff
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8017162:	4b0c      	ldr	r3, [pc, #48]	; (8017194 <eMBTCPInit+0x68>)
 8017164:	601c      	str	r4, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8017166:	4b0c      	ldr	r3, [pc, #48]	; (8017198 <eMBTCPInit+0x6c>)
 8017168:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 801716a:	e7e4      	b.n	8017136 <eMBTCPInit+0xa>
        eStatus = MB_EPORTERR;
 801716c:	2403      	movs	r4, #3
 801716e:	e7e5      	b.n	801713c <eMBTCPInit+0x10>
 8017170:	2000025f 	.word	0x2000025f
 8017174:	200008d8 	.word	0x200008d8
 8017178:	0801720f 	.word	0x0801720f
 801717c:	200008dc 	.word	0x200008dc
 8017180:	08017211 	.word	0x08017211
 8017184:	200008cc 	.word	0x200008cc
 8017188:	08017219 	.word	0x08017219
 801718c:	200008d0 	.word	0x200008d0
 8017190:	08017259 	.word	0x08017259
 8017194:	200008d4 	.word	0x200008d4
 8017198:	200008e0 	.word	0x200008e0

0801719c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 801719c:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 801719e:	4c05      	ldr	r4, [pc, #20]	; (80171b4 <eMBEnable+0x18>)
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80171a0:	2006      	movs	r0, #6
    if( eMBState == STATE_DISABLED )
 80171a2:	7823      	ldrb	r3, [r4, #0]
 80171a4:	2b01      	cmp	r3, #1
 80171a6:	d104      	bne.n	80171b2 <eMBEnable+0x16>
        pvMBFrameStartCur(  );
 80171a8:	4b03      	ldr	r3, [pc, #12]	; (80171b8 <eMBEnable+0x1c>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80171ae:	2000      	movs	r0, #0
 80171b0:	7020      	strb	r0, [r4, #0]
    }
    return eStatus;
}
 80171b2:	bd10      	pop	{r4, pc}
 80171b4:	2000025f 	.word	0x2000025f
 80171b8:	200008d8 	.word	0x200008d8

080171bc <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
 80171bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171be:	000d      	movs	r5, r1
 80171c0:	0007      	movs	r7, r0
 80171c2:	0011      	movs	r1, r2
 80171c4:	001c      	movs	r4, r3
            usMBSlaveIDLen += usAdditionalLen;
        }
    }
    else
    {
        eStatus = MB_ENORES;
 80171c6:	2604      	movs	r6, #4
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
 80171c8:	2b1d      	cmp	r3, #29
 80171ca:	d811      	bhi.n	80171f0 <eMBSetSlaveID+0x34>
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
 80171cc:	2302      	movs	r3, #2
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
 80171ce:	4809      	ldr	r0, [pc, #36]	; (80171f4 <eMBSetSlaveID+0x38>)
    eMBErrorCode    eStatus = MB_ENOERR;
 80171d0:	2600      	movs	r6, #0
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
 80171d2:	7007      	strb	r7, [r0, #0]
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
 80171d4:	4f08      	ldr	r7, [pc, #32]	; (80171f8 <eMBSetSlaveID+0x3c>)
 80171d6:	803b      	strh	r3, [r7, #0]
 80171d8:	1e6b      	subs	r3, r5, #1
 80171da:	419d      	sbcs	r5, r3
 80171dc:	426d      	negs	r5, r5
 80171de:	7045      	strb	r5, [r0, #1]
        if( usAdditionalLen > 0 )
 80171e0:	42b4      	cmp	r4, r6
 80171e2:	d005      	beq.n	80171f0 <eMBSetSlaveID+0x34>
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
 80171e4:	0022      	movs	r2, r4
 80171e6:	3002      	adds	r0, #2
            usMBSlaveIDLen += usAdditionalLen;
 80171e8:	3402      	adds	r4, #2
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
 80171ea:	f001 fa25 	bl	8018638 <memcpy>
            usMBSlaveIDLen += usAdditionalLen;
 80171ee:	803c      	strh	r4, [r7, #0]
    }
    return eStatus;
}
 80171f0:	0030      	movs	r0, r6
 80171f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171f4:	200008e1 	.word	0x200008e1
 80171f8:	20000902 	.word	0x20000902

080171fc <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 80171fc:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 80171fe:	f000 f847 	bl	8017290 <xMBTCPPortInit>
    eMBErrorCode    eStatus = MB_ENOERR;
 8017202:	2300      	movs	r3, #0
    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8017204:	4298      	cmp	r0, r3
 8017206:	d100      	bne.n	801720a <eMBTCPDoInit+0xe>
    {
        eStatus = MB_EPORTERR;
 8017208:	3303      	adds	r3, #3
    }
    return eStatus;
}
 801720a:	0018      	movs	r0, r3
 801720c:	bd10      	pop	{r4, pc}

0801720e <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 801720e:	4770      	bx	lr

08017210 <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8017210:	b510      	push	{r4, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8017212:	f000 f85b 	bl	80172cc <vMBTCPPortDisable>
}
 8017216:	bd10      	pop	{r4, pc}

08017218 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8017218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 801721a:	466b      	mov	r3, sp
 801721c:	1c9f      	adds	r7, r3, #2
{
 801721e:	0004      	movs	r4, r0
 8017220:	000e      	movs	r6, r1
    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8017222:	a801      	add	r0, sp, #4
 8017224:	0039      	movs	r1, r7
{
 8017226:	0015      	movs	r5, r2
    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8017228:	f000 f852 	bl	80172d0 <xMBTCPPortGetRequest>
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
        }
    }
    else
    {
        eStatus = MB_EIO;
 801722c:	2105      	movs	r1, #5
    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 801722e:	2800      	cmp	r0, #0
 8017230:	d010      	beq.n	8017254 <eMBTCPReceive+0x3c>
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8017232:	9a01      	ldr	r2, [sp, #4]
        if( usPID == MB_TCP_PROTOCOL_ID )
 8017234:	78d3      	ldrb	r3, [r2, #3]
 8017236:	7890      	ldrb	r0, [r2, #2]
 8017238:	021b      	lsls	r3, r3, #8
 801723a:	4303      	orrs	r3, r0
 801723c:	ba5b      	rev16	r3, r3
 801723e:	b29b      	uxth	r3, r3
 8017240:	2b00      	cmp	r3, #0
 8017242:	d107      	bne.n	8017254 <eMBTCPReceive+0x3c>
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8017244:	3207      	adds	r2, #7
 8017246:	6032      	str	r2, [r6, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8017248:	883a      	ldrh	r2, [r7, #0]
            eStatus = MB_ENOERR;
 801724a:	0019      	movs	r1, r3
            *pusLength = usLength - MB_TCP_FUNC;
 801724c:	3a07      	subs	r2, #7
 801724e:	802a      	strh	r2, [r5, #0]
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8017250:	22ff      	movs	r2, #255	; 0xff
 8017252:	7022      	strb	r2, [r4, #0]
    }
    return eStatus;
}
 8017254:	0008      	movs	r0, r1
 8017256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017258 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8017258:	0008      	movs	r0, r1
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 801725a:	1c53      	adds	r3, r2, #1
{
 801725c:	b510      	push	{r4, lr}
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 801725e:	3903      	subs	r1, #3
 8017260:	121c      	asrs	r4, r3, #8
 8017262:	700c      	strb	r4, [r1, #0]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8017264:	3207      	adds	r2, #7
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8017266:	1e81      	subs	r1, r0, #2
 8017268:	700b      	strb	r3, [r1, #0]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 801726a:	3807      	subs	r0, #7
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 801726c:	b291      	uxth	r1, r2
 801726e:	f000 f83d 	bl	80172ec <xMBTCPPortSendResponse>
    eMBErrorCode    eStatus = MB_ENOERR;
 8017272:	2300      	movs	r3, #0
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8017274:	4298      	cmp	r0, r3
 8017276:	d100      	bne.n	801727a <eMBTCPSend+0x22>
    {
        eStatus = MB_EIO;
 8017278:	3305      	adds	r3, #5
    }
    return eStatus;
}
 801727a:	0018      	movs	r0, r3
 801727c:	bd10      	pop	{r4, pc}
	...

08017280 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL 
xMBPortEventInit(void)
{
    xEventInQueue = FALSE;
 8017280:	2200      	movs	r2, #0
 8017282:	4b02      	ldr	r3, [pc, #8]	; (801728c <xMBPortEventInit+0xc>)
    return TRUE;
}
 8017284:	2001      	movs	r0, #1
    xEventInQueue = FALSE;
 8017286:	701a      	strb	r2, [r3, #0]
}
 8017288:	4770      	bx	lr
 801728a:	46c0      	nop			; (mov r8, r8)
 801728c:	20000904 	.word	0x20000904

08017290 <xMBTCPPortInit>:
uint16_t ucTCPResponseLen;
uint8_t bFrameSent = FALSE;

BOOL 
xMBTCPPortInit(USHORT usTCPPort)
{
 8017290:	b510      	push	{r4, lr}
 8017292:	1e04      	subs	r4, r0, #0
    BOOL bOkay = FALSE;

    USHORT usPort;
    if (usTCPPort == 0)
 8017294:	d101      	bne.n	801729a <xMBTCPPortInit+0xa>
    {
        usPort = MB_TCP_DEFAULT_PORT;
 8017296:	34f7      	adds	r4, #247	; 0xf7
 8017298:	34ff      	adds	r4, #255	; 0xff
    }
    else
    {
        usPort = (USHORT)usTCPPort;
    }
    printf("Creating socket...\r\n");
 801729a:	480a      	ldr	r0, [pc, #40]	; (80172c4 <xMBTCPPortInit+0x34>)
 801729c:	f001 fd4c 	bl	8018d38 <puts>
    uint8_t http_socket = HTTP_SOCKET;
    uint8_t code = socket(http_socket, Sn_MR_TCP, usPort, 0);
 80172a0:	2300      	movs	r3, #0
 80172a2:	0022      	movs	r2, r4
 80172a4:	2101      	movs	r1, #1
 80172a6:	0018      	movs	r0, r3
 80172a8:	f7fb fd32 	bl	8012d10 <socket>
 80172ac:	b2c0      	uxtb	r0, r0
    if (code != http_socket)
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d004      	beq.n	80172bc <xMBTCPPortInit+0x2c>
    {
        printf("socket() failed, code = %d\r\n", code);
 80172b2:	0001      	movs	r1, r0
 80172b4:	4804      	ldr	r0, [pc, #16]	; (80172c8 <xMBTCPPortInit+0x38>)
 80172b6:	f001 fcb3 	bl	8018c20 <iprintf>
        return;
    }
    listen(HTTP_SOCKET);
    bOkay = TRUE;
    return bOkay;
}
 80172ba:	bd10      	pop	{r4, pc}
    listen(HTTP_SOCKET);
 80172bc:	f7fb fdc0 	bl	8012e40 <listen>
    return bOkay;
 80172c0:	2001      	movs	r0, #1
 80172c2:	e7fa      	b.n	80172ba <xMBTCPPortInit+0x2a>
 80172c4:	0801c424 	.word	0x0801c424
 80172c8:	0801c438 	.word	0x0801c438

080172cc <vMBTCPPortDisable>:
 80172cc:	4770      	bx	lr
	...

080172d0 <xMBTCPPortGetRequest>:
}

BOOL 
xMBTCPPortGetRequest(UCHAR **ppucMBTCPFrame, USHORT *usTCPLength)
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 80172d0:	4b04      	ldr	r3, [pc, #16]	; (80172e4 <xMBTCPPortGetRequest+0x14>)
 80172d2:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 80172d4:	4b04      	ldr	r3, [pc, #16]	; (80172e8 <xMBTCPPortGetRequest+0x18>)
    /* Reset the buffer. */
    ucTCPRequestLen = 0;
    return TRUE;
}
 80172d6:	2001      	movs	r0, #1
    *usTCPLength = ucTCPRequestLen;
 80172d8:	881a      	ldrh	r2, [r3, #0]
 80172da:	800a      	strh	r2, [r1, #0]
    ucTCPRequestLen = 0;
 80172dc:	2200      	movs	r2, #0
 80172de:	801a      	strh	r2, [r3, #0]
}
 80172e0:	4770      	bx	lr
 80172e2:	46c0      	nop			; (mov r8, r8)
 80172e4:	20000906 	.word	0x20000906
 80172e8:	20000a0e 	.word	0x20000a0e

080172ec <xMBTCPPortSendResponse>:

BOOL 
xMBTCPPortSendResponse(const UCHAR *pucMBTCPFrame, USHORT usTCPLength)
{
 80172ec:	b510      	push	{r4, lr}
 80172ee:	000c      	movs	r4, r1
    memcpy(ucTCPResponseFrame, pucMBTCPFrame, usTCPLength);
 80172f0:	000a      	movs	r2, r1
 80172f2:	0001      	movs	r1, r0
 80172f4:	4804      	ldr	r0, [pc, #16]	; (8017308 <xMBTCPPortSendResponse+0x1c>)
 80172f6:	f001 f99f 	bl	8018638 <memcpy>
    ucTCPResponseLen = usTCPLength;
    bFrameSent = TRUE; 
 80172fa:	2001      	movs	r0, #1
    ucTCPResponseLen = usTCPLength;
 80172fc:	4b03      	ldr	r3, [pc, #12]	; (801730c <xMBTCPPortSendResponse+0x20>)
 80172fe:	801c      	strh	r4, [r3, #0]
    bFrameSent = TRUE; 
 8017300:	4b03      	ldr	r3, [pc, #12]	; (8017310 <xMBTCPPortSendResponse+0x24>)
 8017302:	7018      	strb	r0, [r3, #0]
    return bFrameSent;
    return TRUE;
}
 8017304:	bd10      	pop	{r4, pc}
 8017306:	46c0      	nop			; (mov r8, r8)
 8017308:	20000a10 	.word	0x20000a10
 801730c:	20000b18 	.word	0x20000b18
 8017310:	20000905 	.word	0x20000905

08017314 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017314:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017316:	4c11      	ldr	r4, [pc, #68]	; (801735c <MX_USB_DEVICE_Init+0x48>)
 8017318:	2200      	movs	r2, #0
 801731a:	0020      	movs	r0, r4
 801731c:	4910      	ldr	r1, [pc, #64]	; (8017360 <MX_USB_DEVICE_Init+0x4c>)
 801731e:	f7fd fa81 	bl	8014824 <USBD_Init>
 8017322:	2800      	cmp	r0, #0
 8017324:	d001      	beq.n	801732a <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8017326:	f7f7 f9c5 	bl	800e6b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801732a:	0020      	movs	r0, r4
 801732c:	490d      	ldr	r1, [pc, #52]	; (8017364 <MX_USB_DEVICE_Init+0x50>)
 801732e:	f7fd fa93 	bl	8014858 <USBD_RegisterClass>
 8017332:	2800      	cmp	r0, #0
 8017334:	d001      	beq.n	801733a <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8017336:	f7f7 f9bd 	bl	800e6b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801733a:	0020      	movs	r0, r4
 801733c:	490a      	ldr	r1, [pc, #40]	; (8017368 <MX_USB_DEVICE_Init+0x54>)
 801733e:	f7fd fa20 	bl	8014782 <USBD_CDC_RegisterInterface>
 8017342:	2800      	cmp	r0, #0
 8017344:	d001      	beq.n	801734a <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8017346:	f7f7 f9b5 	bl	800e6b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801734a:	0020      	movs	r0, r4
 801734c:	f7fd fa8d 	bl	801486a <USBD_Start>
 8017350:	2800      	cmp	r0, #0
 8017352:	d001      	beq.n	8017358 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8017354:	f7f7 f9ae 	bl	800e6b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017358:	bd10      	pop	{r4, pc}
 801735a:	46c0      	nop			; (mov r8, r8)
 801735c:	20000b1c 	.word	0x20000b1c
 8017360:	20000274 	.word	0x20000274
 8017364:	20000150 	.word	0x20000150
 8017368:	20000260 	.word	0x20000260

0801736c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 801736c:	2000      	movs	r0, #0
 801736e:	4770      	bx	lr

08017370 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8017370:	2000      	movs	r0, #0
 8017372:	4770      	bx	lr

08017374 <CDC_Init_FS>:
{
 8017374:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017376:	4c06      	ldr	r4, [pc, #24]	; (8017390 <CDC_Init_FS+0x1c>)
 8017378:	2200      	movs	r2, #0
 801737a:	0020      	movs	r0, r4
 801737c:	4905      	ldr	r1, [pc, #20]	; (8017394 <CDC_Init_FS+0x20>)
 801737e:	f7fd fa09 	bl	8014794 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017382:	0020      	movs	r0, r4
 8017384:	4904      	ldr	r1, [pc, #16]	; (8017398 <CDC_Init_FS+0x24>)
 8017386:	f7fd fa10 	bl	80147aa <USBD_CDC_SetRxBuffer>
}
 801738a:	2000      	movs	r0, #0
 801738c:	bd10      	pop	{r4, pc}
 801738e:	46c0      	nop			; (mov r8, r8)
 8017390:	20000b1c 	.word	0x20000b1c
 8017394:	20000e20 	.word	0x20000e20
 8017398:	20000de0 	.word	0x20000de0

0801739c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801739c:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801739e:	21ae      	movs	r1, #174	; 0xae
{
 80173a0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80173a2:	4c08      	ldr	r4, [pc, #32]	; (80173c4 <CDC_Transmit_FS+0x28>)
 80173a4:	0089      	lsls	r1, r1, #2
{
 80173a6:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80173a8:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 80173aa:	39a4      	subs	r1, #164	; 0xa4
 80173ac:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 80173ae:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 80173b0:	2900      	cmp	r1, #0
 80173b2:	d106      	bne.n	80173c2 <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80173b4:	0019      	movs	r1, r3
 80173b6:	0020      	movs	r0, r4
 80173b8:	f7fd f9ec 	bl	8014794 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80173bc:	0020      	movs	r0, r4
 80173be:	f7fd f9fb 	bl	80147b8 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 80173c2:	bd10      	pop	{r4, pc}
 80173c4:	20000b1c 	.word	0x20000b1c

080173c8 <CDC_Receive_FS>:
{
 80173c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (Buf[0] == 0x05 && Buf[1] == 0x03 && Buf[2] == 0xC0)
 80173ca:	7803      	ldrb	r3, [r0, #0]
{
 80173cc:	0004      	movs	r4, r0
  if (Buf[0] == 0x05 && Buf[1] == 0x03 && Buf[2] == 0xC0)
 80173ce:	2b05      	cmp	r3, #5
 80173d0:	d11d      	bne.n	801740e <CDC_Receive_FS+0x46>
 80173d2:	7843      	ldrb	r3, [r0, #1]
 80173d4:	2b03      	cmp	r3, #3
 80173d6:	d11a      	bne.n	801740e <CDC_Receive_FS+0x46>
 80173d8:	7883      	ldrb	r3, [r0, #2]
 80173da:	2bc0      	cmp	r3, #192	; 0xc0
 80173dc:	d117      	bne.n	801740e <CDC_Receive_FS+0x46>
	  uint64_t cfg_boot = 0xffffffffffffffb0;
 80173de:	2250      	movs	r2, #80	; 0x50
 80173e0:	4252      	negs	r2, r2
 80173e2:	17d3      	asrs	r3, r2, #31

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
static uint8_t m_write_cfg_flash(uint64_t *cfg)
{
  uint8_t status = 1;
  uint32_t page = flash_get_page(CONFIG_START);
 80173e4:	480f      	ldr	r0, [pc, #60]	; (8017424 <CDC_Receive_FS+0x5c>)
	  uint64_t cfg_boot = 0xffffffffffffffb0;
 80173e6:	9200      	str	r2, [sp, #0]
 80173e8:	9301      	str	r3, [sp, #4]
  uint32_t page = flash_get_page(CONFIG_START);
 80173ea:	f7f3 fe33 	bl	800b054 <flash_get_page>

  if (FLASH_OK != flash_erase(page, 1))
 80173ee:	2101      	movs	r1, #1
 80173f0:	f7f3 fdde 	bl	800afb0 <flash_erase>
 80173f4:	2800      	cmp	r0, #0
 80173f6:	d104      	bne.n	8017402 <CDC_Receive_FS+0x3a>
	status = 0;
  }

  if (status == 1)
  {
	if (FLASH_OK != flash_write(CONFIG_START, cfg, 1))
 80173f8:	2201      	movs	r2, #1
 80173fa:	4669      	mov	r1, sp
 80173fc:	4809      	ldr	r0, [pc, #36]	; (8017424 <CDC_Receive_FS+0x5c>)
 80173fe:	f7f3 fdf9 	bl	800aff4 <flash_write>
	  CDC_Transmit_FS(feedback, 3);
 8017402:	2103      	movs	r1, #3
 8017404:	4808      	ldr	r0, [pc, #32]	; (8017428 <CDC_Receive_FS+0x60>)
 8017406:	f7ff ffc9 	bl	801739c <CDC_Transmit_FS>
	  HAL_NVIC_SystemReset();
 801740a:	f7f7 fbf5 	bl	800ebf8 <HAL_NVIC_SystemReset>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801740e:	4d07      	ldr	r5, [pc, #28]	; (801742c <CDC_Receive_FS+0x64>)
 8017410:	0021      	movs	r1, r4
 8017412:	0028      	movs	r0, r5
 8017414:	f7fd f9c9 	bl	80147aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017418:	0028      	movs	r0, r5
 801741a:	f7fd f9e9 	bl	80147f0 <USBD_CDC_ReceivePacket>
}
 801741e:	2000      	movs	r0, #0
 8017420:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8017422:	46c0      	nop			; (mov r8, r8)
 8017424:	08007000 	.word	0x08007000
 8017428:	20000270 	.word	0x20000270
 801742c:	20000b1c 	.word	0x20000b1c

08017430 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017430:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8017432:	4801      	ldr	r0, [pc, #4]	; (8017438 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8017434:	800b      	strh	r3, [r1, #0]
}
 8017436:	4770      	bx	lr
 8017438:	20000290 	.word	0x20000290

0801743c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801743c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801743e:	4801      	ldr	r0, [pc, #4]	; (8017444 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8017440:	800b      	strh	r3, [r1, #0]
}
 8017442:	4770      	bx	lr
 8017444:	200002a4 	.word	0x200002a4

08017448 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017448:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 801744a:	2500      	movs	r5, #0
 801744c:	0052      	lsls	r2, r2, #1
 801744e:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 8017450:	0f04      	lsrs	r4, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8017452:	b2e3      	uxtb	r3, r4
    if (((value >> 28)) < 0xA)
 8017454:	2c09      	cmp	r4, #9
 8017456:	d807      	bhi.n	8017468 <IntToUnicode+0x20>
      pbuf[2 * idx] = (value >> 28) + '0';
 8017458:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801745a:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 801745c:	704d      	strb	r5, [r1, #1]
  for (idx = 0; idx < len; idx++)
 801745e:	3102      	adds	r1, #2
    value = value << 4;
 8017460:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8017462:	428a      	cmp	r2, r1
 8017464:	d1f4      	bne.n	8017450 <IntToUnicode+0x8>
  }
}
 8017466:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017468:	3337      	adds	r3, #55	; 0x37
 801746a:	e7f6      	b.n	801745a <IntToUnicode+0x12>

0801746c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 801746c:	231a      	movs	r3, #26
{
 801746e:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8017470:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017472:	4b0b      	ldr	r3, [pc, #44]	; (80174a0 <USBD_FS_SerialStrDescriptor+0x34>)
 8017474:	4c0b      	ldr	r4, [pc, #44]	; (80174a4 <USBD_FS_SerialStrDescriptor+0x38>)
 8017476:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017478:	4b0b      	ldr	r3, [pc, #44]	; (80174a8 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 801747e:	2800      	cmp	r0, #0
 8017480:	d00b      	beq.n	801749a <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017482:	4b0a      	ldr	r3, [pc, #40]	; (80174ac <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017484:	2208      	movs	r2, #8
 8017486:	1ca1      	adds	r1, r4, #2
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017488:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801748a:	f7ff ffdd 	bl	8017448 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801748e:	0021      	movs	r1, r4
 8017490:	2204      	movs	r2, #4
 8017492:	0028      	movs	r0, r5
 8017494:	3112      	adds	r1, #18
 8017496:	f7ff ffd7 	bl	8017448 <IntToUnicode>
}
 801749a:	0020      	movs	r0, r4
 801749c:	bd70      	pop	{r4, r5, r6, pc}
 801749e:	46c0      	nop			; (mov r8, r8)
 80174a0:	1ffff7ac 	.word	0x1ffff7ac
 80174a4:	200002a8 	.word	0x200002a8
 80174a8:	1ffff7b4 	.word	0x1ffff7b4
 80174ac:	1ffff7b0 	.word	0x1ffff7b0

080174b0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80174b0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80174b2:	4c04      	ldr	r4, [pc, #16]	; (80174c4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80174b4:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80174b6:	0021      	movs	r1, r4
 80174b8:	4803      	ldr	r0, [pc, #12]	; (80174c8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80174ba:	f7fd fd3f 	bl	8014f3c <USBD_GetString>
}
 80174be:	0020      	movs	r0, r4
 80174c0:	bd10      	pop	{r4, pc}
 80174c2:	46c0      	nop			; (mov r8, r8)
 80174c4:	20000e60 	.word	0x20000e60
 80174c8:	0801c455 	.word	0x0801c455

080174cc <USBD_FS_ProductStrDescriptor>:
{
 80174cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174ce:	4c04      	ldr	r4, [pc, #16]	; (80174e0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80174d0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174d2:	0021      	movs	r1, r4
 80174d4:	4803      	ldr	r0, [pc, #12]	; (80174e4 <USBD_FS_ProductStrDescriptor+0x18>)
 80174d6:	f7fd fd31 	bl	8014f3c <USBD_GetString>
}
 80174da:	0020      	movs	r0, r4
 80174dc:	bd10      	pop	{r4, pc}
 80174de:	46c0      	nop			; (mov r8, r8)
 80174e0:	20000e60 	.word	0x20000e60
 80174e4:	0801c468 	.word	0x0801c468

080174e8 <USBD_FS_ConfigStrDescriptor>:
{
 80174e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80174ea:	4c04      	ldr	r4, [pc, #16]	; (80174fc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80174ec:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80174ee:	0021      	movs	r1, r4
 80174f0:	4803      	ldr	r0, [pc, #12]	; (8017500 <USBD_FS_ConfigStrDescriptor+0x18>)
 80174f2:	f7fd fd23 	bl	8014f3c <USBD_GetString>
}
 80174f6:	0020      	movs	r0, r4
 80174f8:	bd10      	pop	{r4, pc}
 80174fa:	46c0      	nop			; (mov r8, r8)
 80174fc:	20000e60 	.word	0x20000e60
 8017500:	0801c47e 	.word	0x0801c47e

08017504 <USBD_FS_InterfaceStrDescriptor>:
{
 8017504:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017506:	4c04      	ldr	r4, [pc, #16]	; (8017518 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8017508:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801750a:	0021      	movs	r1, r4
 801750c:	4803      	ldr	r0, [pc, #12]	; (801751c <USBD_FS_InterfaceStrDescriptor+0x18>)
 801750e:	f7fd fd15 	bl	8014f3c <USBD_GetString>
}
 8017512:	0020      	movs	r0, r4
 8017514:	bd10      	pop	{r4, pc}
 8017516:	46c0      	nop			; (mov r8, r8)
 8017518:	20000e60 	.word	0x20000e60
 801751c:	0801c489 	.word	0x0801c489

08017520 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017520:	0003      	movs	r3, r0
 8017522:	2002      	movs	r0, #2
 8017524:	2b03      	cmp	r3, #3
 8017526:	d801      	bhi.n	801752c <USBD_Get_USB_Status+0xc>
 8017528:	4a01      	ldr	r2, [pc, #4]	; (8017530 <USBD_Get_USB_Status+0x10>)
 801752a:	5cd0      	ldrb	r0, [r2, r3]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 801752c:	4770      	bx	lr
 801752e:	46c0      	nop			; (mov r8, r8)
 8017530:	0801c497 	.word	0x0801c497

08017534 <HAL_PCD_MspInit>:
{
 8017534:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8017536:	4b0b      	ldr	r3, [pc, #44]	; (8017564 <HAL_PCD_MspInit+0x30>)
 8017538:	6802      	ldr	r2, [r0, #0]
 801753a:	429a      	cmp	r2, r3
 801753c:	d111      	bne.n	8017562 <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 801753e:	2080      	movs	r0, #128	; 0x80
 8017540:	4a09      	ldr	r2, [pc, #36]	; (8017568 <HAL_PCD_MspInit+0x34>)
 8017542:	0400      	lsls	r0, r0, #16
 8017544:	69d1      	ldr	r1, [r2, #28]
 8017546:	4301      	orrs	r1, r0
 8017548:	61d1      	str	r1, [r2, #28]
 801754a:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801754c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 801754e:	4003      	ands	r3, r0
 8017550:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8017552:	201f      	movs	r0, #31
 8017554:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8017556:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8017558:	f7f7 fb18 	bl	800eb8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801755c:	201f      	movs	r0, #31
 801755e:	f7f7 fb3f 	bl	800ebe0 <HAL_NVIC_EnableIRQ>
}
 8017562:	bd07      	pop	{r0, r1, r2, pc}
 8017564:	40005c00 	.word	0x40005c00
 8017568:	40021000 	.word	0x40021000

0801756c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801756c:	23ac      	movs	r3, #172	; 0xac
{
 801756e:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017570:	009b      	lsls	r3, r3, #2
 8017572:	18c1      	adds	r1, r0, r3
 8017574:	3340      	adds	r3, #64	; 0x40
 8017576:	58c0      	ldr	r0, [r0, r3]
 8017578:	f7fd f992 	bl	80148a0 <USBD_LL_SetupStage>
}
 801757c:	bd10      	pop	{r4, pc}

0801757e <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801757e:	2328      	movs	r3, #40	; 0x28
 8017580:	434b      	muls	r3, r1
 8017582:	18c3      	adds	r3, r0, r3
 8017584:	337d      	adds	r3, #125	; 0x7d
 8017586:	33ff      	adds	r3, #255	; 0xff
 8017588:	681a      	ldr	r2, [r3, #0]
 801758a:	23bc      	movs	r3, #188	; 0xbc
{
 801758c:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801758e:	009b      	lsls	r3, r3, #2
 8017590:	58c0      	ldr	r0, [r0, r3]
 8017592:	f7fd f9b7 	bl	8014904 <USBD_LL_DataOutStage>
}
 8017596:	bd10      	pop	{r4, pc}

08017598 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017598:	2328      	movs	r3, #40	; 0x28
 801759a:	434b      	muls	r3, r1
 801759c:	18c3      	adds	r3, r0, r3
 801759e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80175a0:	23bc      	movs	r3, #188	; 0xbc
{
 80175a2:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	58c0      	ldr	r0, [r0, r3]
 80175a8:	f7fd f9f2 	bl	8014990 <USBD_LL_DataInStage>
}
 80175ac:	bd10      	pop	{r4, pc}

080175ae <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80175ae:	23bc      	movs	r3, #188	; 0xbc
{
 80175b0:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	58c0      	ldr	r0, [r0, r3]
 80175b6:	f7fd fa95 	bl	8014ae4 <USBD_LL_SOF>
}
 80175ba:	bd10      	pop	{r4, pc}

080175bc <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80175bc:	6883      	ldr	r3, [r0, #8]
{
 80175be:	b570      	push	{r4, r5, r6, lr}
 80175c0:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80175c2:	2b02      	cmp	r3, #2
 80175c4:	d001      	beq.n	80175ca <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80175c6:	f7f7 f875 	bl	800e6b4 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80175ca:	25bc      	movs	r5, #188	; 0xbc
 80175cc:	00ad      	lsls	r5, r5, #2
 80175ce:	2101      	movs	r1, #1
 80175d0:	5960      	ldr	r0, [r4, r5]
 80175d2:	f7fd fa6c 	bl	8014aae <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80175d6:	5960      	ldr	r0, [r4, r5]
 80175d8:	f7fd fa3f 	bl	8014a5a <USBD_LL_Reset>
}
 80175dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080175e0 <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80175e0:	23bc      	movs	r3, #188	; 0xbc
{
 80175e2:	b510      	push	{r4, lr}
 80175e4:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80175e6:	009b      	lsls	r3, r3, #2
 80175e8:	58c0      	ldr	r0, [r0, r3]
 80175ea:	f7fd fa63 	bl	8014ab4 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80175ee:	69a3      	ldr	r3, [r4, #24]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d004      	beq.n	80175fe <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80175f4:	2306      	movs	r3, #6
 80175f6:	4a02      	ldr	r2, [pc, #8]	; (8017600 <HAL_PCD_SuspendCallback+0x20>)
 80175f8:	6911      	ldr	r1, [r2, #16]
 80175fa:	430b      	orrs	r3, r1
 80175fc:	6113      	str	r3, [r2, #16]
}
 80175fe:	bd10      	pop	{r4, pc}
 8017600:	e000ed00 	.word	0xe000ed00

08017604 <HAL_PCD_ResumeCallback>:
  if (hpcd->Init.low_power_enable)
 8017604:	6983      	ldr	r3, [r0, #24]
{
 8017606:	b510      	push	{r4, lr}
 8017608:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 801760a:	2b00      	cmp	r3, #0
 801760c:	d006      	beq.n	801761c <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801760e:	2106      	movs	r1, #6
 8017610:	4a05      	ldr	r2, [pc, #20]	; (8017628 <HAL_PCD_ResumeCallback+0x24>)
 8017612:	6913      	ldr	r3, [r2, #16]
 8017614:	438b      	bics	r3, r1
 8017616:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 8017618:	f7f4 fab8 	bl	800bb8c <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801761c:	23bc      	movs	r3, #188	; 0xbc
 801761e:	009b      	lsls	r3, r3, #2
 8017620:	58e0      	ldr	r0, [r4, r3]
 8017622:	f7fd fa53 	bl	8014acc <USBD_LL_Resume>
}
 8017626:	bd10      	pop	{r4, pc}
 8017628:	e000ed00 	.word	0xe000ed00

0801762c <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 801762c:	23bc      	movs	r3, #188	; 0xbc
{
 801762e:	b570      	push	{r4, r5, r6, lr}
 8017630:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8017632:	481c      	ldr	r0, [pc, #112]	; (80176a4 <USBD_LL_Init+0x78>)
 8017634:	009b      	lsls	r3, r3, #2
 8017636:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8017638:	4b1b      	ldr	r3, [pc, #108]	; (80176a8 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 801763a:	25b0      	movs	r5, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 801763c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801763e:	2308      	movs	r3, #8
 8017640:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017642:	3b06      	subs	r3, #6
 8017644:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017646:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017648:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 801764a:	00ad      	lsls	r5, r5, #2
 801764c:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801764e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017650:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017652:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017654:	f7f7 fd6c 	bl	800f130 <HAL_PCD_Init>
 8017658:	2800      	cmp	r0, #0
 801765a:	d001      	beq.n	8017660 <USBD_LL_Init+0x34>
    Error_Handler( );
 801765c:	f7f7 f82a 	bl	800e6b4 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017660:	2200      	movs	r2, #0
 8017662:	5960      	ldr	r0, [r4, r5]
 8017664:	0011      	movs	r1, r2
 8017666:	2318      	movs	r3, #24
 8017668:	f7f8 fbca 	bl	800fe00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801766c:	5960      	ldr	r0, [r4, r5]
 801766e:	2358      	movs	r3, #88	; 0x58
 8017670:	2200      	movs	r2, #0
 8017672:	2180      	movs	r1, #128	; 0x80
 8017674:	f7f8 fbc4 	bl	800fe00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8017678:	5960      	ldr	r0, [r4, r5]
 801767a:	23c0      	movs	r3, #192	; 0xc0
 801767c:	2200      	movs	r2, #0
 801767e:	2181      	movs	r1, #129	; 0x81
 8017680:	f7f8 fbbe 	bl	800fe00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017684:	2388      	movs	r3, #136	; 0x88
 8017686:	5960      	ldr	r0, [r4, r5]
 8017688:	2200      	movs	r2, #0
 801768a:	2101      	movs	r1, #1
 801768c:	005b      	lsls	r3, r3, #1
 801768e:	f7f8 fbb7 	bl	800fe00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8017692:	2380      	movs	r3, #128	; 0x80
 8017694:	5960      	ldr	r0, [r4, r5]
 8017696:	2200      	movs	r2, #0
 8017698:	2182      	movs	r1, #130	; 0x82
 801769a:	005b      	lsls	r3, r3, #1
 801769c:	f7f8 fbb0 	bl	800fe00 <HAL_PCDEx_PMAConfig>
}
 80176a0:	2000      	movs	r0, #0
 80176a2:	bd70      	pop	{r4, r5, r6, pc}
 80176a4:	20001060 	.word	0x20001060
 80176a8:	40005c00 	.word	0x40005c00

080176ac <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 80176ac:	23b0      	movs	r3, #176	; 0xb0
{
 80176ae:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80176b0:	009b      	lsls	r3, r3, #2
 80176b2:	58c0      	ldr	r0, [r0, r3]
 80176b4:	f7f7 fda6 	bl	800f204 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80176b8:	f7ff ff32 	bl	8017520 <USBD_Get_USB_Status>
}
 80176bc:	bd10      	pop	{r4, pc}

080176be <USBD_LL_OpenEP>:
{
 80176be:	b510      	push	{r4, lr}
 80176c0:	0014      	movs	r4, r2
 80176c2:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80176c4:	0023      	movs	r3, r4
 80176c6:	24b0      	movs	r4, #176	; 0xb0
 80176c8:	00a4      	lsls	r4, r4, #2
 80176ca:	5900      	ldr	r0, [r0, r4]
 80176cc:	f7f8 fa9e 	bl	800fc0c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80176d0:	f7ff ff26 	bl	8017520 <USBD_Get_USB_Status>
}
 80176d4:	bd10      	pop	{r4, pc}

080176d6 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80176d6:	23b0      	movs	r3, #176	; 0xb0
{
 80176d8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80176da:	009b      	lsls	r3, r3, #2
 80176dc:	58c0      	ldr	r0, [r0, r3]
 80176de:	f7f8 fac3 	bl	800fc68 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80176e2:	f7ff ff1d 	bl	8017520 <USBD_Get_USB_Status>
}
 80176e6:	bd10      	pop	{r4, pc}

080176e8 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80176e8:	23b0      	movs	r3, #176	; 0xb0
{
 80176ea:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80176ec:	009b      	lsls	r3, r3, #2
 80176ee:	58c0      	ldr	r0, [r0, r3]
 80176f0:	f7f8 fb29 	bl	800fd46 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80176f4:	f7ff ff14 	bl	8017520 <USBD_Get_USB_Status>
}
 80176f8:	bd10      	pop	{r4, pc}

080176fa <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80176fa:	23b0      	movs	r3, #176	; 0xb0
{
 80176fc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80176fe:	009b      	lsls	r3, r3, #2
 8017700:	58c0      	ldr	r0, [r0, r3]
 8017702:	f7f8 fb4d 	bl	800fda0 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017706:	f7ff ff0b 	bl	8017520 <USBD_Get_USB_Status>
}
 801770a:	bd10      	pop	{r4, pc}

0801770c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801770c:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 801770e:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017710:	009b      	lsls	r3, r3, #2
 8017712:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8017714:	2a00      	cmp	r2, #0
 8017716:	da07      	bge.n	8017728 <USBD_LL_IsStallEP+0x1c>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017718:	227f      	movs	r2, #127	; 0x7f
 801771a:	4011      	ands	r1, r2
 801771c:	3101      	adds	r1, #1
 801771e:	3a57      	subs	r2, #87	; 0x57
 8017720:	4351      	muls	r1, r2
 8017722:	185b      	adds	r3, r3, r1
 8017724:	7898      	ldrb	r0, [r3, #2]
}
 8017726:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017728:	2228      	movs	r2, #40	; 0x28
 801772a:	4351      	muls	r1, r2
 801772c:	185b      	adds	r3, r3, r1
 801772e:	336b      	adds	r3, #107	; 0x6b
 8017730:	33ff      	adds	r3, #255	; 0xff
 8017732:	7818      	ldrb	r0, [r3, #0]
 8017734:	e7f7      	b.n	8017726 <USBD_LL_IsStallEP+0x1a>

08017736 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017736:	23b0      	movs	r3, #176	; 0xb0
{
 8017738:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801773a:	009b      	lsls	r3, r3, #2
 801773c:	58c0      	ldr	r0, [r0, r3]
 801773e:	f7f7 fd74 	bl	800f22a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017742:	f7ff feed 	bl	8017520 <USBD_Get_USB_Status>
}
 8017746:	bd10      	pop	{r4, pc}

08017748 <USBD_LL_Transmit>:
{
 8017748:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801774a:	24b0      	movs	r4, #176	; 0xb0
 801774c:	00a4      	lsls	r4, r4, #2
 801774e:	5900      	ldr	r0, [r0, r4]
 8017750:	f7f8 fadc 	bl	800fd0c <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017754:	f7ff fee4 	bl	8017520 <USBD_Get_USB_Status>
}
 8017758:	bd10      	pop	{r4, pc}

0801775a <USBD_LL_PrepareReceive>:
{
 801775a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801775c:	24b0      	movs	r4, #176	; 0xb0
 801775e:	00a4      	lsls	r4, r4, #2
 8017760:	5900      	ldr	r0, [r0, r4]
 8017762:	f7f8 faa9 	bl	800fcb8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017766:	f7ff fedb 	bl	8017520 <USBD_Get_USB_Status>
}
 801776a:	bd10      	pop	{r4, pc}

0801776c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801776c:	23b0      	movs	r3, #176	; 0xb0
{
 801776e:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017770:	009b      	lsls	r3, r3, #2
 8017772:	58c0      	ldr	r0, [r0, r3]
 8017774:	f7f8 fac1 	bl	800fcfa <HAL_PCD_EP_GetRxCount>
}
 8017778:	bd10      	pop	{r4, pc}
	...

0801777c <USBD_static_malloc>:
}
 801777c:	4800      	ldr	r0, [pc, #0]	; (8017780 <USBD_static_malloc+0x4>)
 801777e:	4770      	bx	lr
 8017780:	20001354 	.word	0x20001354

08017784 <USBD_static_free>:
}
 8017784:	4770      	bx	lr

08017786 <W5500_Select>:
#include "W5500_config.h"



void W5500_Select() {
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET); //CS LOW
 8017786:	2090      	movs	r0, #144	; 0x90
void W5500_Select() {
 8017788:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET); //CS LOW
 801778a:	2200      	movs	r2, #0
 801778c:	2110      	movs	r1, #16
 801778e:	05c0      	lsls	r0, r0, #23
 8017790:	f7f7 fcb4 	bl	800f0fc <HAL_GPIO_WritePin>
}
 8017794:	bd10      	pop	{r4, pc}

08017796 <W5500_Unselect>:

void W5500_Unselect() {
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET); //CS HIGH
 8017796:	2090      	movs	r0, #144	; 0x90
void W5500_Unselect() {
 8017798:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET); //CS HIGH
 801779a:	2201      	movs	r2, #1
 801779c:	2110      	movs	r1, #16
 801779e:	05c0      	lsls	r0, r0, #23
 80177a0:	f7f7 fcac 	bl	800f0fc <HAL_GPIO_WritePin>
}
 80177a4:	bd10      	pop	{r4, pc}
	...

080177a8 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 80177a8:	b513      	push	{r0, r1, r4, lr}
	uint8_t rbuf;
	HAL_SPI_Receive(HSPI_W5500, &rbuf, 1, 0xFFFFFFFF);
 80177aa:	466a      	mov	r2, sp
 80177ac:	2301      	movs	r3, #1
 80177ae:	1dd4      	adds	r4, r2, #7
 80177b0:	0021      	movs	r1, r4
 80177b2:	2201      	movs	r2, #1
 80177b4:	425b      	negs	r3, r3
 80177b6:	4802      	ldr	r0, [pc, #8]	; (80177c0 <W5500_ReadByte+0x18>)
 80177b8:	f7f9 fc5c 	bl	8011074 <HAL_SPI_Receive>
	return rbuf;
 80177bc:	7820      	ldrb	r0, [r4, #0]
}
 80177be:	bd16      	pop	{r1, r2, r4, pc}
 80177c0:	20000374 	.word	0x20000374

080177c4 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t b) {
 80177c4:	b507      	push	{r0, r1, r2, lr}
 80177c6:	466b      	mov	r3, sp
 80177c8:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(HSPI_W5500, &b, 1, 0xFFFFFFFF);
 80177ca:	2301      	movs	r3, #1
void W5500_WriteByte(uint8_t b) {
 80177cc:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(HSPI_W5500, &b, 1, 0xFFFFFFFF);
 80177ce:	2201      	movs	r2, #1
 80177d0:	4802      	ldr	r0, [pc, #8]	; (80177dc <W5500_WriteByte+0x18>)
 80177d2:	425b      	negs	r3, r3
 80177d4:	f7f9 fa75 	bl	8010cc2 <HAL_SPI_Transmit>
}
 80177d8:	bd07      	pop	{r0, r1, r2, pc}
 80177da:	46c0      	nop			; (mov r8, r8)
 80177dc:	20000374 	.word	0x20000374

080177e0 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
	HAL_SPI_Receive(HSPI_W5500, buff, len, HAL_MAX_DELAY);
 80177e0:	2301      	movs	r3, #1
void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
 80177e2:	b510      	push	{r4, lr}
 80177e4:	000a      	movs	r2, r1
	HAL_SPI_Receive(HSPI_W5500, buff, len, HAL_MAX_DELAY);
 80177e6:	0001      	movs	r1, r0
 80177e8:	425b      	negs	r3, r3
 80177ea:	4802      	ldr	r0, [pc, #8]	; (80177f4 <W5500_ReadBuff+0x14>)
 80177ec:	f7f9 fc42 	bl	8011074 <HAL_SPI_Receive>
}
 80177f0:	bd10      	pop	{r4, pc}
 80177f2:	46c0      	nop			; (mov r8, r8)
 80177f4:	20000374 	.word	0x20000374

080177f8 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
	HAL_SPI_Transmit(HSPI_W5500, buff, len, HAL_MAX_DELAY);
 80177f8:	2301      	movs	r3, #1
void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
 80177fa:	b510      	push	{r4, lr}
 80177fc:	000a      	movs	r2, r1
	HAL_SPI_Transmit(HSPI_W5500, buff, len, HAL_MAX_DELAY);
 80177fe:	0001      	movs	r1, r0
 8017800:	425b      	negs	r3, r3
 8017802:	4802      	ldr	r0, [pc, #8]	; (801780c <W5500_WriteBuff+0x14>)
 8017804:	f7f9 fa5d 	bl	8010cc2 <HAL_SPI_Transmit>
}
 8017808:	bd10      	pop	{r4, pc}
 801780a:	46c0      	nop			; (mov r8, r8)
 801780c:	20000374 	.word	0x20000374

08017810 <io_getButton>:

static void io_TestOutput(void);


button io_getButton(void)
{
 8017810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017812:	0004      	movs	r4, r0
 8017814:	270a      	movs	r7, #10
    button lbutton;
    uint8_t i=0;
    for(i=0; i<10; i++)
    {
        HAL_Delay(5);
 8017816:	2005      	movs	r0, #5
 8017818:	f7f7 f9a6 	bl	800eb68 <HAL_Delay>
        lbutton.set   = (HAL_GPIO_ReadPin(BT_SET_GPIO_Port,BT_SET_Pin)>0?_OFF:_ON);
 801781c:	2140      	movs	r1, #64	; 0x40
 801781e:	4819      	ldr	r0, [pc, #100]	; (8017884 <io_getButton+0x74>)
 8017820:	f7f7 fc66 	bl	800f0f0 <HAL_GPIO_ReadPin>
        lbutton.reset = (HAL_GPIO_ReadPin(BT_RESET_GPIO_Port,BT_RESET_Pin)>0?_OFF:_ON);
 8017824:	2180      	movs	r1, #128	; 0x80
        lbutton.set   = (HAL_GPIO_ReadPin(BT_SET_GPIO_Port,BT_SET_Pin)>0?_OFF:_ON);
 8017826:	0006      	movs	r6, r0
        lbutton.reset = (HAL_GPIO_ReadPin(BT_RESET_GPIO_Port,BT_RESET_Pin)>0?_OFF:_ON);
 8017828:	0209      	lsls	r1, r1, #8
 801782a:	4817      	ldr	r0, [pc, #92]	; (8017888 <io_getButton+0x78>)
 801782c:	f7f7 fc60 	bl	800f0f0 <HAL_GPIO_ReadPin>
        lbutton.menu   = (HAL_GPIO_ReadPin(BT_MENU_GPIO_Port,BT_MENU_Pin)>0?_OFF:_ON);
 8017830:	2180      	movs	r1, #128	; 0x80
        lbutton.reset = (HAL_GPIO_ReadPin(BT_RESET_GPIO_Port,BT_RESET_Pin)>0?_OFF:_ON);
 8017832:	0005      	movs	r5, r0
        lbutton.menu   = (HAL_GPIO_ReadPin(BT_MENU_GPIO_Port,BT_MENU_Pin)>0?_OFF:_ON);
 8017834:	01c9      	lsls	r1, r1, #7
 8017836:	4814      	ldr	r0, [pc, #80]	; (8017888 <io_getButton+0x78>)
 8017838:	f7f7 fc5a 	bl	800f0f0 <HAL_GPIO_ReadPin>
        lbutton.next  = (HAL_GPIO_ReadPin(BT_NEXT_GPIO_Port,BT_NEXT_Pin)>0?_OFF:_ON);
 801783c:	2180      	movs	r1, #128	; 0x80
        lbutton.menu   = (HAL_GPIO_ReadPin(BT_MENU_GPIO_Port,BT_MENU_Pin)>0?_OFF:_ON);
 801783e:	9000      	str	r0, [sp, #0]
        lbutton.next  = (HAL_GPIO_ReadPin(BT_NEXT_GPIO_Port,BT_NEXT_Pin)>0?_OFF:_ON);
 8017840:	0189      	lsls	r1, r1, #6
 8017842:	4811      	ldr	r0, [pc, #68]	; (8017888 <io_getButton+0x78>)
 8017844:	f7f7 fc54 	bl	800f0f0 <HAL_GPIO_ReadPin>
        lbutton.prev  = (HAL_GPIO_ReadPin(BT_PREV_GPIO_Port,BT_PREV_Pin)>0?_OFF:_ON);
 8017848:	2180      	movs	r1, #128	; 0x80
    for(i=0; i<10; i++)
 801784a:	3f01      	subs	r7, #1
        lbutton.next  = (HAL_GPIO_ReadPin(BT_NEXT_GPIO_Port,BT_NEXT_Pin)>0?_OFF:_ON);
 801784c:	9001      	str	r0, [sp, #4]
        lbutton.prev  = (HAL_GPIO_ReadPin(BT_PREV_GPIO_Port,BT_PREV_Pin)>0?_OFF:_ON);
 801784e:	0149      	lsls	r1, r1, #5
 8017850:	480d      	ldr	r0, [pc, #52]	; (8017888 <io_getButton+0x78>)
    for(i=0; i<10; i++)
 8017852:	b2ff      	uxtb	r7, r7
        lbutton.prev  = (HAL_GPIO_ReadPin(BT_PREV_GPIO_Port,BT_PREV_Pin)>0?_OFF:_ON);
 8017854:	f7f7 fc4c 	bl	800f0f0 <HAL_GPIO_ReadPin>
    for(i=0; i<10; i++)
 8017858:	2f00      	cmp	r7, #0
 801785a:	d1dc      	bne.n	8017816 <io_getButton+0x6>
        lbutton.set   = (HAL_GPIO_ReadPin(BT_SET_GPIO_Port,BT_SET_Pin)>0?_OFF:_ON);
 801785c:	4273      	negs	r3, r6
 801785e:	415e      	adcs	r6, r3
        lbutton.reset = (HAL_GPIO_ReadPin(BT_RESET_GPIO_Port,BT_RESET_Pin)>0?_OFF:_ON);
 8017860:	426b      	negs	r3, r5
 8017862:	415d      	adcs	r5, r3
        lbutton.menu   = (HAL_GPIO_ReadPin(BT_MENU_GPIO_Port,BT_MENU_Pin)>0?_OFF:_ON);
 8017864:	9b00      	ldr	r3, [sp, #0]
    }
    return lbutton;
 8017866:	7026      	strb	r6, [r4, #0]
        lbutton.menu   = (HAL_GPIO_ReadPin(BT_MENU_GPIO_Port,BT_MENU_Pin)>0?_OFF:_ON);
 8017868:	425a      	negs	r2, r3
 801786a:	4153      	adcs	r3, r2
    return lbutton;
 801786c:	70a3      	strb	r3, [r4, #2]
        lbutton.next  = (HAL_GPIO_ReadPin(BT_NEXT_GPIO_Port,BT_NEXT_Pin)>0?_OFF:_ON);
 801786e:	9b01      	ldr	r3, [sp, #4]
    return lbutton;
 8017870:	7065      	strb	r5, [r4, #1]
        lbutton.next  = (HAL_GPIO_ReadPin(BT_NEXT_GPIO_Port,BT_NEXT_Pin)>0?_OFF:_ON);
 8017872:	425a      	negs	r2, r3
 8017874:	4153      	adcs	r3, r2
    return lbutton;
 8017876:	70e3      	strb	r3, [r4, #3]
        lbutton.prev  = (HAL_GPIO_ReadPin(BT_PREV_GPIO_Port,BT_PREV_Pin)>0?_OFF:_ON);
 8017878:	4243      	negs	r3, r0
 801787a:	4158      	adcs	r0, r3
    return lbutton;
 801787c:	7120      	strb	r0, [r4, #4]
}
 801787e:	0020      	movs	r0, r4
 8017880:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017882:	46c0      	nop			; (mov r8, r8)
 8017884:	48000800 	.word	0x48000800
 8017888:	48000c00 	.word	0x48000c00

0801788c <io_setOutput>:

void io_setOutput(output out, uint8_t *MBReg)
{
 801788c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801788e:	0c0c      	lsrs	r4, r1, #16
 8017890:	b085      	sub	sp, #20
 8017892:	9401      	str	r4, [sp, #4]
 8017894:	0014      	movs	r4, r2
	MBReg[1] = out.out1;
	MBReg[2] = out.out2;
	MBReg[3] = out.out3;
	MBReg[4] = out.out4;
	MBReg[5] = out.out5;
	MBReg[6] = out.out6;
 8017896:	9b01      	ldr	r3, [sp, #4]
{
 8017898:	0a07      	lsrs	r7, r0, #8
 801789a:	0c06      	lsrs	r6, r0, #16
 801789c:	0a0d      	lsrs	r5, r1, #8
	MBReg[0] = out.out0;
 801789e:	b2c2      	uxtb	r2, r0
	MBReg[4] = out.out4;
 80178a0:	7121      	strb	r1, [r4, #4]
	MBReg[3] = out.out3;
 80178a2:	0e00      	lsrs	r0, r0, #24
	MBReg[7] = out.out7;
 80178a4:	0e09      	lsrs	r1, r1, #24
 80178a6:	71e1      	strb	r1, [r4, #7]
	MBReg[0] = out.out0;
 80178a8:	7022      	strb	r2, [r4, #0]


	MBReg[0]>0?HAL_GPIO_WritePin(OUT0_GPIO_Port,OUT0_Pin,_ON):HAL_GPIO_WritePin(OUT0_GPIO_Port,OUT0_Pin,_OFF);
 80178aa:	2101      	movs	r1, #1
	MBReg[1] = out.out1;
 80178ac:	7067      	strb	r7, [r4, #1]
	MBReg[2] = out.out2;
 80178ae:	70a6      	strb	r6, [r4, #2]
	MBReg[3] = out.out3;
 80178b0:	70e0      	strb	r0, [r4, #3]
	MBReg[5] = out.out5;
 80178b2:	7165      	strb	r5, [r4, #5]
	MBReg[6] = out.out6;
 80178b4:	71a3      	strb	r3, [r4, #6]
	MBReg[0]>0?HAL_GPIO_WritePin(OUT0_GPIO_Port,OUT0_Pin,_ON):HAL_GPIO_WritePin(OUT0_GPIO_Port,OUT0_Pin,_OFF);
 80178b6:	2a00      	cmp	r2, #0
 80178b8:	d001      	beq.n	80178be <io_setOutput+0x32>
 80178ba:	2201      	movs	r2, #1
 80178bc:	0011      	movs	r1, r2
 80178be:	4820      	ldr	r0, [pc, #128]	; (8017940 <io_setOutput+0xb4>)
 80178c0:	f7f7 fc1c 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[1]>0?HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,_ON):HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,_OFF);
 80178c4:	7862      	ldrb	r2, [r4, #1]
 80178c6:	2a00      	cmp	r2, #0
 80178c8:	d000      	beq.n	80178cc <io_setOutput+0x40>
 80178ca:	2201      	movs	r2, #1
 80178cc:	2102      	movs	r1, #2
 80178ce:	481c      	ldr	r0, [pc, #112]	; (8017940 <io_setOutput+0xb4>)
 80178d0:	f7f7 fc14 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[2]>0?HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,_ON):HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,_OFF);
 80178d4:	78a2      	ldrb	r2, [r4, #2]
 80178d6:	2a00      	cmp	r2, #0
 80178d8:	d000      	beq.n	80178dc <io_setOutput+0x50>
 80178da:	2201      	movs	r2, #1
 80178dc:	2104      	movs	r1, #4
 80178de:	4818      	ldr	r0, [pc, #96]	; (8017940 <io_setOutput+0xb4>)
 80178e0:	f7f7 fc0c 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[3]>0?HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,_ON):HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,_OFF);
 80178e4:	78e2      	ldrb	r2, [r4, #3]
 80178e6:	2a00      	cmp	r2, #0
 80178e8:	d000      	beq.n	80178ec <io_setOutput+0x60>
 80178ea:	2201      	movs	r2, #1
 80178ec:	2180      	movs	r1, #128	; 0x80
 80178ee:	4815      	ldr	r0, [pc, #84]	; (8017944 <io_setOutput+0xb8>)
 80178f0:	f7f7 fc04 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[4]>0?HAL_GPIO_WritePin(OUT4_GPIO_Port,OUT4_Pin,_ON):HAL_GPIO_WritePin(OUT4_GPIO_Port,OUT4_Pin,_OFF);
 80178f4:	7922      	ldrb	r2, [r4, #4]
 80178f6:	2a00      	cmp	r2, #0
 80178f8:	d000      	beq.n	80178fc <io_setOutput+0x70>
 80178fa:	2201      	movs	r2, #1
 80178fc:	2180      	movs	r1, #128	; 0x80
 80178fe:	4811      	ldr	r0, [pc, #68]	; (8017944 <io_setOutput+0xb8>)
 8017900:	0049      	lsls	r1, r1, #1
 8017902:	f7f7 fbfb 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[5]>0?HAL_GPIO_WritePin(OUT5_GPIO_Port,OUT5_Pin,_ON):HAL_GPIO_WritePin(OUT5_GPIO_Port,OUT5_Pin,_OFF);
 8017906:	7962      	ldrb	r2, [r4, #5]
 8017908:	2a00      	cmp	r2, #0
 801790a:	d000      	beq.n	801790e <io_setOutput+0x82>
 801790c:	2201      	movs	r2, #1
 801790e:	2180      	movs	r1, #128	; 0x80
 8017910:	480c      	ldr	r0, [pc, #48]	; (8017944 <io_setOutput+0xb8>)
 8017912:	0149      	lsls	r1, r1, #5
 8017914:	f7f7 fbf2 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[6]>0?HAL_GPIO_WritePin(OUT6_GPIO_Port,OUT6_Pin,_ON):HAL_GPIO_WritePin(OUT6_GPIO_Port,OUT6_Pin,_OFF);
 8017918:	79a2      	ldrb	r2, [r4, #6]
 801791a:	2a00      	cmp	r2, #0
 801791c:	d000      	beq.n	8017920 <io_setOutput+0x94>
 801791e:	2201      	movs	r2, #1
 8017920:	2180      	movs	r1, #128	; 0x80
 8017922:	4808      	ldr	r0, [pc, #32]	; (8017944 <io_setOutput+0xb8>)
 8017924:	0189      	lsls	r1, r1, #6
 8017926:	f7f7 fbe9 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[7]>0?HAL_GPIO_WritePin(OUT7_GPIO_Port,OUT7_Pin,_ON):HAL_GPIO_WritePin(OUT7_GPIO_Port,OUT7_Pin,_OFF);
 801792a:	79e2      	ldrb	r2, [r4, #7]
 801792c:	2a00      	cmp	r2, #0
 801792e:	d000      	beq.n	8017932 <io_setOutput+0xa6>
 8017930:	2201      	movs	r2, #1
 8017932:	2180      	movs	r1, #128	; 0x80
 8017934:	4803      	ldr	r0, [pc, #12]	; (8017944 <io_setOutput+0xb8>)
 8017936:	01c9      	lsls	r1, r1, #7
 8017938:	f7f7 fbe0 	bl	800f0fc <HAL_GPIO_WritePin>
}
 801793c:	b005      	add	sp, #20
 801793e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017940:	48000400 	.word	0x48000400
 8017944:	48001000 	.word	0x48001000

08017948 <io_setLedStatus>:

void io_setLedStatus(ledStatus led, uint8_t *MBReg)
{
 8017948:	1c03      	adds	r3, r0, #0
 801794a:	b513      	push	{r0, r1, r4, lr}
 801794c:	0a02      	lsrs	r2, r0, #8
	MBReg[8] = led.led1;
 801794e:	b2db      	uxtb	r3, r3
{
 8017950:	0c00      	lsrs	r0, r0, #16
	MBReg[9] = led.led2;
 8017952:	724a      	strb	r2, [r1, #9]
{
 8017954:	000c      	movs	r4, r1
	MBReg[10] = led.led3;
//    led.led0>0?HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,_ON):HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,_OFF);
    MBReg[8]==0?HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,_ON):HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,_OFF);
 8017956:	2201      	movs	r2, #1
	MBReg[8] = led.led1;
 8017958:	720b      	strb	r3, [r1, #8]
	MBReg[10] = led.led3;
 801795a:	7288      	strb	r0, [r1, #10]
    MBReg[8]==0?HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,_ON):HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,_OFF);
 801795c:	2b00      	cmp	r3, #0
 801795e:	d000      	beq.n	8017962 <io_setLedStatus+0x1a>
 8017960:	2200      	movs	r2, #0
 8017962:	2180      	movs	r1, #128	; 0x80
 8017964:	480c      	ldr	r0, [pc, #48]	; (8017998 <io_setLedStatus+0x50>)
 8017966:	0049      	lsls	r1, r1, #1
 8017968:	f7f7 fbc8 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[9]==0?HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,_ON):HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,_OFF);
 801796c:	7a63      	ldrb	r3, [r4, #9]
 801796e:	2201      	movs	r2, #1
 8017970:	2b00      	cmp	r3, #0
 8017972:	d000      	beq.n	8017976 <io_setLedStatus+0x2e>
 8017974:	2200      	movs	r2, #0
 8017976:	2180      	movs	r1, #128	; 0x80
 8017978:	4807      	ldr	r0, [pc, #28]	; (8017998 <io_setLedStatus+0x50>)
 801797a:	0089      	lsls	r1, r1, #2
 801797c:	f7f7 fbbe 	bl	800f0fc <HAL_GPIO_WritePin>
    MBReg[10]==0?HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,_ON):HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,_OFF);
 8017980:	7aa3      	ldrb	r3, [r4, #10]
 8017982:	2201      	movs	r2, #1
 8017984:	2b00      	cmp	r3, #0
 8017986:	d000      	beq.n	801798a <io_setLedStatus+0x42>
 8017988:	2200      	movs	r2, #0
 801798a:	2180      	movs	r1, #128	; 0x80
 801798c:	2090      	movs	r0, #144	; 0x90
 801798e:	0049      	lsls	r1, r1, #1
 8017990:	05c0      	lsls	r0, r0, #23
 8017992:	f7f7 fbb3 	bl	800f0fc <HAL_GPIO_WritePin>
}
 8017996:	bd13      	pop	{r0, r1, r4, pc}
 8017998:	48000800 	.word	0x48000800

0801799c <rtc_SetDateTime>:
 *  Created on: Jun 27, 2023
 *      Author: Admin
 */
#include "rtc.h"

void rtc_SetDateTime(Time time) {
 801799c:	b510      	push	{r4, lr}
 801799e:	b088      	sub	sp, #32
 80179a0:	1c0c      	adds	r4, r1, #0
 80179a2:	0a0a      	lsrs	r2, r1, #8
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = time.hour; // set hours
 80179a4:	a903      	add	r1, sp, #12
	sTime.Minutes = time.minute; // set minutes
	sTime.Seconds = time.second; // set seconds
 80179a6:	708a      	strb	r2, [r1, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80179a8:	2200      	movs	r2, #0
	sTime.Minutes = time.minute; // set minutes
 80179aa:	704c      	strb	r4, [r1, #1]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80179ac:	4c0d      	ldr	r4, [pc, #52]	; (80179e4 <rtc_SetDateTime+0x48>)
void rtc_SetDateTime(Time time) {
 80179ae:	9000      	str	r0, [sp, #0]
	sTime.Hours = time.hour; // set hours
 80179b0:	0e00      	lsrs	r0, r0, #24
 80179b2:	7008      	strb	r0, [r1, #0]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80179b4:	0020      	movs	r0, r4
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80179b6:	60ca      	str	r2, [r1, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80179b8:	610a      	str	r2, [r1, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80179ba:	f7f8 fec9 	bl	8010750 <HAL_RTC_SetTime>
 80179be:	1e02      	subs	r2, r0, #0
 80179c0:	d10e      	bne.n	80179e0 <rtc_SetDateTime+0x44>
		DBG("set time ERROR");
		return;
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY; //weekday - don't care
 80179c2:	2301      	movs	r3, #1
 80179c4:	a902      	add	r1, sp, #8
 80179c6:	700b      	strb	r3, [r1, #0]
	sDate.Month = time.month; // month
 80179c8:	466b      	mov	r3, sp
 80179ca:	785b      	ldrb	r3, [r3, #1]
	sDate.Date = time.day; // date
	sDate.Year = time.year; // year
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80179cc:	0020      	movs	r0, r4
	sDate.Month = time.month; // month
 80179ce:	704b      	strb	r3, [r1, #1]
	sDate.Date = time.day; // date
 80179d0:	466b      	mov	r3, sp
 80179d2:	789b      	ldrb	r3, [r3, #2]
 80179d4:	708b      	strb	r3, [r1, #2]
	sDate.Year = time.year; // year
 80179d6:	466b      	mov	r3, sp
 80179d8:	781b      	ldrb	r3, [r3, #0]
 80179da:	70cb      	strb	r3, [r1, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80179dc:	f7f8 ff1a 	bl	8010814 <HAL_RTC_SetDate>
		DBG("set date ERROR");
		return;
	}

}
 80179e0:	b008      	add	sp, #32
 80179e2:	bd10      	pop	{r4, pc}
 80179e4:	20000354 	.word	0x20000354

080179e8 <rtc_Now>:

Time rtc_Now(void) {
 80179e8:	b570      	push	{r4, r5, r6, lr}
	Time time;
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80179ea:	4e0f      	ldr	r6, [pc, #60]	; (8017a28 <rtc_Now+0x40>)
Time rtc_Now(void) {
 80179ec:	b086      	sub	sp, #24
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80179ee:	ad01      	add	r5, sp, #4
Time rtc_Now(void) {
 80179f0:	0004      	movs	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80179f2:	0029      	movs	r1, r5
 80179f4:	2200      	movs	r2, #0
 80179f6:	0030      	movs	r0, r6
 80179f8:	f7f8 ff62 	bl	80108c0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80179fc:	4669      	mov	r1, sp
 80179fe:	2200      	movs	r2, #0
 8017a00:	0030      	movs	r0, r6
 8017a02:	f7f8 ff85 	bl	8010910 <HAL_RTC_GetDate>
	time.day = gDate.Date;
 8017a06:	466b      	mov	r3, sp
	time.month = gDate.Month;
	time.year = gDate.Year;

	time.hour = gTime.Hours;
	time.minute = gTime.Minutes;
 8017a08:	786a      	ldrb	r2, [r5, #1]
	time.day = gDate.Date;
 8017a0a:	7898      	ldrb	r0, [r3, #2]
	time.month = gDate.Month;
 8017a0c:	785e      	ldrb	r6, [r3, #1]
	time.hour = gTime.Hours;
 8017a0e:	7829      	ldrb	r1, [r5, #0]
	time.second = gTime.Seconds;
 8017a10:	78ab      	ldrb	r3, [r5, #2]
	return time;
 8017a12:	466d      	mov	r5, sp
 8017a14:	78ed      	ldrb	r5, [r5, #3]
 8017a16:	70a0      	strb	r0, [r4, #2]
}
 8017a18:	0020      	movs	r0, r4
	return time;
 8017a1a:	7025      	strb	r5, [r4, #0]
 8017a1c:	7066      	strb	r6, [r4, #1]
 8017a1e:	70e1      	strb	r1, [r4, #3]
 8017a20:	7122      	strb	r2, [r4, #4]
 8017a22:	7163      	strb	r3, [r4, #5]
}
 8017a24:	b006      	add	sp, #24
 8017a26:	bd70      	pop	{r4, r5, r6, pc}
 8017a28:	20000354 	.word	0x20000354

08017a2c <screen_DataMeasureType1>:

static dataMeasure capData(dataMeasure input, uint8_t isShowAB);


void screen_DataMeasureType1(dataMeasure data, uint8_t setCalib,
		uint8_t measIndex, uint8_t showHisFlag) {
 8017a2c:	b084      	sub	sp, #16
 8017a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a30:	0a04      	lsrs	r4, r0, #8
 8017a32:	b0a3      	sub	sp, #140	; 0x8c
 8017a34:	b2e4      	uxtb	r4, r4
 8017a36:	9028      	str	r0, [sp, #160]	; 0xa0
 8017a38:	0c05      	lsrs	r5, r0, #16
 8017a3a:	0006      	movs	r6, r0
 8017a3c:	0224      	lsls	r4, r4, #8
 8017a3e:	b2c0      	uxtb	r0, r0
 8017a40:	4320      	orrs	r0, r4
 8017a42:	0400      	lsls	r0, r0, #16
 8017a44:	1407      	asrs	r7, r0, #16
 8017a46:	4668      	mov	r0, sp
 8017a48:	9506      	str	r5, [sp, #24]
 8017a4a:	7e00      	ldrb	r0, [r0, #24]
 8017a4c:	0e36      	lsrs	r6, r6, #24
 8017a4e:	0236      	lsls	r6, r6, #8
 8017a50:	4306      	orrs	r6, r0
 8017a52:	0436      	lsls	r6, r6, #16
 8017a54:	1430      	asrs	r0, r6, #16
 8017a56:	9007      	str	r0, [sp, #28]
 8017a58:	2420      	movs	r4, #32
 8017a5a:	4668      	mov	r0, sp
 8017a5c:	0a0d      	lsrs	r5, r1, #8
 8017a5e:	9508      	str	r5, [sp, #32]
 8017a60:	1900      	adds	r0, r0, r4
 8017a62:	7800      	ldrb	r0, [r0, #0]
 8017a64:	0c0d      	lsrs	r5, r1, #16
 8017a66:	950c      	str	r5, [sp, #48]	; 0x30
 8017a68:	9129      	str	r1, [sp, #164]	; 0xa4
 8017a6a:	000d      	movs	r5, r1
 8017a6c:	0200      	lsls	r0, r0, #8
 8017a6e:	b2c9      	uxtb	r1, r1
 8017a70:	4301      	orrs	r1, r0
 8017a72:	0409      	lsls	r1, r1, #16
 8017a74:	1409      	asrs	r1, r1, #16
 8017a76:	9106      	str	r1, [sp, #24]
 8017a78:	2030      	movs	r0, #48	; 0x30
 8017a7a:	4669      	mov	r1, sp
 8017a7c:	1809      	adds	r1, r1, r0
 8017a7e:	7809      	ldrb	r1, [r1, #0]
 8017a80:	0e2d      	lsrs	r5, r5, #24
 8017a82:	022d      	lsls	r5, r5, #8
 8017a84:	430d      	orrs	r5, r1
 8017a86:	042d      	lsls	r5, r5, #16
 8017a88:	1429      	asrs	r1, r5, #16
 8017a8a:	9108      	str	r1, [sp, #32]
 8017a8c:	4669      	mov	r1, sp
 8017a8e:	922a      	str	r2, [sp, #168]	; 0xa8
 8017a90:	3004      	adds	r0, #4
 8017a92:	0a1a      	lsrs	r2, r3, #8
 8017a94:	920d      	str	r2, [sp, #52]	; 0x34
 8017a96:	1809      	adds	r1, r1, r0
 8017a98:	7809      	ldrb	r1, [r1, #0]
 8017a9a:	0c1a      	lsrs	r2, r3, #16
 8017a9c:	910f      	str	r1, [sp, #60]	; 0x3c
 8017a9e:	4669      	mov	r1, sp
 8017aa0:	920e      	str	r2, [sp, #56]	; 0x38
 8017aa2:	aa2d      	add	r2, sp, #180	; 0xb4
 8017aa4:	7812      	ldrb	r2, [r2, #0]
 8017aa6:	3004      	adds	r0, #4
 8017aa8:	920a      	str	r2, [sp, #40]	; 0x28
 8017aaa:	aa2e      	add	r2, sp, #184	; 0xb8
 8017aac:	7812      	ldrb	r2, [r2, #0]
 8017aae:	1809      	adds	r1, r1, r0
 8017ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8017ab2:	aa2f      	add	r2, sp, #188	; 0xbc
 8017ab4:	7812      	ldrb	r2, [r2, #0]
 8017ab6:	7809      	ldrb	r1, [r1, #0]
 8017ab8:	932b      	str	r3, [sp, #172]	; 0xac
 8017aba:	b2de      	uxtb	r6, r3
 8017abc:	0e1b      	lsrs	r3, r3, #24
 8017abe:	920b      	str	r2, [sp, #44]	; 0x2c
 8017ac0:	910e      	str	r1, [sp, #56]	; 0x38
 8017ac2:	aa28      	add	r2, sp, #160	; 0xa0
 8017ac4:	930d      	str	r3, [sp, #52]	; 0x34
 8017ac6:	7c13      	ldrb	r3, [r2, #16]
 8017ac8:	930c      	str	r3, [sp, #48]	; 0x30
 8017aca:	7c95      	ldrb	r5, [r2, #18]
	LCD_Clear();
 8017acc:	f7fc fc88 	bl	80143e0 <LCD_Clear>
	screenData screenBuffer;

	if (!showHisFlag)
 8017ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d000      	beq.n	8017ad8 <screen_DataMeasureType1+0xac>
 8017ad6:	e0db      	b.n	8017c90 <screen_DataMeasureType1+0x264>
		snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "MEASUREMENT %01d",
 8017ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ada:	4ac7      	ldr	r2, [pc, #796]	; (8017df8 <screen_DataMeasureType1+0x3cc>)
				measIndex);
	else
		snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "MEAS.%01d HISTORY",
 8017adc:	2111      	movs	r1, #17
 8017ade:	a811      	add	r0, sp, #68	; 0x44
 8017ae0:	f001 f934 	bl	8018d4c <sniprintf>
				measIndex);
	if (CALIBSET == setCalib) {
 8017ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d000      	beq.n	8017aec <screen_DataMeasureType1+0xc0>
 8017aea:	e167      	b.n	8017dbc <screen_DataMeasureType1+0x390>
	LCD_Puts(0, 3, screenBuffer.line4);
}

static dataMeasure capData(dataMeasure input, uint8_t isShowAB) {
	if (!isShowAB) {
		input.coordinates.X =
 8017aec:	21fa      	movs	r1, #250	; 0xfa
 8017aee:	1c3c      	adds	r4, r7, #0
 8017af0:	0089      	lsls	r1, r1, #2
 8017af2:	428f      	cmp	r7, r1
 8017af4:	db01      	blt.n	8017afa <screen_DataMeasureType1+0xce>
 8017af6:	4bc1      	ldr	r3, [pc, #772]	; (8017dfc <screen_DataMeasureType1+0x3d0>)
 8017af8:	881c      	ldrh	r4, [r3, #0]
 8017afa:	48c1      	ldr	r0, [pc, #772]	; (8017e00 <screen_DataMeasureType1+0x3d4>)
 8017afc:	b223      	sxth	r3, r4
 8017afe:	0002      	movs	r2, r0
 8017b00:	4283      	cmp	r3, r0
 8017b02:	da00      	bge.n	8017b06 <screen_DataMeasureType1+0xda>
 8017b04:	1c04      	adds	r4, r0, #0
				(input.coordinates.X < -999) ? -999 :
				(input.coordinates.X > 999) ? 999 : input.coordinates.X;
		input.coordinates.Y =
 8017b06:	466b      	mov	r3, sp
 8017b08:	9807      	ldr	r0, [sp, #28]
 8017b0a:	8b9b      	ldrh	r3, [r3, #28]
 8017b0c:	b224      	sxth	r4, r4
 8017b0e:	4288      	cmp	r0, r1
 8017b10:	db01      	blt.n	8017b16 <screen_DataMeasureType1+0xea>
 8017b12:	4bba      	ldr	r3, [pc, #744]	; (8017dfc <screen_DataMeasureType1+0x3d0>)
 8017b14:	881b      	ldrh	r3, [r3, #0]
 8017b16:	b219      	sxth	r1, r3
 8017b18:	4291      	cmp	r1, r2
 8017b1a:	da01      	bge.n	8017b20 <screen_DataMeasureType1+0xf4>
 8017b1c:	4bb9      	ldr	r3, [pc, #740]	; (8017e04 <screen_DataMeasureType1+0x3d8>)
 8017b1e:	881b      	ldrh	r3, [r3, #0]
 8017b20:	b21b      	sxth	r3, r3
				(input.coordinates.Y < -999) ? -999 :
				(input.coordinates.Y > 999) ? 999 : input.coordinates.Y;
		input.coordinates.Z =
 8017b22:	21fa      	movs	r1, #250	; 0xfa
 8017b24:	9309      	str	r3, [sp, #36]	; 0x24
 8017b26:	466b      	mov	r3, sp
 8017b28:	9806      	ldr	r0, [sp, #24]
 8017b2a:	8b1b      	ldrh	r3, [r3, #24]
 8017b2c:	0089      	lsls	r1, r1, #2
 8017b2e:	4288      	cmp	r0, r1
 8017b30:	db01      	blt.n	8017b36 <screen_DataMeasureType1+0x10a>
 8017b32:	4bb2      	ldr	r3, [pc, #712]	; (8017dfc <screen_DataMeasureType1+0x3d0>)
 8017b34:	881b      	ldrh	r3, [r3, #0]
 8017b36:	b218      	sxth	r0, r3
 8017b38:	4290      	cmp	r0, r2
 8017b3a:	da01      	bge.n	8017b40 <screen_DataMeasureType1+0x114>
 8017b3c:	4bb1      	ldr	r3, [pc, #708]	; (8017e04 <screen_DataMeasureType1+0x3d8>)
 8017b3e:	881b      	ldrh	r3, [r3, #0]
 8017b40:	b21b      	sxth	r3, r3
 8017b42:	930a      	str	r3, [sp, #40]	; 0x28
				(input.coordinates.Z < -999) ? -999 :
				(input.coordinates.Z > 999) ? 999 : input.coordinates.Z;
		input.coordinates.R =
 8017b44:	466b      	mov	r3, sp
 8017b46:	9808      	ldr	r0, [sp, #32]
 8017b48:	8c1b      	ldrh	r3, [r3, #32]
 8017b4a:	4288      	cmp	r0, r1
 8017b4c:	db01      	blt.n	8017b52 <screen_DataMeasureType1+0x126>
 8017b4e:	4bab      	ldr	r3, [pc, #684]	; (8017dfc <screen_DataMeasureType1+0x3d0>)
 8017b50:	881b      	ldrh	r3, [r3, #0]
 8017b52:	b219      	sxth	r1, r3
 8017b54:	4291      	cmp	r1, r2
 8017b56:	da01      	bge.n	8017b5c <screen_DataMeasureType1+0x130>
 8017b58:	4baa      	ldr	r3, [pc, #680]	; (8017e04 <screen_DataMeasureType1+0x3d8>)
 8017b5a:	881b      	ldrh	r3, [r3, #0]
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1,
 8017b5c:	202d      	movs	r0, #45	; 0x2d
 8017b5e:	b21b      	sxth	r3, r3
 8017b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b64:	2111      	movs	r1, #17
 8017b66:	9303      	str	r3, [sp, #12]
 8017b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b6a:	4aa7      	ldr	r2, [pc, #668]	; (8017e08 <screen_DataMeasureType1+0x3dc>)
 8017b6c:	9302      	str	r3, [sp, #8]
 8017b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b70:	9301      	str	r3, [sp, #4]
 8017b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b74:	9300      	str	r3, [sp, #0]
 8017b76:	0033      	movs	r3, r6
 8017b78:	ae0a      	add	r6, sp, #40	; 0x28
 8017b7a:	1980      	adds	r0, r0, r6
 8017b7c:	f001 f8e6 	bl	8018d4c <sniprintf>
		if (MEASUREALL == data.mode) {
 8017b80:	2d04      	cmp	r5, #4
 8017b82:	d000      	beq.n	8017b86 <screen_DataMeasureType1+0x15a>
 8017b84:	e087      	b.n	8017c96 <screen_DataMeasureType1+0x26a>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017b86:	4ea1      	ldr	r6, [pc, #644]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017b88:	2f00      	cmp	r7, #0
 8017b8a:	db00      	blt.n	8017b8e <screen_DataMeasureType1+0x162>
 8017b8c:	4ea0      	ldr	r6, [pc, #640]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.X) / 100), abs(data.coordinates.X) % 100,
 8017b8e:	17e3      	asrs	r3, r4, #31
 8017b90:	18e4      	adds	r4, r4, r3
 8017b92:	405c      	eors	r4, r3
 8017b94:	b2a4      	uxth	r4, r4
 8017b96:	2164      	movs	r1, #100	; 0x64
 8017b98:	0020      	movs	r0, r4
 8017b9a:	f7ef ffef 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017b9e:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.X) / 100), abs(data.coordinates.X) % 100,
 8017ba0:	900c      	str	r0, [sp, #48]	; 0x30
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017ba2:	0020      	movs	r0, r4
 8017ba4:	f7f0 f8d0 	bl	8007d48 <__aeabi_idivmod>
 8017ba8:	9b07      	ldr	r3, [sp, #28]
 8017baa:	000d      	movs	r5, r1
 8017bac:	4f97      	ldr	r7, [pc, #604]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	db00      	blt.n	8017bb4 <screen_DataMeasureType1+0x188>
 8017bb2:	4f97      	ldr	r7, [pc, #604]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017bb6:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017bb8:	17da      	asrs	r2, r3, #31
 8017bba:	189c      	adds	r4, r3, r2
 8017bbc:	4054      	eors	r4, r2
 8017bbe:	b2a4      	uxth	r4, r4
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017bc0:	0020      	movs	r0, r4
 8017bc2:	f7f0 f8c1 	bl	8007d48 <__aeabi_idivmod>
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017bc6:	0020      	movs	r0, r4
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017bc8:	9104      	str	r1, [sp, #16]
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017bca:	2164      	movs	r1, #100	; 0x64
 8017bcc:	f7ef ffd6 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017bd0:	9003      	str	r0, [sp, #12]
 8017bd2:	203e      	movs	r0, #62	; 0x3e
 8017bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017bd6:	ac0a      	add	r4, sp, #40	; 0x28
 8017bd8:	9300      	str	r3, [sp, #0]
 8017bda:	2111      	movs	r1, #17
 8017bdc:	0033      	movs	r3, r6
 8017bde:	4a8d      	ldr	r2, [pc, #564]	; (8017e14 <screen_DataMeasureType1+0x3e8>)
 8017be0:	9702      	str	r7, [sp, #8]
 8017be2:	9501      	str	r5, [sp, #4]
 8017be4:	1900      	adds	r0, r0, r4
 8017be6:	f001 f8b1 	bl	8018d4c <sniprintf>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017bea:	9b06      	ldr	r3, [sp, #24]
 8017bec:	4e87      	ldr	r6, [pc, #540]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	db00      	blt.n	8017bf4 <screen_DataMeasureType1+0x1c8>
 8017bf2:	4e87      	ldr	r6, [pc, #540]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.Z) / 100), abs(data.coordinates.Z) % 100,
 8017bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bf6:	2164      	movs	r1, #100	; 0x64
 8017bf8:	17da      	asrs	r2, r3, #31
 8017bfa:	189c      	adds	r4, r3, r2
 8017bfc:	4054      	eors	r4, r2
 8017bfe:	b2a4      	uxth	r4, r4
 8017c00:	0020      	movs	r0, r4
 8017c02:	f7ef ffbb 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017c06:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.Z) / 100), abs(data.coordinates.Z) % 100,
 8017c08:	9006      	str	r0, [sp, #24]
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017c0a:	0020      	movs	r0, r4
 8017c0c:	f7f0 f89c 	bl	8007d48 <__aeabi_idivmod>
 8017c10:	9b08      	ldr	r3, [sp, #32]
 8017c12:	000d      	movs	r5, r1
 8017c14:	4f7d      	ldr	r7, [pc, #500]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	db00      	blt.n	8017c1c <screen_DataMeasureType1+0x1f0>
 8017c1a:	4f7d      	ldr	r7, [pc, #500]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017c1e:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017c20:	17da      	asrs	r2, r3, #31
 8017c22:	189c      	adds	r4, r3, r2
 8017c24:	4054      	eors	r4, r2
 8017c26:	b2a4      	uxth	r4, r4
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017c28:	0020      	movs	r0, r4
 8017c2a:	f7f0 f88d 	bl	8007d48 <__aeabi_idivmod>
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017c2e:	0020      	movs	r0, r4
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017c30:	9104      	str	r1, [sp, #16]
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017c32:	2164      	movs	r1, #100	; 0x64
 8017c34:	f7ef ffa2 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017c38:	9003      	str	r0, [sp, #12]
 8017c3a:	204f      	movs	r0, #79	; 0x4f
 8017c3c:	9b06      	ldr	r3, [sp, #24]
 8017c3e:	ac0a      	add	r4, sp, #40	; 0x28
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	2111      	movs	r1, #17
 8017c44:	0033      	movs	r3, r6
 8017c46:	4a74      	ldr	r2, [pc, #464]	; (8017e18 <screen_DataMeasureType1+0x3ec>)
 8017c48:	9702      	str	r7, [sp, #8]
 8017c4a:	9501      	str	r5, [sp, #4]
 8017c4c:	1900      	adds	r0, r0, r4
 8017c4e:	f001 f87d 	bl	8018d4c <sniprintf>
	LCD_Puts(0, 0, screenBuffer.line1);
 8017c52:	2100      	movs	r1, #0
 8017c54:	aa11      	add	r2, sp, #68	; 0x44
 8017c56:	0008      	movs	r0, r1
 8017c58:	f7fc fbca 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 8017c5c:	222d      	movs	r2, #45	; 0x2d
 8017c5e:	ab0a      	add	r3, sp, #40	; 0x28
 8017c60:	18d2      	adds	r2, r2, r3
 8017c62:	2101      	movs	r1, #1
 8017c64:	2000      	movs	r0, #0
 8017c66:	f7fc fbc3 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 2, screenBuffer.line3);
 8017c6a:	223e      	movs	r2, #62	; 0x3e
 8017c6c:	ab0a      	add	r3, sp, #40	; 0x28
 8017c6e:	18d2      	adds	r2, r2, r3
 8017c70:	2102      	movs	r1, #2
 8017c72:	2000      	movs	r0, #0
 8017c74:	f7fc fbbc 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 3, screenBuffer.line4);
 8017c78:	224f      	movs	r2, #79	; 0x4f
 8017c7a:	ab0a      	add	r3, sp, #40	; 0x28
 8017c7c:	2103      	movs	r1, #3
 8017c7e:	2000      	movs	r0, #0
 8017c80:	18d2      	adds	r2, r2, r3
 8017c82:	f7fc fbb5 	bl	80143f0 <LCD_Puts>
}
 8017c86:	b023      	add	sp, #140	; 0x8c
 8017c88:	bcf0      	pop	{r4, r5, r6, r7}
 8017c8a:	bc08      	pop	{r3}
 8017c8c:	b004      	add	sp, #16
 8017c8e:	4718      	bx	r3
		snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "MEAS.%01d HISTORY",
 8017c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c92:	4a62      	ldr	r2, [pc, #392]	; (8017e1c <screen_DataMeasureType1+0x3f0>)
 8017c94:	e722      	b.n	8017adc <screen_DataMeasureType1+0xb0>
		} else if (ZERROR1 == data.mode) {
 8017c96:	2d02      	cmp	r5, #2
 8017c98:	d10e      	bne.n	8017cb8 <screen_DataMeasureType1+0x28c>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "X=.....  Y=.....");
 8017c9a:	233e      	movs	r3, #62	; 0x3e
 8017c9c:	aa0a      	add	r2, sp, #40	; 0x28
 8017c9e:	189b      	adds	r3, r3, r2
 8017ca0:	495f      	ldr	r1, [pc, #380]	; (8017e20 <screen_DataMeasureType1+0x3f4>)
 8017ca2:	0018      	movs	r0, r3
 8017ca4:	f001 f91c 	bl	8018ee0 <strcpy>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "Z=.....  R=.....");
 8017ca8:	495e      	ldr	r1, [pc, #376]	; (8017e24 <screen_DataMeasureType1+0x3f8>)
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "              ");
 8017caa:	234f      	movs	r3, #79	; 0x4f
 8017cac:	aa0a      	add	r2, sp, #40	; 0x28
 8017cae:	189b      	adds	r3, r3, r2
 8017cb0:	0018      	movs	r0, r3
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "Z=.....  R=.....");
 8017cb2:	f001 f915 	bl	8018ee0 <strcpy>
 8017cb6:	e7cc      	b.n	8017c52 <screen_DataMeasureType1+0x226>
		} else if (ZERROR2 == data.mode) {
 8017cb8:	2d03      	cmp	r5, #3
 8017cba:	d14e      	bne.n	8017d5a <screen_DataMeasureType1+0x32e>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017cbc:	4e53      	ldr	r6, [pc, #332]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017cbe:	2f00      	cmp	r7, #0
 8017cc0:	db00      	blt.n	8017cc4 <screen_DataMeasureType1+0x298>
 8017cc2:	4e53      	ldr	r6, [pc, #332]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.X) / 100), abs(data.coordinates.X) % 100,
 8017cc4:	17e3      	asrs	r3, r4, #31
 8017cc6:	18e4      	adds	r4, r4, r3
 8017cc8:	405c      	eors	r4, r3
 8017cca:	b2a4      	uxth	r4, r4
 8017ccc:	2164      	movs	r1, #100	; 0x64
 8017cce:	0020      	movs	r0, r4
 8017cd0:	f7ef ff54 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017cd4:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.X) / 100), abs(data.coordinates.X) % 100,
 8017cd6:	9006      	str	r0, [sp, #24]
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017cd8:	0020      	movs	r0, r4
 8017cda:	f7f0 f835 	bl	8007d48 <__aeabi_idivmod>
 8017cde:	9b07      	ldr	r3, [sp, #28]
 8017ce0:	000d      	movs	r5, r1
 8017ce2:	4f4a      	ldr	r7, [pc, #296]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	db00      	blt.n	8017cea <screen_DataMeasureType1+0x2be>
 8017ce8:	4f49      	ldr	r7, [pc, #292]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017cec:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017cee:	17da      	asrs	r2, r3, #31
 8017cf0:	189c      	adds	r4, r3, r2
 8017cf2:	4054      	eors	r4, r2
 8017cf4:	b2a4      	uxth	r4, r4
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017cf6:	0020      	movs	r0, r4
 8017cf8:	f7f0 f826 	bl	8007d48 <__aeabi_idivmod>
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017cfc:	0020      	movs	r0, r4
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017cfe:	9104      	str	r1, [sp, #16]
					(int16_t)(abs(data.coordinates.Y) / 100), abs(data.coordinates.Y) % 100);
 8017d00:	2164      	movs	r1, #100	; 0x64
 8017d02:	f7ef ff3b 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1,
 8017d06:	9003      	str	r0, [sp, #12]
 8017d08:	203e      	movs	r0, #62	; 0x3e
 8017d0a:	9b06      	ldr	r3, [sp, #24]
 8017d0c:	ac0a      	add	r4, sp, #40	; 0x28
 8017d0e:	9501      	str	r5, [sp, #4]
 8017d10:	9300      	str	r3, [sp, #0]
 8017d12:	2111      	movs	r1, #17
 8017d14:	0033      	movs	r3, r6
 8017d16:	4a3f      	ldr	r2, [pc, #252]	; (8017e14 <screen_DataMeasureType1+0x3e8>)
 8017d18:	9702      	str	r7, [sp, #8]
 8017d1a:	1900      	adds	r0, r0, r4
 8017d1c:	f001 f816 	bl	8018d4c <sniprintf>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d20:	9b08      	ldr	r3, [sp, #32]
 8017d22:	4d3a      	ldr	r5, [pc, #232]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	db00      	blt.n	8017d2a <screen_DataMeasureType1+0x2fe>
 8017d28:	4d39      	ldr	r5, [pc, #228]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d2c:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017d2e:	17da      	asrs	r2, r3, #31
 8017d30:	189c      	adds	r4, r3, r2
 8017d32:	4054      	eors	r4, r2
 8017d34:	b2a4      	uxth	r4, r4
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d36:	0020      	movs	r0, r4
 8017d38:	f7f0 f806 	bl	8007d48 <__aeabi_idivmod>
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017d3c:	0020      	movs	r0, r4
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d3e:	9101      	str	r1, [sp, #4]
					(int16_t)(abs(data.coordinates.R) / 100), abs(data.coordinates.R) % 100);
 8017d40:	2164      	movs	r1, #100	; 0x64
 8017d42:	f7ef ff1b 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d46:	002b      	movs	r3, r5
 8017d48:	4a37      	ldr	r2, [pc, #220]	; (8017e28 <screen_DataMeasureType1+0x3fc>)
 8017d4a:	9000      	str	r0, [sp, #0]
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d4c:	204f      	movs	r0, #79	; 0x4f
 8017d4e:	ac0a      	add	r4, sp, #40	; 0x28
 8017d50:	2111      	movs	r1, #17
 8017d52:	1900      	adds	r0, r0, r4
 8017d54:	f000 fffa 	bl	8018d4c <sniprintf>
			DBG("LCD - ZONLY\n");
 8017d58:	e77b      	b.n	8017c52 <screen_DataMeasureType1+0x226>
		} else if (ZONLY == data.mode) {
 8017d5a:	2d01      	cmp	r5, #1
 8017d5c:	d11d      	bne.n	8017d9a <screen_DataMeasureType1+0x36e>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "X=.....  Y=.....");
 8017d5e:	233e      	movs	r3, #62	; 0x3e
 8017d60:	aa0a      	add	r2, sp, #40	; 0x28
 8017d62:	189b      	adds	r3, r3, r2
 8017d64:	0018      	movs	r0, r3
 8017d66:	492e      	ldr	r1, [pc, #184]	; (8017e20 <screen_DataMeasureType1+0x3f4>)
 8017d68:	f001 f8ba 	bl	8018ee0 <strcpy>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d6c:	9b06      	ldr	r3, [sp, #24]
 8017d6e:	4d27      	ldr	r5, [pc, #156]	; (8017e0c <screen_DataMeasureType1+0x3e0>)
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	db00      	blt.n	8017d76 <screen_DataMeasureType1+0x34a>
 8017d74:	4d26      	ldr	r5, [pc, #152]	; (8017e10 <screen_DataMeasureType1+0x3e4>)
					(int16_t)(abs(data.coordinates.Z) / 100), abs(data.coordinates.Z) % 100);
 8017d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d78:	2164      	movs	r1, #100	; 0x64
					(int16_t)(abs(data.coordinates.Z) / 100), abs(data.coordinates.Z) % 100);
 8017d7a:	17da      	asrs	r2, r3, #31
 8017d7c:	189c      	adds	r4, r3, r2
 8017d7e:	4054      	eors	r4, r2
 8017d80:	b2a4      	uxth	r4, r4
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d82:	0020      	movs	r0, r4
 8017d84:	f7ef ffe0 	bl	8007d48 <__aeabi_idivmod>
					(int16_t)(abs(data.coordinates.Z) / 100), abs(data.coordinates.Z) % 100);
 8017d88:	0020      	movs	r0, r4
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d8a:	9101      	str	r1, [sp, #4]
					(int16_t)(abs(data.coordinates.Z) / 100), abs(data.coordinates.Z) % 100);
 8017d8c:	2164      	movs	r1, #100	; 0x64
 8017d8e:	f7ef fef5 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 8017d92:	002b      	movs	r3, r5
 8017d94:	4a25      	ldr	r2, [pc, #148]	; (8017e2c <screen_DataMeasureType1+0x400>)
 8017d96:	9000      	str	r0, [sp, #0]
 8017d98:	e7d8      	b.n	8017d4c <screen_DataMeasureType1+0x320>
			snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "              ");
 8017d9a:	232d      	movs	r3, #45	; 0x2d
 8017d9c:	4c24      	ldr	r4, [pc, #144]	; (8017e30 <screen_DataMeasureType1+0x404>)
 8017d9e:	aa0a      	add	r2, sp, #40	; 0x28
 8017da0:	189b      	adds	r3, r3, r2
 8017da2:	0021      	movs	r1, r4
 8017da4:	0018      	movs	r0, r3
 8017da6:	f001 f89b 	bl	8018ee0 <strcpy>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   No Data...!");
 8017daa:	233e      	movs	r3, #62	; 0x3e
 8017dac:	aa0a      	add	r2, sp, #40	; 0x28
 8017dae:	189b      	adds	r3, r3, r2
 8017db0:	4920      	ldr	r1, [pc, #128]	; (8017e34 <screen_DataMeasureType1+0x408>)
 8017db2:	0018      	movs	r0, r3
 8017db4:	f001 f894 	bl	8018ee0 <strcpy>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "              ");
 8017db8:	0021      	movs	r1, r4
 8017dba:	e776      	b.n	8017caa <screen_DataMeasureType1+0x27e>
		data.time = rtc_Now();
 8017dbc:	a82b      	add	r0, sp, #172	; 0xac
 8017dbe:	f7ff fe13 	bl	80179e8 <rtc_Now>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1,
 8017dc2:	202d      	movs	r0, #45	; 0x2d
		data.time = rtc_Now();
 8017dc4:	aa28      	add	r2, sp, #160	; 0xa0
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1,
 8017dc6:	7c11      	ldrb	r1, [r2, #16]
 8017dc8:	7b13      	ldrb	r3, [r2, #12]
 8017dca:	9103      	str	r1, [sp, #12]
 8017dcc:	7bd1      	ldrb	r1, [r2, #15]
 8017dce:	ac0a      	add	r4, sp, #40	; 0x28
 8017dd0:	9102      	str	r1, [sp, #8]
 8017dd2:	7b91      	ldrb	r1, [r2, #14]
 8017dd4:	1900      	adds	r0, r0, r4
 8017dd6:	9101      	str	r1, [sp, #4]
 8017dd8:	7b52      	ldrb	r2, [r2, #13]
 8017dda:	2111      	movs	r1, #17
 8017ddc:	9200      	str	r2, [sp, #0]
 8017dde:	4a0a      	ldr	r2, [pc, #40]	; (8017e08 <screen_DataMeasureType1+0x3dc>)
 8017de0:	f000 ffb4 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "X=.....  Y=.....");
 8017de4:	203e      	movs	r0, #62	; 0x3e
 8017de6:	490e      	ldr	r1, [pc, #56]	; (8017e20 <screen_DataMeasureType1+0x3f4>)
 8017de8:	1900      	adds	r0, r0, r4
 8017dea:	f001 f879 	bl	8018ee0 <strcpy>
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "Z=.....  R=.....");
 8017dee:	204f      	movs	r0, #79	; 0x4f
 8017df0:	490c      	ldr	r1, [pc, #48]	; (8017e24 <screen_DataMeasureType1+0x3f8>)
 8017df2:	1900      	adds	r0, r0, r4
 8017df4:	e75d      	b.n	8017cb2 <screen_DataMeasureType1+0x286>
 8017df6:	46c0      	nop			; (mov r8, r8)
 8017df8:	0801c49d 	.word	0x0801c49d
 8017dfc:	0801c574 	.word	0x0801c574
 8017e00:	fffffc19 	.word	0xfffffc19
 8017e04:	0801c576 	.word	0x0801c576
 8017e08:	0801c4c0 	.word	0x0801c4c0
 8017e0c:	0801c90d 	.word	0x0801c90d
 8017e10:	0801c49b 	.word	0x0801c49b
 8017e14:	0801c4db 	.word	0x0801c4db
 8017e18:	0801c4f8 	.word	0x0801c4f8
 8017e1c:	0801c4ae 	.word	0x0801c4ae
 8017e20:	0801c515 	.word	0x0801c515
 8017e24:	0801c526 	.word	0x0801c526
 8017e28:	0801c537 	.word	0x0801c537
 8017e2c:	0801c54e 	.word	0x0801c54e
 8017e30:	0801c5b2 	.word	0x0801c5b2
 8017e34:	0801c565 	.word	0x0801c565

08017e38 <screen_DataMeasureType2>:
		uint8_t measIndex, uint8_t showHisFlag) {
 8017e38:	b084      	sub	sp, #16
 8017e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e3c:	b08b      	sub	sp, #44	; 0x2c
 8017e3e:	9010      	str	r0, [sp, #64]	; 0x40
 8017e40:	a815      	add	r0, sp, #84	; 0x54
 8017e42:	9111      	str	r1, [sp, #68]	; 0x44
 8017e44:	9212      	str	r2, [sp, #72]	; 0x48
 8017e46:	7807      	ldrb	r7, [r0, #0]
 8017e48:	0a19      	lsrs	r1, r3, #8
 8017e4a:	0c1a      	lsrs	r2, r3, #16
 8017e4c:	a816      	add	r0, sp, #88	; 0x58
 8017e4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017e50:	7804      	ldrb	r4, [r0, #0]
 8017e52:	b2de      	uxtb	r6, r3
 8017e54:	b2d2      	uxtb	r2, r2
 8017e56:	a817      	add	r0, sp, #92	; 0x5c
 8017e58:	b2c9      	uxtb	r1, r1
 8017e5a:	0e1b      	lsrs	r3, r3, #24
 8017e5c:	9207      	str	r2, [sp, #28]
 8017e5e:	9605      	str	r6, [sp, #20]
 8017e60:	9106      	str	r1, [sp, #24]
 8017e62:	9308      	str	r3, [sp, #32]
 8017e64:	7805      	ldrb	r5, [r0, #0]
 8017e66:	a810      	add	r0, sp, #64	; 0x40
 8017e68:	7c03      	ldrb	r3, [r0, #16]
 8017e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017e6c:	7c86      	ldrb	r6, [r0, #18]
	LCD_Clear();
 8017e6e:	f7fc fab7 	bl	80143e0 <LCD_Clear>
		snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "MEASUREMENT %01d",
 8017e72:	0023      	movs	r3, r4
 8017e74:	4a66      	ldr	r2, [pc, #408]	; (8018010 <screen_DataMeasureType2+0x1d8>)
	if (!showHisFlag)
 8017e76:	2d00      	cmp	r5, #0
 8017e78:	d000      	beq.n	8017e7c <screen_DataMeasureType2+0x44>
		snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "MEAS.%01d HISTORY",
 8017e7a:	4a66      	ldr	r2, [pc, #408]	; (8018014 <screen_DataMeasureType2+0x1dc>)
 8017e7c:	2111      	movs	r1, #17
 8017e7e:	4866      	ldr	r0, [pc, #408]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017e80:	f000 ff64 	bl	8018d4c <sniprintf>
	if (CALIBSET == setCalib) {
 8017e84:	4c65      	ldr	r4, [pc, #404]	; (801801c <screen_DataMeasureType2+0x1e4>)
 8017e86:	2f00      	cmp	r7, #0
 8017e88:	d000      	beq.n	8017e8c <screen_DataMeasureType2+0x54>
 8017e8a:	e0a4      	b.n	8017fd6 <screen_DataMeasureType2+0x19e>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1,
 8017e8c:	4f62      	ldr	r7, [pc, #392]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e90:	003d      	movs	r5, r7
 8017e92:	9303      	str	r3, [sp, #12]
 8017e94:	9b08      	ldr	r3, [sp, #32]
 8017e96:	3511      	adds	r5, #17
 8017e98:	9302      	str	r3, [sp, #8]
 8017e9a:	9b07      	ldr	r3, [sp, #28]
 8017e9c:	0022      	movs	r2, r4
 8017e9e:	9301      	str	r3, [sp, #4]
 8017ea0:	9b06      	ldr	r3, [sp, #24]
 8017ea2:	2111      	movs	r1, #17
 8017ea4:	9300      	str	r3, [sp, #0]
 8017ea6:	0028      	movs	r0, r5
 8017ea8:	9b05      	ldr	r3, [sp, #20]
 8017eaa:	f000 ff4f 	bl	8018d4c <sniprintf>
		if (MEASUREALL == data.mode || data.mode == ZERROR2) {
 8017eae:	1ef3      	subs	r3, r6, #3
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d900      	bls.n	8017eb6 <screen_DataMeasureType2+0x7e>
 8017eb4:	e075      	b.n	8017fa2 <screen_DataMeasureType2+0x16a>
				(input.coordinates.R < -999) ? -999 :
				(input.coordinates.R > 999) ? 999 : input.coordinates.R;
	}
	else
	{
		input.coordinates.aX =
 8017eb6:	20fa      	movs	r0, #250	; 0xfa
 8017eb8:	ab10      	add	r3, sp, #64	; 0x40
 8017eba:	2108      	movs	r1, #8
 8017ebc:	5e5a      	ldrsh	r2, [r3, r1]
 8017ebe:	0080      	lsls	r0, r0, #2
 8017ec0:	250a      	movs	r5, #10
 8017ec2:	5f5d      	ldrsh	r5, [r3, r5]
 8017ec4:	1c14      	adds	r4, r2, #0
 8017ec6:	4282      	cmp	r2, r0
 8017ec8:	db01      	blt.n	8017ece <screen_DataMeasureType2+0x96>
 8017eca:	4b55      	ldr	r3, [pc, #340]	; (8018020 <screen_DataMeasureType2+0x1e8>)
 8017ecc:	881c      	ldrh	r4, [r3, #0]
 8017ece:	4e55      	ldr	r6, [pc, #340]	; (8018024 <screen_DataMeasureType2+0x1ec>)
 8017ed0:	b223      	sxth	r3, r4
 8017ed2:	0031      	movs	r1, r6
 8017ed4:	42b3      	cmp	r3, r6
 8017ed6:	da00      	bge.n	8017eda <screen_DataMeasureType2+0xa2>
 8017ed8:	1c34      	adds	r4, r6, #0
 8017eda:	b224      	sxth	r4, r4
				(input.coordinates.aX < -999) ? -999 :
				(input.coordinates.aX > 999) ? 999 : input.coordinates.aX;
		input.coordinates.aY =
 8017edc:	1c2b      	adds	r3, r5, #0
 8017ede:	4285      	cmp	r5, r0
 8017ee0:	db01      	blt.n	8017ee6 <screen_DataMeasureType2+0xae>
 8017ee2:	4b4f      	ldr	r3, [pc, #316]	; (8018020 <screen_DataMeasureType2+0x1e8>)
 8017ee4:	881b      	ldrh	r3, [r3, #0]
 8017ee6:	b218      	sxth	r0, r3
 8017ee8:	4288      	cmp	r0, r1
 8017eea:	da01      	bge.n	8017ef0 <screen_DataMeasureType2+0xb8>
 8017eec:	4b4e      	ldr	r3, [pc, #312]	; (8018028 <screen_DataMeasureType2+0x1f0>)
 8017eee:	881b      	ldrh	r3, [r3, #0]
 8017ef0:	b21b      	sxth	r3, r3
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   A=%s%2d.%01d",
 8017ef2:	4e4e      	ldr	r6, [pc, #312]	; (801802c <screen_DataMeasureType2+0x1f4>)
 8017ef4:	9305      	str	r3, [sp, #20]
 8017ef6:	2a00      	cmp	r2, #0
 8017ef8:	db00      	blt.n	8017efc <screen_DataMeasureType2+0xc4>
 8017efa:	4e4d      	ldr	r6, [pc, #308]	; (8018030 <screen_DataMeasureType2+0x1f8>)
					(int16_t)(abs(data.coordinates.aX) / 10), abs(data.coordinates.aX) % 10);
 8017efc:	17e3      	asrs	r3, r4, #31
 8017efe:	18e4      	adds	r4, r4, r3
 8017f00:	405c      	eors	r4, r3
 8017f02:	b2a4      	uxth	r4, r4
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   A=%s%2d.%01d",
 8017f04:	0020      	movs	r0, r4
 8017f06:	210a      	movs	r1, #10
 8017f08:	f7ef ff1e 	bl	8007d48 <__aeabi_idivmod>
					(int16_t)(abs(data.coordinates.aX) / 10), abs(data.coordinates.aX) % 10);
 8017f0c:	0020      	movs	r0, r4
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   A=%s%2d.%01d",
 8017f0e:	9101      	str	r1, [sp, #4]
					(int16_t)(abs(data.coordinates.aX) / 10), abs(data.coordinates.aX) % 10);
 8017f10:	210a      	movs	r1, #10
 8017f12:	f7ef fe33 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   A=%s%2d.%01d",
 8017f16:	3722      	adds	r7, #34	; 0x22
 8017f18:	9000      	str	r0, [sp, #0]
 8017f1a:	0033      	movs	r3, r6
 8017f1c:	2111      	movs	r1, #17
 8017f1e:	0038      	movs	r0, r7
 8017f20:	4a44      	ldr	r2, [pc, #272]	; (8018034 <screen_DataMeasureType2+0x1fc>)
 8017f22:	f000 ff13 	bl	8018d4c <sniprintf>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "   B=%s%2d.%01d",
 8017f26:	4c41      	ldr	r4, [pc, #260]	; (801802c <screen_DataMeasureType2+0x1f4>)
 8017f28:	2d00      	cmp	r5, #0
 8017f2a:	db00      	blt.n	8017f2e <screen_DataMeasureType2+0xf6>
 8017f2c:	4c40      	ldr	r4, [pc, #256]	; (8018030 <screen_DataMeasureType2+0x1f8>)
					(int16_t)(abs(data.coordinates.aY) / 10), abs(data.coordinates.aY) % 10);
 8017f2e:	9b05      	ldr	r3, [sp, #20]
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "   B=%s%2d.%01d",
 8017f30:	210a      	movs	r1, #10
					(int16_t)(abs(data.coordinates.aY) / 10), abs(data.coordinates.aY) % 10);
 8017f32:	17da      	asrs	r2, r3, #31
 8017f34:	189d      	adds	r5, r3, r2
 8017f36:	4055      	eors	r5, r2
 8017f38:	b2ad      	uxth	r5, r5
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "   B=%s%2d.%01d",
 8017f3a:	0028      	movs	r0, r5
 8017f3c:	f7ef ff04 	bl	8007d48 <__aeabi_idivmod>
					(int16_t)(abs(data.coordinates.aY) / 10), abs(data.coordinates.aY) % 10);
 8017f40:	0028      	movs	r0, r5
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "   B=%s%2d.%01d",
 8017f42:	9101      	str	r1, [sp, #4]
					(int16_t)(abs(data.coordinates.aY) / 10), abs(data.coordinates.aY) % 10);
 8017f44:	210a      	movs	r1, #10
 8017f46:	f7ef fe19 	bl	8007b7c <__divsi3>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "   B=%s%2d.%01d",
 8017f4a:	4e33      	ldr	r6, [pc, #204]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017f4c:	0023      	movs	r3, r4
 8017f4e:	3633      	adds	r6, #51	; 0x33
 8017f50:	4a39      	ldr	r2, [pc, #228]	; (8018038 <screen_DataMeasureType2+0x200>)
 8017f52:	9000      	str	r0, [sp, #0]
 8017f54:	2111      	movs	r1, #17
 8017f56:	0030      	movs	r0, r6
 8017f58:	f000 fef8 	bl	8018d4c <sniprintf>
			screenBuffer.line3[10] = 0xDF;
 8017f5c:	23df      	movs	r3, #223	; 0xdf
 8017f5e:	4a2e      	ldr	r2, [pc, #184]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017f60:	322c      	adds	r2, #44	; 0x2c
 8017f62:	7013      	strb	r3, [r2, #0]
			screenBuffer.line4[10] = 0xDF;
 8017f64:	4a2c      	ldr	r2, [pc, #176]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017f66:	323d      	adds	r2, #61	; 0x3d
 8017f68:	7013      	strb	r3, [r2, #0]
	LCD_Puts(0, 0, screenBuffer.line1);
 8017f6a:	2100      	movs	r1, #0
 8017f6c:	4a2a      	ldr	r2, [pc, #168]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017f6e:	0008      	movs	r0, r1
 8017f70:	f7fc fa3e 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 8017f74:	4a28      	ldr	r2, [pc, #160]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017f76:	2101      	movs	r1, #1
 8017f78:	2000      	movs	r0, #0
 8017f7a:	3211      	adds	r2, #17
 8017f7c:	f7fc fa38 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 2, screenBuffer.line3);
 8017f80:	4a25      	ldr	r2, [pc, #148]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017f82:	2102      	movs	r1, #2
 8017f84:	2000      	movs	r0, #0
 8017f86:	3222      	adds	r2, #34	; 0x22
 8017f88:	f7fc fa32 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 3, screenBuffer.line4);
 8017f8c:	4a22      	ldr	r2, [pc, #136]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017f8e:	2103      	movs	r1, #3
 8017f90:	2000      	movs	r0, #0
 8017f92:	3233      	adds	r2, #51	; 0x33
 8017f94:	f7fc fa2c 	bl	80143f0 <LCD_Puts>
}
 8017f98:	b00b      	add	sp, #44	; 0x2c
 8017f9a:	bcf0      	pop	{r4, r5, r6, r7}
 8017f9c:	bc08      	pop	{r3}
 8017f9e:	b004      	add	sp, #16
 8017fa0:	4718      	bx	r3
		} else if (ZERROR1 == data.mode || data.mode == ZONLY) {
 8017fa2:	003c      	movs	r4, r7
 8017fa4:	1e73      	subs	r3, r6, #1
 8017fa6:	3422      	adds	r4, #34	; 0x22
 8017fa8:	3733      	adds	r7, #51	; 0x33
 8017faa:	2b01      	cmp	r3, #1
 8017fac:	d808      	bhi.n	8017fc0 <screen_DataMeasureType2+0x188>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "    A=.....");
 8017fae:	4923      	ldr	r1, [pc, #140]	; (801803c <screen_DataMeasureType2+0x204>)
 8017fb0:	0020      	movs	r0, r4
 8017fb2:	f000 ff95 	bl	8018ee0 <strcpy>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "    B=.....");
 8017fb6:	4922      	ldr	r1, [pc, #136]	; (8018040 <screen_DataMeasureType2+0x208>)
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "                ");
 8017fb8:	0038      	movs	r0, r7
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "    B=.....");
 8017fba:	f000 ff91 	bl	8018ee0 <strcpy>
 8017fbe:	e7d4      	b.n	8017f6a <screen_DataMeasureType2+0x132>
			snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "                ");
 8017fc0:	4e20      	ldr	r6, [pc, #128]	; (8018044 <screen_DataMeasureType2+0x20c>)
 8017fc2:	0028      	movs	r0, r5
 8017fc4:	0031      	movs	r1, r6
 8017fc6:	f000 ff8b 	bl	8018ee0 <strcpy>
			snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   No Data...!  ");
 8017fca:	491f      	ldr	r1, [pc, #124]	; (8018048 <screen_DataMeasureType2+0x210>)
 8017fcc:	0020      	movs	r0, r4
 8017fce:	f000 ff87 	bl	8018ee0 <strcpy>
			snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "                ");
 8017fd2:	0031      	movs	r1, r6
 8017fd4:	e7f0      	b.n	8017fb8 <screen_DataMeasureType2+0x180>
		data.time = rtc_Now();
 8017fd6:	a813      	add	r0, sp, #76	; 0x4c
 8017fd8:	f7ff fd06 	bl	80179e8 <rtc_Now>
 8017fdc:	aa10      	add	r2, sp, #64	; 0x40
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1,
 8017fde:	7c11      	ldrb	r1, [r2, #16]
 8017fe0:	7b13      	ldrb	r3, [r2, #12]
 8017fe2:	9103      	str	r1, [sp, #12]
 8017fe4:	7bd1      	ldrb	r1, [r2, #15]
 8017fe6:	480c      	ldr	r0, [pc, #48]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017fe8:	9102      	str	r1, [sp, #8]
 8017fea:	7b91      	ldrb	r1, [r2, #14]
 8017fec:	3011      	adds	r0, #17
 8017fee:	9101      	str	r1, [sp, #4]
 8017ff0:	7b52      	ldrb	r2, [r2, #13]
 8017ff2:	2111      	movs	r1, #17
 8017ff4:	9200      	str	r2, [sp, #0]
 8017ff6:	0022      	movs	r2, r4
 8017ff8:	f000 fea8 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "    A=.....");
 8017ffc:	4806      	ldr	r0, [pc, #24]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8017ffe:	490f      	ldr	r1, [pc, #60]	; (801803c <screen_DataMeasureType2+0x204>)
 8018000:	3022      	adds	r0, #34	; 0x22
 8018002:	f000 ff6d 	bl	8018ee0 <strcpy>
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "    B=.....");
 8018006:	4804      	ldr	r0, [pc, #16]	; (8018018 <screen_DataMeasureType2+0x1e0>)
 8018008:	490d      	ldr	r1, [pc, #52]	; (8018040 <screen_DataMeasureType2+0x208>)
 801800a:	3033      	adds	r0, #51	; 0x33
 801800c:	e7d5      	b.n	8017fba <screen_DataMeasureType2+0x182>
 801800e:	46c0      	nop			; (mov r8, r8)
 8018010:	0801c49d 	.word	0x0801c49d
 8018014:	0801c4ae 	.word	0x0801c4ae
 8018018:	20001574 	.word	0x20001574
 801801c:	0801c4c0 	.word	0x0801c4c0
 8018020:	0801c574 	.word	0x0801c574
 8018024:	fffffc19 	.word	0xfffffc19
 8018028:	0801c576 	.word	0x0801c576
 801802c:	0801c90d 	.word	0x0801c90d
 8018030:	0801c49b 	.word	0x0801c49b
 8018034:	0801c578 	.word	0x0801c578
 8018038:	0801c588 	.word	0x0801c588
 801803c:	0801c598 	.word	0x0801c598
 8018040:	0801c5a4 	.word	0x0801c5a4
 8018044:	0801c5b0 	.word	0x0801c5b0
 8018048:	0801c5c1 	.word	0x0801c5c1

0801804c <screen_setDateTime>:
void screen_setDateTime(Time time, CycleTime cycle) {
 801804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801804e:	0a03      	lsrs	r3, r0, #8
 8018050:	b099      	sub	sp, #100	; 0x64
 8018052:	b2db      	uxtb	r3, r3
 8018054:	0c04      	lsrs	r4, r0, #16
 8018056:	9302      	str	r3, [sp, #8]
 8018058:	9203      	str	r2, [sp, #12]
 801805a:	b2c7      	uxtb	r7, r0
 801805c:	0e05      	lsrs	r5, r0, #24
 801805e:	b2ce      	uxtb	r6, r1
	LCD_Clear();
 8018060:	f7fc f9be 	bl	80143e0 <LCD_Clear>
	switch (cycle) {
 8018064:	9b03      	ldr	r3, [sp, #12]
 8018066:	b2e4      	uxtb	r4, r4
 8018068:	2b04      	cmp	r3, #4
 801806a:	d818      	bhi.n	801809e <screen_setDateTime+0x52>
 801806c:	0018      	movs	r0, r3
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "20%02d / %02d / %02d",
 801806e:	9b02      	ldr	r3, [sp, #8]
 8018070:	9401      	str	r4, [sp, #4]
 8018072:	9300      	str	r3, [sp, #0]
 8018074:	003b      	movs	r3, r7
	switch (cycle) {
 8018076:	f7ef fcd9 	bl	8007a2c <__gnu_thumb1_case_uqi>
 801807a:	2e03      	.short	0x2e03
 801807c:	3b30      	.short	0x3b30
 801807e:	46          	.byte	0x46
 801807f:	00          	.byte	0x00
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "[20%02d]/ %02d / %02d",
 8018080:	4a26      	ldr	r2, [pc, #152]	; (801811c <screen_setDateTime+0xd0>)
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "20%02d /[%02d]/ %02d",
 8018082:	2025      	movs	r0, #37	; 0x25
 8018084:	ac02      	add	r4, sp, #8
 8018086:	2111      	movs	r1, #17
 8018088:	1900      	adds	r0, r0, r4
 801808a:	f000 fe5f 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "    %02d : %02d",
 801808e:	002b      	movs	r3, r5
 8018090:	4a23      	ldr	r2, [pc, #140]	; (8018120 <screen_setDateTime+0xd4>)
 8018092:	9600      	str	r6, [sp, #0]
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   %02d :[%02d]",
 8018094:	2036      	movs	r0, #54	; 0x36
 8018096:	2111      	movs	r1, #17
 8018098:	1900      	adds	r0, r0, r4
 801809a:	f000 fe57 	bl	8018d4c <sniprintf>
	LCD_Puts(0, 0, "  TIME SETTING  ");
 801809e:	2100      	movs	r1, #0
 80180a0:	4a20      	ldr	r2, [pc, #128]	; (8018124 <screen_setDateTime+0xd8>)
 80180a2:	0008      	movs	r0, r1
 80180a4:	f7fc f9a4 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 80180a8:	2325      	movs	r3, #37	; 0x25
 80180aa:	aa02      	add	r2, sp, #8
 80180ac:	189b      	adds	r3, r3, r2
 80180ae:	001a      	movs	r2, r3
 80180b0:	2101      	movs	r1, #1
 80180b2:	2000      	movs	r0, #0
 80180b4:	f7fc f99c 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 2, screenBuffer.line3);
 80180b8:	2336      	movs	r3, #54	; 0x36
 80180ba:	aa02      	add	r2, sp, #8
 80180bc:	189b      	adds	r3, r3, r2
 80180be:	001a      	movs	r2, r3
 80180c0:	2102      	movs	r1, #2
 80180c2:	2000      	movs	r0, #0
 80180c4:	f7fc f994 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0,3, " ");
 80180c8:	2103      	movs	r1, #3
 80180ca:	2000      	movs	r0, #0
 80180cc:	4a16      	ldr	r2, [pc, #88]	; (8018128 <screen_setDateTime+0xdc>)
 80180ce:	f7fc f98f 	bl	80143f0 <LCD_Puts>
}
 80180d2:	b019      	add	sp, #100	; 0x64
 80180d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "20%02d /[%02d]/ %02d",
 80180d6:	4a15      	ldr	r2, [pc, #84]	; (801812c <screen_setDateTime+0xe0>)
 80180d8:	e7d3      	b.n	8018082 <screen_setDateTime+0x36>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "20%02d / %02d /[%02d]",
 80180da:	2025      	movs	r0, #37	; 0x25
 80180dc:	ac02      	add	r4, sp, #8
 80180de:	4a14      	ldr	r2, [pc, #80]	; (8018130 <screen_setDateTime+0xe4>)
 80180e0:	2111      	movs	r1, #17
 80180e2:	1900      	adds	r0, r0, r4
 80180e4:	f000 fe32 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   %02d : %02d",
 80180e8:	002b      	movs	r3, r5
 80180ea:	4a12      	ldr	r2, [pc, #72]	; (8018134 <screen_setDateTime+0xe8>)
 80180ec:	9600      	str	r6, [sp, #0]
 80180ee:	e7d1      	b.n	8018094 <screen_setDateTime+0x48>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "20%02d / %02d / %02d",
 80180f0:	2025      	movs	r0, #37	; 0x25
 80180f2:	ac02      	add	r4, sp, #8
 80180f4:	4a10      	ldr	r2, [pc, #64]	; (8018138 <screen_setDateTime+0xec>)
 80180f6:	2111      	movs	r1, #17
 80180f8:	1900      	adds	r0, r0, r4
 80180fa:	f000 fe27 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   [%02d]: %02d",
 80180fe:	002b      	movs	r3, r5
 8018100:	4a0e      	ldr	r2, [pc, #56]	; (801813c <screen_setDateTime+0xf0>)
 8018102:	9600      	str	r6, [sp, #0]
 8018104:	e7c6      	b.n	8018094 <screen_setDateTime+0x48>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "20%02d / %02d / %02d",
 8018106:	2025      	movs	r0, #37	; 0x25
 8018108:	ac02      	add	r4, sp, #8
 801810a:	4a0b      	ldr	r2, [pc, #44]	; (8018138 <screen_setDateTime+0xec>)
 801810c:	2111      	movs	r1, #17
 801810e:	1900      	adds	r0, r0, r4
 8018110:	f000 fe1c 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   %02d :[%02d]",
 8018114:	002b      	movs	r3, r5
 8018116:	4a0a      	ldr	r2, [pc, #40]	; (8018140 <screen_setDateTime+0xf4>)
 8018118:	9600      	str	r6, [sp, #0]
 801811a:	e7bb      	b.n	8018094 <screen_setDateTime+0x48>
 801811c:	0801c602 	.word	0x0801c602
 8018120:	0801c618 	.word	0x0801c618
 8018124:	0801c688 	.word	0x0801c688
 8018128:	0801c5bf 	.word	0x0801c5bf
 801812c:	0801c628 	.word	0x0801c628
 8018130:	0801c63d 	.word	0x0801c63d
 8018134:	0801c619 	.word	0x0801c619
 8018138:	0801c653 	.word	0x0801c653
 801813c:	0801c668 	.word	0x0801c668
 8018140:	0801c678 	.word	0x0801c678

08018144 <screen_OptionMenu>:
void screen_OptionMenu(optionScreen_e_t *optionIndex) {
 8018144:	b510      	push	{r4, lr}
 8018146:	0003      	movs	r3, r0
			|| *optionIndex == measurement2HisList)
 8018148:	7800      	ldrb	r0, [r0, #0]
void screen_OptionMenu(optionScreen_e_t *optionIndex) {
 801814a:	b092      	sub	sp, #72	; 0x48
	if (*optionIndex == measurement1HisList
 801814c:	0002      	movs	r2, r0
 801814e:	3a08      	subs	r2, #8
 8018150:	2a01      	cmp	r2, #1
 8018152:	d932      	bls.n	80181ba <screen_OptionMenu+0x76>
	else if (*optionIndex <= minNoneOption)
 8018154:	2800      	cmp	r0, #0
 8018156:	d12a      	bne.n	80181ae <screen_OptionMenu+0x6a>
		*optionIndex = minNoneOption + 1;
 8018158:	2201      	movs	r2, #1
 801815a:	701a      	strb	r2, [r3, #0]
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "MEASUREMENT 1");
 801815c:	4928      	ldr	r1, [pc, #160]	; (8018200 <screen_OptionMenu+0xbc>)
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "MEASUREMENT 2");
 801815e:	2315      	movs	r3, #21
 8018160:	446b      	add	r3, sp
 8018162:	0018      	movs	r0, r3
 8018164:	f000 febc 	bl	8018ee0 <strcpy>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "SETTING");
 8018168:	4926      	ldr	r1, [pc, #152]	; (8018204 <screen_OptionMenu+0xc0>)
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "");
 801816a:	2326      	movs	r3, #38	; 0x26
 801816c:	446b      	add	r3, sp
 801816e:	0018      	movs	r0, r3
 8018170:	f000 feb6 	bl	8018ee0 <strcpy>
	LCD_Clear();
 8018174:	f7fc f934 	bl	80143e0 <LCD_Clear>
	LCD_Puts(0,0, " ");
 8018178:	2100      	movs	r1, #0
 801817a:	4c23      	ldr	r4, [pc, #140]	; (8018208 <screen_OptionMenu+0xc4>)
 801817c:	0008      	movs	r0, r1
 801817e:	0022      	movs	r2, r4
 8018180:	f7fc f936 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 8018184:	2315      	movs	r3, #21
 8018186:	446b      	add	r3, sp
 8018188:	001a      	movs	r2, r3
 801818a:	2101      	movs	r1, #1
 801818c:	2000      	movs	r0, #0
 801818e:	f7fc f92f 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 2, screenBuffer.line3);
 8018192:	2326      	movs	r3, #38	; 0x26
 8018194:	446b      	add	r3, sp
 8018196:	001a      	movs	r2, r3
 8018198:	2102      	movs	r1, #2
 801819a:	2000      	movs	r0, #0
 801819c:	f7fc f928 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0,3, " ");
 80181a0:	0022      	movs	r2, r4
 80181a2:	2103      	movs	r1, #3
 80181a4:	2000      	movs	r0, #0
 80181a6:	f7fc f923 	bl	80143f0 <LCD_Puts>
}
 80181aa:	b012      	add	sp, #72	; 0x48
 80181ac:	bd10      	pop	{r4, pc}
	else if (*optionIndex >= maxNoneOption)
 80181ae:	2806      	cmp	r0, #6
 80181b0:	d903      	bls.n	80181ba <screen_OptionMenu+0x76>
		*optionIndex = maxNoneOption - 1;
 80181b2:	2206      	movs	r2, #6
 80181b4:	701a      	strb	r2, [r3, #0]
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "IP ADDRESS");
 80181b6:	4915      	ldr	r1, [pc, #84]	; (801820c <screen_OptionMenu+0xc8>)
 80181b8:	e018      	b.n	80181ec <screen_OptionMenu+0xa8>
	switch (*optionIndex) {
 80181ba:	3801      	subs	r0, #1
 80181bc:	2808      	cmp	r0, #8
 80181be:	d8d9      	bhi.n	8018174 <screen_OptionMenu+0x30>
 80181c0:	f7ef fc2a 	bl	8007a18 <__gnu_thumb1_case_sqi>
 80181c4:	130705cc 	.word	0x130705cc
 80181c8:	0fd8f91b 	.word	0x0fd8f91b
 80181cc:	11          	.byte	0x11
 80181cd:	00          	.byte	0x00
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "MEASUREMENT 2");
 80181ce:	4910      	ldr	r1, [pc, #64]	; (8018210 <screen_OptionMenu+0xcc>)
 80181d0:	e7c5      	b.n	801815e <screen_OptionMenu+0x1a>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "MEASUREMENT");
 80181d2:	4910      	ldr	r1, [pc, #64]	; (8018214 <screen_OptionMenu+0xd0>)
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "MEASUREMENT 2");
 80181d4:	2315      	movs	r3, #21
 80181d6:	446b      	add	r3, sp
 80181d8:	0018      	movs	r0, r3
 80181da:	f000 fe81 	bl	8018ee0 <strcpy>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "HISTORY LIST");
 80181de:	490e      	ldr	r1, [pc, #56]	; (8018218 <screen_OptionMenu+0xd4>)
 80181e0:	e7c3      	b.n	801816a <screen_OptionMenu+0x26>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "MEASUREMENT 1");
 80181e2:	4907      	ldr	r1, [pc, #28]	; (8018200 <screen_OptionMenu+0xbc>)
 80181e4:	e7f6      	b.n	80181d4 <screen_OptionMenu+0x90>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "MEASUREMENT 2");
 80181e6:	490a      	ldr	r1, [pc, #40]	; (8018210 <screen_OptionMenu+0xcc>)
 80181e8:	e7f4      	b.n	80181d4 <screen_OptionMenu+0x90>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V;D;L;R;Z INPUT");
 80181ea:	490c      	ldr	r1, [pc, #48]	; (801821c <screen_OptionMenu+0xd8>)
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "IP ADDRESS");
 80181ec:	2315      	movs	r3, #21
 80181ee:	446b      	add	r3, sp
 80181f0:	0018      	movs	r0, r3
 80181f2:	f000 fe75 	bl	8018ee0 <strcpy>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "");
 80181f6:	490a      	ldr	r1, [pc, #40]	; (8018220 <screen_OptionMenu+0xdc>)
 80181f8:	e7b7      	b.n	801816a <screen_OptionMenu+0x26>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "TIME SETTING");
 80181fa:	490a      	ldr	r1, [pc, #40]	; (8018224 <screen_OptionMenu+0xe0>)
 80181fc:	e7f6      	b.n	80181ec <screen_OptionMenu+0xa8>
 80181fe:	46c0      	nop			; (mov r8, r8)
 8018200:	0801c699 	.word	0x0801c699
 8018204:	0801c5fa 	.word	0x0801c5fa
 8018208:	0801c5bf 	.word	0x0801c5bf
 801820c:	0801c6de 	.word	0x0801c6de
 8018210:	0801c6a7 	.word	0x0801c6a7
 8018214:	0801c6b5 	.word	0x0801c6b5
 8018218:	0801c6c1 	.word	0x0801c6c1
 801821c:	0801c6ce 	.word	0x0801c6ce
 8018220:	0801bd58 	.word	0x0801bd58
 8018224:	0801c5f5 	.word	0x0801c5f5

08018228 <screen_showIP>:
void screen_showIP(wiz_NetInfo *netInfo) {
 8018228:	b510      	push	{r4, lr}
 801822a:	0004      	movs	r4, r0
 801822c:	b096      	sub	sp, #88	; 0x58
	snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "IP ADDRESS");
 801822e:	4916      	ldr	r1, [pc, #88]	; (8018288 <screen_showIP+0x60>)
 8018230:	a805      	add	r0, sp, #20
 8018232:	f000 fe55 	bl	8018ee0 <strcpy>
	snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "%03d.%03d.%02d.%02d",
 8018236:	2025      	movs	r0, #37	; 0x25
 8018238:	7a62      	ldrb	r2, [r4, #9]
 801823a:	79a3      	ldrb	r3, [r4, #6]
 801823c:	9202      	str	r2, [sp, #8]
 801823e:	7a22      	ldrb	r2, [r4, #8]
 8018240:	2111      	movs	r1, #17
 8018242:	9201      	str	r2, [sp, #4]
 8018244:	79e2      	ldrb	r2, [r4, #7]
 8018246:	4468      	add	r0, sp
 8018248:	9200      	str	r2, [sp, #0]
 801824a:	4a10      	ldr	r2, [pc, #64]	; (801828c <screen_showIP+0x64>)
 801824c:	f000 fd7e 	bl	8018d4c <sniprintf>
	LCD_Clear();
 8018250:	f7fc f8c6 	bl	80143e0 <LCD_Clear>
	LCD_Puts(0, 0, screenBuffer.line1);
 8018254:	2100      	movs	r1, #0
 8018256:	aa05      	add	r2, sp, #20
 8018258:	0008      	movs	r0, r1
 801825a:	f7fc f8c9 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 801825e:	2325      	movs	r3, #37	; 0x25
 8018260:	446b      	add	r3, sp
 8018262:	001a      	movs	r2, r3
 8018264:	2101      	movs	r1, #1
 8018266:	2000      	movs	r0, #0
 8018268:	f7fc f8c2 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0,2, " ");
 801826c:	4c08      	ldr	r4, [pc, #32]	; (8018290 <screen_showIP+0x68>)
 801826e:	2102      	movs	r1, #2
 8018270:	0022      	movs	r2, r4
 8018272:	2000      	movs	r0, #0
 8018274:	f7fc f8bc 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0,3, " ");
 8018278:	0022      	movs	r2, r4
 801827a:	2103      	movs	r1, #3
 801827c:	2000      	movs	r0, #0
 801827e:	f7fc f8b7 	bl	80143f0 <LCD_Puts>
}
 8018282:	b016      	add	sp, #88	; 0x58
 8018284:	bd10      	pop	{r4, pc}
 8018286:	46c0      	nop			; (mov r8, r8)
 8018288:	0801c6de 	.word	0x0801c6de
 801828c:	0801c6e9 	.word	0x0801c6e9
 8018290:	0801c5bf 	.word	0x0801c5bf

08018294 <screen_setVDRLZ>:
void screen_setVDRLZ(VDRLZ_Input VDRLZ, VDRLZ_CycleSet cycle) {
 8018294:	b084      	sub	sp, #16
 8018296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018298:	b099      	sub	sp, #100	; 0x64
 801829a:	9321      	str	r3, [sp, #132]	; 0x84
 801829c:	001e      	movs	r6, r3
 801829e:	ab23      	add	r3, sp, #140	; 0x8c
 80182a0:	781b      	ldrb	r3, [r3, #0]
 80182a2:	9220      	str	r2, [sp, #128]	; 0x80
 80182a4:	901e      	str	r0, [sp, #120]	; 0x78
 80182a6:	9104      	str	r1, [sp, #16]
 80182a8:	911f      	str	r1, [sp, #124]	; 0x7c
 80182aa:	0007      	movs	r7, r0
	uint32_t R = VDRLZ.R * 10;
 80182ac:	495e      	ldr	r1, [pc, #376]	; (8018428 <screen_setVDRLZ+0x194>)
 80182ae:	9820      	ldr	r0, [sp, #128]	; 0x80
void screen_setVDRLZ(VDRLZ_Input VDRLZ, VDRLZ_CycleSet cycle) {
 80182b0:	9305      	str	r3, [sp, #20]
	uint32_t R = VDRLZ.R * 10;
 80182b2:	f7f0 f867 	bl	8008384 <__aeabi_fmul>
 80182b6:	f7ef fd97 	bl	8007de8 <__aeabi_f2uiz>
	uint32_t Z = VDRLZ.Z * 10;
 80182ba:	495b      	ldr	r1, [pc, #364]	; (8018428 <screen_setVDRLZ+0x194>)
	uint32_t R = VDRLZ.R * 10;
 80182bc:	0004      	movs	r4, r0
	uint32_t Z = VDRLZ.Z * 10;
 80182be:	9822      	ldr	r0, [sp, #136]	; 0x88
 80182c0:	f7f0 f860 	bl	8008384 <__aeabi_fmul>
 80182c4:	f7ef fd90 	bl	8007de8 <__aeabi_f2uiz>
	switch (cycle) {
 80182c8:	9b05      	ldr	r3, [sp, #20]
	uint32_t Z = VDRLZ.Z * 10;
 80182ca:	0005      	movs	r5, r0
	switch (cycle) {
 80182cc:	2b04      	cmp	r3, #4
 80182ce:	d831      	bhi.n	8018334 <screen_setVDRLZ+0xa0>
 80182d0:	0018      	movs	r0, r3
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V= %02lu  D= %02lu",
 80182d2:	9b04      	ldr	r3, [sp, #16]
 80182d4:	9300      	str	r3, [sp, #0]
 80182d6:	003b      	movs	r3, r7
	switch (cycle) {
 80182d8:	f7ef fba8 	bl	8007a2c <__gnu_thumb1_case_uqi>
 80182dc:	515b4f03 	.word	0x515b4f03
 80182e0:	80          	.byte	0x80
 80182e1:	00          	.byte	0x00
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V=[%02lu]  D= %02lu",
 80182e2:	4a52      	ldr	r2, [pc, #328]	; (801842c <screen_setVDRLZ+0x198>)
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V= %02lu  D=[%02lu]",
 80182e4:	2025      	movs	r0, #37	; 0x25
 80182e6:	af02      	add	r7, sp, #8
 80182e8:	2111      	movs	r1, #17
 80182ea:	19c0      	adds	r0, r0, r7
 80182ec:	f000 fd2e 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "L= %02lu", VDRLZ.L);
 80182f0:	0033      	movs	r3, r6
 80182f2:	4a4f      	ldr	r2, [pc, #316]	; (8018430 <screen_setVDRLZ+0x19c>)
 80182f4:	2036      	movs	r0, #54	; 0x36
 80182f6:	2111      	movs	r1, #17
 80182f8:	19c0      	adds	r0, r0, r7
 80182fa:	f000 fd27 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 80182fe:	210a      	movs	r1, #10
 8018300:	0020      	movs	r0, r4
 8018302:	f7ef fbb1 	bl	8007a68 <__udivsi3>
 8018306:	210a      	movs	r1, #10
 8018308:	0006      	movs	r6, r0
 801830a:	0028      	movs	r0, r5
 801830c:	f7ef fc32 	bl	8007b74 <__aeabi_uidivmod>
 8018310:	0028      	movs	r0, r5
 8018312:	9102      	str	r1, [sp, #8]
 8018314:	210a      	movs	r1, #10
 8018316:	f7ef fba7 	bl	8007a68 <__udivsi3>
 801831a:	210a      	movs	r1, #10
 801831c:	9001      	str	r0, [sp, #4]
 801831e:	0020      	movs	r0, r4
 8018320:	f7ef fc28 	bl	8007b74 <__aeabi_uidivmod>
 8018324:	0033      	movs	r3, r6
 8018326:	4a43      	ldr	r2, [pc, #268]	; (8018434 <screen_setVDRLZ+0x1a0>)
 8018328:	9100      	str	r1, [sp, #0]
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 801832a:	2047      	movs	r0, #71	; 0x47
 801832c:	2111      	movs	r1, #17
 801832e:	19c0      	adds	r0, r0, r7
 8018330:	f000 fd0c 	bl	8018d4c <sniprintf>
	LCD_Clear();
 8018334:	f7fc f854 	bl	80143e0 <LCD_Clear>
	LCD_Puts(0, 0, " ");
 8018338:	2100      	movs	r1, #0
 801833a:	4a3f      	ldr	r2, [pc, #252]	; (8018438 <screen_setVDRLZ+0x1a4>)
 801833c:	0008      	movs	r0, r1
 801833e:	f7fc f857 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 8018342:	2325      	movs	r3, #37	; 0x25
 8018344:	aa02      	add	r2, sp, #8
 8018346:	189b      	adds	r3, r3, r2
 8018348:	001a      	movs	r2, r3
 801834a:	2101      	movs	r1, #1
 801834c:	2000      	movs	r0, #0
 801834e:	f7fc f84f 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 2, screenBuffer.line3);
 8018352:	2336      	movs	r3, #54	; 0x36
 8018354:	aa02      	add	r2, sp, #8
 8018356:	189b      	adds	r3, r3, r2
 8018358:	001a      	movs	r2, r3
 801835a:	2102      	movs	r1, #2
 801835c:	2000      	movs	r0, #0
 801835e:	f7fc f847 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 3, screenBuffer.line4);
 8018362:	2247      	movs	r2, #71	; 0x47
 8018364:	ab02      	add	r3, sp, #8
 8018366:	2103      	movs	r1, #3
 8018368:	2000      	movs	r0, #0
 801836a:	18d2      	adds	r2, r2, r3
 801836c:	f7fc f840 	bl	80143f0 <LCD_Puts>
}
 8018370:	b019      	add	sp, #100	; 0x64
 8018372:	bcf0      	pop	{r4, r5, r6, r7}
 8018374:	bc08      	pop	{r3}
 8018376:	b004      	add	sp, #16
 8018378:	4718      	bx	r3
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V= %02lu  D=[%02lu]",
 801837a:	4a30      	ldr	r2, [pc, #192]	; (801843c <screen_setVDRLZ+0x1a8>)
 801837c:	e7b2      	b.n	80182e4 <screen_setVDRLZ+0x50>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V= %02lu  D= %02lu",
 801837e:	2025      	movs	r0, #37	; 0x25
 8018380:	af02      	add	r7, sp, #8
 8018382:	4a2f      	ldr	r2, [pc, #188]	; (8018440 <screen_setVDRLZ+0x1ac>)
 8018384:	2111      	movs	r1, #17
 8018386:	19c0      	adds	r0, r0, r7
 8018388:	f000 fce0 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "L=[%02lu]", VDRLZ.L);
 801838c:	0033      	movs	r3, r6
 801838e:	4a2d      	ldr	r2, [pc, #180]	; (8018444 <screen_setVDRLZ+0x1b0>)
 8018390:	e7b0      	b.n	80182f4 <screen_setVDRLZ+0x60>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V= %02lu  D= %02lu",
 8018392:	2025      	movs	r0, #37	; 0x25
 8018394:	af02      	add	r7, sp, #8
 8018396:	2111      	movs	r1, #17
 8018398:	4a29      	ldr	r2, [pc, #164]	; (8018440 <screen_setVDRLZ+0x1ac>)
 801839a:	19c0      	adds	r0, r0, r7
 801839c:	f000 fcd6 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "L= %02lu", VDRLZ.L);
 80183a0:	2036      	movs	r0, #54	; 0x36
 80183a2:	0033      	movs	r3, r6
 80183a4:	4a22      	ldr	r2, [pc, #136]	; (8018430 <screen_setVDRLZ+0x19c>)
 80183a6:	2111      	movs	r1, #17
 80183a8:	19c0      	adds	r0, r0, r7
 80183aa:	f000 fccf 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 80183ae:	210a      	movs	r1, #10
 80183b0:	0020      	movs	r0, r4
 80183b2:	f7ef fb59 	bl	8007a68 <__udivsi3>
 80183b6:	210a      	movs	r1, #10
 80183b8:	0006      	movs	r6, r0
 80183ba:	0028      	movs	r0, r5
 80183bc:	f7ef fbda 	bl	8007b74 <__aeabi_uidivmod>
 80183c0:	0028      	movs	r0, r5
 80183c2:	9102      	str	r1, [sp, #8]
 80183c4:	210a      	movs	r1, #10
 80183c6:	f7ef fb4f 	bl	8007a68 <__udivsi3>
 80183ca:	210a      	movs	r1, #10
 80183cc:	9001      	str	r0, [sp, #4]
 80183ce:	0020      	movs	r0, r4
 80183d0:	f7ef fbd0 	bl	8007b74 <__aeabi_uidivmod>
 80183d4:	0033      	movs	r3, r6
 80183d6:	4a1c      	ldr	r2, [pc, #112]	; (8018448 <screen_setVDRLZ+0x1b4>)
 80183d8:	9100      	str	r1, [sp, #0]
 80183da:	e7a6      	b.n	801832a <screen_setVDRLZ+0x96>
		snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1, "V= %02lu  D= %02lu",
 80183dc:	2025      	movs	r0, #37	; 0x25
 80183de:	af02      	add	r7, sp, #8
 80183e0:	2111      	movs	r1, #17
 80183e2:	4a17      	ldr	r2, [pc, #92]	; (8018440 <screen_setVDRLZ+0x1ac>)
 80183e4:	19c0      	adds	r0, r0, r7
 80183e6:	f000 fcb1 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "L= %02lu", VDRLZ.L);
 80183ea:	2036      	movs	r0, #54	; 0x36
 80183ec:	0033      	movs	r3, r6
 80183ee:	4a10      	ldr	r2, [pc, #64]	; (8018430 <screen_setVDRLZ+0x19c>)
 80183f0:	2111      	movs	r1, #17
 80183f2:	19c0      	adds	r0, r0, r7
 80183f4:	f000 fcaa 	bl	8018d4c <sniprintf>
		snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1,
 80183f8:	210a      	movs	r1, #10
 80183fa:	0020      	movs	r0, r4
 80183fc:	f7ef fb34 	bl	8007a68 <__udivsi3>
 8018400:	210a      	movs	r1, #10
 8018402:	0006      	movs	r6, r0
 8018404:	0028      	movs	r0, r5
 8018406:	f7ef fbb5 	bl	8007b74 <__aeabi_uidivmod>
 801840a:	0028      	movs	r0, r5
 801840c:	9102      	str	r1, [sp, #8]
 801840e:	210a      	movs	r1, #10
 8018410:	f7ef fb2a 	bl	8007a68 <__udivsi3>
 8018414:	210a      	movs	r1, #10
 8018416:	9001      	str	r0, [sp, #4]
 8018418:	0020      	movs	r0, r4
 801841a:	f7ef fbab 	bl	8007b74 <__aeabi_uidivmod>
 801841e:	0033      	movs	r3, r6
 8018420:	4a0a      	ldr	r2, [pc, #40]	; (801844c <screen_setVDRLZ+0x1b8>)
 8018422:	9100      	str	r1, [sp, #0]
 8018424:	e781      	b.n	801832a <screen_setVDRLZ+0x96>
 8018426:	46c0      	nop			; (mov r8, r8)
 8018428:	41200000 	.word	0x41200000
 801842c:	0801c6fd 	.word	0x0801c6fd
 8018430:	0801c711 	.word	0x0801c711
 8018434:	0801c71a 	.word	0x0801c71a
 8018438:	0801c5bf 	.word	0x0801c5bf
 801843c:	0801c739 	.word	0x0801c739
 8018440:	0801c74d 	.word	0x0801c74d
 8018444:	0801c760 	.word	0x0801c760
 8018448:	0801c76a 	.word	0x0801c76a
 801844c:	0801c78a 	.word	0x0801c78a

08018450 <screen_waitMeasurement>:
	}
	return input;
}

void screen_waitMeasurement(uint8_t measIndex)
{
 8018450:	b530      	push	{r4, r5, lr}
 8018452:	0005      	movs	r5, r0
 8018454:	b099      	sub	sp, #100	; 0x64
	screenData screenBuffer;
	Time __time = rtc_Now();
 8018456:	ac05      	add	r4, sp, #20
 8018458:	0020      	movs	r0, r4
 801845a:	f7ff fac5 	bl	80179e8 <rtc_Now>
	LCD_Clear();
 801845e:	f7fb ffbf 	bl	80143e0 <LCD_Clear>
	snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "MEASUREMENT %01d",
 8018462:	002b      	movs	r3, r5
 8018464:	2111      	movs	r1, #17
 8018466:	4a1d      	ldr	r2, [pc, #116]	; (80184dc <screen_waitMeasurement+0x8c>)
 8018468:	a807      	add	r0, sp, #28
 801846a:	f000 fc6f 	bl	8018d4c <sniprintf>
					measIndex);
	snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1,
 801846e:	202d      	movs	r0, #45	; 0x2d
 8018470:	7922      	ldrb	r2, [r4, #4]
 8018472:	7823      	ldrb	r3, [r4, #0]
 8018474:	9203      	str	r2, [sp, #12]
 8018476:	78e2      	ldrb	r2, [r4, #3]
 8018478:	2111      	movs	r1, #17
 801847a:	9202      	str	r2, [sp, #8]
 801847c:	78a2      	ldrb	r2, [r4, #2]
 801847e:	4468      	add	r0, sp
 8018480:	9201      	str	r2, [sp, #4]
 8018482:	7862      	ldrb	r2, [r4, #1]
 8018484:	9200      	str	r2, [sp, #0]
 8018486:	4a16      	ldr	r2, [pc, #88]	; (80184e0 <screen_waitMeasurement+0x90>)
 8018488:	f000 fc60 	bl	8018d4c <sniprintf>
					"20%02d/%02d/%02d %02d:%02d", __time.year, __time.month,
					__time.day, __time.hour, __time.minute);
	snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "X=.....  Y=.....");
 801848c:	233e      	movs	r3, #62	; 0x3e
 801848e:	446b      	add	r3, sp
 8018490:	0018      	movs	r0, r3
 8018492:	4914      	ldr	r1, [pc, #80]	; (80184e4 <screen_waitMeasurement+0x94>)
 8018494:	f000 fd24 	bl	8018ee0 <strcpy>
	snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "Z=.....  R=.....");
 8018498:	234f      	movs	r3, #79	; 0x4f
 801849a:	446b      	add	r3, sp
 801849c:	0018      	movs	r0, r3
 801849e:	4912      	ldr	r1, [pc, #72]	; (80184e8 <screen_waitMeasurement+0x98>)
 80184a0:	f000 fd1e 	bl	8018ee0 <strcpy>
	LCD_Puts(0, 0, screenBuffer.line1);
 80184a4:	2100      	movs	r1, #0
 80184a6:	aa07      	add	r2, sp, #28
 80184a8:	0008      	movs	r0, r1
 80184aa:	f7fb ffa1 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 80184ae:	232d      	movs	r3, #45	; 0x2d
 80184b0:	446b      	add	r3, sp
 80184b2:	001a      	movs	r2, r3
 80184b4:	2101      	movs	r1, #1
 80184b6:	2000      	movs	r0, #0
 80184b8:	f7fb ff9a 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 2, screenBuffer.line3);
 80184bc:	233e      	movs	r3, #62	; 0x3e
 80184be:	446b      	add	r3, sp
 80184c0:	001a      	movs	r2, r3
 80184c2:	2102      	movs	r1, #2
 80184c4:	2000      	movs	r0, #0
 80184c6:	f7fb ff93 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 3, screenBuffer.line4);
 80184ca:	234f      	movs	r3, #79	; 0x4f
 80184cc:	446b      	add	r3, sp
 80184ce:	001a      	movs	r2, r3
 80184d0:	2103      	movs	r1, #3
 80184d2:	2000      	movs	r0, #0
 80184d4:	f7fb ff8c 	bl	80143f0 <LCD_Puts>
}
 80184d8:	b019      	add	sp, #100	; 0x64
 80184da:	bd30      	pop	{r4, r5, pc}
 80184dc:	0801c49d 	.word	0x0801c49d
 80184e0:	0801c4c0 	.word	0x0801c4c0
 80184e4:	0801c515 	.word	0x0801c515
 80184e8:	0801c526 	.word	0x0801c526

080184ec <screen_errorXY>:

void screen_errorXY(uint8_t measIndex) {
 80184ec:	b530      	push	{r4, r5, lr}
 80184ee:	0005      	movs	r5, r0
 80184f0:	b099      	sub	sp, #100	; 0x64
	screenData screenBuffer;
	Time __time = rtc_Now();
 80184f2:	ac05      	add	r4, sp, #20
 80184f4:	0020      	movs	r0, r4
 80184f6:	f7ff fa77 	bl	80179e8 <rtc_Now>
	LCD_Clear();
 80184fa:	f7fb ff71 	bl	80143e0 <LCD_Clear>
	snprintf(screenBuffer.line1, LCD_LINE_SIZE + 1, "MEASUREMENT %01d",
 80184fe:	002b      	movs	r3, r5
 8018500:	2111      	movs	r1, #17
 8018502:	4a1d      	ldr	r2, [pc, #116]	; (8018578 <screen_errorXY+0x8c>)
 8018504:	a807      	add	r0, sp, #28
 8018506:	f000 fc21 	bl	8018d4c <sniprintf>
			measIndex);
	snprintf(screenBuffer.line2, LCD_LINE_SIZE + 1,
 801850a:	202d      	movs	r0, #45	; 0x2d
 801850c:	7922      	ldrb	r2, [r4, #4]
 801850e:	7823      	ldrb	r3, [r4, #0]
 8018510:	9203      	str	r2, [sp, #12]
 8018512:	78e2      	ldrb	r2, [r4, #3]
 8018514:	2111      	movs	r1, #17
 8018516:	9202      	str	r2, [sp, #8]
 8018518:	78a2      	ldrb	r2, [r4, #2]
 801851a:	4468      	add	r0, sp
 801851c:	9201      	str	r2, [sp, #4]
 801851e:	7862      	ldrb	r2, [r4, #1]
 8018520:	9200      	str	r2, [sp, #0]
 8018522:	4a16      	ldr	r2, [pc, #88]	; (801857c <screen_errorXY+0x90>)
 8018524:	f000 fc12 	bl	8018d4c <sniprintf>
			"20%02d/%02d/%02d %02d:%02d", __time.year, __time.month, __time.day,
			__time.hour, __time.minute);
	snprintf(screenBuffer.line3, LCD_LINE_SIZE + 1, "   SENSOR X/Y");
 8018528:	233e      	movs	r3, #62	; 0x3e
 801852a:	446b      	add	r3, sp
 801852c:	0018      	movs	r0, r3
 801852e:	4914      	ldr	r1, [pc, #80]	; (8018580 <screen_errorXY+0x94>)
 8018530:	f000 fcd6 	bl	8018ee0 <strcpy>
	snprintf(screenBuffer.line4, LCD_LINE_SIZE + 1, "     ERROR!");
 8018534:	234f      	movs	r3, #79	; 0x4f
 8018536:	446b      	add	r3, sp
 8018538:	0018      	movs	r0, r3
 801853a:	4912      	ldr	r1, [pc, #72]	; (8018584 <screen_errorXY+0x98>)
 801853c:	f000 fcd0 	bl	8018ee0 <strcpy>
	LCD_Puts(0, 0, screenBuffer.line1);
 8018540:	2100      	movs	r1, #0
 8018542:	aa07      	add	r2, sp, #28
 8018544:	0008      	movs	r0, r1
 8018546:	f7fb ff53 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 1, screenBuffer.line2);
 801854a:	232d      	movs	r3, #45	; 0x2d
 801854c:	446b      	add	r3, sp
 801854e:	001a      	movs	r2, r3
 8018550:	2101      	movs	r1, #1
 8018552:	2000      	movs	r0, #0
 8018554:	f7fb ff4c 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 2, screenBuffer.line3);
 8018558:	233e      	movs	r3, #62	; 0x3e
 801855a:	446b      	add	r3, sp
 801855c:	001a      	movs	r2, r3
 801855e:	2102      	movs	r1, #2
 8018560:	2000      	movs	r0, #0
 8018562:	f7fb ff45 	bl	80143f0 <LCD_Puts>
	LCD_Puts(0, 3, screenBuffer.line4);
 8018566:	234f      	movs	r3, #79	; 0x4f
 8018568:	446b      	add	r3, sp
 801856a:	001a      	movs	r2, r3
 801856c:	2103      	movs	r1, #3
 801856e:	2000      	movs	r0, #0
 8018570:	f7fb ff3e 	bl	80143f0 <LCD_Puts>
}
 8018574:	b019      	add	sp, #100	; 0x64
 8018576:	bd30      	pop	{r4, r5, pc}
 8018578:	0801c49d 	.word	0x0801c49d
 801857c:	0801c4c0 	.word	0x0801c4c0
 8018580:	0801c7aa 	.word	0x0801c7aa
 8018584:	0801c7b8 	.word	0x0801c7b8

08018588 <__assert_func>:
 8018588:	b530      	push	{r4, r5, lr}
 801858a:	0014      	movs	r4, r2
 801858c:	001a      	movs	r2, r3
 801858e:	4b09      	ldr	r3, [pc, #36]	; (80185b4 <__assert_func+0x2c>)
 8018590:	0005      	movs	r5, r0
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	b085      	sub	sp, #20
 8018596:	68d8      	ldr	r0, [r3, #12]
 8018598:	4b07      	ldr	r3, [pc, #28]	; (80185b8 <__assert_func+0x30>)
 801859a:	2c00      	cmp	r4, #0
 801859c:	d101      	bne.n	80185a2 <__assert_func+0x1a>
 801859e:	4b07      	ldr	r3, [pc, #28]	; (80185bc <__assert_func+0x34>)
 80185a0:	001c      	movs	r4, r3
 80185a2:	9301      	str	r3, [sp, #4]
 80185a4:	9100      	str	r1, [sp, #0]
 80185a6:	002b      	movs	r3, r5
 80185a8:	4905      	ldr	r1, [pc, #20]	; (80185c0 <__assert_func+0x38>)
 80185aa:	9402      	str	r4, [sp, #8]
 80185ac:	f000 f810 	bl	80185d0 <fiprintf>
 80185b0:	f000 fde4 	bl	801917c <abort>
 80185b4:	200002c4 	.word	0x200002c4
 80185b8:	0801c7c4 	.word	0x0801c7c4
 80185bc:	0801bd58 	.word	0x0801bd58
 80185c0:	0801c7d1 	.word	0x0801c7d1

080185c4 <__errno>:
 80185c4:	4b01      	ldr	r3, [pc, #4]	; (80185cc <__errno+0x8>)
 80185c6:	6818      	ldr	r0, [r3, #0]
 80185c8:	4770      	bx	lr
 80185ca:	46c0      	nop			; (mov r8, r8)
 80185cc:	200002c4 	.word	0x200002c4

080185d0 <fiprintf>:
 80185d0:	b40e      	push	{r1, r2, r3}
 80185d2:	b503      	push	{r0, r1, lr}
 80185d4:	0001      	movs	r1, r0
 80185d6:	ab03      	add	r3, sp, #12
 80185d8:	4804      	ldr	r0, [pc, #16]	; (80185ec <fiprintf+0x1c>)
 80185da:	cb04      	ldmia	r3!, {r2}
 80185dc:	6800      	ldr	r0, [r0, #0]
 80185de:	9301      	str	r3, [sp, #4]
 80185e0:	f000 f862 	bl	80186a8 <_vfiprintf_r>
 80185e4:	b002      	add	sp, #8
 80185e6:	bc08      	pop	{r3}
 80185e8:	b003      	add	sp, #12
 80185ea:	4718      	bx	r3
 80185ec:	200002c4 	.word	0x200002c4

080185f0 <__libc_init_array>:
 80185f0:	b570      	push	{r4, r5, r6, lr}
 80185f2:	2600      	movs	r6, #0
 80185f4:	4d0c      	ldr	r5, [pc, #48]	; (8018628 <__libc_init_array+0x38>)
 80185f6:	4c0d      	ldr	r4, [pc, #52]	; (801862c <__libc_init_array+0x3c>)
 80185f8:	1b64      	subs	r4, r4, r5
 80185fa:	10a4      	asrs	r4, r4, #2
 80185fc:	42a6      	cmp	r6, r4
 80185fe:	d109      	bne.n	8018614 <__libc_init_array+0x24>
 8018600:	2600      	movs	r6, #0
 8018602:	f003 faf1 	bl	801bbe8 <_init>
 8018606:	4d0a      	ldr	r5, [pc, #40]	; (8018630 <__libc_init_array+0x40>)
 8018608:	4c0a      	ldr	r4, [pc, #40]	; (8018634 <__libc_init_array+0x44>)
 801860a:	1b64      	subs	r4, r4, r5
 801860c:	10a4      	asrs	r4, r4, #2
 801860e:	42a6      	cmp	r6, r4
 8018610:	d105      	bne.n	801861e <__libc_init_array+0x2e>
 8018612:	bd70      	pop	{r4, r5, r6, pc}
 8018614:	00b3      	lsls	r3, r6, #2
 8018616:	58eb      	ldr	r3, [r5, r3]
 8018618:	4798      	blx	r3
 801861a:	3601      	adds	r6, #1
 801861c:	e7ee      	b.n	80185fc <__libc_init_array+0xc>
 801861e:	00b3      	lsls	r3, r6, #2
 8018620:	58eb      	ldr	r3, [r5, r3]
 8018622:	4798      	blx	r3
 8018624:	3601      	adds	r6, #1
 8018626:	e7f2      	b.n	801860e <__libc_init_array+0x1e>
 8018628:	0801cc40 	.word	0x0801cc40
 801862c:	0801cc40 	.word	0x0801cc40
 8018630:	0801cc40 	.word	0x0801cc40
 8018634:	0801cc44 	.word	0x0801cc44

08018638 <memcpy>:
 8018638:	2300      	movs	r3, #0
 801863a:	b510      	push	{r4, lr}
 801863c:	429a      	cmp	r2, r3
 801863e:	d100      	bne.n	8018642 <memcpy+0xa>
 8018640:	bd10      	pop	{r4, pc}
 8018642:	5ccc      	ldrb	r4, [r1, r3]
 8018644:	54c4      	strb	r4, [r0, r3]
 8018646:	3301      	adds	r3, #1
 8018648:	e7f8      	b.n	801863c <memcpy+0x4>

0801864a <memset>:
 801864a:	0003      	movs	r3, r0
 801864c:	1882      	adds	r2, r0, r2
 801864e:	4293      	cmp	r3, r2
 8018650:	d100      	bne.n	8018654 <memset+0xa>
 8018652:	4770      	bx	lr
 8018654:	7019      	strb	r1, [r3, #0]
 8018656:	3301      	adds	r3, #1
 8018658:	e7f9      	b.n	801864e <memset+0x4>

0801865a <__sfputc_r>:
 801865a:	6893      	ldr	r3, [r2, #8]
 801865c:	b510      	push	{r4, lr}
 801865e:	3b01      	subs	r3, #1
 8018660:	6093      	str	r3, [r2, #8]
 8018662:	2b00      	cmp	r3, #0
 8018664:	da04      	bge.n	8018670 <__sfputc_r+0x16>
 8018666:	6994      	ldr	r4, [r2, #24]
 8018668:	42a3      	cmp	r3, r4
 801866a:	db07      	blt.n	801867c <__sfputc_r+0x22>
 801866c:	290a      	cmp	r1, #10
 801866e:	d005      	beq.n	801867c <__sfputc_r+0x22>
 8018670:	6813      	ldr	r3, [r2, #0]
 8018672:	1c58      	adds	r0, r3, #1
 8018674:	6010      	str	r0, [r2, #0]
 8018676:	7019      	strb	r1, [r3, #0]
 8018678:	0008      	movs	r0, r1
 801867a:	bd10      	pop	{r4, pc}
 801867c:	f000 fc9c 	bl	8018fb8 <__swbuf_r>
 8018680:	0001      	movs	r1, r0
 8018682:	e7f9      	b.n	8018678 <__sfputc_r+0x1e>

08018684 <__sfputs_r>:
 8018684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018686:	0006      	movs	r6, r0
 8018688:	000f      	movs	r7, r1
 801868a:	0014      	movs	r4, r2
 801868c:	18d5      	adds	r5, r2, r3
 801868e:	42ac      	cmp	r4, r5
 8018690:	d101      	bne.n	8018696 <__sfputs_r+0x12>
 8018692:	2000      	movs	r0, #0
 8018694:	e007      	b.n	80186a6 <__sfputs_r+0x22>
 8018696:	7821      	ldrb	r1, [r4, #0]
 8018698:	003a      	movs	r2, r7
 801869a:	0030      	movs	r0, r6
 801869c:	f7ff ffdd 	bl	801865a <__sfputc_r>
 80186a0:	3401      	adds	r4, #1
 80186a2:	1c43      	adds	r3, r0, #1
 80186a4:	d1f3      	bne.n	801868e <__sfputs_r+0xa>
 80186a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080186a8 <_vfiprintf_r>:
 80186a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186aa:	b0a1      	sub	sp, #132	; 0x84
 80186ac:	0006      	movs	r6, r0
 80186ae:	000c      	movs	r4, r1
 80186b0:	001f      	movs	r7, r3
 80186b2:	9203      	str	r2, [sp, #12]
 80186b4:	2800      	cmp	r0, #0
 80186b6:	d004      	beq.n	80186c2 <_vfiprintf_r+0x1a>
 80186b8:	6983      	ldr	r3, [r0, #24]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d101      	bne.n	80186c2 <_vfiprintf_r+0x1a>
 80186be:	f000 fea5 	bl	801940c <__sinit>
 80186c2:	4b8e      	ldr	r3, [pc, #568]	; (80188fc <_vfiprintf_r+0x254>)
 80186c4:	429c      	cmp	r4, r3
 80186c6:	d11c      	bne.n	8018702 <_vfiprintf_r+0x5a>
 80186c8:	6874      	ldr	r4, [r6, #4]
 80186ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80186cc:	07db      	lsls	r3, r3, #31
 80186ce:	d405      	bmi.n	80186dc <_vfiprintf_r+0x34>
 80186d0:	89a3      	ldrh	r3, [r4, #12]
 80186d2:	059b      	lsls	r3, r3, #22
 80186d4:	d402      	bmi.n	80186dc <_vfiprintf_r+0x34>
 80186d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186d8:	f000 ff39 	bl	801954e <__retarget_lock_acquire_recursive>
 80186dc:	89a3      	ldrh	r3, [r4, #12]
 80186de:	071b      	lsls	r3, r3, #28
 80186e0:	d502      	bpl.n	80186e8 <_vfiprintf_r+0x40>
 80186e2:	6923      	ldr	r3, [r4, #16]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d11d      	bne.n	8018724 <_vfiprintf_r+0x7c>
 80186e8:	0021      	movs	r1, r4
 80186ea:	0030      	movs	r0, r6
 80186ec:	f000 fcce 	bl	801908c <__swsetup_r>
 80186f0:	2800      	cmp	r0, #0
 80186f2:	d017      	beq.n	8018724 <_vfiprintf_r+0x7c>
 80186f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80186f6:	07db      	lsls	r3, r3, #31
 80186f8:	d50d      	bpl.n	8018716 <_vfiprintf_r+0x6e>
 80186fa:	2001      	movs	r0, #1
 80186fc:	4240      	negs	r0, r0
 80186fe:	b021      	add	sp, #132	; 0x84
 8018700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018702:	4b7f      	ldr	r3, [pc, #508]	; (8018900 <_vfiprintf_r+0x258>)
 8018704:	429c      	cmp	r4, r3
 8018706:	d101      	bne.n	801870c <_vfiprintf_r+0x64>
 8018708:	68b4      	ldr	r4, [r6, #8]
 801870a:	e7de      	b.n	80186ca <_vfiprintf_r+0x22>
 801870c:	4b7d      	ldr	r3, [pc, #500]	; (8018904 <_vfiprintf_r+0x25c>)
 801870e:	429c      	cmp	r4, r3
 8018710:	d1db      	bne.n	80186ca <_vfiprintf_r+0x22>
 8018712:	68f4      	ldr	r4, [r6, #12]
 8018714:	e7d9      	b.n	80186ca <_vfiprintf_r+0x22>
 8018716:	89a3      	ldrh	r3, [r4, #12]
 8018718:	059b      	lsls	r3, r3, #22
 801871a:	d4ee      	bmi.n	80186fa <_vfiprintf_r+0x52>
 801871c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801871e:	f000 ff17 	bl	8019550 <__retarget_lock_release_recursive>
 8018722:	e7ea      	b.n	80186fa <_vfiprintf_r+0x52>
 8018724:	2300      	movs	r3, #0
 8018726:	ad08      	add	r5, sp, #32
 8018728:	616b      	str	r3, [r5, #20]
 801872a:	3320      	adds	r3, #32
 801872c:	766b      	strb	r3, [r5, #25]
 801872e:	3310      	adds	r3, #16
 8018730:	76ab      	strb	r3, [r5, #26]
 8018732:	9707      	str	r7, [sp, #28]
 8018734:	9f03      	ldr	r7, [sp, #12]
 8018736:	783b      	ldrb	r3, [r7, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d001      	beq.n	8018740 <_vfiprintf_r+0x98>
 801873c:	2b25      	cmp	r3, #37	; 0x25
 801873e:	d14e      	bne.n	80187de <_vfiprintf_r+0x136>
 8018740:	9b03      	ldr	r3, [sp, #12]
 8018742:	1afb      	subs	r3, r7, r3
 8018744:	9305      	str	r3, [sp, #20]
 8018746:	9b03      	ldr	r3, [sp, #12]
 8018748:	429f      	cmp	r7, r3
 801874a:	d00d      	beq.n	8018768 <_vfiprintf_r+0xc0>
 801874c:	9b05      	ldr	r3, [sp, #20]
 801874e:	0021      	movs	r1, r4
 8018750:	0030      	movs	r0, r6
 8018752:	9a03      	ldr	r2, [sp, #12]
 8018754:	f7ff ff96 	bl	8018684 <__sfputs_r>
 8018758:	1c43      	adds	r3, r0, #1
 801875a:	d100      	bne.n	801875e <_vfiprintf_r+0xb6>
 801875c:	e0b5      	b.n	80188ca <_vfiprintf_r+0x222>
 801875e:	696a      	ldr	r2, [r5, #20]
 8018760:	9b05      	ldr	r3, [sp, #20]
 8018762:	4694      	mov	ip, r2
 8018764:	4463      	add	r3, ip
 8018766:	616b      	str	r3, [r5, #20]
 8018768:	783b      	ldrb	r3, [r7, #0]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d100      	bne.n	8018770 <_vfiprintf_r+0xc8>
 801876e:	e0ac      	b.n	80188ca <_vfiprintf_r+0x222>
 8018770:	2201      	movs	r2, #1
 8018772:	1c7b      	adds	r3, r7, #1
 8018774:	9303      	str	r3, [sp, #12]
 8018776:	2300      	movs	r3, #0
 8018778:	4252      	negs	r2, r2
 801877a:	606a      	str	r2, [r5, #4]
 801877c:	a904      	add	r1, sp, #16
 801877e:	3254      	adds	r2, #84	; 0x54
 8018780:	1852      	adds	r2, r2, r1
 8018782:	602b      	str	r3, [r5, #0]
 8018784:	60eb      	str	r3, [r5, #12]
 8018786:	60ab      	str	r3, [r5, #8]
 8018788:	7013      	strb	r3, [r2, #0]
 801878a:	65ab      	str	r3, [r5, #88]	; 0x58
 801878c:	9b03      	ldr	r3, [sp, #12]
 801878e:	2205      	movs	r2, #5
 8018790:	7819      	ldrb	r1, [r3, #0]
 8018792:	485d      	ldr	r0, [pc, #372]	; (8018908 <_vfiprintf_r+0x260>)
 8018794:	f000 ff68 	bl	8019668 <memchr>
 8018798:	9b03      	ldr	r3, [sp, #12]
 801879a:	1c5f      	adds	r7, r3, #1
 801879c:	2800      	cmp	r0, #0
 801879e:	d120      	bne.n	80187e2 <_vfiprintf_r+0x13a>
 80187a0:	682a      	ldr	r2, [r5, #0]
 80187a2:	06d3      	lsls	r3, r2, #27
 80187a4:	d504      	bpl.n	80187b0 <_vfiprintf_r+0x108>
 80187a6:	2353      	movs	r3, #83	; 0x53
 80187a8:	a904      	add	r1, sp, #16
 80187aa:	185b      	adds	r3, r3, r1
 80187ac:	2120      	movs	r1, #32
 80187ae:	7019      	strb	r1, [r3, #0]
 80187b0:	0713      	lsls	r3, r2, #28
 80187b2:	d504      	bpl.n	80187be <_vfiprintf_r+0x116>
 80187b4:	2353      	movs	r3, #83	; 0x53
 80187b6:	a904      	add	r1, sp, #16
 80187b8:	185b      	adds	r3, r3, r1
 80187ba:	212b      	movs	r1, #43	; 0x2b
 80187bc:	7019      	strb	r1, [r3, #0]
 80187be:	9b03      	ldr	r3, [sp, #12]
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	2b2a      	cmp	r3, #42	; 0x2a
 80187c4:	d016      	beq.n	80187f4 <_vfiprintf_r+0x14c>
 80187c6:	2100      	movs	r1, #0
 80187c8:	68eb      	ldr	r3, [r5, #12]
 80187ca:	9f03      	ldr	r7, [sp, #12]
 80187cc:	783a      	ldrb	r2, [r7, #0]
 80187ce:	1c78      	adds	r0, r7, #1
 80187d0:	3a30      	subs	r2, #48	; 0x30
 80187d2:	4684      	mov	ip, r0
 80187d4:	2a09      	cmp	r2, #9
 80187d6:	d94f      	bls.n	8018878 <_vfiprintf_r+0x1d0>
 80187d8:	2900      	cmp	r1, #0
 80187da:	d111      	bne.n	8018800 <_vfiprintf_r+0x158>
 80187dc:	e017      	b.n	801880e <_vfiprintf_r+0x166>
 80187de:	3701      	adds	r7, #1
 80187e0:	e7a9      	b.n	8018736 <_vfiprintf_r+0x8e>
 80187e2:	4b49      	ldr	r3, [pc, #292]	; (8018908 <_vfiprintf_r+0x260>)
 80187e4:	682a      	ldr	r2, [r5, #0]
 80187e6:	1ac0      	subs	r0, r0, r3
 80187e8:	2301      	movs	r3, #1
 80187ea:	4083      	lsls	r3, r0
 80187ec:	4313      	orrs	r3, r2
 80187ee:	602b      	str	r3, [r5, #0]
 80187f0:	9703      	str	r7, [sp, #12]
 80187f2:	e7cb      	b.n	801878c <_vfiprintf_r+0xe4>
 80187f4:	9b07      	ldr	r3, [sp, #28]
 80187f6:	1d19      	adds	r1, r3, #4
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	9107      	str	r1, [sp, #28]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	db01      	blt.n	8018804 <_vfiprintf_r+0x15c>
 8018800:	930b      	str	r3, [sp, #44]	; 0x2c
 8018802:	e004      	b.n	801880e <_vfiprintf_r+0x166>
 8018804:	425b      	negs	r3, r3
 8018806:	60eb      	str	r3, [r5, #12]
 8018808:	2302      	movs	r3, #2
 801880a:	4313      	orrs	r3, r2
 801880c:	602b      	str	r3, [r5, #0]
 801880e:	783b      	ldrb	r3, [r7, #0]
 8018810:	2b2e      	cmp	r3, #46	; 0x2e
 8018812:	d10a      	bne.n	801882a <_vfiprintf_r+0x182>
 8018814:	787b      	ldrb	r3, [r7, #1]
 8018816:	2b2a      	cmp	r3, #42	; 0x2a
 8018818:	d137      	bne.n	801888a <_vfiprintf_r+0x1e2>
 801881a:	9b07      	ldr	r3, [sp, #28]
 801881c:	3702      	adds	r7, #2
 801881e:	1d1a      	adds	r2, r3, #4
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	9207      	str	r2, [sp, #28]
 8018824:	2b00      	cmp	r3, #0
 8018826:	db2d      	blt.n	8018884 <_vfiprintf_r+0x1dc>
 8018828:	9309      	str	r3, [sp, #36]	; 0x24
 801882a:	2203      	movs	r2, #3
 801882c:	7839      	ldrb	r1, [r7, #0]
 801882e:	4837      	ldr	r0, [pc, #220]	; (801890c <_vfiprintf_r+0x264>)
 8018830:	f000 ff1a 	bl	8019668 <memchr>
 8018834:	2800      	cmp	r0, #0
 8018836:	d007      	beq.n	8018848 <_vfiprintf_r+0x1a0>
 8018838:	4b34      	ldr	r3, [pc, #208]	; (801890c <_vfiprintf_r+0x264>)
 801883a:	682a      	ldr	r2, [r5, #0]
 801883c:	1ac0      	subs	r0, r0, r3
 801883e:	2340      	movs	r3, #64	; 0x40
 8018840:	4083      	lsls	r3, r0
 8018842:	4313      	orrs	r3, r2
 8018844:	3701      	adds	r7, #1
 8018846:	602b      	str	r3, [r5, #0]
 8018848:	7839      	ldrb	r1, [r7, #0]
 801884a:	1c7b      	adds	r3, r7, #1
 801884c:	2206      	movs	r2, #6
 801884e:	4830      	ldr	r0, [pc, #192]	; (8018910 <_vfiprintf_r+0x268>)
 8018850:	9303      	str	r3, [sp, #12]
 8018852:	7629      	strb	r1, [r5, #24]
 8018854:	f000 ff08 	bl	8019668 <memchr>
 8018858:	2800      	cmp	r0, #0
 801885a:	d045      	beq.n	80188e8 <_vfiprintf_r+0x240>
 801885c:	4b2d      	ldr	r3, [pc, #180]	; (8018914 <_vfiprintf_r+0x26c>)
 801885e:	2b00      	cmp	r3, #0
 8018860:	d127      	bne.n	80188b2 <_vfiprintf_r+0x20a>
 8018862:	2207      	movs	r2, #7
 8018864:	9b07      	ldr	r3, [sp, #28]
 8018866:	3307      	adds	r3, #7
 8018868:	4393      	bics	r3, r2
 801886a:	3308      	adds	r3, #8
 801886c:	9307      	str	r3, [sp, #28]
 801886e:	696b      	ldr	r3, [r5, #20]
 8018870:	9a04      	ldr	r2, [sp, #16]
 8018872:	189b      	adds	r3, r3, r2
 8018874:	616b      	str	r3, [r5, #20]
 8018876:	e75d      	b.n	8018734 <_vfiprintf_r+0x8c>
 8018878:	210a      	movs	r1, #10
 801887a:	434b      	muls	r3, r1
 801887c:	4667      	mov	r7, ip
 801887e:	189b      	adds	r3, r3, r2
 8018880:	3909      	subs	r1, #9
 8018882:	e7a3      	b.n	80187cc <_vfiprintf_r+0x124>
 8018884:	2301      	movs	r3, #1
 8018886:	425b      	negs	r3, r3
 8018888:	e7ce      	b.n	8018828 <_vfiprintf_r+0x180>
 801888a:	2300      	movs	r3, #0
 801888c:	001a      	movs	r2, r3
 801888e:	3701      	adds	r7, #1
 8018890:	606b      	str	r3, [r5, #4]
 8018892:	7839      	ldrb	r1, [r7, #0]
 8018894:	1c78      	adds	r0, r7, #1
 8018896:	3930      	subs	r1, #48	; 0x30
 8018898:	4684      	mov	ip, r0
 801889a:	2909      	cmp	r1, #9
 801889c:	d903      	bls.n	80188a6 <_vfiprintf_r+0x1fe>
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d0c3      	beq.n	801882a <_vfiprintf_r+0x182>
 80188a2:	9209      	str	r2, [sp, #36]	; 0x24
 80188a4:	e7c1      	b.n	801882a <_vfiprintf_r+0x182>
 80188a6:	230a      	movs	r3, #10
 80188a8:	435a      	muls	r2, r3
 80188aa:	4667      	mov	r7, ip
 80188ac:	1852      	adds	r2, r2, r1
 80188ae:	3b09      	subs	r3, #9
 80188b0:	e7ef      	b.n	8018892 <_vfiprintf_r+0x1ea>
 80188b2:	ab07      	add	r3, sp, #28
 80188b4:	9300      	str	r3, [sp, #0]
 80188b6:	0022      	movs	r2, r4
 80188b8:	0029      	movs	r1, r5
 80188ba:	0030      	movs	r0, r6
 80188bc:	4b16      	ldr	r3, [pc, #88]	; (8018918 <_vfiprintf_r+0x270>)
 80188be:	e000      	b.n	80188c2 <_vfiprintf_r+0x21a>
 80188c0:	bf00      	nop
 80188c2:	9004      	str	r0, [sp, #16]
 80188c4:	9b04      	ldr	r3, [sp, #16]
 80188c6:	3301      	adds	r3, #1
 80188c8:	d1d1      	bne.n	801886e <_vfiprintf_r+0x1c6>
 80188ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80188cc:	07db      	lsls	r3, r3, #31
 80188ce:	d405      	bmi.n	80188dc <_vfiprintf_r+0x234>
 80188d0:	89a3      	ldrh	r3, [r4, #12]
 80188d2:	059b      	lsls	r3, r3, #22
 80188d4:	d402      	bmi.n	80188dc <_vfiprintf_r+0x234>
 80188d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80188d8:	f000 fe3a 	bl	8019550 <__retarget_lock_release_recursive>
 80188dc:	89a3      	ldrh	r3, [r4, #12]
 80188de:	065b      	lsls	r3, r3, #25
 80188e0:	d500      	bpl.n	80188e4 <_vfiprintf_r+0x23c>
 80188e2:	e70a      	b.n	80186fa <_vfiprintf_r+0x52>
 80188e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80188e6:	e70a      	b.n	80186fe <_vfiprintf_r+0x56>
 80188e8:	ab07      	add	r3, sp, #28
 80188ea:	9300      	str	r3, [sp, #0]
 80188ec:	0022      	movs	r2, r4
 80188ee:	0029      	movs	r1, r5
 80188f0:	0030      	movs	r0, r6
 80188f2:	4b09      	ldr	r3, [pc, #36]	; (8018918 <_vfiprintf_r+0x270>)
 80188f4:	f000 f882 	bl	80189fc <_printf_i>
 80188f8:	e7e3      	b.n	80188c2 <_vfiprintf_r+0x21a>
 80188fa:	46c0      	nop			; (mov r8, r8)
 80188fc:	0801c8cc 	.word	0x0801c8cc
 8018900:	0801c8ec 	.word	0x0801c8ec
 8018904:	0801c8ac 	.word	0x0801c8ac
 8018908:	0801c804 	.word	0x0801c804
 801890c:	0801c80a 	.word	0x0801c80a
 8018910:	0801c80e 	.word	0x0801c80e
 8018914:	00000000 	.word	0x00000000
 8018918:	08018685 	.word	0x08018685

0801891c <_printf_common>:
 801891c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801891e:	0015      	movs	r5, r2
 8018920:	9301      	str	r3, [sp, #4]
 8018922:	688a      	ldr	r2, [r1, #8]
 8018924:	690b      	ldr	r3, [r1, #16]
 8018926:	000c      	movs	r4, r1
 8018928:	9000      	str	r0, [sp, #0]
 801892a:	4293      	cmp	r3, r2
 801892c:	da00      	bge.n	8018930 <_printf_common+0x14>
 801892e:	0013      	movs	r3, r2
 8018930:	0022      	movs	r2, r4
 8018932:	602b      	str	r3, [r5, #0]
 8018934:	3243      	adds	r2, #67	; 0x43
 8018936:	7812      	ldrb	r2, [r2, #0]
 8018938:	2a00      	cmp	r2, #0
 801893a:	d001      	beq.n	8018940 <_printf_common+0x24>
 801893c:	3301      	adds	r3, #1
 801893e:	602b      	str	r3, [r5, #0]
 8018940:	6823      	ldr	r3, [r4, #0]
 8018942:	069b      	lsls	r3, r3, #26
 8018944:	d502      	bpl.n	801894c <_printf_common+0x30>
 8018946:	682b      	ldr	r3, [r5, #0]
 8018948:	3302      	adds	r3, #2
 801894a:	602b      	str	r3, [r5, #0]
 801894c:	6822      	ldr	r2, [r4, #0]
 801894e:	2306      	movs	r3, #6
 8018950:	0017      	movs	r7, r2
 8018952:	401f      	ands	r7, r3
 8018954:	421a      	tst	r2, r3
 8018956:	d027      	beq.n	80189a8 <_printf_common+0x8c>
 8018958:	0023      	movs	r3, r4
 801895a:	3343      	adds	r3, #67	; 0x43
 801895c:	781b      	ldrb	r3, [r3, #0]
 801895e:	1e5a      	subs	r2, r3, #1
 8018960:	4193      	sbcs	r3, r2
 8018962:	6822      	ldr	r2, [r4, #0]
 8018964:	0692      	lsls	r2, r2, #26
 8018966:	d430      	bmi.n	80189ca <_printf_common+0xae>
 8018968:	0022      	movs	r2, r4
 801896a:	9901      	ldr	r1, [sp, #4]
 801896c:	9800      	ldr	r0, [sp, #0]
 801896e:	9e08      	ldr	r6, [sp, #32]
 8018970:	3243      	adds	r2, #67	; 0x43
 8018972:	47b0      	blx	r6
 8018974:	1c43      	adds	r3, r0, #1
 8018976:	d025      	beq.n	80189c4 <_printf_common+0xa8>
 8018978:	2306      	movs	r3, #6
 801897a:	6820      	ldr	r0, [r4, #0]
 801897c:	682a      	ldr	r2, [r5, #0]
 801897e:	68e1      	ldr	r1, [r4, #12]
 8018980:	2500      	movs	r5, #0
 8018982:	4003      	ands	r3, r0
 8018984:	2b04      	cmp	r3, #4
 8018986:	d103      	bne.n	8018990 <_printf_common+0x74>
 8018988:	1a8d      	subs	r5, r1, r2
 801898a:	43eb      	mvns	r3, r5
 801898c:	17db      	asrs	r3, r3, #31
 801898e:	401d      	ands	r5, r3
 8018990:	68a3      	ldr	r3, [r4, #8]
 8018992:	6922      	ldr	r2, [r4, #16]
 8018994:	4293      	cmp	r3, r2
 8018996:	dd01      	ble.n	801899c <_printf_common+0x80>
 8018998:	1a9b      	subs	r3, r3, r2
 801899a:	18ed      	adds	r5, r5, r3
 801899c:	2700      	movs	r7, #0
 801899e:	42bd      	cmp	r5, r7
 80189a0:	d120      	bne.n	80189e4 <_printf_common+0xc8>
 80189a2:	2000      	movs	r0, #0
 80189a4:	e010      	b.n	80189c8 <_printf_common+0xac>
 80189a6:	3701      	adds	r7, #1
 80189a8:	68e3      	ldr	r3, [r4, #12]
 80189aa:	682a      	ldr	r2, [r5, #0]
 80189ac:	1a9b      	subs	r3, r3, r2
 80189ae:	42bb      	cmp	r3, r7
 80189b0:	ddd2      	ble.n	8018958 <_printf_common+0x3c>
 80189b2:	0022      	movs	r2, r4
 80189b4:	2301      	movs	r3, #1
 80189b6:	9901      	ldr	r1, [sp, #4]
 80189b8:	9800      	ldr	r0, [sp, #0]
 80189ba:	9e08      	ldr	r6, [sp, #32]
 80189bc:	3219      	adds	r2, #25
 80189be:	47b0      	blx	r6
 80189c0:	1c43      	adds	r3, r0, #1
 80189c2:	d1f0      	bne.n	80189a6 <_printf_common+0x8a>
 80189c4:	2001      	movs	r0, #1
 80189c6:	4240      	negs	r0, r0
 80189c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80189ca:	2030      	movs	r0, #48	; 0x30
 80189cc:	18e1      	adds	r1, r4, r3
 80189ce:	3143      	adds	r1, #67	; 0x43
 80189d0:	7008      	strb	r0, [r1, #0]
 80189d2:	0021      	movs	r1, r4
 80189d4:	1c5a      	adds	r2, r3, #1
 80189d6:	3145      	adds	r1, #69	; 0x45
 80189d8:	7809      	ldrb	r1, [r1, #0]
 80189da:	18a2      	adds	r2, r4, r2
 80189dc:	3243      	adds	r2, #67	; 0x43
 80189de:	3302      	adds	r3, #2
 80189e0:	7011      	strb	r1, [r2, #0]
 80189e2:	e7c1      	b.n	8018968 <_printf_common+0x4c>
 80189e4:	0022      	movs	r2, r4
 80189e6:	2301      	movs	r3, #1
 80189e8:	9901      	ldr	r1, [sp, #4]
 80189ea:	9800      	ldr	r0, [sp, #0]
 80189ec:	9e08      	ldr	r6, [sp, #32]
 80189ee:	321a      	adds	r2, #26
 80189f0:	47b0      	blx	r6
 80189f2:	1c43      	adds	r3, r0, #1
 80189f4:	d0e6      	beq.n	80189c4 <_printf_common+0xa8>
 80189f6:	3701      	adds	r7, #1
 80189f8:	e7d1      	b.n	801899e <_printf_common+0x82>
	...

080189fc <_printf_i>:
 80189fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189fe:	b08b      	sub	sp, #44	; 0x2c
 8018a00:	9206      	str	r2, [sp, #24]
 8018a02:	000a      	movs	r2, r1
 8018a04:	3243      	adds	r2, #67	; 0x43
 8018a06:	9307      	str	r3, [sp, #28]
 8018a08:	9005      	str	r0, [sp, #20]
 8018a0a:	9204      	str	r2, [sp, #16]
 8018a0c:	7e0a      	ldrb	r2, [r1, #24]
 8018a0e:	000c      	movs	r4, r1
 8018a10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a12:	2a78      	cmp	r2, #120	; 0x78
 8018a14:	d807      	bhi.n	8018a26 <_printf_i+0x2a>
 8018a16:	2a62      	cmp	r2, #98	; 0x62
 8018a18:	d809      	bhi.n	8018a2e <_printf_i+0x32>
 8018a1a:	2a00      	cmp	r2, #0
 8018a1c:	d100      	bne.n	8018a20 <_printf_i+0x24>
 8018a1e:	e0c1      	b.n	8018ba4 <_printf_i+0x1a8>
 8018a20:	2a58      	cmp	r2, #88	; 0x58
 8018a22:	d100      	bne.n	8018a26 <_printf_i+0x2a>
 8018a24:	e08c      	b.n	8018b40 <_printf_i+0x144>
 8018a26:	0026      	movs	r6, r4
 8018a28:	3642      	adds	r6, #66	; 0x42
 8018a2a:	7032      	strb	r2, [r6, #0]
 8018a2c:	e022      	b.n	8018a74 <_printf_i+0x78>
 8018a2e:	0010      	movs	r0, r2
 8018a30:	3863      	subs	r0, #99	; 0x63
 8018a32:	2815      	cmp	r0, #21
 8018a34:	d8f7      	bhi.n	8018a26 <_printf_i+0x2a>
 8018a36:	f7ef f803 	bl	8007a40 <__gnu_thumb1_case_shi>
 8018a3a:	0016      	.short	0x0016
 8018a3c:	fff6001f 	.word	0xfff6001f
 8018a40:	fff6fff6 	.word	0xfff6fff6
 8018a44:	001ffff6 	.word	0x001ffff6
 8018a48:	fff6fff6 	.word	0xfff6fff6
 8018a4c:	fff6fff6 	.word	0xfff6fff6
 8018a50:	003600a8 	.word	0x003600a8
 8018a54:	fff6009a 	.word	0xfff6009a
 8018a58:	00b9fff6 	.word	0x00b9fff6
 8018a5c:	0036fff6 	.word	0x0036fff6
 8018a60:	fff6fff6 	.word	0xfff6fff6
 8018a64:	009e      	.short	0x009e
 8018a66:	0026      	movs	r6, r4
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	3642      	adds	r6, #66	; 0x42
 8018a6c:	1d11      	adds	r1, r2, #4
 8018a6e:	6019      	str	r1, [r3, #0]
 8018a70:	6813      	ldr	r3, [r2, #0]
 8018a72:	7033      	strb	r3, [r6, #0]
 8018a74:	2301      	movs	r3, #1
 8018a76:	e0a7      	b.n	8018bc8 <_printf_i+0x1cc>
 8018a78:	6808      	ldr	r0, [r1, #0]
 8018a7a:	6819      	ldr	r1, [r3, #0]
 8018a7c:	1d0a      	adds	r2, r1, #4
 8018a7e:	0605      	lsls	r5, r0, #24
 8018a80:	d50b      	bpl.n	8018a9a <_printf_i+0x9e>
 8018a82:	680d      	ldr	r5, [r1, #0]
 8018a84:	601a      	str	r2, [r3, #0]
 8018a86:	2d00      	cmp	r5, #0
 8018a88:	da03      	bge.n	8018a92 <_printf_i+0x96>
 8018a8a:	232d      	movs	r3, #45	; 0x2d
 8018a8c:	9a04      	ldr	r2, [sp, #16]
 8018a8e:	426d      	negs	r5, r5
 8018a90:	7013      	strb	r3, [r2, #0]
 8018a92:	4b61      	ldr	r3, [pc, #388]	; (8018c18 <_printf_i+0x21c>)
 8018a94:	270a      	movs	r7, #10
 8018a96:	9303      	str	r3, [sp, #12]
 8018a98:	e01b      	b.n	8018ad2 <_printf_i+0xd6>
 8018a9a:	680d      	ldr	r5, [r1, #0]
 8018a9c:	601a      	str	r2, [r3, #0]
 8018a9e:	0641      	lsls	r1, r0, #25
 8018aa0:	d5f1      	bpl.n	8018a86 <_printf_i+0x8a>
 8018aa2:	b22d      	sxth	r5, r5
 8018aa4:	e7ef      	b.n	8018a86 <_printf_i+0x8a>
 8018aa6:	680d      	ldr	r5, [r1, #0]
 8018aa8:	6819      	ldr	r1, [r3, #0]
 8018aaa:	1d08      	adds	r0, r1, #4
 8018aac:	6018      	str	r0, [r3, #0]
 8018aae:	062e      	lsls	r6, r5, #24
 8018ab0:	d501      	bpl.n	8018ab6 <_printf_i+0xba>
 8018ab2:	680d      	ldr	r5, [r1, #0]
 8018ab4:	e003      	b.n	8018abe <_printf_i+0xc2>
 8018ab6:	066d      	lsls	r5, r5, #25
 8018ab8:	d5fb      	bpl.n	8018ab2 <_printf_i+0xb6>
 8018aba:	680d      	ldr	r5, [r1, #0]
 8018abc:	b2ad      	uxth	r5, r5
 8018abe:	4b56      	ldr	r3, [pc, #344]	; (8018c18 <_printf_i+0x21c>)
 8018ac0:	2708      	movs	r7, #8
 8018ac2:	9303      	str	r3, [sp, #12]
 8018ac4:	2a6f      	cmp	r2, #111	; 0x6f
 8018ac6:	d000      	beq.n	8018aca <_printf_i+0xce>
 8018ac8:	3702      	adds	r7, #2
 8018aca:	0023      	movs	r3, r4
 8018acc:	2200      	movs	r2, #0
 8018ace:	3343      	adds	r3, #67	; 0x43
 8018ad0:	701a      	strb	r2, [r3, #0]
 8018ad2:	6863      	ldr	r3, [r4, #4]
 8018ad4:	60a3      	str	r3, [r4, #8]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	db03      	blt.n	8018ae2 <_printf_i+0xe6>
 8018ada:	2204      	movs	r2, #4
 8018adc:	6821      	ldr	r1, [r4, #0]
 8018ade:	4391      	bics	r1, r2
 8018ae0:	6021      	str	r1, [r4, #0]
 8018ae2:	2d00      	cmp	r5, #0
 8018ae4:	d102      	bne.n	8018aec <_printf_i+0xf0>
 8018ae6:	9e04      	ldr	r6, [sp, #16]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d00c      	beq.n	8018b06 <_printf_i+0x10a>
 8018aec:	9e04      	ldr	r6, [sp, #16]
 8018aee:	0028      	movs	r0, r5
 8018af0:	0039      	movs	r1, r7
 8018af2:	f7ef f83f 	bl	8007b74 <__aeabi_uidivmod>
 8018af6:	9b03      	ldr	r3, [sp, #12]
 8018af8:	3e01      	subs	r6, #1
 8018afa:	5c5b      	ldrb	r3, [r3, r1]
 8018afc:	7033      	strb	r3, [r6, #0]
 8018afe:	002b      	movs	r3, r5
 8018b00:	0005      	movs	r5, r0
 8018b02:	429f      	cmp	r7, r3
 8018b04:	d9f3      	bls.n	8018aee <_printf_i+0xf2>
 8018b06:	2f08      	cmp	r7, #8
 8018b08:	d109      	bne.n	8018b1e <_printf_i+0x122>
 8018b0a:	6823      	ldr	r3, [r4, #0]
 8018b0c:	07db      	lsls	r3, r3, #31
 8018b0e:	d506      	bpl.n	8018b1e <_printf_i+0x122>
 8018b10:	6863      	ldr	r3, [r4, #4]
 8018b12:	6922      	ldr	r2, [r4, #16]
 8018b14:	4293      	cmp	r3, r2
 8018b16:	dc02      	bgt.n	8018b1e <_printf_i+0x122>
 8018b18:	2330      	movs	r3, #48	; 0x30
 8018b1a:	3e01      	subs	r6, #1
 8018b1c:	7033      	strb	r3, [r6, #0]
 8018b1e:	9b04      	ldr	r3, [sp, #16]
 8018b20:	1b9b      	subs	r3, r3, r6
 8018b22:	6123      	str	r3, [r4, #16]
 8018b24:	9b07      	ldr	r3, [sp, #28]
 8018b26:	0021      	movs	r1, r4
 8018b28:	9300      	str	r3, [sp, #0]
 8018b2a:	9805      	ldr	r0, [sp, #20]
 8018b2c:	9b06      	ldr	r3, [sp, #24]
 8018b2e:	aa09      	add	r2, sp, #36	; 0x24
 8018b30:	f7ff fef4 	bl	801891c <_printf_common>
 8018b34:	1c43      	adds	r3, r0, #1
 8018b36:	d14c      	bne.n	8018bd2 <_printf_i+0x1d6>
 8018b38:	2001      	movs	r0, #1
 8018b3a:	4240      	negs	r0, r0
 8018b3c:	b00b      	add	sp, #44	; 0x2c
 8018b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b40:	3145      	adds	r1, #69	; 0x45
 8018b42:	700a      	strb	r2, [r1, #0]
 8018b44:	4a34      	ldr	r2, [pc, #208]	; (8018c18 <_printf_i+0x21c>)
 8018b46:	9203      	str	r2, [sp, #12]
 8018b48:	681a      	ldr	r2, [r3, #0]
 8018b4a:	6821      	ldr	r1, [r4, #0]
 8018b4c:	ca20      	ldmia	r2!, {r5}
 8018b4e:	601a      	str	r2, [r3, #0]
 8018b50:	0608      	lsls	r0, r1, #24
 8018b52:	d516      	bpl.n	8018b82 <_printf_i+0x186>
 8018b54:	07cb      	lsls	r3, r1, #31
 8018b56:	d502      	bpl.n	8018b5e <_printf_i+0x162>
 8018b58:	2320      	movs	r3, #32
 8018b5a:	4319      	orrs	r1, r3
 8018b5c:	6021      	str	r1, [r4, #0]
 8018b5e:	2710      	movs	r7, #16
 8018b60:	2d00      	cmp	r5, #0
 8018b62:	d1b2      	bne.n	8018aca <_printf_i+0xce>
 8018b64:	2320      	movs	r3, #32
 8018b66:	6822      	ldr	r2, [r4, #0]
 8018b68:	439a      	bics	r2, r3
 8018b6a:	6022      	str	r2, [r4, #0]
 8018b6c:	e7ad      	b.n	8018aca <_printf_i+0xce>
 8018b6e:	2220      	movs	r2, #32
 8018b70:	6809      	ldr	r1, [r1, #0]
 8018b72:	430a      	orrs	r2, r1
 8018b74:	6022      	str	r2, [r4, #0]
 8018b76:	0022      	movs	r2, r4
 8018b78:	2178      	movs	r1, #120	; 0x78
 8018b7a:	3245      	adds	r2, #69	; 0x45
 8018b7c:	7011      	strb	r1, [r2, #0]
 8018b7e:	4a27      	ldr	r2, [pc, #156]	; (8018c1c <_printf_i+0x220>)
 8018b80:	e7e1      	b.n	8018b46 <_printf_i+0x14a>
 8018b82:	0648      	lsls	r0, r1, #25
 8018b84:	d5e6      	bpl.n	8018b54 <_printf_i+0x158>
 8018b86:	b2ad      	uxth	r5, r5
 8018b88:	e7e4      	b.n	8018b54 <_printf_i+0x158>
 8018b8a:	681a      	ldr	r2, [r3, #0]
 8018b8c:	680d      	ldr	r5, [r1, #0]
 8018b8e:	1d10      	adds	r0, r2, #4
 8018b90:	6949      	ldr	r1, [r1, #20]
 8018b92:	6018      	str	r0, [r3, #0]
 8018b94:	6813      	ldr	r3, [r2, #0]
 8018b96:	062e      	lsls	r6, r5, #24
 8018b98:	d501      	bpl.n	8018b9e <_printf_i+0x1a2>
 8018b9a:	6019      	str	r1, [r3, #0]
 8018b9c:	e002      	b.n	8018ba4 <_printf_i+0x1a8>
 8018b9e:	066d      	lsls	r5, r5, #25
 8018ba0:	d5fb      	bpl.n	8018b9a <_printf_i+0x19e>
 8018ba2:	8019      	strh	r1, [r3, #0]
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	9e04      	ldr	r6, [sp, #16]
 8018ba8:	6123      	str	r3, [r4, #16]
 8018baa:	e7bb      	b.n	8018b24 <_printf_i+0x128>
 8018bac:	681a      	ldr	r2, [r3, #0]
 8018bae:	1d11      	adds	r1, r2, #4
 8018bb0:	6019      	str	r1, [r3, #0]
 8018bb2:	6816      	ldr	r6, [r2, #0]
 8018bb4:	2100      	movs	r1, #0
 8018bb6:	0030      	movs	r0, r6
 8018bb8:	6862      	ldr	r2, [r4, #4]
 8018bba:	f000 fd55 	bl	8019668 <memchr>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	d001      	beq.n	8018bc6 <_printf_i+0x1ca>
 8018bc2:	1b80      	subs	r0, r0, r6
 8018bc4:	6060      	str	r0, [r4, #4]
 8018bc6:	6863      	ldr	r3, [r4, #4]
 8018bc8:	6123      	str	r3, [r4, #16]
 8018bca:	2300      	movs	r3, #0
 8018bcc:	9a04      	ldr	r2, [sp, #16]
 8018bce:	7013      	strb	r3, [r2, #0]
 8018bd0:	e7a8      	b.n	8018b24 <_printf_i+0x128>
 8018bd2:	6923      	ldr	r3, [r4, #16]
 8018bd4:	0032      	movs	r2, r6
 8018bd6:	9906      	ldr	r1, [sp, #24]
 8018bd8:	9805      	ldr	r0, [sp, #20]
 8018bda:	9d07      	ldr	r5, [sp, #28]
 8018bdc:	47a8      	blx	r5
 8018bde:	1c43      	adds	r3, r0, #1
 8018be0:	d0aa      	beq.n	8018b38 <_printf_i+0x13c>
 8018be2:	6823      	ldr	r3, [r4, #0]
 8018be4:	079b      	lsls	r3, r3, #30
 8018be6:	d415      	bmi.n	8018c14 <_printf_i+0x218>
 8018be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bea:	68e0      	ldr	r0, [r4, #12]
 8018bec:	4298      	cmp	r0, r3
 8018bee:	daa5      	bge.n	8018b3c <_printf_i+0x140>
 8018bf0:	0018      	movs	r0, r3
 8018bf2:	e7a3      	b.n	8018b3c <_printf_i+0x140>
 8018bf4:	0022      	movs	r2, r4
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	9906      	ldr	r1, [sp, #24]
 8018bfa:	9805      	ldr	r0, [sp, #20]
 8018bfc:	9e07      	ldr	r6, [sp, #28]
 8018bfe:	3219      	adds	r2, #25
 8018c00:	47b0      	blx	r6
 8018c02:	1c43      	adds	r3, r0, #1
 8018c04:	d098      	beq.n	8018b38 <_printf_i+0x13c>
 8018c06:	3501      	adds	r5, #1
 8018c08:	68e3      	ldr	r3, [r4, #12]
 8018c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c0c:	1a9b      	subs	r3, r3, r2
 8018c0e:	42ab      	cmp	r3, r5
 8018c10:	dcf0      	bgt.n	8018bf4 <_printf_i+0x1f8>
 8018c12:	e7e9      	b.n	8018be8 <_printf_i+0x1ec>
 8018c14:	2500      	movs	r5, #0
 8018c16:	e7f7      	b.n	8018c08 <_printf_i+0x20c>
 8018c18:	0801c815 	.word	0x0801c815
 8018c1c:	0801c826 	.word	0x0801c826

08018c20 <iprintf>:
 8018c20:	b40f      	push	{r0, r1, r2, r3}
 8018c22:	4b0b      	ldr	r3, [pc, #44]	; (8018c50 <iprintf+0x30>)
 8018c24:	b513      	push	{r0, r1, r4, lr}
 8018c26:	681c      	ldr	r4, [r3, #0]
 8018c28:	2c00      	cmp	r4, #0
 8018c2a:	d005      	beq.n	8018c38 <iprintf+0x18>
 8018c2c:	69a3      	ldr	r3, [r4, #24]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d102      	bne.n	8018c38 <iprintf+0x18>
 8018c32:	0020      	movs	r0, r4
 8018c34:	f000 fbea 	bl	801940c <__sinit>
 8018c38:	ab05      	add	r3, sp, #20
 8018c3a:	0020      	movs	r0, r4
 8018c3c:	9a04      	ldr	r2, [sp, #16]
 8018c3e:	68a1      	ldr	r1, [r4, #8]
 8018c40:	9301      	str	r3, [sp, #4]
 8018c42:	f7ff fd31 	bl	80186a8 <_vfiprintf_r>
 8018c46:	bc16      	pop	{r1, r2, r4}
 8018c48:	bc08      	pop	{r3}
 8018c4a:	b004      	add	sp, #16
 8018c4c:	4718      	bx	r3
 8018c4e:	46c0      	nop			; (mov r8, r8)
 8018c50:	200002c4 	.word	0x200002c4

08018c54 <_puts_r>:
 8018c54:	b570      	push	{r4, r5, r6, lr}
 8018c56:	0005      	movs	r5, r0
 8018c58:	000e      	movs	r6, r1
 8018c5a:	2800      	cmp	r0, #0
 8018c5c:	d004      	beq.n	8018c68 <_puts_r+0x14>
 8018c5e:	6983      	ldr	r3, [r0, #24]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d101      	bne.n	8018c68 <_puts_r+0x14>
 8018c64:	f000 fbd2 	bl	801940c <__sinit>
 8018c68:	69ab      	ldr	r3, [r5, #24]
 8018c6a:	68ac      	ldr	r4, [r5, #8]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d102      	bne.n	8018c76 <_puts_r+0x22>
 8018c70:	0028      	movs	r0, r5
 8018c72:	f000 fbcb 	bl	801940c <__sinit>
 8018c76:	4b2d      	ldr	r3, [pc, #180]	; (8018d2c <_puts_r+0xd8>)
 8018c78:	429c      	cmp	r4, r3
 8018c7a:	d122      	bne.n	8018cc2 <_puts_r+0x6e>
 8018c7c:	686c      	ldr	r4, [r5, #4]
 8018c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c80:	07db      	lsls	r3, r3, #31
 8018c82:	d405      	bmi.n	8018c90 <_puts_r+0x3c>
 8018c84:	89a3      	ldrh	r3, [r4, #12]
 8018c86:	059b      	lsls	r3, r3, #22
 8018c88:	d402      	bmi.n	8018c90 <_puts_r+0x3c>
 8018c8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c8c:	f000 fc5f 	bl	801954e <__retarget_lock_acquire_recursive>
 8018c90:	89a3      	ldrh	r3, [r4, #12]
 8018c92:	071b      	lsls	r3, r3, #28
 8018c94:	d502      	bpl.n	8018c9c <_puts_r+0x48>
 8018c96:	6923      	ldr	r3, [r4, #16]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d129      	bne.n	8018cf0 <_puts_r+0x9c>
 8018c9c:	0021      	movs	r1, r4
 8018c9e:	0028      	movs	r0, r5
 8018ca0:	f000 f9f4 	bl	801908c <__swsetup_r>
 8018ca4:	2800      	cmp	r0, #0
 8018ca6:	d023      	beq.n	8018cf0 <_puts_r+0x9c>
 8018ca8:	2501      	movs	r5, #1
 8018caa:	426d      	negs	r5, r5
 8018cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018cae:	07db      	lsls	r3, r3, #31
 8018cb0:	d405      	bmi.n	8018cbe <_puts_r+0x6a>
 8018cb2:	89a3      	ldrh	r3, [r4, #12]
 8018cb4:	059b      	lsls	r3, r3, #22
 8018cb6:	d402      	bmi.n	8018cbe <_puts_r+0x6a>
 8018cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cba:	f000 fc49 	bl	8019550 <__retarget_lock_release_recursive>
 8018cbe:	0028      	movs	r0, r5
 8018cc0:	bd70      	pop	{r4, r5, r6, pc}
 8018cc2:	4b1b      	ldr	r3, [pc, #108]	; (8018d30 <_puts_r+0xdc>)
 8018cc4:	429c      	cmp	r4, r3
 8018cc6:	d101      	bne.n	8018ccc <_puts_r+0x78>
 8018cc8:	68ac      	ldr	r4, [r5, #8]
 8018cca:	e7d8      	b.n	8018c7e <_puts_r+0x2a>
 8018ccc:	4b19      	ldr	r3, [pc, #100]	; (8018d34 <_puts_r+0xe0>)
 8018cce:	429c      	cmp	r4, r3
 8018cd0:	d1d5      	bne.n	8018c7e <_puts_r+0x2a>
 8018cd2:	68ec      	ldr	r4, [r5, #12]
 8018cd4:	e7d3      	b.n	8018c7e <_puts_r+0x2a>
 8018cd6:	3601      	adds	r6, #1
 8018cd8:	60a3      	str	r3, [r4, #8]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	da04      	bge.n	8018ce8 <_puts_r+0x94>
 8018cde:	69a2      	ldr	r2, [r4, #24]
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	dc16      	bgt.n	8018d12 <_puts_r+0xbe>
 8018ce4:	290a      	cmp	r1, #10
 8018ce6:	d014      	beq.n	8018d12 <_puts_r+0xbe>
 8018ce8:	6823      	ldr	r3, [r4, #0]
 8018cea:	1c5a      	adds	r2, r3, #1
 8018cec:	6022      	str	r2, [r4, #0]
 8018cee:	7019      	strb	r1, [r3, #0]
 8018cf0:	68a3      	ldr	r3, [r4, #8]
 8018cf2:	7831      	ldrb	r1, [r6, #0]
 8018cf4:	3b01      	subs	r3, #1
 8018cf6:	2900      	cmp	r1, #0
 8018cf8:	d1ed      	bne.n	8018cd6 <_puts_r+0x82>
 8018cfa:	60a3      	str	r3, [r4, #8]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	da0f      	bge.n	8018d20 <_puts_r+0xcc>
 8018d00:	0028      	movs	r0, r5
 8018d02:	0022      	movs	r2, r4
 8018d04:	310a      	adds	r1, #10
 8018d06:	f000 f957 	bl	8018fb8 <__swbuf_r>
 8018d0a:	250a      	movs	r5, #10
 8018d0c:	1c43      	adds	r3, r0, #1
 8018d0e:	d1cd      	bne.n	8018cac <_puts_r+0x58>
 8018d10:	e7ca      	b.n	8018ca8 <_puts_r+0x54>
 8018d12:	0022      	movs	r2, r4
 8018d14:	0028      	movs	r0, r5
 8018d16:	f000 f94f 	bl	8018fb8 <__swbuf_r>
 8018d1a:	1c43      	adds	r3, r0, #1
 8018d1c:	d1e8      	bne.n	8018cf0 <_puts_r+0x9c>
 8018d1e:	e7c3      	b.n	8018ca8 <_puts_r+0x54>
 8018d20:	250a      	movs	r5, #10
 8018d22:	6823      	ldr	r3, [r4, #0]
 8018d24:	1c5a      	adds	r2, r3, #1
 8018d26:	6022      	str	r2, [r4, #0]
 8018d28:	701d      	strb	r5, [r3, #0]
 8018d2a:	e7bf      	b.n	8018cac <_puts_r+0x58>
 8018d2c:	0801c8cc 	.word	0x0801c8cc
 8018d30:	0801c8ec 	.word	0x0801c8ec
 8018d34:	0801c8ac 	.word	0x0801c8ac

08018d38 <puts>:
 8018d38:	b510      	push	{r4, lr}
 8018d3a:	4b03      	ldr	r3, [pc, #12]	; (8018d48 <puts+0x10>)
 8018d3c:	0001      	movs	r1, r0
 8018d3e:	6818      	ldr	r0, [r3, #0]
 8018d40:	f7ff ff88 	bl	8018c54 <_puts_r>
 8018d44:	bd10      	pop	{r4, pc}
 8018d46:	46c0      	nop			; (mov r8, r8)
 8018d48:	200002c4 	.word	0x200002c4

08018d4c <sniprintf>:
 8018d4c:	b40c      	push	{r2, r3}
 8018d4e:	b530      	push	{r4, r5, lr}
 8018d50:	4b17      	ldr	r3, [pc, #92]	; (8018db0 <sniprintf+0x64>)
 8018d52:	000c      	movs	r4, r1
 8018d54:	681d      	ldr	r5, [r3, #0]
 8018d56:	b09d      	sub	sp, #116	; 0x74
 8018d58:	2900      	cmp	r1, #0
 8018d5a:	da08      	bge.n	8018d6e <sniprintf+0x22>
 8018d5c:	238b      	movs	r3, #139	; 0x8b
 8018d5e:	2001      	movs	r0, #1
 8018d60:	602b      	str	r3, [r5, #0]
 8018d62:	4240      	negs	r0, r0
 8018d64:	b01d      	add	sp, #116	; 0x74
 8018d66:	bc30      	pop	{r4, r5}
 8018d68:	bc08      	pop	{r3}
 8018d6a:	b002      	add	sp, #8
 8018d6c:	4718      	bx	r3
 8018d6e:	2382      	movs	r3, #130	; 0x82
 8018d70:	466a      	mov	r2, sp
 8018d72:	009b      	lsls	r3, r3, #2
 8018d74:	8293      	strh	r3, [r2, #20]
 8018d76:	2300      	movs	r3, #0
 8018d78:	9002      	str	r0, [sp, #8]
 8018d7a:	9006      	str	r0, [sp, #24]
 8018d7c:	4299      	cmp	r1, r3
 8018d7e:	d000      	beq.n	8018d82 <sniprintf+0x36>
 8018d80:	1e4b      	subs	r3, r1, #1
 8018d82:	9304      	str	r3, [sp, #16]
 8018d84:	9307      	str	r3, [sp, #28]
 8018d86:	2301      	movs	r3, #1
 8018d88:	466a      	mov	r2, sp
 8018d8a:	425b      	negs	r3, r3
 8018d8c:	82d3      	strh	r3, [r2, #22]
 8018d8e:	0028      	movs	r0, r5
 8018d90:	ab21      	add	r3, sp, #132	; 0x84
 8018d92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018d94:	a902      	add	r1, sp, #8
 8018d96:	9301      	str	r3, [sp, #4]
 8018d98:	f000 fdf8 	bl	801998c <_svfiprintf_r>
 8018d9c:	1c43      	adds	r3, r0, #1
 8018d9e:	da01      	bge.n	8018da4 <sniprintf+0x58>
 8018da0:	238b      	movs	r3, #139	; 0x8b
 8018da2:	602b      	str	r3, [r5, #0]
 8018da4:	2c00      	cmp	r4, #0
 8018da6:	d0dd      	beq.n	8018d64 <sniprintf+0x18>
 8018da8:	2300      	movs	r3, #0
 8018daa:	9a02      	ldr	r2, [sp, #8]
 8018dac:	7013      	strb	r3, [r2, #0]
 8018dae:	e7d9      	b.n	8018d64 <sniprintf+0x18>
 8018db0:	200002c4 	.word	0x200002c4

08018db4 <siprintf>:
 8018db4:	b40e      	push	{r1, r2, r3}
 8018db6:	b500      	push	{lr}
 8018db8:	490b      	ldr	r1, [pc, #44]	; (8018de8 <siprintf+0x34>)
 8018dba:	b09c      	sub	sp, #112	; 0x70
 8018dbc:	ab1d      	add	r3, sp, #116	; 0x74
 8018dbe:	9002      	str	r0, [sp, #8]
 8018dc0:	9006      	str	r0, [sp, #24]
 8018dc2:	9107      	str	r1, [sp, #28]
 8018dc4:	9104      	str	r1, [sp, #16]
 8018dc6:	4809      	ldr	r0, [pc, #36]	; (8018dec <siprintf+0x38>)
 8018dc8:	4909      	ldr	r1, [pc, #36]	; (8018df0 <siprintf+0x3c>)
 8018dca:	cb04      	ldmia	r3!, {r2}
 8018dcc:	9105      	str	r1, [sp, #20]
 8018dce:	6800      	ldr	r0, [r0, #0]
 8018dd0:	a902      	add	r1, sp, #8
 8018dd2:	9301      	str	r3, [sp, #4]
 8018dd4:	f000 fdda 	bl	801998c <_svfiprintf_r>
 8018dd8:	2300      	movs	r3, #0
 8018dda:	9a02      	ldr	r2, [sp, #8]
 8018ddc:	7013      	strb	r3, [r2, #0]
 8018dde:	b01c      	add	sp, #112	; 0x70
 8018de0:	bc08      	pop	{r3}
 8018de2:	b003      	add	sp, #12
 8018de4:	4718      	bx	r3
 8018de6:	46c0      	nop			; (mov r8, r8)
 8018de8:	7fffffff 	.word	0x7fffffff
 8018dec:	200002c4 	.word	0x200002c4
 8018df0:	ffff0208 	.word	0xffff0208

08018df4 <siscanf>:
 8018df4:	b40e      	push	{r1, r2, r3}
 8018df6:	b530      	push	{r4, r5, lr}
 8018df8:	2381      	movs	r3, #129	; 0x81
 8018dfa:	b09c      	sub	sp, #112	; 0x70
 8018dfc:	466a      	mov	r2, sp
 8018dfe:	ac1f      	add	r4, sp, #124	; 0x7c
 8018e00:	009b      	lsls	r3, r3, #2
 8018e02:	cc20      	ldmia	r4!, {r5}
 8018e04:	8293      	strh	r3, [r2, #20]
 8018e06:	9002      	str	r0, [sp, #8]
 8018e08:	9006      	str	r0, [sp, #24]
 8018e0a:	f7ee fdfd 	bl	8007a08 <strlen>
 8018e0e:	4b0b      	ldr	r3, [pc, #44]	; (8018e3c <siscanf+0x48>)
 8018e10:	466a      	mov	r2, sp
 8018e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e14:	2300      	movs	r3, #0
 8018e16:	9003      	str	r0, [sp, #12]
 8018e18:	9007      	str	r0, [sp, #28]
 8018e1a:	4809      	ldr	r0, [pc, #36]	; (8018e40 <siscanf+0x4c>)
 8018e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8018e1e:	9314      	str	r3, [sp, #80]	; 0x50
 8018e20:	3b01      	subs	r3, #1
 8018e22:	82d3      	strh	r3, [r2, #22]
 8018e24:	a902      	add	r1, sp, #8
 8018e26:	0023      	movs	r3, r4
 8018e28:	002a      	movs	r2, r5
 8018e2a:	6800      	ldr	r0, [r0, #0]
 8018e2c:	9401      	str	r4, [sp, #4]
 8018e2e:	f000 ff09 	bl	8019c44 <__ssvfiscanf_r>
 8018e32:	b01c      	add	sp, #112	; 0x70
 8018e34:	bc30      	pop	{r4, r5}
 8018e36:	bc08      	pop	{r3}
 8018e38:	b003      	add	sp, #12
 8018e3a:	4718      	bx	r3
 8018e3c:	08018e6d 	.word	0x08018e6d
 8018e40:	200002c4 	.word	0x200002c4

08018e44 <__sread>:
 8018e44:	b570      	push	{r4, r5, r6, lr}
 8018e46:	000c      	movs	r4, r1
 8018e48:	250e      	movs	r5, #14
 8018e4a:	5f49      	ldrsh	r1, [r1, r5]
 8018e4c:	f001 f9da 	bl	801a204 <_read_r>
 8018e50:	2800      	cmp	r0, #0
 8018e52:	db03      	blt.n	8018e5c <__sread+0x18>
 8018e54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8018e56:	181b      	adds	r3, r3, r0
 8018e58:	6563      	str	r3, [r4, #84]	; 0x54
 8018e5a:	bd70      	pop	{r4, r5, r6, pc}
 8018e5c:	89a3      	ldrh	r3, [r4, #12]
 8018e5e:	4a02      	ldr	r2, [pc, #8]	; (8018e68 <__sread+0x24>)
 8018e60:	4013      	ands	r3, r2
 8018e62:	81a3      	strh	r3, [r4, #12]
 8018e64:	e7f9      	b.n	8018e5a <__sread+0x16>
 8018e66:	46c0      	nop			; (mov r8, r8)
 8018e68:	ffffefff 	.word	0xffffefff

08018e6c <__seofread>:
 8018e6c:	2000      	movs	r0, #0
 8018e6e:	4770      	bx	lr

08018e70 <__swrite>:
 8018e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e72:	001f      	movs	r7, r3
 8018e74:	898b      	ldrh	r3, [r1, #12]
 8018e76:	0005      	movs	r5, r0
 8018e78:	000c      	movs	r4, r1
 8018e7a:	0016      	movs	r6, r2
 8018e7c:	05db      	lsls	r3, r3, #23
 8018e7e:	d505      	bpl.n	8018e8c <__swrite+0x1c>
 8018e80:	230e      	movs	r3, #14
 8018e82:	5ec9      	ldrsh	r1, [r1, r3]
 8018e84:	2200      	movs	r2, #0
 8018e86:	2302      	movs	r3, #2
 8018e88:	f000 fb64 	bl	8019554 <_lseek_r>
 8018e8c:	89a3      	ldrh	r3, [r4, #12]
 8018e8e:	4a05      	ldr	r2, [pc, #20]	; (8018ea4 <__swrite+0x34>)
 8018e90:	0028      	movs	r0, r5
 8018e92:	4013      	ands	r3, r2
 8018e94:	81a3      	strh	r3, [r4, #12]
 8018e96:	0032      	movs	r2, r6
 8018e98:	230e      	movs	r3, #14
 8018e9a:	5ee1      	ldrsh	r1, [r4, r3]
 8018e9c:	003b      	movs	r3, r7
 8018e9e:	f000 f8e1 	bl	8019064 <_write_r>
 8018ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ea4:	ffffefff 	.word	0xffffefff

08018ea8 <__sseek>:
 8018ea8:	b570      	push	{r4, r5, r6, lr}
 8018eaa:	000c      	movs	r4, r1
 8018eac:	250e      	movs	r5, #14
 8018eae:	5f49      	ldrsh	r1, [r1, r5]
 8018eb0:	f000 fb50 	bl	8019554 <_lseek_r>
 8018eb4:	89a3      	ldrh	r3, [r4, #12]
 8018eb6:	1c42      	adds	r2, r0, #1
 8018eb8:	d103      	bne.n	8018ec2 <__sseek+0x1a>
 8018eba:	4a05      	ldr	r2, [pc, #20]	; (8018ed0 <__sseek+0x28>)
 8018ebc:	4013      	ands	r3, r2
 8018ebe:	81a3      	strh	r3, [r4, #12]
 8018ec0:	bd70      	pop	{r4, r5, r6, pc}
 8018ec2:	2280      	movs	r2, #128	; 0x80
 8018ec4:	0152      	lsls	r2, r2, #5
 8018ec6:	4313      	orrs	r3, r2
 8018ec8:	81a3      	strh	r3, [r4, #12]
 8018eca:	6560      	str	r0, [r4, #84]	; 0x54
 8018ecc:	e7f8      	b.n	8018ec0 <__sseek+0x18>
 8018ece:	46c0      	nop			; (mov r8, r8)
 8018ed0:	ffffefff 	.word	0xffffefff

08018ed4 <__sclose>:
 8018ed4:	b510      	push	{r4, lr}
 8018ed6:	230e      	movs	r3, #14
 8018ed8:	5ec9      	ldrsh	r1, [r1, r3]
 8018eda:	f000 f957 	bl	801918c <_close_r>
 8018ede:	bd10      	pop	{r4, pc}

08018ee0 <strcpy>:
 8018ee0:	0003      	movs	r3, r0
 8018ee2:	780a      	ldrb	r2, [r1, #0]
 8018ee4:	3101      	adds	r1, #1
 8018ee6:	701a      	strb	r2, [r3, #0]
 8018ee8:	3301      	adds	r3, #1
 8018eea:	2a00      	cmp	r2, #0
 8018eec:	d1f9      	bne.n	8018ee2 <strcpy+0x2>
 8018eee:	4770      	bx	lr

08018ef0 <strtok>:
 8018ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ef2:	4b16      	ldr	r3, [pc, #88]	; (8018f4c <strtok+0x5c>)
 8018ef4:	0005      	movs	r5, r0
 8018ef6:	681f      	ldr	r7, [r3, #0]
 8018ef8:	000e      	movs	r6, r1
 8018efa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8018efc:	2c00      	cmp	r4, #0
 8018efe:	d11d      	bne.n	8018f3c <strtok+0x4c>
 8018f00:	2050      	movs	r0, #80	; 0x50
 8018f02:	f000 fba7 	bl	8019654 <malloc>
 8018f06:	1e02      	subs	r2, r0, #0
 8018f08:	65b8      	str	r0, [r7, #88]	; 0x58
 8018f0a:	d104      	bne.n	8018f16 <strtok+0x26>
 8018f0c:	2157      	movs	r1, #87	; 0x57
 8018f0e:	4b10      	ldr	r3, [pc, #64]	; (8018f50 <strtok+0x60>)
 8018f10:	4810      	ldr	r0, [pc, #64]	; (8018f54 <strtok+0x64>)
 8018f12:	f7ff fb39 	bl	8018588 <__assert_func>
 8018f16:	6004      	str	r4, [r0, #0]
 8018f18:	6044      	str	r4, [r0, #4]
 8018f1a:	6084      	str	r4, [r0, #8]
 8018f1c:	60c4      	str	r4, [r0, #12]
 8018f1e:	6104      	str	r4, [r0, #16]
 8018f20:	6144      	str	r4, [r0, #20]
 8018f22:	6184      	str	r4, [r0, #24]
 8018f24:	6284      	str	r4, [r0, #40]	; 0x28
 8018f26:	62c4      	str	r4, [r0, #44]	; 0x2c
 8018f28:	6304      	str	r4, [r0, #48]	; 0x30
 8018f2a:	6344      	str	r4, [r0, #52]	; 0x34
 8018f2c:	6384      	str	r4, [r0, #56]	; 0x38
 8018f2e:	63c4      	str	r4, [r0, #60]	; 0x3c
 8018f30:	6404      	str	r4, [r0, #64]	; 0x40
 8018f32:	6444      	str	r4, [r0, #68]	; 0x44
 8018f34:	6484      	str	r4, [r0, #72]	; 0x48
 8018f36:	64c4      	str	r4, [r0, #76]	; 0x4c
 8018f38:	7704      	strb	r4, [r0, #28]
 8018f3a:	6244      	str	r4, [r0, #36]	; 0x24
 8018f3c:	0031      	movs	r1, r6
 8018f3e:	0028      	movs	r0, r5
 8018f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018f42:	2301      	movs	r3, #1
 8018f44:	f000 f808 	bl	8018f58 <__strtok_r>
 8018f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f4a:	46c0      	nop			; (mov r8, r8)
 8018f4c:	200002c4 	.word	0x200002c4
 8018f50:	0801c837 	.word	0x0801c837
 8018f54:	0801c84e 	.word	0x0801c84e

08018f58 <__strtok_r>:
 8018f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	d102      	bne.n	8018f64 <__strtok_r+0xc>
 8018f5e:	6810      	ldr	r0, [r2, #0]
 8018f60:	2800      	cmp	r0, #0
 8018f62:	d013      	beq.n	8018f8c <__strtok_r+0x34>
 8018f64:	0004      	movs	r4, r0
 8018f66:	0020      	movs	r0, r4
 8018f68:	000e      	movs	r6, r1
 8018f6a:	7805      	ldrb	r5, [r0, #0]
 8018f6c:	3401      	adds	r4, #1
 8018f6e:	7837      	ldrb	r7, [r6, #0]
 8018f70:	2f00      	cmp	r7, #0
 8018f72:	d104      	bne.n	8018f7e <__strtok_r+0x26>
 8018f74:	2d00      	cmp	r5, #0
 8018f76:	d10f      	bne.n	8018f98 <__strtok_r+0x40>
 8018f78:	0028      	movs	r0, r5
 8018f7a:	6015      	str	r5, [r2, #0]
 8018f7c:	e006      	b.n	8018f8c <__strtok_r+0x34>
 8018f7e:	3601      	adds	r6, #1
 8018f80:	42bd      	cmp	r5, r7
 8018f82:	d1f4      	bne.n	8018f6e <__strtok_r+0x16>
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d1ee      	bne.n	8018f66 <__strtok_r+0xe>
 8018f88:	6014      	str	r4, [r2, #0]
 8018f8a:	7003      	strb	r3, [r0, #0]
 8018f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f8e:	002f      	movs	r7, r5
 8018f90:	e00f      	b.n	8018fb2 <__strtok_r+0x5a>
 8018f92:	3301      	adds	r3, #1
 8018f94:	2e00      	cmp	r6, #0
 8018f96:	d104      	bne.n	8018fa2 <__strtok_r+0x4a>
 8018f98:	0023      	movs	r3, r4
 8018f9a:	3401      	adds	r4, #1
 8018f9c:	781d      	ldrb	r5, [r3, #0]
 8018f9e:	0027      	movs	r7, r4
 8018fa0:	000b      	movs	r3, r1
 8018fa2:	781e      	ldrb	r6, [r3, #0]
 8018fa4:	42b5      	cmp	r5, r6
 8018fa6:	d1f4      	bne.n	8018f92 <__strtok_r+0x3a>
 8018fa8:	2d00      	cmp	r5, #0
 8018faa:	d0f0      	beq.n	8018f8e <__strtok_r+0x36>
 8018fac:	2300      	movs	r3, #0
 8018fae:	3c01      	subs	r4, #1
 8018fb0:	7023      	strb	r3, [r4, #0]
 8018fb2:	6017      	str	r7, [r2, #0]
 8018fb4:	e7ea      	b.n	8018f8c <__strtok_r+0x34>
	...

08018fb8 <__swbuf_r>:
 8018fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fba:	0005      	movs	r5, r0
 8018fbc:	000e      	movs	r6, r1
 8018fbe:	0014      	movs	r4, r2
 8018fc0:	2800      	cmp	r0, #0
 8018fc2:	d004      	beq.n	8018fce <__swbuf_r+0x16>
 8018fc4:	6983      	ldr	r3, [r0, #24]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d101      	bne.n	8018fce <__swbuf_r+0x16>
 8018fca:	f000 fa1f 	bl	801940c <__sinit>
 8018fce:	4b22      	ldr	r3, [pc, #136]	; (8019058 <__swbuf_r+0xa0>)
 8018fd0:	429c      	cmp	r4, r3
 8018fd2:	d12e      	bne.n	8019032 <__swbuf_r+0x7a>
 8018fd4:	686c      	ldr	r4, [r5, #4]
 8018fd6:	69a3      	ldr	r3, [r4, #24]
 8018fd8:	60a3      	str	r3, [r4, #8]
 8018fda:	89a3      	ldrh	r3, [r4, #12]
 8018fdc:	071b      	lsls	r3, r3, #28
 8018fde:	d532      	bpl.n	8019046 <__swbuf_r+0x8e>
 8018fe0:	6923      	ldr	r3, [r4, #16]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d02f      	beq.n	8019046 <__swbuf_r+0x8e>
 8018fe6:	6823      	ldr	r3, [r4, #0]
 8018fe8:	6922      	ldr	r2, [r4, #16]
 8018fea:	b2f7      	uxtb	r7, r6
 8018fec:	1a98      	subs	r0, r3, r2
 8018fee:	6963      	ldr	r3, [r4, #20]
 8018ff0:	b2f6      	uxtb	r6, r6
 8018ff2:	4283      	cmp	r3, r0
 8018ff4:	dc05      	bgt.n	8019002 <__swbuf_r+0x4a>
 8018ff6:	0021      	movs	r1, r4
 8018ff8:	0028      	movs	r0, r5
 8018ffa:	f000 f965 	bl	80192c8 <_fflush_r>
 8018ffe:	2800      	cmp	r0, #0
 8019000:	d127      	bne.n	8019052 <__swbuf_r+0x9a>
 8019002:	68a3      	ldr	r3, [r4, #8]
 8019004:	3001      	adds	r0, #1
 8019006:	3b01      	subs	r3, #1
 8019008:	60a3      	str	r3, [r4, #8]
 801900a:	6823      	ldr	r3, [r4, #0]
 801900c:	1c5a      	adds	r2, r3, #1
 801900e:	6022      	str	r2, [r4, #0]
 8019010:	701f      	strb	r7, [r3, #0]
 8019012:	6963      	ldr	r3, [r4, #20]
 8019014:	4283      	cmp	r3, r0
 8019016:	d004      	beq.n	8019022 <__swbuf_r+0x6a>
 8019018:	89a3      	ldrh	r3, [r4, #12]
 801901a:	07db      	lsls	r3, r3, #31
 801901c:	d507      	bpl.n	801902e <__swbuf_r+0x76>
 801901e:	2e0a      	cmp	r6, #10
 8019020:	d105      	bne.n	801902e <__swbuf_r+0x76>
 8019022:	0021      	movs	r1, r4
 8019024:	0028      	movs	r0, r5
 8019026:	f000 f94f 	bl	80192c8 <_fflush_r>
 801902a:	2800      	cmp	r0, #0
 801902c:	d111      	bne.n	8019052 <__swbuf_r+0x9a>
 801902e:	0030      	movs	r0, r6
 8019030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019032:	4b0a      	ldr	r3, [pc, #40]	; (801905c <__swbuf_r+0xa4>)
 8019034:	429c      	cmp	r4, r3
 8019036:	d101      	bne.n	801903c <__swbuf_r+0x84>
 8019038:	68ac      	ldr	r4, [r5, #8]
 801903a:	e7cc      	b.n	8018fd6 <__swbuf_r+0x1e>
 801903c:	4b08      	ldr	r3, [pc, #32]	; (8019060 <__swbuf_r+0xa8>)
 801903e:	429c      	cmp	r4, r3
 8019040:	d1c9      	bne.n	8018fd6 <__swbuf_r+0x1e>
 8019042:	68ec      	ldr	r4, [r5, #12]
 8019044:	e7c7      	b.n	8018fd6 <__swbuf_r+0x1e>
 8019046:	0021      	movs	r1, r4
 8019048:	0028      	movs	r0, r5
 801904a:	f000 f81f 	bl	801908c <__swsetup_r>
 801904e:	2800      	cmp	r0, #0
 8019050:	d0c9      	beq.n	8018fe6 <__swbuf_r+0x2e>
 8019052:	2601      	movs	r6, #1
 8019054:	4276      	negs	r6, r6
 8019056:	e7ea      	b.n	801902e <__swbuf_r+0x76>
 8019058:	0801c8cc 	.word	0x0801c8cc
 801905c:	0801c8ec 	.word	0x0801c8ec
 8019060:	0801c8ac 	.word	0x0801c8ac

08019064 <_write_r>:
 8019064:	b570      	push	{r4, r5, r6, lr}
 8019066:	0004      	movs	r4, r0
 8019068:	0008      	movs	r0, r1
 801906a:	0011      	movs	r1, r2
 801906c:	001a      	movs	r2, r3
 801906e:	2300      	movs	r3, #0
 8019070:	4d05      	ldr	r5, [pc, #20]	; (8019088 <_write_r+0x24>)
 8019072:	602b      	str	r3, [r5, #0]
 8019074:	f7f5 fccd 	bl	800ea12 <_write>
 8019078:	1c43      	adds	r3, r0, #1
 801907a:	d103      	bne.n	8019084 <_write_r+0x20>
 801907c:	682b      	ldr	r3, [r5, #0]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d000      	beq.n	8019084 <_write_r+0x20>
 8019082:	6023      	str	r3, [r4, #0]
 8019084:	bd70      	pop	{r4, r5, r6, pc}
 8019086:	46c0      	nop			; (mov r8, r8)
 8019088:	200015c4 	.word	0x200015c4

0801908c <__swsetup_r>:
 801908c:	4b37      	ldr	r3, [pc, #220]	; (801916c <__swsetup_r+0xe0>)
 801908e:	b570      	push	{r4, r5, r6, lr}
 8019090:	681d      	ldr	r5, [r3, #0]
 8019092:	0006      	movs	r6, r0
 8019094:	000c      	movs	r4, r1
 8019096:	2d00      	cmp	r5, #0
 8019098:	d005      	beq.n	80190a6 <__swsetup_r+0x1a>
 801909a:	69ab      	ldr	r3, [r5, #24]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d102      	bne.n	80190a6 <__swsetup_r+0x1a>
 80190a0:	0028      	movs	r0, r5
 80190a2:	f000 f9b3 	bl	801940c <__sinit>
 80190a6:	4b32      	ldr	r3, [pc, #200]	; (8019170 <__swsetup_r+0xe4>)
 80190a8:	429c      	cmp	r4, r3
 80190aa:	d10f      	bne.n	80190cc <__swsetup_r+0x40>
 80190ac:	686c      	ldr	r4, [r5, #4]
 80190ae:	230c      	movs	r3, #12
 80190b0:	5ee2      	ldrsh	r2, [r4, r3]
 80190b2:	b293      	uxth	r3, r2
 80190b4:	0711      	lsls	r1, r2, #28
 80190b6:	d42d      	bmi.n	8019114 <__swsetup_r+0x88>
 80190b8:	06d9      	lsls	r1, r3, #27
 80190ba:	d411      	bmi.n	80190e0 <__swsetup_r+0x54>
 80190bc:	2309      	movs	r3, #9
 80190be:	2001      	movs	r0, #1
 80190c0:	6033      	str	r3, [r6, #0]
 80190c2:	3337      	adds	r3, #55	; 0x37
 80190c4:	4313      	orrs	r3, r2
 80190c6:	81a3      	strh	r3, [r4, #12]
 80190c8:	4240      	negs	r0, r0
 80190ca:	bd70      	pop	{r4, r5, r6, pc}
 80190cc:	4b29      	ldr	r3, [pc, #164]	; (8019174 <__swsetup_r+0xe8>)
 80190ce:	429c      	cmp	r4, r3
 80190d0:	d101      	bne.n	80190d6 <__swsetup_r+0x4a>
 80190d2:	68ac      	ldr	r4, [r5, #8]
 80190d4:	e7eb      	b.n	80190ae <__swsetup_r+0x22>
 80190d6:	4b28      	ldr	r3, [pc, #160]	; (8019178 <__swsetup_r+0xec>)
 80190d8:	429c      	cmp	r4, r3
 80190da:	d1e8      	bne.n	80190ae <__swsetup_r+0x22>
 80190dc:	68ec      	ldr	r4, [r5, #12]
 80190de:	e7e6      	b.n	80190ae <__swsetup_r+0x22>
 80190e0:	075b      	lsls	r3, r3, #29
 80190e2:	d513      	bpl.n	801910c <__swsetup_r+0x80>
 80190e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190e6:	2900      	cmp	r1, #0
 80190e8:	d008      	beq.n	80190fc <__swsetup_r+0x70>
 80190ea:	0023      	movs	r3, r4
 80190ec:	3344      	adds	r3, #68	; 0x44
 80190ee:	4299      	cmp	r1, r3
 80190f0:	d002      	beq.n	80190f8 <__swsetup_r+0x6c>
 80190f2:	0030      	movs	r0, r6
 80190f4:	f000 fad6 	bl	80196a4 <_free_r>
 80190f8:	2300      	movs	r3, #0
 80190fa:	6363      	str	r3, [r4, #52]	; 0x34
 80190fc:	2224      	movs	r2, #36	; 0x24
 80190fe:	89a3      	ldrh	r3, [r4, #12]
 8019100:	4393      	bics	r3, r2
 8019102:	81a3      	strh	r3, [r4, #12]
 8019104:	2300      	movs	r3, #0
 8019106:	6063      	str	r3, [r4, #4]
 8019108:	6923      	ldr	r3, [r4, #16]
 801910a:	6023      	str	r3, [r4, #0]
 801910c:	2308      	movs	r3, #8
 801910e:	89a2      	ldrh	r2, [r4, #12]
 8019110:	4313      	orrs	r3, r2
 8019112:	81a3      	strh	r3, [r4, #12]
 8019114:	6923      	ldr	r3, [r4, #16]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d10b      	bne.n	8019132 <__swsetup_r+0xa6>
 801911a:	21a0      	movs	r1, #160	; 0xa0
 801911c:	2280      	movs	r2, #128	; 0x80
 801911e:	89a3      	ldrh	r3, [r4, #12]
 8019120:	0089      	lsls	r1, r1, #2
 8019122:	0092      	lsls	r2, r2, #2
 8019124:	400b      	ands	r3, r1
 8019126:	4293      	cmp	r3, r2
 8019128:	d003      	beq.n	8019132 <__swsetup_r+0xa6>
 801912a:	0021      	movs	r1, r4
 801912c:	0030      	movs	r0, r6
 801912e:	f000 fa4d 	bl	80195cc <__smakebuf_r>
 8019132:	220c      	movs	r2, #12
 8019134:	5ea3      	ldrsh	r3, [r4, r2]
 8019136:	2001      	movs	r0, #1
 8019138:	001a      	movs	r2, r3
 801913a:	b299      	uxth	r1, r3
 801913c:	4002      	ands	r2, r0
 801913e:	4203      	tst	r3, r0
 8019140:	d00f      	beq.n	8019162 <__swsetup_r+0xd6>
 8019142:	2200      	movs	r2, #0
 8019144:	60a2      	str	r2, [r4, #8]
 8019146:	6962      	ldr	r2, [r4, #20]
 8019148:	4252      	negs	r2, r2
 801914a:	61a2      	str	r2, [r4, #24]
 801914c:	2000      	movs	r0, #0
 801914e:	6922      	ldr	r2, [r4, #16]
 8019150:	4282      	cmp	r2, r0
 8019152:	d1ba      	bne.n	80190ca <__swsetup_r+0x3e>
 8019154:	060a      	lsls	r2, r1, #24
 8019156:	d5b8      	bpl.n	80190ca <__swsetup_r+0x3e>
 8019158:	2240      	movs	r2, #64	; 0x40
 801915a:	4313      	orrs	r3, r2
 801915c:	81a3      	strh	r3, [r4, #12]
 801915e:	3801      	subs	r0, #1
 8019160:	e7b3      	b.n	80190ca <__swsetup_r+0x3e>
 8019162:	0788      	lsls	r0, r1, #30
 8019164:	d400      	bmi.n	8019168 <__swsetup_r+0xdc>
 8019166:	6962      	ldr	r2, [r4, #20]
 8019168:	60a2      	str	r2, [r4, #8]
 801916a:	e7ef      	b.n	801914c <__swsetup_r+0xc0>
 801916c:	200002c4 	.word	0x200002c4
 8019170:	0801c8cc 	.word	0x0801c8cc
 8019174:	0801c8ec 	.word	0x0801c8ec
 8019178:	0801c8ac 	.word	0x0801c8ac

0801917c <abort>:
 801917c:	2006      	movs	r0, #6
 801917e:	b510      	push	{r4, lr}
 8019180:	f001 f8cc 	bl	801a31c <raise>
 8019184:	2001      	movs	r0, #1
 8019186:	f7f5 fc31 	bl	800e9ec <_exit>
	...

0801918c <_close_r>:
 801918c:	2300      	movs	r3, #0
 801918e:	b570      	push	{r4, r5, r6, lr}
 8019190:	4d06      	ldr	r5, [pc, #24]	; (80191ac <_close_r+0x20>)
 8019192:	0004      	movs	r4, r0
 8019194:	0008      	movs	r0, r1
 8019196:	602b      	str	r3, [r5, #0]
 8019198:	f7f5 fc48 	bl	800ea2c <_close>
 801919c:	1c43      	adds	r3, r0, #1
 801919e:	d103      	bne.n	80191a8 <_close_r+0x1c>
 80191a0:	682b      	ldr	r3, [r5, #0]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d000      	beq.n	80191a8 <_close_r+0x1c>
 80191a6:	6023      	str	r3, [r4, #0]
 80191a8:	bd70      	pop	{r4, r5, r6, pc}
 80191aa:	46c0      	nop			; (mov r8, r8)
 80191ac:	200015c4 	.word	0x200015c4

080191b0 <__sflush_r>:
 80191b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191b2:	898b      	ldrh	r3, [r1, #12]
 80191b4:	0005      	movs	r5, r0
 80191b6:	000c      	movs	r4, r1
 80191b8:	071a      	lsls	r2, r3, #28
 80191ba:	d45f      	bmi.n	801927c <__sflush_r+0xcc>
 80191bc:	684a      	ldr	r2, [r1, #4]
 80191be:	2a00      	cmp	r2, #0
 80191c0:	dc04      	bgt.n	80191cc <__sflush_r+0x1c>
 80191c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80191c4:	2a00      	cmp	r2, #0
 80191c6:	dc01      	bgt.n	80191cc <__sflush_r+0x1c>
 80191c8:	2000      	movs	r0, #0
 80191ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80191cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80191ce:	2f00      	cmp	r7, #0
 80191d0:	d0fa      	beq.n	80191c8 <__sflush_r+0x18>
 80191d2:	2200      	movs	r2, #0
 80191d4:	2180      	movs	r1, #128	; 0x80
 80191d6:	682e      	ldr	r6, [r5, #0]
 80191d8:	602a      	str	r2, [r5, #0]
 80191da:	001a      	movs	r2, r3
 80191dc:	0149      	lsls	r1, r1, #5
 80191de:	400a      	ands	r2, r1
 80191e0:	420b      	tst	r3, r1
 80191e2:	d034      	beq.n	801924e <__sflush_r+0x9e>
 80191e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80191e6:	89a3      	ldrh	r3, [r4, #12]
 80191e8:	075b      	lsls	r3, r3, #29
 80191ea:	d506      	bpl.n	80191fa <__sflush_r+0x4a>
 80191ec:	6863      	ldr	r3, [r4, #4]
 80191ee:	1ac0      	subs	r0, r0, r3
 80191f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d001      	beq.n	80191fa <__sflush_r+0x4a>
 80191f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80191f8:	1ac0      	subs	r0, r0, r3
 80191fa:	0002      	movs	r2, r0
 80191fc:	6a21      	ldr	r1, [r4, #32]
 80191fe:	2300      	movs	r3, #0
 8019200:	0028      	movs	r0, r5
 8019202:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8019204:	47b8      	blx	r7
 8019206:	89a1      	ldrh	r1, [r4, #12]
 8019208:	1c43      	adds	r3, r0, #1
 801920a:	d106      	bne.n	801921a <__sflush_r+0x6a>
 801920c:	682b      	ldr	r3, [r5, #0]
 801920e:	2b1d      	cmp	r3, #29
 8019210:	d831      	bhi.n	8019276 <__sflush_r+0xc6>
 8019212:	4a2c      	ldr	r2, [pc, #176]	; (80192c4 <__sflush_r+0x114>)
 8019214:	40da      	lsrs	r2, r3
 8019216:	07d3      	lsls	r3, r2, #31
 8019218:	d52d      	bpl.n	8019276 <__sflush_r+0xc6>
 801921a:	2300      	movs	r3, #0
 801921c:	6063      	str	r3, [r4, #4]
 801921e:	6923      	ldr	r3, [r4, #16]
 8019220:	6023      	str	r3, [r4, #0]
 8019222:	04cb      	lsls	r3, r1, #19
 8019224:	d505      	bpl.n	8019232 <__sflush_r+0x82>
 8019226:	1c43      	adds	r3, r0, #1
 8019228:	d102      	bne.n	8019230 <__sflush_r+0x80>
 801922a:	682b      	ldr	r3, [r5, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d100      	bne.n	8019232 <__sflush_r+0x82>
 8019230:	6560      	str	r0, [r4, #84]	; 0x54
 8019232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019234:	602e      	str	r6, [r5, #0]
 8019236:	2900      	cmp	r1, #0
 8019238:	d0c6      	beq.n	80191c8 <__sflush_r+0x18>
 801923a:	0023      	movs	r3, r4
 801923c:	3344      	adds	r3, #68	; 0x44
 801923e:	4299      	cmp	r1, r3
 8019240:	d002      	beq.n	8019248 <__sflush_r+0x98>
 8019242:	0028      	movs	r0, r5
 8019244:	f000 fa2e 	bl	80196a4 <_free_r>
 8019248:	2000      	movs	r0, #0
 801924a:	6360      	str	r0, [r4, #52]	; 0x34
 801924c:	e7bd      	b.n	80191ca <__sflush_r+0x1a>
 801924e:	2301      	movs	r3, #1
 8019250:	0028      	movs	r0, r5
 8019252:	6a21      	ldr	r1, [r4, #32]
 8019254:	47b8      	blx	r7
 8019256:	1c43      	adds	r3, r0, #1
 8019258:	d1c5      	bne.n	80191e6 <__sflush_r+0x36>
 801925a:	682b      	ldr	r3, [r5, #0]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d0c2      	beq.n	80191e6 <__sflush_r+0x36>
 8019260:	2b1d      	cmp	r3, #29
 8019262:	d001      	beq.n	8019268 <__sflush_r+0xb8>
 8019264:	2b16      	cmp	r3, #22
 8019266:	d101      	bne.n	801926c <__sflush_r+0xbc>
 8019268:	602e      	str	r6, [r5, #0]
 801926a:	e7ad      	b.n	80191c8 <__sflush_r+0x18>
 801926c:	2340      	movs	r3, #64	; 0x40
 801926e:	89a2      	ldrh	r2, [r4, #12]
 8019270:	4313      	orrs	r3, r2
 8019272:	81a3      	strh	r3, [r4, #12]
 8019274:	e7a9      	b.n	80191ca <__sflush_r+0x1a>
 8019276:	2340      	movs	r3, #64	; 0x40
 8019278:	430b      	orrs	r3, r1
 801927a:	e7fa      	b.n	8019272 <__sflush_r+0xc2>
 801927c:	690f      	ldr	r7, [r1, #16]
 801927e:	2f00      	cmp	r7, #0
 8019280:	d0a2      	beq.n	80191c8 <__sflush_r+0x18>
 8019282:	680a      	ldr	r2, [r1, #0]
 8019284:	600f      	str	r7, [r1, #0]
 8019286:	1bd2      	subs	r2, r2, r7
 8019288:	9201      	str	r2, [sp, #4]
 801928a:	2200      	movs	r2, #0
 801928c:	079b      	lsls	r3, r3, #30
 801928e:	d100      	bne.n	8019292 <__sflush_r+0xe2>
 8019290:	694a      	ldr	r2, [r1, #20]
 8019292:	60a2      	str	r2, [r4, #8]
 8019294:	9b01      	ldr	r3, [sp, #4]
 8019296:	2b00      	cmp	r3, #0
 8019298:	dc00      	bgt.n	801929c <__sflush_r+0xec>
 801929a:	e795      	b.n	80191c8 <__sflush_r+0x18>
 801929c:	003a      	movs	r2, r7
 801929e:	0028      	movs	r0, r5
 80192a0:	9b01      	ldr	r3, [sp, #4]
 80192a2:	6a21      	ldr	r1, [r4, #32]
 80192a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192a6:	47b0      	blx	r6
 80192a8:	2800      	cmp	r0, #0
 80192aa:	dc06      	bgt.n	80192ba <__sflush_r+0x10a>
 80192ac:	2340      	movs	r3, #64	; 0x40
 80192ae:	2001      	movs	r0, #1
 80192b0:	89a2      	ldrh	r2, [r4, #12]
 80192b2:	4240      	negs	r0, r0
 80192b4:	4313      	orrs	r3, r2
 80192b6:	81a3      	strh	r3, [r4, #12]
 80192b8:	e787      	b.n	80191ca <__sflush_r+0x1a>
 80192ba:	9b01      	ldr	r3, [sp, #4]
 80192bc:	183f      	adds	r7, r7, r0
 80192be:	1a1b      	subs	r3, r3, r0
 80192c0:	9301      	str	r3, [sp, #4]
 80192c2:	e7e7      	b.n	8019294 <__sflush_r+0xe4>
 80192c4:	20400001 	.word	0x20400001

080192c8 <_fflush_r>:
 80192c8:	690b      	ldr	r3, [r1, #16]
 80192ca:	b570      	push	{r4, r5, r6, lr}
 80192cc:	0005      	movs	r5, r0
 80192ce:	000c      	movs	r4, r1
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d102      	bne.n	80192da <_fflush_r+0x12>
 80192d4:	2500      	movs	r5, #0
 80192d6:	0028      	movs	r0, r5
 80192d8:	bd70      	pop	{r4, r5, r6, pc}
 80192da:	2800      	cmp	r0, #0
 80192dc:	d004      	beq.n	80192e8 <_fflush_r+0x20>
 80192de:	6983      	ldr	r3, [r0, #24]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d101      	bne.n	80192e8 <_fflush_r+0x20>
 80192e4:	f000 f892 	bl	801940c <__sinit>
 80192e8:	4b14      	ldr	r3, [pc, #80]	; (801933c <_fflush_r+0x74>)
 80192ea:	429c      	cmp	r4, r3
 80192ec:	d11b      	bne.n	8019326 <_fflush_r+0x5e>
 80192ee:	686c      	ldr	r4, [r5, #4]
 80192f0:	220c      	movs	r2, #12
 80192f2:	5ea3      	ldrsh	r3, [r4, r2]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d0ed      	beq.n	80192d4 <_fflush_r+0xc>
 80192f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80192fa:	07d2      	lsls	r2, r2, #31
 80192fc:	d404      	bmi.n	8019308 <_fflush_r+0x40>
 80192fe:	059b      	lsls	r3, r3, #22
 8019300:	d402      	bmi.n	8019308 <_fflush_r+0x40>
 8019302:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019304:	f000 f923 	bl	801954e <__retarget_lock_acquire_recursive>
 8019308:	0028      	movs	r0, r5
 801930a:	0021      	movs	r1, r4
 801930c:	f7ff ff50 	bl	80191b0 <__sflush_r>
 8019310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019312:	0005      	movs	r5, r0
 8019314:	07db      	lsls	r3, r3, #31
 8019316:	d4de      	bmi.n	80192d6 <_fflush_r+0xe>
 8019318:	89a3      	ldrh	r3, [r4, #12]
 801931a:	059b      	lsls	r3, r3, #22
 801931c:	d4db      	bmi.n	80192d6 <_fflush_r+0xe>
 801931e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019320:	f000 f916 	bl	8019550 <__retarget_lock_release_recursive>
 8019324:	e7d7      	b.n	80192d6 <_fflush_r+0xe>
 8019326:	4b06      	ldr	r3, [pc, #24]	; (8019340 <_fflush_r+0x78>)
 8019328:	429c      	cmp	r4, r3
 801932a:	d101      	bne.n	8019330 <_fflush_r+0x68>
 801932c:	68ac      	ldr	r4, [r5, #8]
 801932e:	e7df      	b.n	80192f0 <_fflush_r+0x28>
 8019330:	4b04      	ldr	r3, [pc, #16]	; (8019344 <_fflush_r+0x7c>)
 8019332:	429c      	cmp	r4, r3
 8019334:	d1dc      	bne.n	80192f0 <_fflush_r+0x28>
 8019336:	68ec      	ldr	r4, [r5, #12]
 8019338:	e7da      	b.n	80192f0 <_fflush_r+0x28>
 801933a:	46c0      	nop			; (mov r8, r8)
 801933c:	0801c8cc 	.word	0x0801c8cc
 8019340:	0801c8ec 	.word	0x0801c8ec
 8019344:	0801c8ac 	.word	0x0801c8ac

08019348 <std>:
 8019348:	2300      	movs	r3, #0
 801934a:	b510      	push	{r4, lr}
 801934c:	0004      	movs	r4, r0
 801934e:	6003      	str	r3, [r0, #0]
 8019350:	6043      	str	r3, [r0, #4]
 8019352:	6083      	str	r3, [r0, #8]
 8019354:	8181      	strh	r1, [r0, #12]
 8019356:	6643      	str	r3, [r0, #100]	; 0x64
 8019358:	0019      	movs	r1, r3
 801935a:	81c2      	strh	r2, [r0, #14]
 801935c:	6103      	str	r3, [r0, #16]
 801935e:	6143      	str	r3, [r0, #20]
 8019360:	6183      	str	r3, [r0, #24]
 8019362:	2208      	movs	r2, #8
 8019364:	305c      	adds	r0, #92	; 0x5c
 8019366:	f7ff f970 	bl	801864a <memset>
 801936a:	4b05      	ldr	r3, [pc, #20]	; (8019380 <std+0x38>)
 801936c:	6224      	str	r4, [r4, #32]
 801936e:	6263      	str	r3, [r4, #36]	; 0x24
 8019370:	4b04      	ldr	r3, [pc, #16]	; (8019384 <std+0x3c>)
 8019372:	62a3      	str	r3, [r4, #40]	; 0x28
 8019374:	4b04      	ldr	r3, [pc, #16]	; (8019388 <std+0x40>)
 8019376:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019378:	4b04      	ldr	r3, [pc, #16]	; (801938c <std+0x44>)
 801937a:	6323      	str	r3, [r4, #48]	; 0x30
 801937c:	bd10      	pop	{r4, pc}
 801937e:	46c0      	nop			; (mov r8, r8)
 8019380:	08018e45 	.word	0x08018e45
 8019384:	08018e71 	.word	0x08018e71
 8019388:	08018ea9 	.word	0x08018ea9
 801938c:	08018ed5 	.word	0x08018ed5

08019390 <_cleanup_r>:
 8019390:	b510      	push	{r4, lr}
 8019392:	4902      	ldr	r1, [pc, #8]	; (801939c <_cleanup_r+0xc>)
 8019394:	f000 f8ba 	bl	801950c <_fwalk_reent>
 8019398:	bd10      	pop	{r4, pc}
 801939a:	46c0      	nop			; (mov r8, r8)
 801939c:	080192c9 	.word	0x080192c9

080193a0 <__sfmoreglue>:
 80193a0:	b570      	push	{r4, r5, r6, lr}
 80193a2:	2568      	movs	r5, #104	; 0x68
 80193a4:	1e4a      	subs	r2, r1, #1
 80193a6:	4355      	muls	r5, r2
 80193a8:	000e      	movs	r6, r1
 80193aa:	0029      	movs	r1, r5
 80193ac:	3174      	adds	r1, #116	; 0x74
 80193ae:	f000 f9e5 	bl	801977c <_malloc_r>
 80193b2:	1e04      	subs	r4, r0, #0
 80193b4:	d008      	beq.n	80193c8 <__sfmoreglue+0x28>
 80193b6:	2100      	movs	r1, #0
 80193b8:	002a      	movs	r2, r5
 80193ba:	6001      	str	r1, [r0, #0]
 80193bc:	6046      	str	r6, [r0, #4]
 80193be:	300c      	adds	r0, #12
 80193c0:	60a0      	str	r0, [r4, #8]
 80193c2:	3268      	adds	r2, #104	; 0x68
 80193c4:	f7ff f941 	bl	801864a <memset>
 80193c8:	0020      	movs	r0, r4
 80193ca:	bd70      	pop	{r4, r5, r6, pc}

080193cc <__sfp_lock_acquire>:
 80193cc:	b510      	push	{r4, lr}
 80193ce:	4802      	ldr	r0, [pc, #8]	; (80193d8 <__sfp_lock_acquire+0xc>)
 80193d0:	f000 f8bd 	bl	801954e <__retarget_lock_acquire_recursive>
 80193d4:	bd10      	pop	{r4, pc}
 80193d6:	46c0      	nop			; (mov r8, r8)
 80193d8:	200015b9 	.word	0x200015b9

080193dc <__sfp_lock_release>:
 80193dc:	b510      	push	{r4, lr}
 80193de:	4802      	ldr	r0, [pc, #8]	; (80193e8 <__sfp_lock_release+0xc>)
 80193e0:	f000 f8b6 	bl	8019550 <__retarget_lock_release_recursive>
 80193e4:	bd10      	pop	{r4, pc}
 80193e6:	46c0      	nop			; (mov r8, r8)
 80193e8:	200015b9 	.word	0x200015b9

080193ec <__sinit_lock_acquire>:
 80193ec:	b510      	push	{r4, lr}
 80193ee:	4802      	ldr	r0, [pc, #8]	; (80193f8 <__sinit_lock_acquire+0xc>)
 80193f0:	f000 f8ad 	bl	801954e <__retarget_lock_acquire_recursive>
 80193f4:	bd10      	pop	{r4, pc}
 80193f6:	46c0      	nop			; (mov r8, r8)
 80193f8:	200015ba 	.word	0x200015ba

080193fc <__sinit_lock_release>:
 80193fc:	b510      	push	{r4, lr}
 80193fe:	4802      	ldr	r0, [pc, #8]	; (8019408 <__sinit_lock_release+0xc>)
 8019400:	f000 f8a6 	bl	8019550 <__retarget_lock_release_recursive>
 8019404:	bd10      	pop	{r4, pc}
 8019406:	46c0      	nop			; (mov r8, r8)
 8019408:	200015ba 	.word	0x200015ba

0801940c <__sinit>:
 801940c:	b513      	push	{r0, r1, r4, lr}
 801940e:	0004      	movs	r4, r0
 8019410:	f7ff ffec 	bl	80193ec <__sinit_lock_acquire>
 8019414:	69a3      	ldr	r3, [r4, #24]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d002      	beq.n	8019420 <__sinit+0x14>
 801941a:	f7ff ffef 	bl	80193fc <__sinit_lock_release>
 801941e:	bd13      	pop	{r0, r1, r4, pc}
 8019420:	64a3      	str	r3, [r4, #72]	; 0x48
 8019422:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019424:	6523      	str	r3, [r4, #80]	; 0x50
 8019426:	4b13      	ldr	r3, [pc, #76]	; (8019474 <__sinit+0x68>)
 8019428:	4a13      	ldr	r2, [pc, #76]	; (8019478 <__sinit+0x6c>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	62a2      	str	r2, [r4, #40]	; 0x28
 801942e:	9301      	str	r3, [sp, #4]
 8019430:	42a3      	cmp	r3, r4
 8019432:	d101      	bne.n	8019438 <__sinit+0x2c>
 8019434:	2301      	movs	r3, #1
 8019436:	61a3      	str	r3, [r4, #24]
 8019438:	0020      	movs	r0, r4
 801943a:	f000 f81f 	bl	801947c <__sfp>
 801943e:	6060      	str	r0, [r4, #4]
 8019440:	0020      	movs	r0, r4
 8019442:	f000 f81b 	bl	801947c <__sfp>
 8019446:	60a0      	str	r0, [r4, #8]
 8019448:	0020      	movs	r0, r4
 801944a:	f000 f817 	bl	801947c <__sfp>
 801944e:	2200      	movs	r2, #0
 8019450:	2104      	movs	r1, #4
 8019452:	60e0      	str	r0, [r4, #12]
 8019454:	6860      	ldr	r0, [r4, #4]
 8019456:	f7ff ff77 	bl	8019348 <std>
 801945a:	2201      	movs	r2, #1
 801945c:	2109      	movs	r1, #9
 801945e:	68a0      	ldr	r0, [r4, #8]
 8019460:	f7ff ff72 	bl	8019348 <std>
 8019464:	2202      	movs	r2, #2
 8019466:	2112      	movs	r1, #18
 8019468:	68e0      	ldr	r0, [r4, #12]
 801946a:	f7ff ff6d 	bl	8019348 <std>
 801946e:	2301      	movs	r3, #1
 8019470:	61a3      	str	r3, [r4, #24]
 8019472:	e7d2      	b.n	801941a <__sinit+0xe>
 8019474:	0801c800 	.word	0x0801c800
 8019478:	08019391 	.word	0x08019391

0801947c <__sfp>:
 801947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801947e:	0007      	movs	r7, r0
 8019480:	f7ff ffa4 	bl	80193cc <__sfp_lock_acquire>
 8019484:	4b1f      	ldr	r3, [pc, #124]	; (8019504 <__sfp+0x88>)
 8019486:	681e      	ldr	r6, [r3, #0]
 8019488:	69b3      	ldr	r3, [r6, #24]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d102      	bne.n	8019494 <__sfp+0x18>
 801948e:	0030      	movs	r0, r6
 8019490:	f7ff ffbc 	bl	801940c <__sinit>
 8019494:	3648      	adds	r6, #72	; 0x48
 8019496:	68b4      	ldr	r4, [r6, #8]
 8019498:	6873      	ldr	r3, [r6, #4]
 801949a:	3b01      	subs	r3, #1
 801949c:	d504      	bpl.n	80194a8 <__sfp+0x2c>
 801949e:	6833      	ldr	r3, [r6, #0]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d022      	beq.n	80194ea <__sfp+0x6e>
 80194a4:	6836      	ldr	r6, [r6, #0]
 80194a6:	e7f6      	b.n	8019496 <__sfp+0x1a>
 80194a8:	220c      	movs	r2, #12
 80194aa:	5ea5      	ldrsh	r5, [r4, r2]
 80194ac:	2d00      	cmp	r5, #0
 80194ae:	d11a      	bne.n	80194e6 <__sfp+0x6a>
 80194b0:	0020      	movs	r0, r4
 80194b2:	4b15      	ldr	r3, [pc, #84]	; (8019508 <__sfp+0x8c>)
 80194b4:	3058      	adds	r0, #88	; 0x58
 80194b6:	60e3      	str	r3, [r4, #12]
 80194b8:	6665      	str	r5, [r4, #100]	; 0x64
 80194ba:	f000 f847 	bl	801954c <__retarget_lock_init_recursive>
 80194be:	f7ff ff8d 	bl	80193dc <__sfp_lock_release>
 80194c2:	0020      	movs	r0, r4
 80194c4:	2208      	movs	r2, #8
 80194c6:	0029      	movs	r1, r5
 80194c8:	6025      	str	r5, [r4, #0]
 80194ca:	60a5      	str	r5, [r4, #8]
 80194cc:	6065      	str	r5, [r4, #4]
 80194ce:	6125      	str	r5, [r4, #16]
 80194d0:	6165      	str	r5, [r4, #20]
 80194d2:	61a5      	str	r5, [r4, #24]
 80194d4:	305c      	adds	r0, #92	; 0x5c
 80194d6:	f7ff f8b8 	bl	801864a <memset>
 80194da:	6365      	str	r5, [r4, #52]	; 0x34
 80194dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80194de:	64a5      	str	r5, [r4, #72]	; 0x48
 80194e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80194e2:	0020      	movs	r0, r4
 80194e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194e6:	3468      	adds	r4, #104	; 0x68
 80194e8:	e7d7      	b.n	801949a <__sfp+0x1e>
 80194ea:	2104      	movs	r1, #4
 80194ec:	0038      	movs	r0, r7
 80194ee:	f7ff ff57 	bl	80193a0 <__sfmoreglue>
 80194f2:	1e04      	subs	r4, r0, #0
 80194f4:	6030      	str	r0, [r6, #0]
 80194f6:	d1d5      	bne.n	80194a4 <__sfp+0x28>
 80194f8:	f7ff ff70 	bl	80193dc <__sfp_lock_release>
 80194fc:	230c      	movs	r3, #12
 80194fe:	603b      	str	r3, [r7, #0]
 8019500:	e7ef      	b.n	80194e2 <__sfp+0x66>
 8019502:	46c0      	nop			; (mov r8, r8)
 8019504:	0801c800 	.word	0x0801c800
 8019508:	ffff0001 	.word	0xffff0001

0801950c <_fwalk_reent>:
 801950c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801950e:	0004      	movs	r4, r0
 8019510:	0006      	movs	r6, r0
 8019512:	2700      	movs	r7, #0
 8019514:	9101      	str	r1, [sp, #4]
 8019516:	3448      	adds	r4, #72	; 0x48
 8019518:	6863      	ldr	r3, [r4, #4]
 801951a:	68a5      	ldr	r5, [r4, #8]
 801951c:	9300      	str	r3, [sp, #0]
 801951e:	9b00      	ldr	r3, [sp, #0]
 8019520:	3b01      	subs	r3, #1
 8019522:	9300      	str	r3, [sp, #0]
 8019524:	d504      	bpl.n	8019530 <_fwalk_reent+0x24>
 8019526:	6824      	ldr	r4, [r4, #0]
 8019528:	2c00      	cmp	r4, #0
 801952a:	d1f5      	bne.n	8019518 <_fwalk_reent+0xc>
 801952c:	0038      	movs	r0, r7
 801952e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019530:	89ab      	ldrh	r3, [r5, #12]
 8019532:	2b01      	cmp	r3, #1
 8019534:	d908      	bls.n	8019548 <_fwalk_reent+0x3c>
 8019536:	220e      	movs	r2, #14
 8019538:	5eab      	ldrsh	r3, [r5, r2]
 801953a:	3301      	adds	r3, #1
 801953c:	d004      	beq.n	8019548 <_fwalk_reent+0x3c>
 801953e:	0029      	movs	r1, r5
 8019540:	0030      	movs	r0, r6
 8019542:	9b01      	ldr	r3, [sp, #4]
 8019544:	4798      	blx	r3
 8019546:	4307      	orrs	r7, r0
 8019548:	3568      	adds	r5, #104	; 0x68
 801954a:	e7e8      	b.n	801951e <_fwalk_reent+0x12>

0801954c <__retarget_lock_init_recursive>:
 801954c:	4770      	bx	lr

0801954e <__retarget_lock_acquire_recursive>:
 801954e:	4770      	bx	lr

08019550 <__retarget_lock_release_recursive>:
 8019550:	4770      	bx	lr
	...

08019554 <_lseek_r>:
 8019554:	b570      	push	{r4, r5, r6, lr}
 8019556:	0004      	movs	r4, r0
 8019558:	0008      	movs	r0, r1
 801955a:	0011      	movs	r1, r2
 801955c:	001a      	movs	r2, r3
 801955e:	2300      	movs	r3, #0
 8019560:	4d05      	ldr	r5, [pc, #20]	; (8019578 <_lseek_r+0x24>)
 8019562:	602b      	str	r3, [r5, #0]
 8019564:	f7f5 fa6c 	bl	800ea40 <_lseek>
 8019568:	1c43      	adds	r3, r0, #1
 801956a:	d103      	bne.n	8019574 <_lseek_r+0x20>
 801956c:	682b      	ldr	r3, [r5, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d000      	beq.n	8019574 <_lseek_r+0x20>
 8019572:	6023      	str	r3, [r4, #0]
 8019574:	bd70      	pop	{r4, r5, r6, pc}
 8019576:	46c0      	nop			; (mov r8, r8)
 8019578:	200015c4 	.word	0x200015c4

0801957c <__swhatbuf_r>:
 801957c:	b570      	push	{r4, r5, r6, lr}
 801957e:	000e      	movs	r6, r1
 8019580:	001d      	movs	r5, r3
 8019582:	230e      	movs	r3, #14
 8019584:	5ec9      	ldrsh	r1, [r1, r3]
 8019586:	0014      	movs	r4, r2
 8019588:	b096      	sub	sp, #88	; 0x58
 801958a:	2900      	cmp	r1, #0
 801958c:	da08      	bge.n	80195a0 <__swhatbuf_r+0x24>
 801958e:	220c      	movs	r2, #12
 8019590:	5eb3      	ldrsh	r3, [r6, r2]
 8019592:	2200      	movs	r2, #0
 8019594:	602a      	str	r2, [r5, #0]
 8019596:	061b      	lsls	r3, r3, #24
 8019598:	d411      	bmi.n	80195be <__swhatbuf_r+0x42>
 801959a:	2380      	movs	r3, #128	; 0x80
 801959c:	00db      	lsls	r3, r3, #3
 801959e:	e00f      	b.n	80195c0 <__swhatbuf_r+0x44>
 80195a0:	466a      	mov	r2, sp
 80195a2:	f001 f839 	bl	801a618 <_fstat_r>
 80195a6:	2800      	cmp	r0, #0
 80195a8:	dbf1      	blt.n	801958e <__swhatbuf_r+0x12>
 80195aa:	23f0      	movs	r3, #240	; 0xf0
 80195ac:	9901      	ldr	r1, [sp, #4]
 80195ae:	021b      	lsls	r3, r3, #8
 80195b0:	4019      	ands	r1, r3
 80195b2:	4b05      	ldr	r3, [pc, #20]	; (80195c8 <__swhatbuf_r+0x4c>)
 80195b4:	18c9      	adds	r1, r1, r3
 80195b6:	424b      	negs	r3, r1
 80195b8:	4159      	adcs	r1, r3
 80195ba:	6029      	str	r1, [r5, #0]
 80195bc:	e7ed      	b.n	801959a <__swhatbuf_r+0x1e>
 80195be:	2340      	movs	r3, #64	; 0x40
 80195c0:	2000      	movs	r0, #0
 80195c2:	6023      	str	r3, [r4, #0]
 80195c4:	b016      	add	sp, #88	; 0x58
 80195c6:	bd70      	pop	{r4, r5, r6, pc}
 80195c8:	ffffe000 	.word	0xffffe000

080195cc <__smakebuf_r>:
 80195cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195ce:	2602      	movs	r6, #2
 80195d0:	898b      	ldrh	r3, [r1, #12]
 80195d2:	0005      	movs	r5, r0
 80195d4:	000c      	movs	r4, r1
 80195d6:	4233      	tst	r3, r6
 80195d8:	d006      	beq.n	80195e8 <__smakebuf_r+0x1c>
 80195da:	0023      	movs	r3, r4
 80195dc:	3347      	adds	r3, #71	; 0x47
 80195de:	6023      	str	r3, [r4, #0]
 80195e0:	6123      	str	r3, [r4, #16]
 80195e2:	2301      	movs	r3, #1
 80195e4:	6163      	str	r3, [r4, #20]
 80195e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80195e8:	466a      	mov	r2, sp
 80195ea:	ab01      	add	r3, sp, #4
 80195ec:	f7ff ffc6 	bl	801957c <__swhatbuf_r>
 80195f0:	9900      	ldr	r1, [sp, #0]
 80195f2:	0007      	movs	r7, r0
 80195f4:	0028      	movs	r0, r5
 80195f6:	f000 f8c1 	bl	801977c <_malloc_r>
 80195fa:	2800      	cmp	r0, #0
 80195fc:	d108      	bne.n	8019610 <__smakebuf_r+0x44>
 80195fe:	220c      	movs	r2, #12
 8019600:	5ea3      	ldrsh	r3, [r4, r2]
 8019602:	059a      	lsls	r2, r3, #22
 8019604:	d4ef      	bmi.n	80195e6 <__smakebuf_r+0x1a>
 8019606:	2203      	movs	r2, #3
 8019608:	4393      	bics	r3, r2
 801960a:	431e      	orrs	r6, r3
 801960c:	81a6      	strh	r6, [r4, #12]
 801960e:	e7e4      	b.n	80195da <__smakebuf_r+0xe>
 8019610:	4b0f      	ldr	r3, [pc, #60]	; (8019650 <__smakebuf_r+0x84>)
 8019612:	62ab      	str	r3, [r5, #40]	; 0x28
 8019614:	2380      	movs	r3, #128	; 0x80
 8019616:	89a2      	ldrh	r2, [r4, #12]
 8019618:	6020      	str	r0, [r4, #0]
 801961a:	4313      	orrs	r3, r2
 801961c:	81a3      	strh	r3, [r4, #12]
 801961e:	9b00      	ldr	r3, [sp, #0]
 8019620:	6120      	str	r0, [r4, #16]
 8019622:	6163      	str	r3, [r4, #20]
 8019624:	9b01      	ldr	r3, [sp, #4]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d00d      	beq.n	8019646 <__smakebuf_r+0x7a>
 801962a:	0028      	movs	r0, r5
 801962c:	230e      	movs	r3, #14
 801962e:	5ee1      	ldrsh	r1, [r4, r3]
 8019630:	f001 f804 	bl	801a63c <_isatty_r>
 8019634:	2800      	cmp	r0, #0
 8019636:	d006      	beq.n	8019646 <__smakebuf_r+0x7a>
 8019638:	2203      	movs	r2, #3
 801963a:	89a3      	ldrh	r3, [r4, #12]
 801963c:	4393      	bics	r3, r2
 801963e:	001a      	movs	r2, r3
 8019640:	2301      	movs	r3, #1
 8019642:	4313      	orrs	r3, r2
 8019644:	81a3      	strh	r3, [r4, #12]
 8019646:	89a0      	ldrh	r0, [r4, #12]
 8019648:	4307      	orrs	r7, r0
 801964a:	81a7      	strh	r7, [r4, #12]
 801964c:	e7cb      	b.n	80195e6 <__smakebuf_r+0x1a>
 801964e:	46c0      	nop			; (mov r8, r8)
 8019650:	08019391 	.word	0x08019391

08019654 <malloc>:
 8019654:	b510      	push	{r4, lr}
 8019656:	4b03      	ldr	r3, [pc, #12]	; (8019664 <malloc+0x10>)
 8019658:	0001      	movs	r1, r0
 801965a:	6818      	ldr	r0, [r3, #0]
 801965c:	f000 f88e 	bl	801977c <_malloc_r>
 8019660:	bd10      	pop	{r4, pc}
 8019662:	46c0      	nop			; (mov r8, r8)
 8019664:	200002c4 	.word	0x200002c4

08019668 <memchr>:
 8019668:	b2c9      	uxtb	r1, r1
 801966a:	1882      	adds	r2, r0, r2
 801966c:	4290      	cmp	r0, r2
 801966e:	d101      	bne.n	8019674 <memchr+0xc>
 8019670:	2000      	movs	r0, #0
 8019672:	4770      	bx	lr
 8019674:	7803      	ldrb	r3, [r0, #0]
 8019676:	428b      	cmp	r3, r1
 8019678:	d0fb      	beq.n	8019672 <memchr+0xa>
 801967a:	3001      	adds	r0, #1
 801967c:	e7f6      	b.n	801966c <memchr+0x4>

0801967e <memmove>:
 801967e:	b510      	push	{r4, lr}
 8019680:	4288      	cmp	r0, r1
 8019682:	d902      	bls.n	801968a <memmove+0xc>
 8019684:	188b      	adds	r3, r1, r2
 8019686:	4298      	cmp	r0, r3
 8019688:	d303      	bcc.n	8019692 <memmove+0x14>
 801968a:	2300      	movs	r3, #0
 801968c:	e007      	b.n	801969e <memmove+0x20>
 801968e:	5c8b      	ldrb	r3, [r1, r2]
 8019690:	5483      	strb	r3, [r0, r2]
 8019692:	3a01      	subs	r2, #1
 8019694:	d2fb      	bcs.n	801968e <memmove+0x10>
 8019696:	bd10      	pop	{r4, pc}
 8019698:	5ccc      	ldrb	r4, [r1, r3]
 801969a:	54c4      	strb	r4, [r0, r3]
 801969c:	3301      	adds	r3, #1
 801969e:	429a      	cmp	r2, r3
 80196a0:	d1fa      	bne.n	8019698 <memmove+0x1a>
 80196a2:	e7f8      	b.n	8019696 <memmove+0x18>

080196a4 <_free_r>:
 80196a4:	b570      	push	{r4, r5, r6, lr}
 80196a6:	0005      	movs	r5, r0
 80196a8:	2900      	cmp	r1, #0
 80196aa:	d010      	beq.n	80196ce <_free_r+0x2a>
 80196ac:	1f0c      	subs	r4, r1, #4
 80196ae:	6823      	ldr	r3, [r4, #0]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	da00      	bge.n	80196b6 <_free_r+0x12>
 80196b4:	18e4      	adds	r4, r4, r3
 80196b6:	0028      	movs	r0, r5
 80196b8:	f000 ffd2 	bl	801a660 <__malloc_lock>
 80196bc:	4a1d      	ldr	r2, [pc, #116]	; (8019734 <_free_r+0x90>)
 80196be:	6813      	ldr	r3, [r2, #0]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d105      	bne.n	80196d0 <_free_r+0x2c>
 80196c4:	6063      	str	r3, [r4, #4]
 80196c6:	6014      	str	r4, [r2, #0]
 80196c8:	0028      	movs	r0, r5
 80196ca:	f000 ffd1 	bl	801a670 <__malloc_unlock>
 80196ce:	bd70      	pop	{r4, r5, r6, pc}
 80196d0:	42a3      	cmp	r3, r4
 80196d2:	d908      	bls.n	80196e6 <_free_r+0x42>
 80196d4:	6821      	ldr	r1, [r4, #0]
 80196d6:	1860      	adds	r0, r4, r1
 80196d8:	4283      	cmp	r3, r0
 80196da:	d1f3      	bne.n	80196c4 <_free_r+0x20>
 80196dc:	6818      	ldr	r0, [r3, #0]
 80196de:	685b      	ldr	r3, [r3, #4]
 80196e0:	1841      	adds	r1, r0, r1
 80196e2:	6021      	str	r1, [r4, #0]
 80196e4:	e7ee      	b.n	80196c4 <_free_r+0x20>
 80196e6:	001a      	movs	r2, r3
 80196e8:	685b      	ldr	r3, [r3, #4]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d001      	beq.n	80196f2 <_free_r+0x4e>
 80196ee:	42a3      	cmp	r3, r4
 80196f0:	d9f9      	bls.n	80196e6 <_free_r+0x42>
 80196f2:	6811      	ldr	r1, [r2, #0]
 80196f4:	1850      	adds	r0, r2, r1
 80196f6:	42a0      	cmp	r0, r4
 80196f8:	d10b      	bne.n	8019712 <_free_r+0x6e>
 80196fa:	6820      	ldr	r0, [r4, #0]
 80196fc:	1809      	adds	r1, r1, r0
 80196fe:	1850      	adds	r0, r2, r1
 8019700:	6011      	str	r1, [r2, #0]
 8019702:	4283      	cmp	r3, r0
 8019704:	d1e0      	bne.n	80196c8 <_free_r+0x24>
 8019706:	6818      	ldr	r0, [r3, #0]
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	1841      	adds	r1, r0, r1
 801970c:	6011      	str	r1, [r2, #0]
 801970e:	6053      	str	r3, [r2, #4]
 8019710:	e7da      	b.n	80196c8 <_free_r+0x24>
 8019712:	42a0      	cmp	r0, r4
 8019714:	d902      	bls.n	801971c <_free_r+0x78>
 8019716:	230c      	movs	r3, #12
 8019718:	602b      	str	r3, [r5, #0]
 801971a:	e7d5      	b.n	80196c8 <_free_r+0x24>
 801971c:	6821      	ldr	r1, [r4, #0]
 801971e:	1860      	adds	r0, r4, r1
 8019720:	4283      	cmp	r3, r0
 8019722:	d103      	bne.n	801972c <_free_r+0x88>
 8019724:	6818      	ldr	r0, [r3, #0]
 8019726:	685b      	ldr	r3, [r3, #4]
 8019728:	1841      	adds	r1, r0, r1
 801972a:	6021      	str	r1, [r4, #0]
 801972c:	6063      	str	r3, [r4, #4]
 801972e:	6054      	str	r4, [r2, #4]
 8019730:	e7ca      	b.n	80196c8 <_free_r+0x24>
 8019732:	46c0      	nop			; (mov r8, r8)
 8019734:	200015bc 	.word	0x200015bc

08019738 <sbrk_aligned>:
 8019738:	b570      	push	{r4, r5, r6, lr}
 801973a:	4e0f      	ldr	r6, [pc, #60]	; (8019778 <sbrk_aligned+0x40>)
 801973c:	000d      	movs	r5, r1
 801973e:	6831      	ldr	r1, [r6, #0]
 8019740:	0004      	movs	r4, r0
 8019742:	2900      	cmp	r1, #0
 8019744:	d102      	bne.n	801974c <sbrk_aligned+0x14>
 8019746:	f000 fd71 	bl	801a22c <_sbrk_r>
 801974a:	6030      	str	r0, [r6, #0]
 801974c:	0029      	movs	r1, r5
 801974e:	0020      	movs	r0, r4
 8019750:	f000 fd6c 	bl	801a22c <_sbrk_r>
 8019754:	1c43      	adds	r3, r0, #1
 8019756:	d00a      	beq.n	801976e <sbrk_aligned+0x36>
 8019758:	2303      	movs	r3, #3
 801975a:	1cc5      	adds	r5, r0, #3
 801975c:	439d      	bics	r5, r3
 801975e:	42a8      	cmp	r0, r5
 8019760:	d007      	beq.n	8019772 <sbrk_aligned+0x3a>
 8019762:	1a29      	subs	r1, r5, r0
 8019764:	0020      	movs	r0, r4
 8019766:	f000 fd61 	bl	801a22c <_sbrk_r>
 801976a:	1c43      	adds	r3, r0, #1
 801976c:	d101      	bne.n	8019772 <sbrk_aligned+0x3a>
 801976e:	2501      	movs	r5, #1
 8019770:	426d      	negs	r5, r5
 8019772:	0028      	movs	r0, r5
 8019774:	bd70      	pop	{r4, r5, r6, pc}
 8019776:	46c0      	nop			; (mov r8, r8)
 8019778:	200015c0 	.word	0x200015c0

0801977c <_malloc_r>:
 801977c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801977e:	2203      	movs	r2, #3
 8019780:	1ccb      	adds	r3, r1, #3
 8019782:	4393      	bics	r3, r2
 8019784:	3308      	adds	r3, #8
 8019786:	0006      	movs	r6, r0
 8019788:	001f      	movs	r7, r3
 801978a:	2b0c      	cmp	r3, #12
 801978c:	d232      	bcs.n	80197f4 <_malloc_r+0x78>
 801978e:	270c      	movs	r7, #12
 8019790:	42b9      	cmp	r1, r7
 8019792:	d831      	bhi.n	80197f8 <_malloc_r+0x7c>
 8019794:	0030      	movs	r0, r6
 8019796:	f000 ff63 	bl	801a660 <__malloc_lock>
 801979a:	4d32      	ldr	r5, [pc, #200]	; (8019864 <_malloc_r+0xe8>)
 801979c:	682b      	ldr	r3, [r5, #0]
 801979e:	001c      	movs	r4, r3
 80197a0:	2c00      	cmp	r4, #0
 80197a2:	d12e      	bne.n	8019802 <_malloc_r+0x86>
 80197a4:	0039      	movs	r1, r7
 80197a6:	0030      	movs	r0, r6
 80197a8:	f7ff ffc6 	bl	8019738 <sbrk_aligned>
 80197ac:	0004      	movs	r4, r0
 80197ae:	1c43      	adds	r3, r0, #1
 80197b0:	d11e      	bne.n	80197f0 <_malloc_r+0x74>
 80197b2:	682c      	ldr	r4, [r5, #0]
 80197b4:	0025      	movs	r5, r4
 80197b6:	2d00      	cmp	r5, #0
 80197b8:	d14a      	bne.n	8019850 <_malloc_r+0xd4>
 80197ba:	6823      	ldr	r3, [r4, #0]
 80197bc:	0029      	movs	r1, r5
 80197be:	18e3      	adds	r3, r4, r3
 80197c0:	0030      	movs	r0, r6
 80197c2:	9301      	str	r3, [sp, #4]
 80197c4:	f000 fd32 	bl	801a22c <_sbrk_r>
 80197c8:	9b01      	ldr	r3, [sp, #4]
 80197ca:	4283      	cmp	r3, r0
 80197cc:	d143      	bne.n	8019856 <_malloc_r+0xda>
 80197ce:	6823      	ldr	r3, [r4, #0]
 80197d0:	3703      	adds	r7, #3
 80197d2:	1aff      	subs	r7, r7, r3
 80197d4:	2303      	movs	r3, #3
 80197d6:	439f      	bics	r7, r3
 80197d8:	3708      	adds	r7, #8
 80197da:	2f0c      	cmp	r7, #12
 80197dc:	d200      	bcs.n	80197e0 <_malloc_r+0x64>
 80197de:	270c      	movs	r7, #12
 80197e0:	0039      	movs	r1, r7
 80197e2:	0030      	movs	r0, r6
 80197e4:	f7ff ffa8 	bl	8019738 <sbrk_aligned>
 80197e8:	1c43      	adds	r3, r0, #1
 80197ea:	d034      	beq.n	8019856 <_malloc_r+0xda>
 80197ec:	6823      	ldr	r3, [r4, #0]
 80197ee:	19df      	adds	r7, r3, r7
 80197f0:	6027      	str	r7, [r4, #0]
 80197f2:	e013      	b.n	801981c <_malloc_r+0xa0>
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	dacb      	bge.n	8019790 <_malloc_r+0x14>
 80197f8:	230c      	movs	r3, #12
 80197fa:	2500      	movs	r5, #0
 80197fc:	6033      	str	r3, [r6, #0]
 80197fe:	0028      	movs	r0, r5
 8019800:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019802:	6822      	ldr	r2, [r4, #0]
 8019804:	1bd1      	subs	r1, r2, r7
 8019806:	d420      	bmi.n	801984a <_malloc_r+0xce>
 8019808:	290b      	cmp	r1, #11
 801980a:	d917      	bls.n	801983c <_malloc_r+0xc0>
 801980c:	19e2      	adds	r2, r4, r7
 801980e:	6027      	str	r7, [r4, #0]
 8019810:	42a3      	cmp	r3, r4
 8019812:	d111      	bne.n	8019838 <_malloc_r+0xbc>
 8019814:	602a      	str	r2, [r5, #0]
 8019816:	6863      	ldr	r3, [r4, #4]
 8019818:	6011      	str	r1, [r2, #0]
 801981a:	6053      	str	r3, [r2, #4]
 801981c:	0030      	movs	r0, r6
 801981e:	0025      	movs	r5, r4
 8019820:	f000 ff26 	bl	801a670 <__malloc_unlock>
 8019824:	2207      	movs	r2, #7
 8019826:	350b      	adds	r5, #11
 8019828:	1d23      	adds	r3, r4, #4
 801982a:	4395      	bics	r5, r2
 801982c:	1aea      	subs	r2, r5, r3
 801982e:	429d      	cmp	r5, r3
 8019830:	d0e5      	beq.n	80197fe <_malloc_r+0x82>
 8019832:	1b5b      	subs	r3, r3, r5
 8019834:	50a3      	str	r3, [r4, r2]
 8019836:	e7e2      	b.n	80197fe <_malloc_r+0x82>
 8019838:	605a      	str	r2, [r3, #4]
 801983a:	e7ec      	b.n	8019816 <_malloc_r+0x9a>
 801983c:	6862      	ldr	r2, [r4, #4]
 801983e:	42a3      	cmp	r3, r4
 8019840:	d101      	bne.n	8019846 <_malloc_r+0xca>
 8019842:	602a      	str	r2, [r5, #0]
 8019844:	e7ea      	b.n	801981c <_malloc_r+0xa0>
 8019846:	605a      	str	r2, [r3, #4]
 8019848:	e7e8      	b.n	801981c <_malloc_r+0xa0>
 801984a:	0023      	movs	r3, r4
 801984c:	6864      	ldr	r4, [r4, #4]
 801984e:	e7a7      	b.n	80197a0 <_malloc_r+0x24>
 8019850:	002c      	movs	r4, r5
 8019852:	686d      	ldr	r5, [r5, #4]
 8019854:	e7af      	b.n	80197b6 <_malloc_r+0x3a>
 8019856:	230c      	movs	r3, #12
 8019858:	0030      	movs	r0, r6
 801985a:	6033      	str	r3, [r6, #0]
 801985c:	f000 ff08 	bl	801a670 <__malloc_unlock>
 8019860:	e7cd      	b.n	80197fe <_malloc_r+0x82>
 8019862:	46c0      	nop			; (mov r8, r8)
 8019864:	200015bc 	.word	0x200015bc

08019868 <_realloc_r>:
 8019868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801986a:	0007      	movs	r7, r0
 801986c:	000e      	movs	r6, r1
 801986e:	0014      	movs	r4, r2
 8019870:	2900      	cmp	r1, #0
 8019872:	d105      	bne.n	8019880 <_realloc_r+0x18>
 8019874:	0011      	movs	r1, r2
 8019876:	f7ff ff81 	bl	801977c <_malloc_r>
 801987a:	0005      	movs	r5, r0
 801987c:	0028      	movs	r0, r5
 801987e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019880:	2a00      	cmp	r2, #0
 8019882:	d103      	bne.n	801988c <_realloc_r+0x24>
 8019884:	f7ff ff0e 	bl	80196a4 <_free_r>
 8019888:	0025      	movs	r5, r4
 801988a:	e7f7      	b.n	801987c <_realloc_r+0x14>
 801988c:	f000 fef8 	bl	801a680 <_malloc_usable_size_r>
 8019890:	9001      	str	r0, [sp, #4]
 8019892:	4284      	cmp	r4, r0
 8019894:	d803      	bhi.n	801989e <_realloc_r+0x36>
 8019896:	0035      	movs	r5, r6
 8019898:	0843      	lsrs	r3, r0, #1
 801989a:	42a3      	cmp	r3, r4
 801989c:	d3ee      	bcc.n	801987c <_realloc_r+0x14>
 801989e:	0021      	movs	r1, r4
 80198a0:	0038      	movs	r0, r7
 80198a2:	f7ff ff6b 	bl	801977c <_malloc_r>
 80198a6:	1e05      	subs	r5, r0, #0
 80198a8:	d0e8      	beq.n	801987c <_realloc_r+0x14>
 80198aa:	9b01      	ldr	r3, [sp, #4]
 80198ac:	0022      	movs	r2, r4
 80198ae:	429c      	cmp	r4, r3
 80198b0:	d900      	bls.n	80198b4 <_realloc_r+0x4c>
 80198b2:	001a      	movs	r2, r3
 80198b4:	0031      	movs	r1, r6
 80198b6:	0028      	movs	r0, r5
 80198b8:	f7fe febe 	bl	8018638 <memcpy>
 80198bc:	0031      	movs	r1, r6
 80198be:	0038      	movs	r0, r7
 80198c0:	f7ff fef0 	bl	80196a4 <_free_r>
 80198c4:	e7da      	b.n	801987c <_realloc_r+0x14>
	...

080198c8 <__ssputs_r>:
 80198c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198ca:	688e      	ldr	r6, [r1, #8]
 80198cc:	b085      	sub	sp, #20
 80198ce:	0007      	movs	r7, r0
 80198d0:	000c      	movs	r4, r1
 80198d2:	9203      	str	r2, [sp, #12]
 80198d4:	9301      	str	r3, [sp, #4]
 80198d6:	429e      	cmp	r6, r3
 80198d8:	d83c      	bhi.n	8019954 <__ssputs_r+0x8c>
 80198da:	2390      	movs	r3, #144	; 0x90
 80198dc:	898a      	ldrh	r2, [r1, #12]
 80198de:	00db      	lsls	r3, r3, #3
 80198e0:	421a      	tst	r2, r3
 80198e2:	d034      	beq.n	801994e <__ssputs_r+0x86>
 80198e4:	6909      	ldr	r1, [r1, #16]
 80198e6:	6823      	ldr	r3, [r4, #0]
 80198e8:	6960      	ldr	r0, [r4, #20]
 80198ea:	1a5b      	subs	r3, r3, r1
 80198ec:	9302      	str	r3, [sp, #8]
 80198ee:	2303      	movs	r3, #3
 80198f0:	4343      	muls	r3, r0
 80198f2:	0fdd      	lsrs	r5, r3, #31
 80198f4:	18ed      	adds	r5, r5, r3
 80198f6:	9b01      	ldr	r3, [sp, #4]
 80198f8:	9802      	ldr	r0, [sp, #8]
 80198fa:	3301      	adds	r3, #1
 80198fc:	181b      	adds	r3, r3, r0
 80198fe:	106d      	asrs	r5, r5, #1
 8019900:	42ab      	cmp	r3, r5
 8019902:	d900      	bls.n	8019906 <__ssputs_r+0x3e>
 8019904:	001d      	movs	r5, r3
 8019906:	0553      	lsls	r3, r2, #21
 8019908:	d532      	bpl.n	8019970 <__ssputs_r+0xa8>
 801990a:	0029      	movs	r1, r5
 801990c:	0038      	movs	r0, r7
 801990e:	f7ff ff35 	bl	801977c <_malloc_r>
 8019912:	1e06      	subs	r6, r0, #0
 8019914:	d109      	bne.n	801992a <__ssputs_r+0x62>
 8019916:	230c      	movs	r3, #12
 8019918:	603b      	str	r3, [r7, #0]
 801991a:	2340      	movs	r3, #64	; 0x40
 801991c:	2001      	movs	r0, #1
 801991e:	89a2      	ldrh	r2, [r4, #12]
 8019920:	4240      	negs	r0, r0
 8019922:	4313      	orrs	r3, r2
 8019924:	81a3      	strh	r3, [r4, #12]
 8019926:	b005      	add	sp, #20
 8019928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801992a:	9a02      	ldr	r2, [sp, #8]
 801992c:	6921      	ldr	r1, [r4, #16]
 801992e:	f7fe fe83 	bl	8018638 <memcpy>
 8019932:	89a3      	ldrh	r3, [r4, #12]
 8019934:	4a14      	ldr	r2, [pc, #80]	; (8019988 <__ssputs_r+0xc0>)
 8019936:	401a      	ands	r2, r3
 8019938:	2380      	movs	r3, #128	; 0x80
 801993a:	4313      	orrs	r3, r2
 801993c:	81a3      	strh	r3, [r4, #12]
 801993e:	9b02      	ldr	r3, [sp, #8]
 8019940:	6126      	str	r6, [r4, #16]
 8019942:	18f6      	adds	r6, r6, r3
 8019944:	6026      	str	r6, [r4, #0]
 8019946:	6165      	str	r5, [r4, #20]
 8019948:	9e01      	ldr	r6, [sp, #4]
 801994a:	1aed      	subs	r5, r5, r3
 801994c:	60a5      	str	r5, [r4, #8]
 801994e:	9b01      	ldr	r3, [sp, #4]
 8019950:	429e      	cmp	r6, r3
 8019952:	d900      	bls.n	8019956 <__ssputs_r+0x8e>
 8019954:	9e01      	ldr	r6, [sp, #4]
 8019956:	0032      	movs	r2, r6
 8019958:	9903      	ldr	r1, [sp, #12]
 801995a:	6820      	ldr	r0, [r4, #0]
 801995c:	f7ff fe8f 	bl	801967e <memmove>
 8019960:	68a3      	ldr	r3, [r4, #8]
 8019962:	2000      	movs	r0, #0
 8019964:	1b9b      	subs	r3, r3, r6
 8019966:	60a3      	str	r3, [r4, #8]
 8019968:	6823      	ldr	r3, [r4, #0]
 801996a:	199e      	adds	r6, r3, r6
 801996c:	6026      	str	r6, [r4, #0]
 801996e:	e7da      	b.n	8019926 <__ssputs_r+0x5e>
 8019970:	002a      	movs	r2, r5
 8019972:	0038      	movs	r0, r7
 8019974:	f7ff ff78 	bl	8019868 <_realloc_r>
 8019978:	1e06      	subs	r6, r0, #0
 801997a:	d1e0      	bne.n	801993e <__ssputs_r+0x76>
 801997c:	0038      	movs	r0, r7
 801997e:	6921      	ldr	r1, [r4, #16]
 8019980:	f7ff fe90 	bl	80196a4 <_free_r>
 8019984:	e7c7      	b.n	8019916 <__ssputs_r+0x4e>
 8019986:	46c0      	nop			; (mov r8, r8)
 8019988:	fffffb7f 	.word	0xfffffb7f

0801998c <_svfiprintf_r>:
 801998c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801998e:	b0a1      	sub	sp, #132	; 0x84
 8019990:	9003      	str	r0, [sp, #12]
 8019992:	001d      	movs	r5, r3
 8019994:	898b      	ldrh	r3, [r1, #12]
 8019996:	000f      	movs	r7, r1
 8019998:	0016      	movs	r6, r2
 801999a:	061b      	lsls	r3, r3, #24
 801999c:	d511      	bpl.n	80199c2 <_svfiprintf_r+0x36>
 801999e:	690b      	ldr	r3, [r1, #16]
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d10e      	bne.n	80199c2 <_svfiprintf_r+0x36>
 80199a4:	2140      	movs	r1, #64	; 0x40
 80199a6:	f7ff fee9 	bl	801977c <_malloc_r>
 80199aa:	6038      	str	r0, [r7, #0]
 80199ac:	6138      	str	r0, [r7, #16]
 80199ae:	2800      	cmp	r0, #0
 80199b0:	d105      	bne.n	80199be <_svfiprintf_r+0x32>
 80199b2:	230c      	movs	r3, #12
 80199b4:	9a03      	ldr	r2, [sp, #12]
 80199b6:	3801      	subs	r0, #1
 80199b8:	6013      	str	r3, [r2, #0]
 80199ba:	b021      	add	sp, #132	; 0x84
 80199bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199be:	2340      	movs	r3, #64	; 0x40
 80199c0:	617b      	str	r3, [r7, #20]
 80199c2:	2300      	movs	r3, #0
 80199c4:	ac08      	add	r4, sp, #32
 80199c6:	6163      	str	r3, [r4, #20]
 80199c8:	3320      	adds	r3, #32
 80199ca:	7663      	strb	r3, [r4, #25]
 80199cc:	3310      	adds	r3, #16
 80199ce:	76a3      	strb	r3, [r4, #26]
 80199d0:	9507      	str	r5, [sp, #28]
 80199d2:	0035      	movs	r5, r6
 80199d4:	782b      	ldrb	r3, [r5, #0]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d001      	beq.n	80199de <_svfiprintf_r+0x52>
 80199da:	2b25      	cmp	r3, #37	; 0x25
 80199dc:	d147      	bne.n	8019a6e <_svfiprintf_r+0xe2>
 80199de:	1bab      	subs	r3, r5, r6
 80199e0:	9305      	str	r3, [sp, #20]
 80199e2:	42b5      	cmp	r5, r6
 80199e4:	d00c      	beq.n	8019a00 <_svfiprintf_r+0x74>
 80199e6:	0032      	movs	r2, r6
 80199e8:	0039      	movs	r1, r7
 80199ea:	9803      	ldr	r0, [sp, #12]
 80199ec:	f7ff ff6c 	bl	80198c8 <__ssputs_r>
 80199f0:	1c43      	adds	r3, r0, #1
 80199f2:	d100      	bne.n	80199f6 <_svfiprintf_r+0x6a>
 80199f4:	e0ae      	b.n	8019b54 <_svfiprintf_r+0x1c8>
 80199f6:	6962      	ldr	r2, [r4, #20]
 80199f8:	9b05      	ldr	r3, [sp, #20]
 80199fa:	4694      	mov	ip, r2
 80199fc:	4463      	add	r3, ip
 80199fe:	6163      	str	r3, [r4, #20]
 8019a00:	782b      	ldrb	r3, [r5, #0]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d100      	bne.n	8019a08 <_svfiprintf_r+0x7c>
 8019a06:	e0a5      	b.n	8019b54 <_svfiprintf_r+0x1c8>
 8019a08:	2201      	movs	r2, #1
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	4252      	negs	r2, r2
 8019a0e:	6062      	str	r2, [r4, #4]
 8019a10:	a904      	add	r1, sp, #16
 8019a12:	3254      	adds	r2, #84	; 0x54
 8019a14:	1852      	adds	r2, r2, r1
 8019a16:	1c6e      	adds	r6, r5, #1
 8019a18:	6023      	str	r3, [r4, #0]
 8019a1a:	60e3      	str	r3, [r4, #12]
 8019a1c:	60a3      	str	r3, [r4, #8]
 8019a1e:	7013      	strb	r3, [r2, #0]
 8019a20:	65a3      	str	r3, [r4, #88]	; 0x58
 8019a22:	2205      	movs	r2, #5
 8019a24:	7831      	ldrb	r1, [r6, #0]
 8019a26:	4854      	ldr	r0, [pc, #336]	; (8019b78 <_svfiprintf_r+0x1ec>)
 8019a28:	f7ff fe1e 	bl	8019668 <memchr>
 8019a2c:	1c75      	adds	r5, r6, #1
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	d11f      	bne.n	8019a72 <_svfiprintf_r+0xe6>
 8019a32:	6822      	ldr	r2, [r4, #0]
 8019a34:	06d3      	lsls	r3, r2, #27
 8019a36:	d504      	bpl.n	8019a42 <_svfiprintf_r+0xb6>
 8019a38:	2353      	movs	r3, #83	; 0x53
 8019a3a:	a904      	add	r1, sp, #16
 8019a3c:	185b      	adds	r3, r3, r1
 8019a3e:	2120      	movs	r1, #32
 8019a40:	7019      	strb	r1, [r3, #0]
 8019a42:	0713      	lsls	r3, r2, #28
 8019a44:	d504      	bpl.n	8019a50 <_svfiprintf_r+0xc4>
 8019a46:	2353      	movs	r3, #83	; 0x53
 8019a48:	a904      	add	r1, sp, #16
 8019a4a:	185b      	adds	r3, r3, r1
 8019a4c:	212b      	movs	r1, #43	; 0x2b
 8019a4e:	7019      	strb	r1, [r3, #0]
 8019a50:	7833      	ldrb	r3, [r6, #0]
 8019a52:	2b2a      	cmp	r3, #42	; 0x2a
 8019a54:	d016      	beq.n	8019a84 <_svfiprintf_r+0xf8>
 8019a56:	0035      	movs	r5, r6
 8019a58:	2100      	movs	r1, #0
 8019a5a:	200a      	movs	r0, #10
 8019a5c:	68e3      	ldr	r3, [r4, #12]
 8019a5e:	782a      	ldrb	r2, [r5, #0]
 8019a60:	1c6e      	adds	r6, r5, #1
 8019a62:	3a30      	subs	r2, #48	; 0x30
 8019a64:	2a09      	cmp	r2, #9
 8019a66:	d94e      	bls.n	8019b06 <_svfiprintf_r+0x17a>
 8019a68:	2900      	cmp	r1, #0
 8019a6a:	d111      	bne.n	8019a90 <_svfiprintf_r+0x104>
 8019a6c:	e017      	b.n	8019a9e <_svfiprintf_r+0x112>
 8019a6e:	3501      	adds	r5, #1
 8019a70:	e7b0      	b.n	80199d4 <_svfiprintf_r+0x48>
 8019a72:	4b41      	ldr	r3, [pc, #260]	; (8019b78 <_svfiprintf_r+0x1ec>)
 8019a74:	6822      	ldr	r2, [r4, #0]
 8019a76:	1ac0      	subs	r0, r0, r3
 8019a78:	2301      	movs	r3, #1
 8019a7a:	4083      	lsls	r3, r0
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	002e      	movs	r6, r5
 8019a80:	6023      	str	r3, [r4, #0]
 8019a82:	e7ce      	b.n	8019a22 <_svfiprintf_r+0x96>
 8019a84:	9b07      	ldr	r3, [sp, #28]
 8019a86:	1d19      	adds	r1, r3, #4
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	9107      	str	r1, [sp, #28]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	db01      	blt.n	8019a94 <_svfiprintf_r+0x108>
 8019a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a92:	e004      	b.n	8019a9e <_svfiprintf_r+0x112>
 8019a94:	425b      	negs	r3, r3
 8019a96:	60e3      	str	r3, [r4, #12]
 8019a98:	2302      	movs	r3, #2
 8019a9a:	4313      	orrs	r3, r2
 8019a9c:	6023      	str	r3, [r4, #0]
 8019a9e:	782b      	ldrb	r3, [r5, #0]
 8019aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8019aa2:	d10a      	bne.n	8019aba <_svfiprintf_r+0x12e>
 8019aa4:	786b      	ldrb	r3, [r5, #1]
 8019aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8019aa8:	d135      	bne.n	8019b16 <_svfiprintf_r+0x18a>
 8019aaa:	9b07      	ldr	r3, [sp, #28]
 8019aac:	3502      	adds	r5, #2
 8019aae:	1d1a      	adds	r2, r3, #4
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	9207      	str	r2, [sp, #28]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	db2b      	blt.n	8019b10 <_svfiprintf_r+0x184>
 8019ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8019aba:	4e30      	ldr	r6, [pc, #192]	; (8019b7c <_svfiprintf_r+0x1f0>)
 8019abc:	2203      	movs	r2, #3
 8019abe:	0030      	movs	r0, r6
 8019ac0:	7829      	ldrb	r1, [r5, #0]
 8019ac2:	f7ff fdd1 	bl	8019668 <memchr>
 8019ac6:	2800      	cmp	r0, #0
 8019ac8:	d006      	beq.n	8019ad8 <_svfiprintf_r+0x14c>
 8019aca:	2340      	movs	r3, #64	; 0x40
 8019acc:	1b80      	subs	r0, r0, r6
 8019ace:	4083      	lsls	r3, r0
 8019ad0:	6822      	ldr	r2, [r4, #0]
 8019ad2:	3501      	adds	r5, #1
 8019ad4:	4313      	orrs	r3, r2
 8019ad6:	6023      	str	r3, [r4, #0]
 8019ad8:	7829      	ldrb	r1, [r5, #0]
 8019ada:	2206      	movs	r2, #6
 8019adc:	4828      	ldr	r0, [pc, #160]	; (8019b80 <_svfiprintf_r+0x1f4>)
 8019ade:	1c6e      	adds	r6, r5, #1
 8019ae0:	7621      	strb	r1, [r4, #24]
 8019ae2:	f7ff fdc1 	bl	8019668 <memchr>
 8019ae6:	2800      	cmp	r0, #0
 8019ae8:	d03c      	beq.n	8019b64 <_svfiprintf_r+0x1d8>
 8019aea:	4b26      	ldr	r3, [pc, #152]	; (8019b84 <_svfiprintf_r+0x1f8>)
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d125      	bne.n	8019b3c <_svfiprintf_r+0x1b0>
 8019af0:	2207      	movs	r2, #7
 8019af2:	9b07      	ldr	r3, [sp, #28]
 8019af4:	3307      	adds	r3, #7
 8019af6:	4393      	bics	r3, r2
 8019af8:	3308      	adds	r3, #8
 8019afa:	9307      	str	r3, [sp, #28]
 8019afc:	6963      	ldr	r3, [r4, #20]
 8019afe:	9a04      	ldr	r2, [sp, #16]
 8019b00:	189b      	adds	r3, r3, r2
 8019b02:	6163      	str	r3, [r4, #20]
 8019b04:	e765      	b.n	80199d2 <_svfiprintf_r+0x46>
 8019b06:	4343      	muls	r3, r0
 8019b08:	0035      	movs	r5, r6
 8019b0a:	2101      	movs	r1, #1
 8019b0c:	189b      	adds	r3, r3, r2
 8019b0e:	e7a6      	b.n	8019a5e <_svfiprintf_r+0xd2>
 8019b10:	2301      	movs	r3, #1
 8019b12:	425b      	negs	r3, r3
 8019b14:	e7d0      	b.n	8019ab8 <_svfiprintf_r+0x12c>
 8019b16:	2300      	movs	r3, #0
 8019b18:	200a      	movs	r0, #10
 8019b1a:	001a      	movs	r2, r3
 8019b1c:	3501      	adds	r5, #1
 8019b1e:	6063      	str	r3, [r4, #4]
 8019b20:	7829      	ldrb	r1, [r5, #0]
 8019b22:	1c6e      	adds	r6, r5, #1
 8019b24:	3930      	subs	r1, #48	; 0x30
 8019b26:	2909      	cmp	r1, #9
 8019b28:	d903      	bls.n	8019b32 <_svfiprintf_r+0x1a6>
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d0c5      	beq.n	8019aba <_svfiprintf_r+0x12e>
 8019b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8019b30:	e7c3      	b.n	8019aba <_svfiprintf_r+0x12e>
 8019b32:	4342      	muls	r2, r0
 8019b34:	0035      	movs	r5, r6
 8019b36:	2301      	movs	r3, #1
 8019b38:	1852      	adds	r2, r2, r1
 8019b3a:	e7f1      	b.n	8019b20 <_svfiprintf_r+0x194>
 8019b3c:	ab07      	add	r3, sp, #28
 8019b3e:	9300      	str	r3, [sp, #0]
 8019b40:	003a      	movs	r2, r7
 8019b42:	0021      	movs	r1, r4
 8019b44:	4b10      	ldr	r3, [pc, #64]	; (8019b88 <_svfiprintf_r+0x1fc>)
 8019b46:	9803      	ldr	r0, [sp, #12]
 8019b48:	e000      	b.n	8019b4c <_svfiprintf_r+0x1c0>
 8019b4a:	bf00      	nop
 8019b4c:	9004      	str	r0, [sp, #16]
 8019b4e:	9b04      	ldr	r3, [sp, #16]
 8019b50:	3301      	adds	r3, #1
 8019b52:	d1d3      	bne.n	8019afc <_svfiprintf_r+0x170>
 8019b54:	89bb      	ldrh	r3, [r7, #12]
 8019b56:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019b58:	065b      	lsls	r3, r3, #25
 8019b5a:	d400      	bmi.n	8019b5e <_svfiprintf_r+0x1d2>
 8019b5c:	e72d      	b.n	80199ba <_svfiprintf_r+0x2e>
 8019b5e:	2001      	movs	r0, #1
 8019b60:	4240      	negs	r0, r0
 8019b62:	e72a      	b.n	80199ba <_svfiprintf_r+0x2e>
 8019b64:	ab07      	add	r3, sp, #28
 8019b66:	9300      	str	r3, [sp, #0]
 8019b68:	003a      	movs	r2, r7
 8019b6a:	0021      	movs	r1, r4
 8019b6c:	4b06      	ldr	r3, [pc, #24]	; (8019b88 <_svfiprintf_r+0x1fc>)
 8019b6e:	9803      	ldr	r0, [sp, #12]
 8019b70:	f7fe ff44 	bl	80189fc <_printf_i>
 8019b74:	e7ea      	b.n	8019b4c <_svfiprintf_r+0x1c0>
 8019b76:	46c0      	nop			; (mov r8, r8)
 8019b78:	0801c804 	.word	0x0801c804
 8019b7c:	0801c80a 	.word	0x0801c80a
 8019b80:	0801c80e 	.word	0x0801c80e
 8019b84:	00000000 	.word	0x00000000
 8019b88:	080198c9 	.word	0x080198c9

08019b8c <_sungetc_r>:
 8019b8c:	b570      	push	{r4, r5, r6, lr}
 8019b8e:	0014      	movs	r4, r2
 8019b90:	1c4b      	adds	r3, r1, #1
 8019b92:	d103      	bne.n	8019b9c <_sungetc_r+0x10>
 8019b94:	2501      	movs	r5, #1
 8019b96:	426d      	negs	r5, r5
 8019b98:	0028      	movs	r0, r5
 8019b9a:	bd70      	pop	{r4, r5, r6, pc}
 8019b9c:	8993      	ldrh	r3, [r2, #12]
 8019b9e:	2220      	movs	r2, #32
 8019ba0:	4393      	bics	r3, r2
 8019ba2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019ba4:	81a3      	strh	r3, [r4, #12]
 8019ba6:	b2ce      	uxtb	r6, r1
 8019ba8:	6863      	ldr	r3, [r4, #4]
 8019baa:	b2cd      	uxtb	r5, r1
 8019bac:	2a00      	cmp	r2, #0
 8019bae:	d010      	beq.n	8019bd2 <_sungetc_r+0x46>
 8019bb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019bb2:	429a      	cmp	r2, r3
 8019bb4:	dd07      	ble.n	8019bc6 <_sungetc_r+0x3a>
 8019bb6:	6823      	ldr	r3, [r4, #0]
 8019bb8:	3b01      	subs	r3, #1
 8019bba:	6023      	str	r3, [r4, #0]
 8019bbc:	701e      	strb	r6, [r3, #0]
 8019bbe:	6863      	ldr	r3, [r4, #4]
 8019bc0:	3301      	adds	r3, #1
 8019bc2:	6063      	str	r3, [r4, #4]
 8019bc4:	e7e8      	b.n	8019b98 <_sungetc_r+0xc>
 8019bc6:	0021      	movs	r1, r4
 8019bc8:	f000 fce8 	bl	801a59c <__submore>
 8019bcc:	2800      	cmp	r0, #0
 8019bce:	d0f2      	beq.n	8019bb6 <_sungetc_r+0x2a>
 8019bd0:	e7e0      	b.n	8019b94 <_sungetc_r+0x8>
 8019bd2:	6921      	ldr	r1, [r4, #16]
 8019bd4:	6822      	ldr	r2, [r4, #0]
 8019bd6:	2900      	cmp	r1, #0
 8019bd8:	d007      	beq.n	8019bea <_sungetc_r+0x5e>
 8019bda:	4291      	cmp	r1, r2
 8019bdc:	d205      	bcs.n	8019bea <_sungetc_r+0x5e>
 8019bde:	1e51      	subs	r1, r2, #1
 8019be0:	7808      	ldrb	r0, [r1, #0]
 8019be2:	42a8      	cmp	r0, r5
 8019be4:	d101      	bne.n	8019bea <_sungetc_r+0x5e>
 8019be6:	6021      	str	r1, [r4, #0]
 8019be8:	e7ea      	b.n	8019bc0 <_sungetc_r+0x34>
 8019bea:	6423      	str	r3, [r4, #64]	; 0x40
 8019bec:	0023      	movs	r3, r4
 8019bee:	3344      	adds	r3, #68	; 0x44
 8019bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8019bf2:	2303      	movs	r3, #3
 8019bf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8019bf6:	0023      	movs	r3, r4
 8019bf8:	3346      	adds	r3, #70	; 0x46
 8019bfa:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019bfc:	701e      	strb	r6, [r3, #0]
 8019bfe:	6023      	str	r3, [r4, #0]
 8019c00:	2301      	movs	r3, #1
 8019c02:	e7de      	b.n	8019bc2 <_sungetc_r+0x36>

08019c04 <__ssrefill_r>:
 8019c04:	b510      	push	{r4, lr}
 8019c06:	000c      	movs	r4, r1
 8019c08:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019c0a:	2900      	cmp	r1, #0
 8019c0c:	d00e      	beq.n	8019c2c <__ssrefill_r+0x28>
 8019c0e:	0023      	movs	r3, r4
 8019c10:	3344      	adds	r3, #68	; 0x44
 8019c12:	4299      	cmp	r1, r3
 8019c14:	d001      	beq.n	8019c1a <__ssrefill_r+0x16>
 8019c16:	f7ff fd45 	bl	80196a4 <_free_r>
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c1e:	6360      	str	r0, [r4, #52]	; 0x34
 8019c20:	6063      	str	r3, [r4, #4]
 8019c22:	4283      	cmp	r3, r0
 8019c24:	d002      	beq.n	8019c2c <__ssrefill_r+0x28>
 8019c26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019c28:	6023      	str	r3, [r4, #0]
 8019c2a:	bd10      	pop	{r4, pc}
 8019c2c:	6923      	ldr	r3, [r4, #16]
 8019c2e:	2001      	movs	r0, #1
 8019c30:	6023      	str	r3, [r4, #0]
 8019c32:	2300      	movs	r3, #0
 8019c34:	89a2      	ldrh	r2, [r4, #12]
 8019c36:	6063      	str	r3, [r4, #4]
 8019c38:	3320      	adds	r3, #32
 8019c3a:	4313      	orrs	r3, r2
 8019c3c:	81a3      	strh	r3, [r4, #12]
 8019c3e:	4240      	negs	r0, r0
 8019c40:	e7f3      	b.n	8019c2a <__ssrefill_r+0x26>
	...

08019c44 <__ssvfiscanf_r>:
 8019c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c46:	4cb8      	ldr	r4, [pc, #736]	; (8019f28 <__ssvfiscanf_r+0x2e4>)
 8019c48:	0006      	movs	r6, r0
 8019c4a:	44a5      	add	sp, r4
 8019c4c:	000c      	movs	r4, r1
 8019c4e:	2100      	movs	r1, #0
 8019c50:	9146      	str	r1, [sp, #280]	; 0x118
 8019c52:	9147      	str	r1, [sp, #284]	; 0x11c
 8019c54:	a903      	add	r1, sp, #12
 8019c56:	9148      	str	r1, [sp, #288]	; 0x120
 8019c58:	21be      	movs	r1, #190	; 0xbe
 8019c5a:	48b4      	ldr	r0, [pc, #720]	; (8019f2c <__ssvfiscanf_r+0x2e8>)
 8019c5c:	0049      	lsls	r1, r1, #1
 8019c5e:	ad43      	add	r5, sp, #268	; 0x10c
 8019c60:	5068      	str	r0, [r5, r1]
 8019c62:	25c0      	movs	r5, #192	; 0xc0
 8019c64:	49b2      	ldr	r1, [pc, #712]	; (8019f30 <__ssvfiscanf_r+0x2ec>)
 8019c66:	006d      	lsls	r5, r5, #1
 8019c68:	a843      	add	r0, sp, #268	; 0x10c
 8019c6a:	5141      	str	r1, [r0, r5]
 8019c6c:	9302      	str	r3, [sp, #8]
 8019c6e:	7813      	ldrb	r3, [r2, #0]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d100      	bne.n	8019c76 <__ssvfiscanf_r+0x32>
 8019c74:	e155      	b.n	8019f22 <__ssvfiscanf_r+0x2de>
 8019c76:	49af      	ldr	r1, [pc, #700]	; (8019f34 <__ssvfiscanf_r+0x2f0>)
 8019c78:	2508      	movs	r5, #8
 8019c7a:	5cc8      	ldrb	r0, [r1, r3]
 8019c7c:	2108      	movs	r1, #8
 8019c7e:	1c57      	adds	r7, r2, #1
 8019c80:	4001      	ands	r1, r0
 8019c82:	4228      	tst	r0, r5
 8019c84:	d020      	beq.n	8019cc8 <__ssvfiscanf_r+0x84>
 8019c86:	6863      	ldr	r3, [r4, #4]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	dd12      	ble.n	8019cb2 <__ssvfiscanf_r+0x6e>
 8019c8c:	6823      	ldr	r3, [r4, #0]
 8019c8e:	49a9      	ldr	r1, [pc, #676]	; (8019f34 <__ssvfiscanf_r+0x2f0>)
 8019c90:	781a      	ldrb	r2, [r3, #0]
 8019c92:	5c8a      	ldrb	r2, [r1, r2]
 8019c94:	2108      	movs	r1, #8
 8019c96:	420a      	tst	r2, r1
 8019c98:	d101      	bne.n	8019c9e <__ssvfiscanf_r+0x5a>
 8019c9a:	003a      	movs	r2, r7
 8019c9c:	e7e7      	b.n	8019c6e <__ssvfiscanf_r+0x2a>
 8019c9e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8019ca0:	3301      	adds	r3, #1
 8019ca2:	9200      	str	r2, [sp, #0]
 8019ca4:	3201      	adds	r2, #1
 8019ca6:	9247      	str	r2, [sp, #284]	; 0x11c
 8019ca8:	6862      	ldr	r2, [r4, #4]
 8019caa:	6023      	str	r3, [r4, #0]
 8019cac:	3a01      	subs	r2, #1
 8019cae:	6062      	str	r2, [r4, #4]
 8019cb0:	e7e9      	b.n	8019c86 <__ssvfiscanf_r+0x42>
 8019cb2:	22c0      	movs	r2, #192	; 0xc0
 8019cb4:	ab43      	add	r3, sp, #268	; 0x10c
 8019cb6:	0052      	lsls	r2, r2, #1
 8019cb8:	589b      	ldr	r3, [r3, r2]
 8019cba:	0021      	movs	r1, r4
 8019cbc:	0030      	movs	r0, r6
 8019cbe:	9300      	str	r3, [sp, #0]
 8019cc0:	4798      	blx	r3
 8019cc2:	2800      	cmp	r0, #0
 8019cc4:	d0e2      	beq.n	8019c8c <__ssvfiscanf_r+0x48>
 8019cc6:	e7e8      	b.n	8019c9a <__ssvfiscanf_r+0x56>
 8019cc8:	001d      	movs	r5, r3
 8019cca:	2b25      	cmp	r3, #37	; 0x25
 8019ccc:	d164      	bne.n	8019d98 <__ssvfiscanf_r+0x154>
 8019cce:	9145      	str	r1, [sp, #276]	; 0x114
 8019cd0:	9143      	str	r1, [sp, #268]	; 0x10c
 8019cd2:	7853      	ldrb	r3, [r2, #1]
 8019cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8019cd6:	d102      	bne.n	8019cde <__ssvfiscanf_r+0x9a>
 8019cd8:	3b1a      	subs	r3, #26
 8019cda:	9343      	str	r3, [sp, #268]	; 0x10c
 8019cdc:	1c97      	adds	r7, r2, #2
 8019cde:	003d      	movs	r5, r7
 8019ce0:	220a      	movs	r2, #10
 8019ce2:	7829      	ldrb	r1, [r5, #0]
 8019ce4:	1c6b      	adds	r3, r5, #1
 8019ce6:	9300      	str	r3, [sp, #0]
 8019ce8:	000b      	movs	r3, r1
 8019cea:	3b30      	subs	r3, #48	; 0x30
 8019cec:	2b09      	cmp	r3, #9
 8019cee:	d91f      	bls.n	8019d30 <__ssvfiscanf_r+0xec>
 8019cf0:	4f91      	ldr	r7, [pc, #580]	; (8019f38 <__ssvfiscanf_r+0x2f4>)
 8019cf2:	2203      	movs	r2, #3
 8019cf4:	0038      	movs	r0, r7
 8019cf6:	f7ff fcb7 	bl	8019668 <memchr>
 8019cfa:	2800      	cmp	r0, #0
 8019cfc:	d007      	beq.n	8019d0e <__ssvfiscanf_r+0xca>
 8019cfe:	2301      	movs	r3, #1
 8019d00:	1bc0      	subs	r0, r0, r7
 8019d02:	4083      	lsls	r3, r0
 8019d04:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8019d06:	9d00      	ldr	r5, [sp, #0]
 8019d08:	4313      	orrs	r3, r2
 8019d0a:	9201      	str	r2, [sp, #4]
 8019d0c:	9343      	str	r3, [sp, #268]	; 0x10c
 8019d0e:	1c6f      	adds	r7, r5, #1
 8019d10:	782d      	ldrb	r5, [r5, #0]
 8019d12:	2d78      	cmp	r5, #120	; 0x78
 8019d14:	d807      	bhi.n	8019d26 <__ssvfiscanf_r+0xe2>
 8019d16:	2d57      	cmp	r5, #87	; 0x57
 8019d18:	d812      	bhi.n	8019d40 <__ssvfiscanf_r+0xfc>
 8019d1a:	2d25      	cmp	r5, #37	; 0x25
 8019d1c:	d03c      	beq.n	8019d98 <__ssvfiscanf_r+0x154>
 8019d1e:	d836      	bhi.n	8019d8e <__ssvfiscanf_r+0x14a>
 8019d20:	2d00      	cmp	r5, #0
 8019d22:	d100      	bne.n	8019d26 <__ssvfiscanf_r+0xe2>
 8019d24:	e0fa      	b.n	8019f1c <__ssvfiscanf_r+0x2d8>
 8019d26:	2303      	movs	r3, #3
 8019d28:	9349      	str	r3, [sp, #292]	; 0x124
 8019d2a:	3307      	adds	r3, #7
 8019d2c:	9344      	str	r3, [sp, #272]	; 0x110
 8019d2e:	e06d      	b.n	8019e0c <__ssvfiscanf_r+0x1c8>
 8019d30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019d32:	9d00      	ldr	r5, [sp, #0]
 8019d34:	9301      	str	r3, [sp, #4]
 8019d36:	4353      	muls	r3, r2
 8019d38:	3b30      	subs	r3, #48	; 0x30
 8019d3a:	185b      	adds	r3, r3, r1
 8019d3c:	9345      	str	r3, [sp, #276]	; 0x114
 8019d3e:	e7d0      	b.n	8019ce2 <__ssvfiscanf_r+0x9e>
 8019d40:	0028      	movs	r0, r5
 8019d42:	3858      	subs	r0, #88	; 0x58
 8019d44:	2820      	cmp	r0, #32
 8019d46:	d8ee      	bhi.n	8019d26 <__ssvfiscanf_r+0xe2>
 8019d48:	f7ed fe7a 	bl	8007a40 <__gnu_thumb1_case_shi>
 8019d4c:	ffed0051 	.word	0xffed0051
 8019d50:	0087ffed 	.word	0x0087ffed
 8019d54:	ffedffed 	.word	0xffedffed
 8019d58:	ffedffed 	.word	0xffedffed
 8019d5c:	ffedffed 	.word	0xffedffed
 8019d60:	0095ffed 	.word	0x0095ffed
 8019d64:	0024007d 	.word	0x0024007d
 8019d68:	00240024 	.word	0x00240024
 8019d6c:	007fffed 	.word	0x007fffed
 8019d70:	ffedffed 	.word	0xffedffed
 8019d74:	ffedffed 	.word	0xffedffed
 8019d78:	0083009f 	.word	0x0083009f
 8019d7c:	ffed004b 	.word	0xffed004b
 8019d80:	009dffed 	.word	0x009dffed
 8019d84:	007dffed 	.word	0x007dffed
 8019d88:	ffedffed 	.word	0xffedffed
 8019d8c:	0051      	.short	0x0051
 8019d8e:	3d45      	subs	r5, #69	; 0x45
 8019d90:	2d02      	cmp	r5, #2
 8019d92:	d8c8      	bhi.n	8019d26 <__ssvfiscanf_r+0xe2>
 8019d94:	2305      	movs	r3, #5
 8019d96:	e06c      	b.n	8019e72 <__ssvfiscanf_r+0x22e>
 8019d98:	6863      	ldr	r3, [r4, #4]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	dd0e      	ble.n	8019dbc <__ssvfiscanf_r+0x178>
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	781a      	ldrb	r2, [r3, #0]
 8019da2:	42aa      	cmp	r2, r5
 8019da4:	d000      	beq.n	8019da8 <__ssvfiscanf_r+0x164>
 8019da6:	e0bc      	b.n	8019f22 <__ssvfiscanf_r+0x2de>
 8019da8:	3301      	adds	r3, #1
 8019daa:	6862      	ldr	r2, [r4, #4]
 8019dac:	6023      	str	r3, [r4, #0]
 8019dae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019db0:	3a01      	subs	r2, #1
 8019db2:	9300      	str	r3, [sp, #0]
 8019db4:	3301      	adds	r3, #1
 8019db6:	6062      	str	r2, [r4, #4]
 8019db8:	9347      	str	r3, [sp, #284]	; 0x11c
 8019dba:	e76e      	b.n	8019c9a <__ssvfiscanf_r+0x56>
 8019dbc:	22c0      	movs	r2, #192	; 0xc0
 8019dbe:	ab43      	add	r3, sp, #268	; 0x10c
 8019dc0:	0052      	lsls	r2, r2, #1
 8019dc2:	589b      	ldr	r3, [r3, r2]
 8019dc4:	0021      	movs	r1, r4
 8019dc6:	0030      	movs	r0, r6
 8019dc8:	9300      	str	r3, [sp, #0]
 8019dca:	4798      	blx	r3
 8019dcc:	2800      	cmp	r0, #0
 8019dce:	d0e6      	beq.n	8019d9e <__ssvfiscanf_r+0x15a>
 8019dd0:	9846      	ldr	r0, [sp, #280]	; 0x118
 8019dd2:	2800      	cmp	r0, #0
 8019dd4:	d000      	beq.n	8019dd8 <__ssvfiscanf_r+0x194>
 8019dd6:	e09d      	b.n	8019f14 <__ssvfiscanf_r+0x2d0>
 8019dd8:	3801      	subs	r0, #1
 8019dda:	23a5      	movs	r3, #165	; 0xa5
 8019ddc:	009b      	lsls	r3, r3, #2
 8019dde:	449d      	add	sp, r3
 8019de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019de2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019de4:	9300      	str	r3, [sp, #0]
 8019de6:	2320      	movs	r3, #32
 8019de8:	9a00      	ldr	r2, [sp, #0]
 8019dea:	4313      	orrs	r3, r2
 8019dec:	9343      	str	r3, [sp, #268]	; 0x10c
 8019dee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019df0:	9300      	str	r3, [sp, #0]
 8019df2:	2380      	movs	r3, #128	; 0x80
 8019df4:	9a00      	ldr	r2, [sp, #0]
 8019df6:	009b      	lsls	r3, r3, #2
 8019df8:	4313      	orrs	r3, r2
 8019dfa:	9343      	str	r3, [sp, #268]	; 0x10c
 8019dfc:	2310      	movs	r3, #16
 8019dfe:	9344      	str	r3, [sp, #272]	; 0x110
 8019e00:	236e      	movs	r3, #110	; 0x6e
 8019e02:	42ab      	cmp	r3, r5
 8019e04:	41ad      	sbcs	r5, r5
 8019e06:	426d      	negs	r5, r5
 8019e08:	3503      	adds	r5, #3
 8019e0a:	9549      	str	r5, [sp, #292]	; 0x124
 8019e0c:	6863      	ldr	r3, [r4, #4]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	dd4a      	ble.n	8019ea8 <__ssvfiscanf_r+0x264>
 8019e12:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019e14:	9300      	str	r3, [sp, #0]
 8019e16:	065b      	lsls	r3, r3, #25
 8019e18:	d406      	bmi.n	8019e28 <__ssvfiscanf_r+0x1e4>
 8019e1a:	6823      	ldr	r3, [r4, #0]
 8019e1c:	4945      	ldr	r1, [pc, #276]	; (8019f34 <__ssvfiscanf_r+0x2f0>)
 8019e1e:	781a      	ldrb	r2, [r3, #0]
 8019e20:	5c8a      	ldrb	r2, [r1, r2]
 8019e22:	2108      	movs	r1, #8
 8019e24:	420a      	tst	r2, r1
 8019e26:	d14a      	bne.n	8019ebe <__ssvfiscanf_r+0x27a>
 8019e28:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8019e2a:	2b02      	cmp	r3, #2
 8019e2c:	dc5e      	bgt.n	8019eec <__ssvfiscanf_r+0x2a8>
 8019e2e:	0022      	movs	r2, r4
 8019e30:	0030      	movs	r0, r6
 8019e32:	ab02      	add	r3, sp, #8
 8019e34:	a943      	add	r1, sp, #268	; 0x10c
 8019e36:	f000 f883 	bl	8019f40 <_scanf_chars>
 8019e3a:	2801      	cmp	r0, #1
 8019e3c:	d071      	beq.n	8019f22 <__ssvfiscanf_r+0x2de>
 8019e3e:	2802      	cmp	r0, #2
 8019e40:	d000      	beq.n	8019e44 <__ssvfiscanf_r+0x200>
 8019e42:	e72a      	b.n	8019c9a <__ssvfiscanf_r+0x56>
 8019e44:	e7c4      	b.n	8019dd0 <__ssvfiscanf_r+0x18c>
 8019e46:	230a      	movs	r3, #10
 8019e48:	e7d9      	b.n	8019dfe <__ssvfiscanf_r+0x1ba>
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	2503      	movs	r5, #3
 8019e4e:	9344      	str	r3, [sp, #272]	; 0x110
 8019e50:	e7db      	b.n	8019e0a <__ssvfiscanf_r+0x1c6>
 8019e52:	2308      	movs	r3, #8
 8019e54:	2504      	movs	r5, #4
 8019e56:	9344      	str	r3, [sp, #272]	; 0x110
 8019e58:	e7d7      	b.n	8019e0a <__ssvfiscanf_r+0x1c6>
 8019e5a:	0039      	movs	r1, r7
 8019e5c:	a803      	add	r0, sp, #12
 8019e5e:	f000 f9f7 	bl	801a250 <__sccl>
 8019e62:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019e64:	0007      	movs	r7, r0
 8019e66:	9300      	str	r3, [sp, #0]
 8019e68:	2340      	movs	r3, #64	; 0x40
 8019e6a:	9a00      	ldr	r2, [sp, #0]
 8019e6c:	4313      	orrs	r3, r2
 8019e6e:	9343      	str	r3, [sp, #268]	; 0x10c
 8019e70:	2301      	movs	r3, #1
 8019e72:	9349      	str	r3, [sp, #292]	; 0x124
 8019e74:	e7ca      	b.n	8019e0c <__ssvfiscanf_r+0x1c8>
 8019e76:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019e78:	9300      	str	r3, [sp, #0]
 8019e7a:	2340      	movs	r3, #64	; 0x40
 8019e7c:	9a00      	ldr	r2, [sp, #0]
 8019e7e:	4313      	orrs	r3, r2
 8019e80:	9343      	str	r3, [sp, #268]	; 0x10c
 8019e82:	2300      	movs	r3, #0
 8019e84:	e7f5      	b.n	8019e72 <__ssvfiscanf_r+0x22e>
 8019e86:	2302      	movs	r3, #2
 8019e88:	e7f3      	b.n	8019e72 <__ssvfiscanf_r+0x22e>
 8019e8a:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8019e8c:	06c3      	lsls	r3, r0, #27
 8019e8e:	d500      	bpl.n	8019e92 <__ssvfiscanf_r+0x24e>
 8019e90:	e703      	b.n	8019c9a <__ssvfiscanf_r+0x56>
 8019e92:	9b02      	ldr	r3, [sp, #8]
 8019e94:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8019e96:	1d19      	adds	r1, r3, #4
 8019e98:	9102      	str	r1, [sp, #8]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	07c5      	lsls	r5, r0, #31
 8019e9e:	d501      	bpl.n	8019ea4 <__ssvfiscanf_r+0x260>
 8019ea0:	801a      	strh	r2, [r3, #0]
 8019ea2:	e6fa      	b.n	8019c9a <__ssvfiscanf_r+0x56>
 8019ea4:	601a      	str	r2, [r3, #0]
 8019ea6:	e6f8      	b.n	8019c9a <__ssvfiscanf_r+0x56>
 8019ea8:	22c0      	movs	r2, #192	; 0xc0
 8019eaa:	ab43      	add	r3, sp, #268	; 0x10c
 8019eac:	0052      	lsls	r2, r2, #1
 8019eae:	589b      	ldr	r3, [r3, r2]
 8019eb0:	0021      	movs	r1, r4
 8019eb2:	0030      	movs	r0, r6
 8019eb4:	9300      	str	r3, [sp, #0]
 8019eb6:	4798      	blx	r3
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	d0aa      	beq.n	8019e12 <__ssvfiscanf_r+0x1ce>
 8019ebc:	e788      	b.n	8019dd0 <__ssvfiscanf_r+0x18c>
 8019ebe:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8019ec0:	9200      	str	r2, [sp, #0]
 8019ec2:	3201      	adds	r2, #1
 8019ec4:	9247      	str	r2, [sp, #284]	; 0x11c
 8019ec6:	6862      	ldr	r2, [r4, #4]
 8019ec8:	3a01      	subs	r2, #1
 8019eca:	6062      	str	r2, [r4, #4]
 8019ecc:	2a00      	cmp	r2, #0
 8019ece:	dd02      	ble.n	8019ed6 <__ssvfiscanf_r+0x292>
 8019ed0:	3301      	adds	r3, #1
 8019ed2:	6023      	str	r3, [r4, #0]
 8019ed4:	e7a1      	b.n	8019e1a <__ssvfiscanf_r+0x1d6>
 8019ed6:	22c0      	movs	r2, #192	; 0xc0
 8019ed8:	ab43      	add	r3, sp, #268	; 0x10c
 8019eda:	0052      	lsls	r2, r2, #1
 8019edc:	589b      	ldr	r3, [r3, r2]
 8019ede:	0021      	movs	r1, r4
 8019ee0:	0030      	movs	r0, r6
 8019ee2:	9300      	str	r3, [sp, #0]
 8019ee4:	4798      	blx	r3
 8019ee6:	2800      	cmp	r0, #0
 8019ee8:	d097      	beq.n	8019e1a <__ssvfiscanf_r+0x1d6>
 8019eea:	e771      	b.n	8019dd0 <__ssvfiscanf_r+0x18c>
 8019eec:	2b04      	cmp	r3, #4
 8019eee:	dc06      	bgt.n	8019efe <__ssvfiscanf_r+0x2ba>
 8019ef0:	0022      	movs	r2, r4
 8019ef2:	0030      	movs	r0, r6
 8019ef4:	ab02      	add	r3, sp, #8
 8019ef6:	a943      	add	r1, sp, #268	; 0x10c
 8019ef8:	f000 f880 	bl	8019ffc <_scanf_i>
 8019efc:	e79d      	b.n	8019e3a <__ssvfiscanf_r+0x1f6>
 8019efe:	4b0f      	ldr	r3, [pc, #60]	; (8019f3c <__ssvfiscanf_r+0x2f8>)
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d100      	bne.n	8019f06 <__ssvfiscanf_r+0x2c2>
 8019f04:	e6c9      	b.n	8019c9a <__ssvfiscanf_r+0x56>
 8019f06:	0022      	movs	r2, r4
 8019f08:	0030      	movs	r0, r6
 8019f0a:	ab02      	add	r3, sp, #8
 8019f0c:	a943      	add	r1, sp, #268	; 0x10c
 8019f0e:	e000      	b.n	8019f12 <__ssvfiscanf_r+0x2ce>
 8019f10:	bf00      	nop
 8019f12:	e792      	b.n	8019e3a <__ssvfiscanf_r+0x1f6>
 8019f14:	89a3      	ldrh	r3, [r4, #12]
 8019f16:	065b      	lsls	r3, r3, #25
 8019f18:	d400      	bmi.n	8019f1c <__ssvfiscanf_r+0x2d8>
 8019f1a:	e75e      	b.n	8019dda <__ssvfiscanf_r+0x196>
 8019f1c:	2001      	movs	r0, #1
 8019f1e:	4240      	negs	r0, r0
 8019f20:	e75b      	b.n	8019dda <__ssvfiscanf_r+0x196>
 8019f22:	9846      	ldr	r0, [sp, #280]	; 0x118
 8019f24:	e759      	b.n	8019dda <__ssvfiscanf_r+0x196>
 8019f26:	46c0      	nop			; (mov r8, r8)
 8019f28:	fffffd6c 	.word	0xfffffd6c
 8019f2c:	08019b8d 	.word	0x08019b8d
 8019f30:	08019c05 	.word	0x08019c05
 8019f34:	0801c928 	.word	0x0801c928
 8019f38:	0801c80a 	.word	0x0801c80a
 8019f3c:	00000000 	.word	0x00000000

08019f40 <_scanf_chars>:
 8019f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f42:	0015      	movs	r5, r2
 8019f44:	688a      	ldr	r2, [r1, #8]
 8019f46:	000c      	movs	r4, r1
 8019f48:	9001      	str	r0, [sp, #4]
 8019f4a:	2a00      	cmp	r2, #0
 8019f4c:	d105      	bne.n	8019f5a <_scanf_chars+0x1a>
 8019f4e:	6989      	ldr	r1, [r1, #24]
 8019f50:	3201      	adds	r2, #1
 8019f52:	2900      	cmp	r1, #0
 8019f54:	d000      	beq.n	8019f58 <_scanf_chars+0x18>
 8019f56:	3a02      	subs	r2, #2
 8019f58:	60a2      	str	r2, [r4, #8]
 8019f5a:	6822      	ldr	r2, [r4, #0]
 8019f5c:	06d2      	lsls	r2, r2, #27
 8019f5e:	d403      	bmi.n	8019f68 <_scanf_chars+0x28>
 8019f60:	681a      	ldr	r2, [r3, #0]
 8019f62:	1d11      	adds	r1, r2, #4
 8019f64:	6019      	str	r1, [r3, #0]
 8019f66:	6817      	ldr	r7, [r2, #0]
 8019f68:	2600      	movs	r6, #0
 8019f6a:	69a0      	ldr	r0, [r4, #24]
 8019f6c:	2800      	cmp	r0, #0
 8019f6e:	d013      	beq.n	8019f98 <_scanf_chars+0x58>
 8019f70:	2801      	cmp	r0, #1
 8019f72:	d108      	bne.n	8019f86 <_scanf_chars+0x46>
 8019f74:	682b      	ldr	r3, [r5, #0]
 8019f76:	6962      	ldr	r2, [r4, #20]
 8019f78:	781b      	ldrb	r3, [r3, #0]
 8019f7a:	5cd3      	ldrb	r3, [r2, r3]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d10b      	bne.n	8019f98 <_scanf_chars+0x58>
 8019f80:	2e00      	cmp	r6, #0
 8019f82:	d038      	beq.n	8019ff6 <_scanf_chars+0xb6>
 8019f84:	e026      	b.n	8019fd4 <_scanf_chars+0x94>
 8019f86:	2802      	cmp	r0, #2
 8019f88:	d124      	bne.n	8019fd4 <_scanf_chars+0x94>
 8019f8a:	682b      	ldr	r3, [r5, #0]
 8019f8c:	4a1a      	ldr	r2, [pc, #104]	; (8019ff8 <_scanf_chars+0xb8>)
 8019f8e:	781b      	ldrb	r3, [r3, #0]
 8019f90:	5cd3      	ldrb	r3, [r2, r3]
 8019f92:	2208      	movs	r2, #8
 8019f94:	4213      	tst	r3, r2
 8019f96:	d11d      	bne.n	8019fd4 <_scanf_chars+0x94>
 8019f98:	2210      	movs	r2, #16
 8019f9a:	6823      	ldr	r3, [r4, #0]
 8019f9c:	3601      	adds	r6, #1
 8019f9e:	4213      	tst	r3, r2
 8019fa0:	d103      	bne.n	8019faa <_scanf_chars+0x6a>
 8019fa2:	682b      	ldr	r3, [r5, #0]
 8019fa4:	781b      	ldrb	r3, [r3, #0]
 8019fa6:	703b      	strb	r3, [r7, #0]
 8019fa8:	3701      	adds	r7, #1
 8019faa:	682a      	ldr	r2, [r5, #0]
 8019fac:	686b      	ldr	r3, [r5, #4]
 8019fae:	3201      	adds	r2, #1
 8019fb0:	602a      	str	r2, [r5, #0]
 8019fb2:	68a2      	ldr	r2, [r4, #8]
 8019fb4:	3b01      	subs	r3, #1
 8019fb6:	3a01      	subs	r2, #1
 8019fb8:	606b      	str	r3, [r5, #4]
 8019fba:	60a2      	str	r2, [r4, #8]
 8019fbc:	2a00      	cmp	r2, #0
 8019fbe:	d009      	beq.n	8019fd4 <_scanf_chars+0x94>
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	dcd2      	bgt.n	8019f6a <_scanf_chars+0x2a>
 8019fc4:	23c0      	movs	r3, #192	; 0xc0
 8019fc6:	005b      	lsls	r3, r3, #1
 8019fc8:	0029      	movs	r1, r5
 8019fca:	58e3      	ldr	r3, [r4, r3]
 8019fcc:	9801      	ldr	r0, [sp, #4]
 8019fce:	4798      	blx	r3
 8019fd0:	2800      	cmp	r0, #0
 8019fd2:	d0ca      	beq.n	8019f6a <_scanf_chars+0x2a>
 8019fd4:	6822      	ldr	r2, [r4, #0]
 8019fd6:	2310      	movs	r3, #16
 8019fd8:	0011      	movs	r1, r2
 8019fda:	4019      	ands	r1, r3
 8019fdc:	421a      	tst	r2, r3
 8019fde:	d106      	bne.n	8019fee <_scanf_chars+0xae>
 8019fe0:	68e3      	ldr	r3, [r4, #12]
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	60e3      	str	r3, [r4, #12]
 8019fe6:	69a3      	ldr	r3, [r4, #24]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d000      	beq.n	8019fee <_scanf_chars+0xae>
 8019fec:	7039      	strb	r1, [r7, #0]
 8019fee:	2000      	movs	r0, #0
 8019ff0:	6923      	ldr	r3, [r4, #16]
 8019ff2:	199e      	adds	r6, r3, r6
 8019ff4:	6126      	str	r6, [r4, #16]
 8019ff6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019ff8:	0801c928 	.word	0x0801c928

08019ffc <_scanf_i>:
 8019ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ffe:	000c      	movs	r4, r1
 801a000:	b08d      	sub	sp, #52	; 0x34
 801a002:	9302      	str	r3, [sp, #8]
 801a004:	4b79      	ldr	r3, [pc, #484]	; (801a1ec <_scanf_i+0x1f0>)
 801a006:	0016      	movs	r6, r2
 801a008:	9005      	str	r0, [sp, #20]
 801a00a:	aa09      	add	r2, sp, #36	; 0x24
 801a00c:	cb23      	ldmia	r3!, {r0, r1, r5}
 801a00e:	c223      	stmia	r2!, {r0, r1, r5}
 801a010:	4b77      	ldr	r3, [pc, #476]	; (801a1f0 <_scanf_i+0x1f4>)
 801a012:	9306      	str	r3, [sp, #24]
 801a014:	69a3      	ldr	r3, [r4, #24]
 801a016:	2b03      	cmp	r3, #3
 801a018:	d001      	beq.n	801a01e <_scanf_i+0x22>
 801a01a:	4b76      	ldr	r3, [pc, #472]	; (801a1f4 <_scanf_i+0x1f8>)
 801a01c:	9306      	str	r3, [sp, #24]
 801a01e:	22ae      	movs	r2, #174	; 0xae
 801a020:	2000      	movs	r0, #0
 801a022:	68a3      	ldr	r3, [r4, #8]
 801a024:	0052      	lsls	r2, r2, #1
 801a026:	1e59      	subs	r1, r3, #1
 801a028:	9004      	str	r0, [sp, #16]
 801a02a:	4291      	cmp	r1, r2
 801a02c:	d905      	bls.n	801a03a <_scanf_i+0x3e>
 801a02e:	3b5e      	subs	r3, #94	; 0x5e
 801a030:	3bff      	subs	r3, #255	; 0xff
 801a032:	9304      	str	r3, [sp, #16]
 801a034:	235e      	movs	r3, #94	; 0x5e
 801a036:	33ff      	adds	r3, #255	; 0xff
 801a038:	60a3      	str	r3, [r4, #8]
 801a03a:	0023      	movs	r3, r4
 801a03c:	331c      	adds	r3, #28
 801a03e:	9301      	str	r3, [sp, #4]
 801a040:	23d0      	movs	r3, #208	; 0xd0
 801a042:	2700      	movs	r7, #0
 801a044:	6822      	ldr	r2, [r4, #0]
 801a046:	011b      	lsls	r3, r3, #4
 801a048:	4313      	orrs	r3, r2
 801a04a:	6023      	str	r3, [r4, #0]
 801a04c:	9b01      	ldr	r3, [sp, #4]
 801a04e:	9303      	str	r3, [sp, #12]
 801a050:	6833      	ldr	r3, [r6, #0]
 801a052:	a809      	add	r0, sp, #36	; 0x24
 801a054:	7819      	ldrb	r1, [r3, #0]
 801a056:	00bb      	lsls	r3, r7, #2
 801a058:	2202      	movs	r2, #2
 801a05a:	5818      	ldr	r0, [r3, r0]
 801a05c:	f7ff fb04 	bl	8019668 <memchr>
 801a060:	2800      	cmp	r0, #0
 801a062:	d02b      	beq.n	801a0bc <_scanf_i+0xc0>
 801a064:	2f01      	cmp	r7, #1
 801a066:	d162      	bne.n	801a12e <_scanf_i+0x132>
 801a068:	6863      	ldr	r3, [r4, #4]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d106      	bne.n	801a07c <_scanf_i+0x80>
 801a06e:	3308      	adds	r3, #8
 801a070:	6822      	ldr	r2, [r4, #0]
 801a072:	6063      	str	r3, [r4, #4]
 801a074:	33f9      	adds	r3, #249	; 0xf9
 801a076:	33ff      	adds	r3, #255	; 0xff
 801a078:	4313      	orrs	r3, r2
 801a07a:	6023      	str	r3, [r4, #0]
 801a07c:	4b5e      	ldr	r3, [pc, #376]	; (801a1f8 <_scanf_i+0x1fc>)
 801a07e:	6822      	ldr	r2, [r4, #0]
 801a080:	4013      	ands	r3, r2
 801a082:	6023      	str	r3, [r4, #0]
 801a084:	68a3      	ldr	r3, [r4, #8]
 801a086:	1e5a      	subs	r2, r3, #1
 801a088:	60a2      	str	r2, [r4, #8]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d016      	beq.n	801a0bc <_scanf_i+0xc0>
 801a08e:	6833      	ldr	r3, [r6, #0]
 801a090:	1c5a      	adds	r2, r3, #1
 801a092:	6032      	str	r2, [r6, #0]
 801a094:	781b      	ldrb	r3, [r3, #0]
 801a096:	9a03      	ldr	r2, [sp, #12]
 801a098:	7013      	strb	r3, [r2, #0]
 801a09a:	6873      	ldr	r3, [r6, #4]
 801a09c:	1c55      	adds	r5, r2, #1
 801a09e:	3b01      	subs	r3, #1
 801a0a0:	6073      	str	r3, [r6, #4]
 801a0a2:	9503      	str	r5, [sp, #12]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	dc09      	bgt.n	801a0bc <_scanf_i+0xc0>
 801a0a8:	23c0      	movs	r3, #192	; 0xc0
 801a0aa:	005b      	lsls	r3, r3, #1
 801a0ac:	58e3      	ldr	r3, [r4, r3]
 801a0ae:	0031      	movs	r1, r6
 801a0b0:	9805      	ldr	r0, [sp, #20]
 801a0b2:	9307      	str	r3, [sp, #28]
 801a0b4:	4798      	blx	r3
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	d000      	beq.n	801a0bc <_scanf_i+0xc0>
 801a0ba:	e081      	b.n	801a1c0 <_scanf_i+0x1c4>
 801a0bc:	3701      	adds	r7, #1
 801a0be:	2f03      	cmp	r7, #3
 801a0c0:	d1c6      	bne.n	801a050 <_scanf_i+0x54>
 801a0c2:	6863      	ldr	r3, [r4, #4]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d101      	bne.n	801a0cc <_scanf_i+0xd0>
 801a0c8:	330a      	adds	r3, #10
 801a0ca:	6063      	str	r3, [r4, #4]
 801a0cc:	2110      	movs	r1, #16
 801a0ce:	2700      	movs	r7, #0
 801a0d0:	6863      	ldr	r3, [r4, #4]
 801a0d2:	6960      	ldr	r0, [r4, #20]
 801a0d4:	1ac9      	subs	r1, r1, r3
 801a0d6:	4b49      	ldr	r3, [pc, #292]	; (801a1fc <_scanf_i+0x200>)
 801a0d8:	18c9      	adds	r1, r1, r3
 801a0da:	f000 f8b9 	bl	801a250 <__sccl>
 801a0de:	9d03      	ldr	r5, [sp, #12]
 801a0e0:	68a3      	ldr	r3, [r4, #8]
 801a0e2:	6822      	ldr	r2, [r4, #0]
 801a0e4:	9303      	str	r3, [sp, #12]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d041      	beq.n	801a16e <_scanf_i+0x172>
 801a0ea:	6831      	ldr	r1, [r6, #0]
 801a0ec:	6963      	ldr	r3, [r4, #20]
 801a0ee:	7808      	ldrb	r0, [r1, #0]
 801a0f0:	5c1b      	ldrb	r3, [r3, r0]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d03b      	beq.n	801a16e <_scanf_i+0x172>
 801a0f6:	2830      	cmp	r0, #48	; 0x30
 801a0f8:	d129      	bne.n	801a14e <_scanf_i+0x152>
 801a0fa:	2380      	movs	r3, #128	; 0x80
 801a0fc:	011b      	lsls	r3, r3, #4
 801a0fe:	421a      	tst	r2, r3
 801a100:	d025      	beq.n	801a14e <_scanf_i+0x152>
 801a102:	9b04      	ldr	r3, [sp, #16]
 801a104:	3701      	adds	r7, #1
 801a106:	2b00      	cmp	r3, #0
 801a108:	d005      	beq.n	801a116 <_scanf_i+0x11a>
 801a10a:	001a      	movs	r2, r3
 801a10c:	9b03      	ldr	r3, [sp, #12]
 801a10e:	3a01      	subs	r2, #1
 801a110:	3301      	adds	r3, #1
 801a112:	9204      	str	r2, [sp, #16]
 801a114:	60a3      	str	r3, [r4, #8]
 801a116:	6873      	ldr	r3, [r6, #4]
 801a118:	3b01      	subs	r3, #1
 801a11a:	6073      	str	r3, [r6, #4]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	dd1d      	ble.n	801a15c <_scanf_i+0x160>
 801a120:	6833      	ldr	r3, [r6, #0]
 801a122:	3301      	adds	r3, #1
 801a124:	6033      	str	r3, [r6, #0]
 801a126:	68a3      	ldr	r3, [r4, #8]
 801a128:	3b01      	subs	r3, #1
 801a12a:	60a3      	str	r3, [r4, #8]
 801a12c:	e7d8      	b.n	801a0e0 <_scanf_i+0xe4>
 801a12e:	2f02      	cmp	r7, #2
 801a130:	d1a8      	bne.n	801a084 <_scanf_i+0x88>
 801a132:	21c0      	movs	r1, #192	; 0xc0
 801a134:	2380      	movs	r3, #128	; 0x80
 801a136:	6822      	ldr	r2, [r4, #0]
 801a138:	00c9      	lsls	r1, r1, #3
 801a13a:	4011      	ands	r1, r2
 801a13c:	009b      	lsls	r3, r3, #2
 801a13e:	4299      	cmp	r1, r3
 801a140:	d1bf      	bne.n	801a0c2 <_scanf_i+0xc6>
 801a142:	3bf1      	subs	r3, #241	; 0xf1
 801a144:	3bff      	subs	r3, #255	; 0xff
 801a146:	6063      	str	r3, [r4, #4]
 801a148:	33f0      	adds	r3, #240	; 0xf0
 801a14a:	4313      	orrs	r3, r2
 801a14c:	e799      	b.n	801a082 <_scanf_i+0x86>
 801a14e:	4b2c      	ldr	r3, [pc, #176]	; (801a200 <_scanf_i+0x204>)
 801a150:	4013      	ands	r3, r2
 801a152:	6023      	str	r3, [r4, #0]
 801a154:	780b      	ldrb	r3, [r1, #0]
 801a156:	702b      	strb	r3, [r5, #0]
 801a158:	3501      	adds	r5, #1
 801a15a:	e7dc      	b.n	801a116 <_scanf_i+0x11a>
 801a15c:	23c0      	movs	r3, #192	; 0xc0
 801a15e:	005b      	lsls	r3, r3, #1
 801a160:	58e3      	ldr	r3, [r4, r3]
 801a162:	0031      	movs	r1, r6
 801a164:	9805      	ldr	r0, [sp, #20]
 801a166:	9303      	str	r3, [sp, #12]
 801a168:	4798      	blx	r3
 801a16a:	2800      	cmp	r0, #0
 801a16c:	d0db      	beq.n	801a126 <_scanf_i+0x12a>
 801a16e:	6823      	ldr	r3, [r4, #0]
 801a170:	05db      	lsls	r3, r3, #23
 801a172:	d50e      	bpl.n	801a192 <_scanf_i+0x196>
 801a174:	9b01      	ldr	r3, [sp, #4]
 801a176:	429d      	cmp	r5, r3
 801a178:	d907      	bls.n	801a18a <_scanf_i+0x18e>
 801a17a:	23be      	movs	r3, #190	; 0xbe
 801a17c:	3d01      	subs	r5, #1
 801a17e:	005b      	lsls	r3, r3, #1
 801a180:	0032      	movs	r2, r6
 801a182:	7829      	ldrb	r1, [r5, #0]
 801a184:	58e3      	ldr	r3, [r4, r3]
 801a186:	9805      	ldr	r0, [sp, #20]
 801a188:	4798      	blx	r3
 801a18a:	9b01      	ldr	r3, [sp, #4]
 801a18c:	2001      	movs	r0, #1
 801a18e:	429d      	cmp	r5, r3
 801a190:	d029      	beq.n	801a1e6 <_scanf_i+0x1ea>
 801a192:	6821      	ldr	r1, [r4, #0]
 801a194:	2310      	movs	r3, #16
 801a196:	000a      	movs	r2, r1
 801a198:	401a      	ands	r2, r3
 801a19a:	4219      	tst	r1, r3
 801a19c:	d11c      	bne.n	801a1d8 <_scanf_i+0x1dc>
 801a19e:	702a      	strb	r2, [r5, #0]
 801a1a0:	6863      	ldr	r3, [r4, #4]
 801a1a2:	9901      	ldr	r1, [sp, #4]
 801a1a4:	9805      	ldr	r0, [sp, #20]
 801a1a6:	9e06      	ldr	r6, [sp, #24]
 801a1a8:	47b0      	blx	r6
 801a1aa:	9b02      	ldr	r3, [sp, #8]
 801a1ac:	6821      	ldr	r1, [r4, #0]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	068a      	lsls	r2, r1, #26
 801a1b2:	d507      	bpl.n	801a1c4 <_scanf_i+0x1c8>
 801a1b4:	1d1a      	adds	r2, r3, #4
 801a1b6:	9902      	ldr	r1, [sp, #8]
 801a1b8:	600a      	str	r2, [r1, #0]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	6018      	str	r0, [r3, #0]
 801a1be:	e008      	b.n	801a1d2 <_scanf_i+0x1d6>
 801a1c0:	2700      	movs	r7, #0
 801a1c2:	e7d4      	b.n	801a16e <_scanf_i+0x172>
 801a1c4:	1d1a      	adds	r2, r3, #4
 801a1c6:	07ce      	lsls	r6, r1, #31
 801a1c8:	d5f5      	bpl.n	801a1b6 <_scanf_i+0x1ba>
 801a1ca:	9902      	ldr	r1, [sp, #8]
 801a1cc:	600a      	str	r2, [r1, #0]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	8018      	strh	r0, [r3, #0]
 801a1d2:	68e3      	ldr	r3, [r4, #12]
 801a1d4:	3301      	adds	r3, #1
 801a1d6:	60e3      	str	r3, [r4, #12]
 801a1d8:	2000      	movs	r0, #0
 801a1da:	9b01      	ldr	r3, [sp, #4]
 801a1dc:	1aed      	subs	r5, r5, r3
 801a1de:	6923      	ldr	r3, [r4, #16]
 801a1e0:	19ef      	adds	r7, r5, r7
 801a1e2:	19df      	adds	r7, r3, r7
 801a1e4:	6127      	str	r7, [r4, #16]
 801a1e6:	b00d      	add	sp, #52	; 0x34
 801a1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1ea:	46c0      	nop			; (mov r8, r8)
 801a1ec:	0801bc04 	.word	0x0801bc04
 801a1f0:	0801a479 	.word	0x0801a479
 801a1f4:	0801a595 	.word	0x0801a595
 801a1f8:	fffffaff 	.word	0xfffffaff
 801a1fc:	0801c915 	.word	0x0801c915
 801a200:	fffff6ff 	.word	0xfffff6ff

0801a204 <_read_r>:
 801a204:	b570      	push	{r4, r5, r6, lr}
 801a206:	0004      	movs	r4, r0
 801a208:	0008      	movs	r0, r1
 801a20a:	0011      	movs	r1, r2
 801a20c:	001a      	movs	r2, r3
 801a20e:	2300      	movs	r3, #0
 801a210:	4d05      	ldr	r5, [pc, #20]	; (801a228 <_read_r+0x24>)
 801a212:	602b      	str	r3, [r5, #0]
 801a214:	f7f4 fbf0 	bl	800e9f8 <_read>
 801a218:	1c43      	adds	r3, r0, #1
 801a21a:	d103      	bne.n	801a224 <_read_r+0x20>
 801a21c:	682b      	ldr	r3, [r5, #0]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d000      	beq.n	801a224 <_read_r+0x20>
 801a222:	6023      	str	r3, [r4, #0]
 801a224:	bd70      	pop	{r4, r5, r6, pc}
 801a226:	46c0      	nop			; (mov r8, r8)
 801a228:	200015c4 	.word	0x200015c4

0801a22c <_sbrk_r>:
 801a22c:	2300      	movs	r3, #0
 801a22e:	b570      	push	{r4, r5, r6, lr}
 801a230:	4d06      	ldr	r5, [pc, #24]	; (801a24c <_sbrk_r+0x20>)
 801a232:	0004      	movs	r4, r0
 801a234:	0008      	movs	r0, r1
 801a236:	602b      	str	r3, [r5, #0]
 801a238:	f7f4 fc04 	bl	800ea44 <_sbrk>
 801a23c:	1c43      	adds	r3, r0, #1
 801a23e:	d103      	bne.n	801a248 <_sbrk_r+0x1c>
 801a240:	682b      	ldr	r3, [r5, #0]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d000      	beq.n	801a248 <_sbrk_r+0x1c>
 801a246:	6023      	str	r3, [r4, #0]
 801a248:	bd70      	pop	{r4, r5, r6, pc}
 801a24a:	46c0      	nop			; (mov r8, r8)
 801a24c:	200015c4 	.word	0x200015c4

0801a250 <__sccl>:
 801a250:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a252:	780b      	ldrb	r3, [r1, #0]
 801a254:	0004      	movs	r4, r0
 801a256:	2b5e      	cmp	r3, #94	; 0x5e
 801a258:	d00c      	beq.n	801a274 <__sccl+0x24>
 801a25a:	1c48      	adds	r0, r1, #1
 801a25c:	2100      	movs	r1, #0
 801a25e:	0022      	movs	r2, r4
 801a260:	1c65      	adds	r5, r4, #1
 801a262:	35ff      	adds	r5, #255	; 0xff
 801a264:	7011      	strb	r1, [r2, #0]
 801a266:	3201      	adds	r2, #1
 801a268:	42aa      	cmp	r2, r5
 801a26a:	d1fb      	bne.n	801a264 <__sccl+0x14>
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d105      	bne.n	801a27c <__sccl+0x2c>
 801a270:	3801      	subs	r0, #1
 801a272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a274:	784b      	ldrb	r3, [r1, #1]
 801a276:	1c88      	adds	r0, r1, #2
 801a278:	2101      	movs	r1, #1
 801a27a:	e7f0      	b.n	801a25e <__sccl+0xe>
 801a27c:	2201      	movs	r2, #1
 801a27e:	262d      	movs	r6, #45	; 0x2d
 801a280:	4051      	eors	r1, r2
 801a282:	0002      	movs	r2, r0
 801a284:	54e1      	strb	r1, [r4, r3]
 801a286:	7815      	ldrb	r5, [r2, #0]
 801a288:	1c50      	adds	r0, r2, #1
 801a28a:	2d2d      	cmp	r5, #45	; 0x2d
 801a28c:	d009      	beq.n	801a2a2 <__sccl+0x52>
 801a28e:	2d5d      	cmp	r5, #93	; 0x5d
 801a290:	d0ef      	beq.n	801a272 <__sccl+0x22>
 801a292:	2d00      	cmp	r5, #0
 801a294:	d101      	bne.n	801a29a <__sccl+0x4a>
 801a296:	0010      	movs	r0, r2
 801a298:	e7eb      	b.n	801a272 <__sccl+0x22>
 801a29a:	002b      	movs	r3, r5
 801a29c:	e7f1      	b.n	801a282 <__sccl+0x32>
 801a29e:	0033      	movs	r3, r6
 801a2a0:	e7ef      	b.n	801a282 <__sccl+0x32>
 801a2a2:	7855      	ldrb	r5, [r2, #1]
 801a2a4:	2d5d      	cmp	r5, #93	; 0x5d
 801a2a6:	d0fa      	beq.n	801a29e <__sccl+0x4e>
 801a2a8:	42ab      	cmp	r3, r5
 801a2aa:	dcf8      	bgt.n	801a29e <__sccl+0x4e>
 801a2ac:	0018      	movs	r0, r3
 801a2ae:	3202      	adds	r2, #2
 801a2b0:	3001      	adds	r0, #1
 801a2b2:	5421      	strb	r1, [r4, r0]
 801a2b4:	4285      	cmp	r5, r0
 801a2b6:	dcfb      	bgt.n	801a2b0 <__sccl+0x60>
 801a2b8:	2000      	movs	r0, #0
 801a2ba:	1c5f      	adds	r7, r3, #1
 801a2bc:	42ab      	cmp	r3, r5
 801a2be:	da01      	bge.n	801a2c4 <__sccl+0x74>
 801a2c0:	1ae8      	subs	r0, r5, r3
 801a2c2:	3801      	subs	r0, #1
 801a2c4:	183b      	adds	r3, r7, r0
 801a2c6:	e7de      	b.n	801a286 <__sccl+0x36>

0801a2c8 <_raise_r>:
 801a2c8:	b570      	push	{r4, r5, r6, lr}
 801a2ca:	0004      	movs	r4, r0
 801a2cc:	000d      	movs	r5, r1
 801a2ce:	291f      	cmp	r1, #31
 801a2d0:	d904      	bls.n	801a2dc <_raise_r+0x14>
 801a2d2:	2316      	movs	r3, #22
 801a2d4:	6003      	str	r3, [r0, #0]
 801a2d6:	2001      	movs	r0, #1
 801a2d8:	4240      	negs	r0, r0
 801a2da:	bd70      	pop	{r4, r5, r6, pc}
 801a2dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d004      	beq.n	801a2ec <_raise_r+0x24>
 801a2e2:	008a      	lsls	r2, r1, #2
 801a2e4:	189b      	adds	r3, r3, r2
 801a2e6:	681a      	ldr	r2, [r3, #0]
 801a2e8:	2a00      	cmp	r2, #0
 801a2ea:	d108      	bne.n	801a2fe <_raise_r+0x36>
 801a2ec:	0020      	movs	r0, r4
 801a2ee:	f000 f831 	bl	801a354 <_getpid_r>
 801a2f2:	002a      	movs	r2, r5
 801a2f4:	0001      	movs	r1, r0
 801a2f6:	0020      	movs	r0, r4
 801a2f8:	f000 f81a 	bl	801a330 <_kill_r>
 801a2fc:	e7ed      	b.n	801a2da <_raise_r+0x12>
 801a2fe:	2000      	movs	r0, #0
 801a300:	2a01      	cmp	r2, #1
 801a302:	d0ea      	beq.n	801a2da <_raise_r+0x12>
 801a304:	1c51      	adds	r1, r2, #1
 801a306:	d103      	bne.n	801a310 <_raise_r+0x48>
 801a308:	2316      	movs	r3, #22
 801a30a:	3001      	adds	r0, #1
 801a30c:	6023      	str	r3, [r4, #0]
 801a30e:	e7e4      	b.n	801a2da <_raise_r+0x12>
 801a310:	2400      	movs	r4, #0
 801a312:	0028      	movs	r0, r5
 801a314:	601c      	str	r4, [r3, #0]
 801a316:	4790      	blx	r2
 801a318:	0020      	movs	r0, r4
 801a31a:	e7de      	b.n	801a2da <_raise_r+0x12>

0801a31c <raise>:
 801a31c:	b510      	push	{r4, lr}
 801a31e:	4b03      	ldr	r3, [pc, #12]	; (801a32c <raise+0x10>)
 801a320:	0001      	movs	r1, r0
 801a322:	6818      	ldr	r0, [r3, #0]
 801a324:	f7ff ffd0 	bl	801a2c8 <_raise_r>
 801a328:	bd10      	pop	{r4, pc}
 801a32a:	46c0      	nop			; (mov r8, r8)
 801a32c:	200002c4 	.word	0x200002c4

0801a330 <_kill_r>:
 801a330:	2300      	movs	r3, #0
 801a332:	b570      	push	{r4, r5, r6, lr}
 801a334:	4d06      	ldr	r5, [pc, #24]	; (801a350 <_kill_r+0x20>)
 801a336:	0004      	movs	r4, r0
 801a338:	0008      	movs	r0, r1
 801a33a:	0011      	movs	r1, r2
 801a33c:	602b      	str	r3, [r5, #0]
 801a33e:	f7f4 fb4d 	bl	800e9dc <_kill>
 801a342:	1c43      	adds	r3, r0, #1
 801a344:	d103      	bne.n	801a34e <_kill_r+0x1e>
 801a346:	682b      	ldr	r3, [r5, #0]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d000      	beq.n	801a34e <_kill_r+0x1e>
 801a34c:	6023      	str	r3, [r4, #0]
 801a34e:	bd70      	pop	{r4, r5, r6, pc}
 801a350:	200015c4 	.word	0x200015c4

0801a354 <_getpid_r>:
 801a354:	b510      	push	{r4, lr}
 801a356:	f7f4 fb3f 	bl	800e9d8 <_getpid>
 801a35a:	bd10      	pop	{r4, pc}

0801a35c <_strtol_l.constprop.0>:
 801a35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a35e:	b087      	sub	sp, #28
 801a360:	001e      	movs	r6, r3
 801a362:	9005      	str	r0, [sp, #20]
 801a364:	9101      	str	r1, [sp, #4]
 801a366:	9202      	str	r2, [sp, #8]
 801a368:	2b01      	cmp	r3, #1
 801a36a:	d045      	beq.n	801a3f8 <_strtol_l.constprop.0+0x9c>
 801a36c:	000b      	movs	r3, r1
 801a36e:	2e24      	cmp	r6, #36	; 0x24
 801a370:	d842      	bhi.n	801a3f8 <_strtol_l.constprop.0+0x9c>
 801a372:	4a3f      	ldr	r2, [pc, #252]	; (801a470 <_strtol_l.constprop.0+0x114>)
 801a374:	2108      	movs	r1, #8
 801a376:	4694      	mov	ip, r2
 801a378:	001a      	movs	r2, r3
 801a37a:	4660      	mov	r0, ip
 801a37c:	7814      	ldrb	r4, [r2, #0]
 801a37e:	3301      	adds	r3, #1
 801a380:	5d00      	ldrb	r0, [r0, r4]
 801a382:	001d      	movs	r5, r3
 801a384:	0007      	movs	r7, r0
 801a386:	400f      	ands	r7, r1
 801a388:	4208      	tst	r0, r1
 801a38a:	d1f5      	bne.n	801a378 <_strtol_l.constprop.0+0x1c>
 801a38c:	2c2d      	cmp	r4, #45	; 0x2d
 801a38e:	d13a      	bne.n	801a406 <_strtol_l.constprop.0+0xaa>
 801a390:	2701      	movs	r7, #1
 801a392:	781c      	ldrb	r4, [r3, #0]
 801a394:	1c95      	adds	r5, r2, #2
 801a396:	2e00      	cmp	r6, #0
 801a398:	d065      	beq.n	801a466 <_strtol_l.constprop.0+0x10a>
 801a39a:	2e10      	cmp	r6, #16
 801a39c:	d109      	bne.n	801a3b2 <_strtol_l.constprop.0+0x56>
 801a39e:	2c30      	cmp	r4, #48	; 0x30
 801a3a0:	d107      	bne.n	801a3b2 <_strtol_l.constprop.0+0x56>
 801a3a2:	2220      	movs	r2, #32
 801a3a4:	782b      	ldrb	r3, [r5, #0]
 801a3a6:	4393      	bics	r3, r2
 801a3a8:	2b58      	cmp	r3, #88	; 0x58
 801a3aa:	d157      	bne.n	801a45c <_strtol_l.constprop.0+0x100>
 801a3ac:	2610      	movs	r6, #16
 801a3ae:	786c      	ldrb	r4, [r5, #1]
 801a3b0:	3502      	adds	r5, #2
 801a3b2:	4b30      	ldr	r3, [pc, #192]	; (801a474 <_strtol_l.constprop.0+0x118>)
 801a3b4:	0031      	movs	r1, r6
 801a3b6:	18fb      	adds	r3, r7, r3
 801a3b8:	0018      	movs	r0, r3
 801a3ba:	9303      	str	r3, [sp, #12]
 801a3bc:	f7ed fbda 	bl	8007b74 <__aeabi_uidivmod>
 801a3c0:	2300      	movs	r3, #0
 801a3c2:	2201      	movs	r2, #1
 801a3c4:	4684      	mov	ip, r0
 801a3c6:	0018      	movs	r0, r3
 801a3c8:	9104      	str	r1, [sp, #16]
 801a3ca:	4252      	negs	r2, r2
 801a3cc:	0021      	movs	r1, r4
 801a3ce:	3930      	subs	r1, #48	; 0x30
 801a3d0:	2909      	cmp	r1, #9
 801a3d2:	d81d      	bhi.n	801a410 <_strtol_l.constprop.0+0xb4>
 801a3d4:	000c      	movs	r4, r1
 801a3d6:	42a6      	cmp	r6, r4
 801a3d8:	dd28      	ble.n	801a42c <_strtol_l.constprop.0+0xd0>
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	db24      	blt.n	801a428 <_strtol_l.constprop.0+0xcc>
 801a3de:	0013      	movs	r3, r2
 801a3e0:	4584      	cmp	ip, r0
 801a3e2:	d306      	bcc.n	801a3f2 <_strtol_l.constprop.0+0x96>
 801a3e4:	d102      	bne.n	801a3ec <_strtol_l.constprop.0+0x90>
 801a3e6:	9904      	ldr	r1, [sp, #16]
 801a3e8:	42a1      	cmp	r1, r4
 801a3ea:	db02      	blt.n	801a3f2 <_strtol_l.constprop.0+0x96>
 801a3ec:	2301      	movs	r3, #1
 801a3ee:	4370      	muls	r0, r6
 801a3f0:	1820      	adds	r0, r4, r0
 801a3f2:	782c      	ldrb	r4, [r5, #0]
 801a3f4:	3501      	adds	r5, #1
 801a3f6:	e7e9      	b.n	801a3cc <_strtol_l.constprop.0+0x70>
 801a3f8:	f7fe f8e4 	bl	80185c4 <__errno>
 801a3fc:	2316      	movs	r3, #22
 801a3fe:	6003      	str	r3, [r0, #0]
 801a400:	2000      	movs	r0, #0
 801a402:	b007      	add	sp, #28
 801a404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a406:	2c2b      	cmp	r4, #43	; 0x2b
 801a408:	d1c5      	bne.n	801a396 <_strtol_l.constprop.0+0x3a>
 801a40a:	781c      	ldrb	r4, [r3, #0]
 801a40c:	1c95      	adds	r5, r2, #2
 801a40e:	e7c2      	b.n	801a396 <_strtol_l.constprop.0+0x3a>
 801a410:	0021      	movs	r1, r4
 801a412:	3941      	subs	r1, #65	; 0x41
 801a414:	2919      	cmp	r1, #25
 801a416:	d801      	bhi.n	801a41c <_strtol_l.constprop.0+0xc0>
 801a418:	3c37      	subs	r4, #55	; 0x37
 801a41a:	e7dc      	b.n	801a3d6 <_strtol_l.constprop.0+0x7a>
 801a41c:	0021      	movs	r1, r4
 801a41e:	3961      	subs	r1, #97	; 0x61
 801a420:	2919      	cmp	r1, #25
 801a422:	d803      	bhi.n	801a42c <_strtol_l.constprop.0+0xd0>
 801a424:	3c57      	subs	r4, #87	; 0x57
 801a426:	e7d6      	b.n	801a3d6 <_strtol_l.constprop.0+0x7a>
 801a428:	0013      	movs	r3, r2
 801a42a:	e7e2      	b.n	801a3f2 <_strtol_l.constprop.0+0x96>
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	da09      	bge.n	801a444 <_strtol_l.constprop.0+0xe8>
 801a430:	2322      	movs	r3, #34	; 0x22
 801a432:	9a05      	ldr	r2, [sp, #20]
 801a434:	9803      	ldr	r0, [sp, #12]
 801a436:	6013      	str	r3, [r2, #0]
 801a438:	9b02      	ldr	r3, [sp, #8]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d0e1      	beq.n	801a402 <_strtol_l.constprop.0+0xa6>
 801a43e:	1e6b      	subs	r3, r5, #1
 801a440:	9301      	str	r3, [sp, #4]
 801a442:	e007      	b.n	801a454 <_strtol_l.constprop.0+0xf8>
 801a444:	2f00      	cmp	r7, #0
 801a446:	d000      	beq.n	801a44a <_strtol_l.constprop.0+0xee>
 801a448:	4240      	negs	r0, r0
 801a44a:	9a02      	ldr	r2, [sp, #8]
 801a44c:	2a00      	cmp	r2, #0
 801a44e:	d0d8      	beq.n	801a402 <_strtol_l.constprop.0+0xa6>
 801a450:	2b00      	cmp	r3, #0
 801a452:	d1f4      	bne.n	801a43e <_strtol_l.constprop.0+0xe2>
 801a454:	9b02      	ldr	r3, [sp, #8]
 801a456:	9a01      	ldr	r2, [sp, #4]
 801a458:	601a      	str	r2, [r3, #0]
 801a45a:	e7d2      	b.n	801a402 <_strtol_l.constprop.0+0xa6>
 801a45c:	2430      	movs	r4, #48	; 0x30
 801a45e:	2e00      	cmp	r6, #0
 801a460:	d1a7      	bne.n	801a3b2 <_strtol_l.constprop.0+0x56>
 801a462:	3608      	adds	r6, #8
 801a464:	e7a5      	b.n	801a3b2 <_strtol_l.constprop.0+0x56>
 801a466:	2c30      	cmp	r4, #48	; 0x30
 801a468:	d09b      	beq.n	801a3a2 <_strtol_l.constprop.0+0x46>
 801a46a:	260a      	movs	r6, #10
 801a46c:	e7a1      	b.n	801a3b2 <_strtol_l.constprop.0+0x56>
 801a46e:	46c0      	nop			; (mov r8, r8)
 801a470:	0801c928 	.word	0x0801c928
 801a474:	7fffffff 	.word	0x7fffffff

0801a478 <_strtol_r>:
 801a478:	b510      	push	{r4, lr}
 801a47a:	f7ff ff6f 	bl	801a35c <_strtol_l.constprop.0>
 801a47e:	bd10      	pop	{r4, pc}

0801a480 <_strtoul_l.constprop.0>:
 801a480:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a482:	b087      	sub	sp, #28
 801a484:	9202      	str	r2, [sp, #8]
 801a486:	4a42      	ldr	r2, [pc, #264]	; (801a590 <_strtoul_l.constprop.0+0x110>)
 801a488:	001e      	movs	r6, r3
 801a48a:	9101      	str	r1, [sp, #4]
 801a48c:	000b      	movs	r3, r1
 801a48e:	4694      	mov	ip, r2
 801a490:	2108      	movs	r1, #8
 801a492:	9005      	str	r0, [sp, #20]
 801a494:	001a      	movs	r2, r3
 801a496:	4660      	mov	r0, ip
 801a498:	7814      	ldrb	r4, [r2, #0]
 801a49a:	3301      	adds	r3, #1
 801a49c:	5d00      	ldrb	r0, [r0, r4]
 801a49e:	001d      	movs	r5, r3
 801a4a0:	0007      	movs	r7, r0
 801a4a2:	400f      	ands	r7, r1
 801a4a4:	4208      	tst	r0, r1
 801a4a6:	d1f5      	bne.n	801a494 <_strtoul_l.constprop.0+0x14>
 801a4a8:	2c2d      	cmp	r4, #45	; 0x2d
 801a4aa:	d13a      	bne.n	801a522 <_strtoul_l.constprop.0+0xa2>
 801a4ac:	2701      	movs	r7, #1
 801a4ae:	781c      	ldrb	r4, [r3, #0]
 801a4b0:	1c95      	adds	r5, r2, #2
 801a4b2:	2e00      	cmp	r6, #0
 801a4b4:	d067      	beq.n	801a586 <_strtoul_l.constprop.0+0x106>
 801a4b6:	2e10      	cmp	r6, #16
 801a4b8:	d109      	bne.n	801a4ce <_strtoul_l.constprop.0+0x4e>
 801a4ba:	2c30      	cmp	r4, #48	; 0x30
 801a4bc:	d107      	bne.n	801a4ce <_strtoul_l.constprop.0+0x4e>
 801a4be:	2220      	movs	r2, #32
 801a4c0:	782b      	ldrb	r3, [r5, #0]
 801a4c2:	4393      	bics	r3, r2
 801a4c4:	2b58      	cmp	r3, #88	; 0x58
 801a4c6:	d159      	bne.n	801a57c <_strtoul_l.constprop.0+0xfc>
 801a4c8:	2610      	movs	r6, #16
 801a4ca:	786c      	ldrb	r4, [r5, #1]
 801a4cc:	3502      	adds	r5, #2
 801a4ce:	2001      	movs	r0, #1
 801a4d0:	0031      	movs	r1, r6
 801a4d2:	4240      	negs	r0, r0
 801a4d4:	f7ed fac8 	bl	8007a68 <__udivsi3>
 801a4d8:	9003      	str	r0, [sp, #12]
 801a4da:	2001      	movs	r0, #1
 801a4dc:	0031      	movs	r1, r6
 801a4de:	4240      	negs	r0, r0
 801a4e0:	f7ed fb48 	bl	8007b74 <__aeabi_uidivmod>
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	9104      	str	r1, [sp, #16]
 801a4e8:	2101      	movs	r1, #1
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	0018      	movs	r0, r3
 801a4ee:	468c      	mov	ip, r1
 801a4f0:	4252      	negs	r2, r2
 801a4f2:	0021      	movs	r1, r4
 801a4f4:	3930      	subs	r1, #48	; 0x30
 801a4f6:	2909      	cmp	r1, #9
 801a4f8:	d818      	bhi.n	801a52c <_strtoul_l.constprop.0+0xac>
 801a4fa:	000c      	movs	r4, r1
 801a4fc:	42a6      	cmp	r6, r4
 801a4fe:	dd23      	ble.n	801a548 <_strtoul_l.constprop.0+0xc8>
 801a500:	2b00      	cmp	r3, #0
 801a502:	db1f      	blt.n	801a544 <_strtoul_l.constprop.0+0xc4>
 801a504:	9903      	ldr	r1, [sp, #12]
 801a506:	0013      	movs	r3, r2
 801a508:	4281      	cmp	r1, r0
 801a50a:	d307      	bcc.n	801a51c <_strtoul_l.constprop.0+0x9c>
 801a50c:	d103      	bne.n	801a516 <_strtoul_l.constprop.0+0x96>
 801a50e:	9904      	ldr	r1, [sp, #16]
 801a510:	0013      	movs	r3, r2
 801a512:	42a1      	cmp	r1, r4
 801a514:	db02      	blt.n	801a51c <_strtoul_l.constprop.0+0x9c>
 801a516:	4663      	mov	r3, ip
 801a518:	4370      	muls	r0, r6
 801a51a:	1820      	adds	r0, r4, r0
 801a51c:	782c      	ldrb	r4, [r5, #0]
 801a51e:	3501      	adds	r5, #1
 801a520:	e7e7      	b.n	801a4f2 <_strtoul_l.constprop.0+0x72>
 801a522:	2c2b      	cmp	r4, #43	; 0x2b
 801a524:	d1c5      	bne.n	801a4b2 <_strtoul_l.constprop.0+0x32>
 801a526:	781c      	ldrb	r4, [r3, #0]
 801a528:	1c95      	adds	r5, r2, #2
 801a52a:	e7c2      	b.n	801a4b2 <_strtoul_l.constprop.0+0x32>
 801a52c:	0021      	movs	r1, r4
 801a52e:	3941      	subs	r1, #65	; 0x41
 801a530:	2919      	cmp	r1, #25
 801a532:	d801      	bhi.n	801a538 <_strtoul_l.constprop.0+0xb8>
 801a534:	3c37      	subs	r4, #55	; 0x37
 801a536:	e7e1      	b.n	801a4fc <_strtoul_l.constprop.0+0x7c>
 801a538:	0021      	movs	r1, r4
 801a53a:	3961      	subs	r1, #97	; 0x61
 801a53c:	2919      	cmp	r1, #25
 801a53e:	d803      	bhi.n	801a548 <_strtoul_l.constprop.0+0xc8>
 801a540:	3c57      	subs	r4, #87	; 0x57
 801a542:	e7db      	b.n	801a4fc <_strtoul_l.constprop.0+0x7c>
 801a544:	0013      	movs	r3, r2
 801a546:	e7e9      	b.n	801a51c <_strtoul_l.constprop.0+0x9c>
 801a548:	2b00      	cmp	r3, #0
 801a54a:	da09      	bge.n	801a560 <_strtoul_l.constprop.0+0xe0>
 801a54c:	2322      	movs	r3, #34	; 0x22
 801a54e:	2001      	movs	r0, #1
 801a550:	9a05      	ldr	r2, [sp, #20]
 801a552:	4240      	negs	r0, r0
 801a554:	6013      	str	r3, [r2, #0]
 801a556:	9b02      	ldr	r3, [sp, #8]
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d109      	bne.n	801a570 <_strtoul_l.constprop.0+0xf0>
 801a55c:	b007      	add	sp, #28
 801a55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a560:	2f00      	cmp	r7, #0
 801a562:	d000      	beq.n	801a566 <_strtoul_l.constprop.0+0xe6>
 801a564:	4240      	negs	r0, r0
 801a566:	9a02      	ldr	r2, [sp, #8]
 801a568:	2a00      	cmp	r2, #0
 801a56a:	d0f7      	beq.n	801a55c <_strtoul_l.constprop.0+0xdc>
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d001      	beq.n	801a574 <_strtoul_l.constprop.0+0xf4>
 801a570:	1e6b      	subs	r3, r5, #1
 801a572:	9301      	str	r3, [sp, #4]
 801a574:	9b02      	ldr	r3, [sp, #8]
 801a576:	9a01      	ldr	r2, [sp, #4]
 801a578:	601a      	str	r2, [r3, #0]
 801a57a:	e7ef      	b.n	801a55c <_strtoul_l.constprop.0+0xdc>
 801a57c:	2430      	movs	r4, #48	; 0x30
 801a57e:	2e00      	cmp	r6, #0
 801a580:	d1a5      	bne.n	801a4ce <_strtoul_l.constprop.0+0x4e>
 801a582:	3608      	adds	r6, #8
 801a584:	e7a3      	b.n	801a4ce <_strtoul_l.constprop.0+0x4e>
 801a586:	2c30      	cmp	r4, #48	; 0x30
 801a588:	d099      	beq.n	801a4be <_strtoul_l.constprop.0+0x3e>
 801a58a:	260a      	movs	r6, #10
 801a58c:	e79f      	b.n	801a4ce <_strtoul_l.constprop.0+0x4e>
 801a58e:	46c0      	nop			; (mov r8, r8)
 801a590:	0801c928 	.word	0x0801c928

0801a594 <_strtoul_r>:
 801a594:	b510      	push	{r4, lr}
 801a596:	f7ff ff73 	bl	801a480 <_strtoul_l.constprop.0>
 801a59a:	bd10      	pop	{r4, pc}

0801a59c <__submore>:
 801a59c:	000b      	movs	r3, r1
 801a59e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a5a0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 801a5a2:	3344      	adds	r3, #68	; 0x44
 801a5a4:	000c      	movs	r4, r1
 801a5a6:	429d      	cmp	r5, r3
 801a5a8:	d11c      	bne.n	801a5e4 <__submore+0x48>
 801a5aa:	2680      	movs	r6, #128	; 0x80
 801a5ac:	00f6      	lsls	r6, r6, #3
 801a5ae:	0031      	movs	r1, r6
 801a5b0:	f7ff f8e4 	bl	801977c <_malloc_r>
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	d102      	bne.n	801a5be <__submore+0x22>
 801a5b8:	2001      	movs	r0, #1
 801a5ba:	4240      	negs	r0, r0
 801a5bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a5be:	0023      	movs	r3, r4
 801a5c0:	6360      	str	r0, [r4, #52]	; 0x34
 801a5c2:	63a6      	str	r6, [r4, #56]	; 0x38
 801a5c4:	3346      	adds	r3, #70	; 0x46
 801a5c6:	781a      	ldrb	r2, [r3, #0]
 801a5c8:	4b10      	ldr	r3, [pc, #64]	; (801a60c <__submore+0x70>)
 801a5ca:	54c2      	strb	r2, [r0, r3]
 801a5cc:	0023      	movs	r3, r4
 801a5ce:	3345      	adds	r3, #69	; 0x45
 801a5d0:	781a      	ldrb	r2, [r3, #0]
 801a5d2:	4b0f      	ldr	r3, [pc, #60]	; (801a610 <__submore+0x74>)
 801a5d4:	54c2      	strb	r2, [r0, r3]
 801a5d6:	782a      	ldrb	r2, [r5, #0]
 801a5d8:	4b0e      	ldr	r3, [pc, #56]	; (801a614 <__submore+0x78>)
 801a5da:	54c2      	strb	r2, [r0, r3]
 801a5dc:	18c0      	adds	r0, r0, r3
 801a5de:	6020      	str	r0, [r4, #0]
 801a5e0:	2000      	movs	r0, #0
 801a5e2:	e7eb      	b.n	801a5bc <__submore+0x20>
 801a5e4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 801a5e6:	0029      	movs	r1, r5
 801a5e8:	0073      	lsls	r3, r6, #1
 801a5ea:	001a      	movs	r2, r3
 801a5ec:	9301      	str	r3, [sp, #4]
 801a5ee:	f7ff f93b 	bl	8019868 <_realloc_r>
 801a5f2:	1e05      	subs	r5, r0, #0
 801a5f4:	d0e0      	beq.n	801a5b8 <__submore+0x1c>
 801a5f6:	1987      	adds	r7, r0, r6
 801a5f8:	0001      	movs	r1, r0
 801a5fa:	0032      	movs	r2, r6
 801a5fc:	0038      	movs	r0, r7
 801a5fe:	f7fe f81b 	bl	8018638 <memcpy>
 801a602:	9b01      	ldr	r3, [sp, #4]
 801a604:	6027      	str	r7, [r4, #0]
 801a606:	6365      	str	r5, [r4, #52]	; 0x34
 801a608:	63a3      	str	r3, [r4, #56]	; 0x38
 801a60a:	e7e9      	b.n	801a5e0 <__submore+0x44>
 801a60c:	000003ff 	.word	0x000003ff
 801a610:	000003fe 	.word	0x000003fe
 801a614:	000003fd 	.word	0x000003fd

0801a618 <_fstat_r>:
 801a618:	2300      	movs	r3, #0
 801a61a:	b570      	push	{r4, r5, r6, lr}
 801a61c:	4d06      	ldr	r5, [pc, #24]	; (801a638 <_fstat_r+0x20>)
 801a61e:	0004      	movs	r4, r0
 801a620:	0008      	movs	r0, r1
 801a622:	0011      	movs	r1, r2
 801a624:	602b      	str	r3, [r5, #0]
 801a626:	f7f4 fa04 	bl	800ea32 <_fstat>
 801a62a:	1c43      	adds	r3, r0, #1
 801a62c:	d103      	bne.n	801a636 <_fstat_r+0x1e>
 801a62e:	682b      	ldr	r3, [r5, #0]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d000      	beq.n	801a636 <_fstat_r+0x1e>
 801a634:	6023      	str	r3, [r4, #0]
 801a636:	bd70      	pop	{r4, r5, r6, pc}
 801a638:	200015c4 	.word	0x200015c4

0801a63c <_isatty_r>:
 801a63c:	2300      	movs	r3, #0
 801a63e:	b570      	push	{r4, r5, r6, lr}
 801a640:	4d06      	ldr	r5, [pc, #24]	; (801a65c <_isatty_r+0x20>)
 801a642:	0004      	movs	r4, r0
 801a644:	0008      	movs	r0, r1
 801a646:	602b      	str	r3, [r5, #0]
 801a648:	f7f4 f9f8 	bl	800ea3c <_isatty>
 801a64c:	1c43      	adds	r3, r0, #1
 801a64e:	d103      	bne.n	801a658 <_isatty_r+0x1c>
 801a650:	682b      	ldr	r3, [r5, #0]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d000      	beq.n	801a658 <_isatty_r+0x1c>
 801a656:	6023      	str	r3, [r4, #0]
 801a658:	bd70      	pop	{r4, r5, r6, pc}
 801a65a:	46c0      	nop			; (mov r8, r8)
 801a65c:	200015c4 	.word	0x200015c4

0801a660 <__malloc_lock>:
 801a660:	b510      	push	{r4, lr}
 801a662:	4802      	ldr	r0, [pc, #8]	; (801a66c <__malloc_lock+0xc>)
 801a664:	f7fe ff73 	bl	801954e <__retarget_lock_acquire_recursive>
 801a668:	bd10      	pop	{r4, pc}
 801a66a:	46c0      	nop			; (mov r8, r8)
 801a66c:	200015b8 	.word	0x200015b8

0801a670 <__malloc_unlock>:
 801a670:	b510      	push	{r4, lr}
 801a672:	4802      	ldr	r0, [pc, #8]	; (801a67c <__malloc_unlock+0xc>)
 801a674:	f7fe ff6c 	bl	8019550 <__retarget_lock_release_recursive>
 801a678:	bd10      	pop	{r4, pc}
 801a67a:	46c0      	nop			; (mov r8, r8)
 801a67c:	200015b8 	.word	0x200015b8

0801a680 <_malloc_usable_size_r>:
 801a680:	1f0b      	subs	r3, r1, #4
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	1f18      	subs	r0, r3, #4
 801a686:	2b00      	cmp	r3, #0
 801a688:	da01      	bge.n	801a68e <_malloc_usable_size_r+0xe>
 801a68a:	580b      	ldr	r3, [r1, r0]
 801a68c:	18c0      	adds	r0, r0, r3
 801a68e:	4770      	bx	lr

0801a690 <atan>:
 801a690:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a692:	4b98      	ldr	r3, [pc, #608]	; (801a8f4 <atan+0x264>)
 801a694:	b085      	sub	sp, #20
 801a696:	004e      	lsls	r6, r1, #1
 801a698:	0004      	movs	r4, r0
 801a69a:	000d      	movs	r5, r1
 801a69c:	9103      	str	r1, [sp, #12]
 801a69e:	0876      	lsrs	r6, r6, #1
 801a6a0:	429e      	cmp	r6, r3
 801a6a2:	dd18      	ble.n	801a6d6 <atan+0x46>
 801a6a4:	4b94      	ldr	r3, [pc, #592]	; (801a8f8 <atan+0x268>)
 801a6a6:	429e      	cmp	r6, r3
 801a6a8:	dc02      	bgt.n	801a6b0 <atan+0x20>
 801a6aa:	d10a      	bne.n	801a6c2 <atan+0x32>
 801a6ac:	2800      	cmp	r0, #0
 801a6ae:	d008      	beq.n	801a6c2 <atan+0x32>
 801a6b0:	0022      	movs	r2, r4
 801a6b2:	002b      	movs	r3, r5
 801a6b4:	0020      	movs	r0, r4
 801a6b6:	0029      	movs	r1, r5
 801a6b8:	f7ee f9bc 	bl	8008a34 <__aeabi_dadd>
 801a6bc:	0004      	movs	r4, r0
 801a6be:	000d      	movs	r5, r1
 801a6c0:	e005      	b.n	801a6ce <atan+0x3e>
 801a6c2:	9b03      	ldr	r3, [sp, #12]
 801a6c4:	4c8d      	ldr	r4, [pc, #564]	; (801a8fc <atan+0x26c>)
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	dd00      	ble.n	801a6cc <atan+0x3c>
 801a6ca:	e110      	b.n	801a8ee <atan+0x25e>
 801a6cc:	4d8c      	ldr	r5, [pc, #560]	; (801a900 <atan+0x270>)
 801a6ce:	0020      	movs	r0, r4
 801a6d0:	0029      	movs	r1, r5
 801a6d2:	b005      	add	sp, #20
 801a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6d6:	4b8b      	ldr	r3, [pc, #556]	; (801a904 <atan+0x274>)
 801a6d8:	429e      	cmp	r6, r3
 801a6da:	dc0f      	bgt.n	801a6fc <atan+0x6c>
 801a6dc:	4b8a      	ldr	r3, [pc, #552]	; (801a908 <atan+0x278>)
 801a6de:	429e      	cmp	r6, r3
 801a6e0:	dc09      	bgt.n	801a6f6 <atan+0x66>
 801a6e2:	4a8a      	ldr	r2, [pc, #552]	; (801a90c <atan+0x27c>)
 801a6e4:	4b8a      	ldr	r3, [pc, #552]	; (801a910 <atan+0x280>)
 801a6e6:	f7ee f9a5 	bl	8008a34 <__aeabi_dadd>
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	4b89      	ldr	r3, [pc, #548]	; (801a914 <atan+0x284>)
 801a6ee:	f7ed fb67 	bl	8007dc0 <__aeabi_dcmpgt>
 801a6f2:	2800      	cmp	r0, #0
 801a6f4:	d1eb      	bne.n	801a6ce <atan+0x3e>
 801a6f6:	2301      	movs	r3, #1
 801a6f8:	425b      	negs	r3, r3
 801a6fa:	e025      	b.n	801a748 <atan+0xb8>
 801a6fc:	f000 f98a 	bl	801aa14 <fabs>
 801a700:	4b85      	ldr	r3, [pc, #532]	; (801a918 <atan+0x288>)
 801a702:	0004      	movs	r4, r0
 801a704:	000d      	movs	r5, r1
 801a706:	429e      	cmp	r6, r3
 801a708:	dd00      	ble.n	801a70c <atan+0x7c>
 801a70a:	e0aa      	b.n	801a862 <atan+0x1d2>
 801a70c:	4b83      	ldr	r3, [pc, #524]	; (801a91c <atan+0x28c>)
 801a70e:	429e      	cmp	r6, r3
 801a710:	dd00      	ble.n	801a714 <atan+0x84>
 801a712:	e090      	b.n	801a836 <atan+0x1a6>
 801a714:	0002      	movs	r2, r0
 801a716:	000b      	movs	r3, r1
 801a718:	f7ee f98c 	bl	8008a34 <__aeabi_dadd>
 801a71c:	2200      	movs	r2, #0
 801a71e:	4b7d      	ldr	r3, [pc, #500]	; (801a914 <atan+0x284>)
 801a720:	f7ef fb32 	bl	8009d88 <__aeabi_dsub>
 801a724:	2380      	movs	r3, #128	; 0x80
 801a726:	0006      	movs	r6, r0
 801a728:	000f      	movs	r7, r1
 801a72a:	2200      	movs	r2, #0
 801a72c:	0020      	movs	r0, r4
 801a72e:	0029      	movs	r1, r5
 801a730:	05db      	lsls	r3, r3, #23
 801a732:	f7ee f97f 	bl	8008a34 <__aeabi_dadd>
 801a736:	000b      	movs	r3, r1
 801a738:	0002      	movs	r2, r0
 801a73a:	0039      	movs	r1, r7
 801a73c:	0030      	movs	r0, r6
 801a73e:	f7ee fcb5 	bl	80090ac <__aeabi_ddiv>
 801a742:	2300      	movs	r3, #0
 801a744:	0004      	movs	r4, r0
 801a746:	000d      	movs	r5, r1
 801a748:	0022      	movs	r2, r4
 801a74a:	9302      	str	r3, [sp, #8]
 801a74c:	0020      	movs	r0, r4
 801a74e:	002b      	movs	r3, r5
 801a750:	0029      	movs	r1, r5
 801a752:	f7ef f8ad 	bl	80098b0 <__aeabi_dmul>
 801a756:	0002      	movs	r2, r0
 801a758:	000b      	movs	r3, r1
 801a75a:	9000      	str	r0, [sp, #0]
 801a75c:	9101      	str	r1, [sp, #4]
 801a75e:	f7ef f8a7 	bl	80098b0 <__aeabi_dmul>
 801a762:	0006      	movs	r6, r0
 801a764:	000f      	movs	r7, r1
 801a766:	4a6e      	ldr	r2, [pc, #440]	; (801a920 <atan+0x290>)
 801a768:	4b6e      	ldr	r3, [pc, #440]	; (801a924 <atan+0x294>)
 801a76a:	f7ef f8a1 	bl	80098b0 <__aeabi_dmul>
 801a76e:	4a6e      	ldr	r2, [pc, #440]	; (801a928 <atan+0x298>)
 801a770:	4b6e      	ldr	r3, [pc, #440]	; (801a92c <atan+0x29c>)
 801a772:	f7ee f95f 	bl	8008a34 <__aeabi_dadd>
 801a776:	0032      	movs	r2, r6
 801a778:	003b      	movs	r3, r7
 801a77a:	f7ef f899 	bl	80098b0 <__aeabi_dmul>
 801a77e:	4a6c      	ldr	r2, [pc, #432]	; (801a930 <atan+0x2a0>)
 801a780:	4b6c      	ldr	r3, [pc, #432]	; (801a934 <atan+0x2a4>)
 801a782:	f7ee f957 	bl	8008a34 <__aeabi_dadd>
 801a786:	0032      	movs	r2, r6
 801a788:	003b      	movs	r3, r7
 801a78a:	f7ef f891 	bl	80098b0 <__aeabi_dmul>
 801a78e:	4a6a      	ldr	r2, [pc, #424]	; (801a938 <atan+0x2a8>)
 801a790:	4b6a      	ldr	r3, [pc, #424]	; (801a93c <atan+0x2ac>)
 801a792:	f7ee f94f 	bl	8008a34 <__aeabi_dadd>
 801a796:	0032      	movs	r2, r6
 801a798:	003b      	movs	r3, r7
 801a79a:	f7ef f889 	bl	80098b0 <__aeabi_dmul>
 801a79e:	4a68      	ldr	r2, [pc, #416]	; (801a940 <atan+0x2b0>)
 801a7a0:	4b68      	ldr	r3, [pc, #416]	; (801a944 <atan+0x2b4>)
 801a7a2:	f7ee f947 	bl	8008a34 <__aeabi_dadd>
 801a7a6:	0032      	movs	r2, r6
 801a7a8:	003b      	movs	r3, r7
 801a7aa:	f7ef f881 	bl	80098b0 <__aeabi_dmul>
 801a7ae:	4a66      	ldr	r2, [pc, #408]	; (801a948 <atan+0x2b8>)
 801a7b0:	4b66      	ldr	r3, [pc, #408]	; (801a94c <atan+0x2bc>)
 801a7b2:	f7ee f93f 	bl	8008a34 <__aeabi_dadd>
 801a7b6:	9a00      	ldr	r2, [sp, #0]
 801a7b8:	9b01      	ldr	r3, [sp, #4]
 801a7ba:	f7ef f879 	bl	80098b0 <__aeabi_dmul>
 801a7be:	4a64      	ldr	r2, [pc, #400]	; (801a950 <atan+0x2c0>)
 801a7c0:	9000      	str	r0, [sp, #0]
 801a7c2:	9101      	str	r1, [sp, #4]
 801a7c4:	4b63      	ldr	r3, [pc, #396]	; (801a954 <atan+0x2c4>)
 801a7c6:	0030      	movs	r0, r6
 801a7c8:	0039      	movs	r1, r7
 801a7ca:	f7ef f871 	bl	80098b0 <__aeabi_dmul>
 801a7ce:	4a62      	ldr	r2, [pc, #392]	; (801a958 <atan+0x2c8>)
 801a7d0:	4b62      	ldr	r3, [pc, #392]	; (801a95c <atan+0x2cc>)
 801a7d2:	f7ef fad9 	bl	8009d88 <__aeabi_dsub>
 801a7d6:	0032      	movs	r2, r6
 801a7d8:	003b      	movs	r3, r7
 801a7da:	f7ef f869 	bl	80098b0 <__aeabi_dmul>
 801a7de:	4a60      	ldr	r2, [pc, #384]	; (801a960 <atan+0x2d0>)
 801a7e0:	4b60      	ldr	r3, [pc, #384]	; (801a964 <atan+0x2d4>)
 801a7e2:	f7ef fad1 	bl	8009d88 <__aeabi_dsub>
 801a7e6:	0032      	movs	r2, r6
 801a7e8:	003b      	movs	r3, r7
 801a7ea:	f7ef f861 	bl	80098b0 <__aeabi_dmul>
 801a7ee:	4a5e      	ldr	r2, [pc, #376]	; (801a968 <atan+0x2d8>)
 801a7f0:	4b5e      	ldr	r3, [pc, #376]	; (801a96c <atan+0x2dc>)
 801a7f2:	f7ef fac9 	bl	8009d88 <__aeabi_dsub>
 801a7f6:	0032      	movs	r2, r6
 801a7f8:	003b      	movs	r3, r7
 801a7fa:	f7ef f859 	bl	80098b0 <__aeabi_dmul>
 801a7fe:	4a5c      	ldr	r2, [pc, #368]	; (801a970 <atan+0x2e0>)
 801a800:	4b5c      	ldr	r3, [pc, #368]	; (801a974 <atan+0x2e4>)
 801a802:	f7ef fac1 	bl	8009d88 <__aeabi_dsub>
 801a806:	0032      	movs	r2, r6
 801a808:	003b      	movs	r3, r7
 801a80a:	f7ef f851 	bl	80098b0 <__aeabi_dmul>
 801a80e:	0002      	movs	r2, r0
 801a810:	000b      	movs	r3, r1
 801a812:	9800      	ldr	r0, [sp, #0]
 801a814:	9901      	ldr	r1, [sp, #4]
 801a816:	f7ee f90d 	bl	8008a34 <__aeabi_dadd>
 801a81a:	002b      	movs	r3, r5
 801a81c:	0022      	movs	r2, r4
 801a81e:	f7ef f847 	bl	80098b0 <__aeabi_dmul>
 801a822:	9b02      	ldr	r3, [sp, #8]
 801a824:	3301      	adds	r3, #1
 801a826:	d143      	bne.n	801a8b0 <atan+0x220>
 801a828:	0002      	movs	r2, r0
 801a82a:	000b      	movs	r3, r1
 801a82c:	0020      	movs	r0, r4
 801a82e:	0029      	movs	r1, r5
 801a830:	f7ef faaa 	bl	8009d88 <__aeabi_dsub>
 801a834:	e742      	b.n	801a6bc <atan+0x2c>
 801a836:	2200      	movs	r2, #0
 801a838:	4b36      	ldr	r3, [pc, #216]	; (801a914 <atan+0x284>)
 801a83a:	f7ef faa5 	bl	8009d88 <__aeabi_dsub>
 801a83e:	2200      	movs	r2, #0
 801a840:	0006      	movs	r6, r0
 801a842:	000f      	movs	r7, r1
 801a844:	0020      	movs	r0, r4
 801a846:	0029      	movs	r1, r5
 801a848:	4b32      	ldr	r3, [pc, #200]	; (801a914 <atan+0x284>)
 801a84a:	f7ee f8f3 	bl	8008a34 <__aeabi_dadd>
 801a84e:	000b      	movs	r3, r1
 801a850:	0002      	movs	r2, r0
 801a852:	0039      	movs	r1, r7
 801a854:	0030      	movs	r0, r6
 801a856:	f7ee fc29 	bl	80090ac <__aeabi_ddiv>
 801a85a:	2301      	movs	r3, #1
 801a85c:	0004      	movs	r4, r0
 801a85e:	000d      	movs	r5, r1
 801a860:	e772      	b.n	801a748 <atan+0xb8>
 801a862:	4b45      	ldr	r3, [pc, #276]	; (801a978 <atan+0x2e8>)
 801a864:	429e      	cmp	r6, r3
 801a866:	dc19      	bgt.n	801a89c <atan+0x20c>
 801a868:	2200      	movs	r2, #0
 801a86a:	4b44      	ldr	r3, [pc, #272]	; (801a97c <atan+0x2ec>)
 801a86c:	f7ef fa8c 	bl	8009d88 <__aeabi_dsub>
 801a870:	2200      	movs	r2, #0
 801a872:	0006      	movs	r6, r0
 801a874:	000f      	movs	r7, r1
 801a876:	0020      	movs	r0, r4
 801a878:	0029      	movs	r1, r5
 801a87a:	4b40      	ldr	r3, [pc, #256]	; (801a97c <atan+0x2ec>)
 801a87c:	f7ef f818 	bl	80098b0 <__aeabi_dmul>
 801a880:	2200      	movs	r2, #0
 801a882:	4b24      	ldr	r3, [pc, #144]	; (801a914 <atan+0x284>)
 801a884:	f7ee f8d6 	bl	8008a34 <__aeabi_dadd>
 801a888:	000b      	movs	r3, r1
 801a88a:	0002      	movs	r2, r0
 801a88c:	0039      	movs	r1, r7
 801a88e:	0030      	movs	r0, r6
 801a890:	f7ee fc0c 	bl	80090ac <__aeabi_ddiv>
 801a894:	2302      	movs	r3, #2
 801a896:	0004      	movs	r4, r0
 801a898:	000d      	movs	r5, r1
 801a89a:	e755      	b.n	801a748 <atan+0xb8>
 801a89c:	000b      	movs	r3, r1
 801a89e:	0002      	movs	r2, r0
 801a8a0:	4937      	ldr	r1, [pc, #220]	; (801a980 <atan+0x2f0>)
 801a8a2:	2000      	movs	r0, #0
 801a8a4:	f7ee fc02 	bl	80090ac <__aeabi_ddiv>
 801a8a8:	2303      	movs	r3, #3
 801a8aa:	0004      	movs	r4, r0
 801a8ac:	000d      	movs	r5, r1
 801a8ae:	e74b      	b.n	801a748 <atan+0xb8>
 801a8b0:	9b02      	ldr	r3, [sp, #8]
 801a8b2:	4f34      	ldr	r7, [pc, #208]	; (801a984 <atan+0x2f4>)
 801a8b4:	00de      	lsls	r6, r3, #3
 801a8b6:	4b34      	ldr	r3, [pc, #208]	; (801a988 <atan+0x2f8>)
 801a8b8:	19bf      	adds	r7, r7, r6
 801a8ba:	199e      	adds	r6, r3, r6
 801a8bc:	6832      	ldr	r2, [r6, #0]
 801a8be:	6873      	ldr	r3, [r6, #4]
 801a8c0:	f7ef fa62 	bl	8009d88 <__aeabi_dsub>
 801a8c4:	0022      	movs	r2, r4
 801a8c6:	002b      	movs	r3, r5
 801a8c8:	f7ef fa5e 	bl	8009d88 <__aeabi_dsub>
 801a8cc:	000b      	movs	r3, r1
 801a8ce:	0002      	movs	r2, r0
 801a8d0:	6838      	ldr	r0, [r7, #0]
 801a8d2:	6879      	ldr	r1, [r7, #4]
 801a8d4:	f7ef fa58 	bl	8009d88 <__aeabi_dsub>
 801a8d8:	9b03      	ldr	r3, [sp, #12]
 801a8da:	0004      	movs	r4, r0
 801a8dc:	000d      	movs	r5, r1
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	db00      	blt.n	801a8e4 <atan+0x254>
 801a8e2:	e6f4      	b.n	801a6ce <atan+0x3e>
 801a8e4:	2180      	movs	r1, #128	; 0x80
 801a8e6:	0609      	lsls	r1, r1, #24
 801a8e8:	186b      	adds	r3, r5, r1
 801a8ea:	001d      	movs	r5, r3
 801a8ec:	e6ef      	b.n	801a6ce <atan+0x3e>
 801a8ee:	4d27      	ldr	r5, [pc, #156]	; (801a98c <atan+0x2fc>)
 801a8f0:	e6ed      	b.n	801a6ce <atan+0x3e>
 801a8f2:	46c0      	nop			; (mov r8, r8)
 801a8f4:	440fffff 	.word	0x440fffff
 801a8f8:	7ff00000 	.word	0x7ff00000
 801a8fc:	54442d18 	.word	0x54442d18
 801a900:	bff921fb 	.word	0xbff921fb
 801a904:	3fdbffff 	.word	0x3fdbffff
 801a908:	3e1fffff 	.word	0x3e1fffff
 801a90c:	8800759c 	.word	0x8800759c
 801a910:	7e37e43c 	.word	0x7e37e43c
 801a914:	3ff00000 	.word	0x3ff00000
 801a918:	3ff2ffff 	.word	0x3ff2ffff
 801a91c:	3fe5ffff 	.word	0x3fe5ffff
 801a920:	e322da11 	.word	0xe322da11
 801a924:	3f90ad3a 	.word	0x3f90ad3a
 801a928:	24760deb 	.word	0x24760deb
 801a92c:	3fa97b4b 	.word	0x3fa97b4b
 801a930:	a0d03d51 	.word	0xa0d03d51
 801a934:	3fb10d66 	.word	0x3fb10d66
 801a938:	c54c206e 	.word	0xc54c206e
 801a93c:	3fb745cd 	.word	0x3fb745cd
 801a940:	920083ff 	.word	0x920083ff
 801a944:	3fc24924 	.word	0x3fc24924
 801a948:	5555550d 	.word	0x5555550d
 801a94c:	3fd55555 	.word	0x3fd55555
 801a950:	2c6a6c2f 	.word	0x2c6a6c2f
 801a954:	bfa2b444 	.word	0xbfa2b444
 801a958:	52defd9a 	.word	0x52defd9a
 801a95c:	3fadde2d 	.word	0x3fadde2d
 801a960:	af749a6d 	.word	0xaf749a6d
 801a964:	3fb3b0f2 	.word	0x3fb3b0f2
 801a968:	fe231671 	.word	0xfe231671
 801a96c:	3fbc71c6 	.word	0x3fbc71c6
 801a970:	9998ebc4 	.word	0x9998ebc4
 801a974:	3fc99999 	.word	0x3fc99999
 801a978:	40037fff 	.word	0x40037fff
 801a97c:	3ff80000 	.word	0x3ff80000
 801a980:	bff00000 	.word	0xbff00000
 801a984:	0801ca28 	.word	0x0801ca28
 801a988:	0801ca48 	.word	0x0801ca48
 801a98c:	3ff921fb 	.word	0x3ff921fb

0801a990 <cos>:
 801a990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a992:	4a1e      	ldr	r2, [pc, #120]	; (801aa0c <cos+0x7c>)
 801a994:	004b      	lsls	r3, r1, #1
 801a996:	b087      	sub	sp, #28
 801a998:	085b      	lsrs	r3, r3, #1
 801a99a:	4293      	cmp	r3, r2
 801a99c:	dc04      	bgt.n	801a9a8 <cos+0x18>
 801a99e:	2200      	movs	r2, #0
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	f000 fb4d 	bl	801b040 <__kernel_cos>
 801a9a6:	e006      	b.n	801a9b6 <cos+0x26>
 801a9a8:	4a19      	ldr	r2, [pc, #100]	; (801aa10 <cos+0x80>)
 801a9aa:	4293      	cmp	r3, r2
 801a9ac:	dd05      	ble.n	801a9ba <cos+0x2a>
 801a9ae:	0002      	movs	r2, r0
 801a9b0:	000b      	movs	r3, r1
 801a9b2:	f7ef f9e9 	bl	8009d88 <__aeabi_dsub>
 801a9b6:	b007      	add	sp, #28
 801a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9ba:	aa02      	add	r2, sp, #8
 801a9bc:	f000 f89a 	bl	801aaf4 <__ieee754_rem_pio2>
 801a9c0:	9c04      	ldr	r4, [sp, #16]
 801a9c2:	9d05      	ldr	r5, [sp, #20]
 801a9c4:	2303      	movs	r3, #3
 801a9c6:	4003      	ands	r3, r0
 801a9c8:	2b01      	cmp	r3, #1
 801a9ca:	d008      	beq.n	801a9de <cos+0x4e>
 801a9cc:	9802      	ldr	r0, [sp, #8]
 801a9ce:	9903      	ldr	r1, [sp, #12]
 801a9d0:	2b02      	cmp	r3, #2
 801a9d2:	d00f      	beq.n	801a9f4 <cos+0x64>
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d112      	bne.n	801a9fe <cos+0x6e>
 801a9d8:	0022      	movs	r2, r4
 801a9da:	002b      	movs	r3, r5
 801a9dc:	e7e1      	b.n	801a9a2 <cos+0x12>
 801a9de:	9300      	str	r3, [sp, #0]
 801a9e0:	0022      	movs	r2, r4
 801a9e2:	9802      	ldr	r0, [sp, #8]
 801a9e4:	9903      	ldr	r1, [sp, #12]
 801a9e6:	002b      	movs	r3, r5
 801a9e8:	f000 ff54 	bl	801b894 <__kernel_sin>
 801a9ec:	2380      	movs	r3, #128	; 0x80
 801a9ee:	061b      	lsls	r3, r3, #24
 801a9f0:	18c9      	adds	r1, r1, r3
 801a9f2:	e7e0      	b.n	801a9b6 <cos+0x26>
 801a9f4:	0022      	movs	r2, r4
 801a9f6:	002b      	movs	r3, r5
 801a9f8:	f000 fb22 	bl	801b040 <__kernel_cos>
 801a9fc:	e7f6      	b.n	801a9ec <cos+0x5c>
 801a9fe:	2301      	movs	r3, #1
 801aa00:	0022      	movs	r2, r4
 801aa02:	9300      	str	r3, [sp, #0]
 801aa04:	002b      	movs	r3, r5
 801aa06:	f000 ff45 	bl	801b894 <__kernel_sin>
 801aa0a:	e7d4      	b.n	801a9b6 <cos+0x26>
 801aa0c:	3fe921fb 	.word	0x3fe921fb
 801aa10:	7fefffff 	.word	0x7fefffff

0801aa14 <fabs>:
 801aa14:	004b      	lsls	r3, r1, #1
 801aa16:	0859      	lsrs	r1, r3, #1
 801aa18:	4770      	bx	lr
	...

0801aa1c <sin>:
 801aa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa1e:	4a20      	ldr	r2, [pc, #128]	; (801aaa0 <sin+0x84>)
 801aa20:	004b      	lsls	r3, r1, #1
 801aa22:	b087      	sub	sp, #28
 801aa24:	085b      	lsrs	r3, r3, #1
 801aa26:	4293      	cmp	r3, r2
 801aa28:	dc06      	bgt.n	801aa38 <sin+0x1c>
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	9300      	str	r3, [sp, #0]
 801aa30:	2300      	movs	r3, #0
 801aa32:	f000 ff2f 	bl	801b894 <__kernel_sin>
 801aa36:	e006      	b.n	801aa46 <sin+0x2a>
 801aa38:	4a1a      	ldr	r2, [pc, #104]	; (801aaa4 <sin+0x88>)
 801aa3a:	4293      	cmp	r3, r2
 801aa3c:	dd05      	ble.n	801aa4a <sin+0x2e>
 801aa3e:	0002      	movs	r2, r0
 801aa40:	000b      	movs	r3, r1
 801aa42:	f7ef f9a1 	bl	8009d88 <__aeabi_dsub>
 801aa46:	b007      	add	sp, #28
 801aa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa4a:	aa02      	add	r2, sp, #8
 801aa4c:	f000 f852 	bl	801aaf4 <__ieee754_rem_pio2>
 801aa50:	9c04      	ldr	r4, [sp, #16]
 801aa52:	9d05      	ldr	r5, [sp, #20]
 801aa54:	2303      	movs	r3, #3
 801aa56:	4003      	ands	r3, r0
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	d00a      	beq.n	801aa72 <sin+0x56>
 801aa5c:	9802      	ldr	r0, [sp, #8]
 801aa5e:	9903      	ldr	r1, [sp, #12]
 801aa60:	2b02      	cmp	r3, #2
 801aa62:	d00d      	beq.n	801aa80 <sin+0x64>
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d115      	bne.n	801aa94 <sin+0x78>
 801aa68:	3301      	adds	r3, #1
 801aa6a:	9300      	str	r3, [sp, #0]
 801aa6c:	0022      	movs	r2, r4
 801aa6e:	002b      	movs	r3, r5
 801aa70:	e7df      	b.n	801aa32 <sin+0x16>
 801aa72:	0022      	movs	r2, r4
 801aa74:	9802      	ldr	r0, [sp, #8]
 801aa76:	9903      	ldr	r1, [sp, #12]
 801aa78:	002b      	movs	r3, r5
 801aa7a:	f000 fae1 	bl	801b040 <__kernel_cos>
 801aa7e:	e7e2      	b.n	801aa46 <sin+0x2a>
 801aa80:	2301      	movs	r3, #1
 801aa82:	0022      	movs	r2, r4
 801aa84:	9300      	str	r3, [sp, #0]
 801aa86:	002b      	movs	r3, r5
 801aa88:	f000 ff04 	bl	801b894 <__kernel_sin>
 801aa8c:	2380      	movs	r3, #128	; 0x80
 801aa8e:	061b      	lsls	r3, r3, #24
 801aa90:	18c9      	adds	r1, r1, r3
 801aa92:	e7d8      	b.n	801aa46 <sin+0x2a>
 801aa94:	0022      	movs	r2, r4
 801aa96:	002b      	movs	r3, r5
 801aa98:	f000 fad2 	bl	801b040 <__kernel_cos>
 801aa9c:	e7f6      	b.n	801aa8c <sin+0x70>
 801aa9e:	46c0      	nop			; (mov r8, r8)
 801aaa0:	3fe921fb 	.word	0x3fe921fb
 801aaa4:	7fefffff 	.word	0x7fefffff

0801aaa8 <sqrt>:
 801aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaaa:	0004      	movs	r4, r0
 801aaac:	000d      	movs	r5, r1
 801aaae:	f000 fa11 	bl	801aed4 <__ieee754_sqrt>
 801aab2:	0022      	movs	r2, r4
 801aab4:	0006      	movs	r6, r0
 801aab6:	000f      	movs	r7, r1
 801aab8:	002b      	movs	r3, r5
 801aaba:	0020      	movs	r0, r4
 801aabc:	0029      	movs	r1, r5
 801aabe:	f7ef fcf5 	bl	800a4ac <__aeabi_dcmpun>
 801aac2:	2800      	cmp	r0, #0
 801aac4:	d113      	bne.n	801aaee <sqrt+0x46>
 801aac6:	2200      	movs	r2, #0
 801aac8:	2300      	movs	r3, #0
 801aaca:	0020      	movs	r0, r4
 801aacc:	0029      	movs	r1, r5
 801aace:	f7ed f963 	bl	8007d98 <__aeabi_dcmplt>
 801aad2:	2800      	cmp	r0, #0
 801aad4:	d00b      	beq.n	801aaee <sqrt+0x46>
 801aad6:	f7fd fd75 	bl	80185c4 <__errno>
 801aada:	2321      	movs	r3, #33	; 0x21
 801aadc:	2200      	movs	r2, #0
 801aade:	6003      	str	r3, [r0, #0]
 801aae0:	2300      	movs	r3, #0
 801aae2:	0010      	movs	r0, r2
 801aae4:	0019      	movs	r1, r3
 801aae6:	f7ee fae1 	bl	80090ac <__aeabi_ddiv>
 801aaea:	0006      	movs	r6, r0
 801aaec:	000f      	movs	r7, r1
 801aaee:	0030      	movs	r0, r6
 801aaf0:	0039      	movs	r1, r7
 801aaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aaf4 <__ieee754_rem_pio2>:
 801aaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaf6:	004b      	lsls	r3, r1, #1
 801aaf8:	b091      	sub	sp, #68	; 0x44
 801aafa:	085b      	lsrs	r3, r3, #1
 801aafc:	9302      	str	r3, [sp, #8]
 801aafe:	0017      	movs	r7, r2
 801ab00:	4bb6      	ldr	r3, [pc, #728]	; (801addc <__ieee754_rem_pio2+0x2e8>)
 801ab02:	9a02      	ldr	r2, [sp, #8]
 801ab04:	0004      	movs	r4, r0
 801ab06:	000d      	movs	r5, r1
 801ab08:	9109      	str	r1, [sp, #36]	; 0x24
 801ab0a:	429a      	cmp	r2, r3
 801ab0c:	dc09      	bgt.n	801ab22 <__ieee754_rem_pio2+0x2e>
 801ab0e:	0002      	movs	r2, r0
 801ab10:	000b      	movs	r3, r1
 801ab12:	603a      	str	r2, [r7, #0]
 801ab14:	607b      	str	r3, [r7, #4]
 801ab16:	2200      	movs	r2, #0
 801ab18:	2300      	movs	r3, #0
 801ab1a:	60ba      	str	r2, [r7, #8]
 801ab1c:	60fb      	str	r3, [r7, #12]
 801ab1e:	2600      	movs	r6, #0
 801ab20:	e025      	b.n	801ab6e <__ieee754_rem_pio2+0x7a>
 801ab22:	4baf      	ldr	r3, [pc, #700]	; (801ade0 <__ieee754_rem_pio2+0x2ec>)
 801ab24:	9a02      	ldr	r2, [sp, #8]
 801ab26:	429a      	cmp	r2, r3
 801ab28:	dd00      	ble.n	801ab2c <__ieee754_rem_pio2+0x38>
 801ab2a:	e06e      	b.n	801ac0a <__ieee754_rem_pio2+0x116>
 801ab2c:	4ead      	ldr	r6, [pc, #692]	; (801ade4 <__ieee754_rem_pio2+0x2f0>)
 801ab2e:	4aae      	ldr	r2, [pc, #696]	; (801ade8 <__ieee754_rem_pio2+0x2f4>)
 801ab30:	2d00      	cmp	r5, #0
 801ab32:	dd35      	ble.n	801aba0 <__ieee754_rem_pio2+0xac>
 801ab34:	0020      	movs	r0, r4
 801ab36:	0029      	movs	r1, r5
 801ab38:	4baa      	ldr	r3, [pc, #680]	; (801ade4 <__ieee754_rem_pio2+0x2f0>)
 801ab3a:	f7ef f925 	bl	8009d88 <__aeabi_dsub>
 801ab3e:	9b02      	ldr	r3, [sp, #8]
 801ab40:	0004      	movs	r4, r0
 801ab42:	000d      	movs	r5, r1
 801ab44:	42b3      	cmp	r3, r6
 801ab46:	d015      	beq.n	801ab74 <__ieee754_rem_pio2+0x80>
 801ab48:	4aa8      	ldr	r2, [pc, #672]	; (801adec <__ieee754_rem_pio2+0x2f8>)
 801ab4a:	4ba9      	ldr	r3, [pc, #676]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801ab4c:	f7ef f91c 	bl	8009d88 <__aeabi_dsub>
 801ab50:	0002      	movs	r2, r0
 801ab52:	000b      	movs	r3, r1
 801ab54:	0020      	movs	r0, r4
 801ab56:	603a      	str	r2, [r7, #0]
 801ab58:	607b      	str	r3, [r7, #4]
 801ab5a:	0029      	movs	r1, r5
 801ab5c:	f7ef f914 	bl	8009d88 <__aeabi_dsub>
 801ab60:	4aa2      	ldr	r2, [pc, #648]	; (801adec <__ieee754_rem_pio2+0x2f8>)
 801ab62:	4ba3      	ldr	r3, [pc, #652]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801ab64:	f7ef f910 	bl	8009d88 <__aeabi_dsub>
 801ab68:	2601      	movs	r6, #1
 801ab6a:	60b8      	str	r0, [r7, #8]
 801ab6c:	60f9      	str	r1, [r7, #12]
 801ab6e:	0030      	movs	r0, r6
 801ab70:	b011      	add	sp, #68	; 0x44
 801ab72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab74:	22d3      	movs	r2, #211	; 0xd3
 801ab76:	4b9e      	ldr	r3, [pc, #632]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801ab78:	0552      	lsls	r2, r2, #21
 801ab7a:	f7ef f905 	bl	8009d88 <__aeabi_dsub>
 801ab7e:	4a9d      	ldr	r2, [pc, #628]	; (801adf4 <__ieee754_rem_pio2+0x300>)
 801ab80:	4b9d      	ldr	r3, [pc, #628]	; (801adf8 <__ieee754_rem_pio2+0x304>)
 801ab82:	0004      	movs	r4, r0
 801ab84:	000d      	movs	r5, r1
 801ab86:	f7ef f8ff 	bl	8009d88 <__aeabi_dsub>
 801ab8a:	0002      	movs	r2, r0
 801ab8c:	000b      	movs	r3, r1
 801ab8e:	0020      	movs	r0, r4
 801ab90:	603a      	str	r2, [r7, #0]
 801ab92:	607b      	str	r3, [r7, #4]
 801ab94:	0029      	movs	r1, r5
 801ab96:	f7ef f8f7 	bl	8009d88 <__aeabi_dsub>
 801ab9a:	4a96      	ldr	r2, [pc, #600]	; (801adf4 <__ieee754_rem_pio2+0x300>)
 801ab9c:	4b96      	ldr	r3, [pc, #600]	; (801adf8 <__ieee754_rem_pio2+0x304>)
 801ab9e:	e7e1      	b.n	801ab64 <__ieee754_rem_pio2+0x70>
 801aba0:	0020      	movs	r0, r4
 801aba2:	0029      	movs	r1, r5
 801aba4:	4b8f      	ldr	r3, [pc, #572]	; (801ade4 <__ieee754_rem_pio2+0x2f0>)
 801aba6:	f7ed ff45 	bl	8008a34 <__aeabi_dadd>
 801abaa:	9b02      	ldr	r3, [sp, #8]
 801abac:	0004      	movs	r4, r0
 801abae:	000d      	movs	r5, r1
 801abb0:	42b3      	cmp	r3, r6
 801abb2:	d014      	beq.n	801abde <__ieee754_rem_pio2+0xea>
 801abb4:	4a8d      	ldr	r2, [pc, #564]	; (801adec <__ieee754_rem_pio2+0x2f8>)
 801abb6:	4b8e      	ldr	r3, [pc, #568]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801abb8:	f7ed ff3c 	bl	8008a34 <__aeabi_dadd>
 801abbc:	0002      	movs	r2, r0
 801abbe:	000b      	movs	r3, r1
 801abc0:	0020      	movs	r0, r4
 801abc2:	603a      	str	r2, [r7, #0]
 801abc4:	607b      	str	r3, [r7, #4]
 801abc6:	0029      	movs	r1, r5
 801abc8:	f7ef f8de 	bl	8009d88 <__aeabi_dsub>
 801abcc:	4a87      	ldr	r2, [pc, #540]	; (801adec <__ieee754_rem_pio2+0x2f8>)
 801abce:	4b88      	ldr	r3, [pc, #544]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801abd0:	f7ed ff30 	bl	8008a34 <__aeabi_dadd>
 801abd4:	2601      	movs	r6, #1
 801abd6:	60b8      	str	r0, [r7, #8]
 801abd8:	60f9      	str	r1, [r7, #12]
 801abda:	4276      	negs	r6, r6
 801abdc:	e7c7      	b.n	801ab6e <__ieee754_rem_pio2+0x7a>
 801abde:	22d3      	movs	r2, #211	; 0xd3
 801abe0:	4b83      	ldr	r3, [pc, #524]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801abe2:	0552      	lsls	r2, r2, #21
 801abe4:	f7ed ff26 	bl	8008a34 <__aeabi_dadd>
 801abe8:	4a82      	ldr	r2, [pc, #520]	; (801adf4 <__ieee754_rem_pio2+0x300>)
 801abea:	4b83      	ldr	r3, [pc, #524]	; (801adf8 <__ieee754_rem_pio2+0x304>)
 801abec:	0004      	movs	r4, r0
 801abee:	000d      	movs	r5, r1
 801abf0:	f7ed ff20 	bl	8008a34 <__aeabi_dadd>
 801abf4:	0002      	movs	r2, r0
 801abf6:	000b      	movs	r3, r1
 801abf8:	0020      	movs	r0, r4
 801abfa:	603a      	str	r2, [r7, #0]
 801abfc:	607b      	str	r3, [r7, #4]
 801abfe:	0029      	movs	r1, r5
 801ac00:	f7ef f8c2 	bl	8009d88 <__aeabi_dsub>
 801ac04:	4a7b      	ldr	r2, [pc, #492]	; (801adf4 <__ieee754_rem_pio2+0x300>)
 801ac06:	4b7c      	ldr	r3, [pc, #496]	; (801adf8 <__ieee754_rem_pio2+0x304>)
 801ac08:	e7e2      	b.n	801abd0 <__ieee754_rem_pio2+0xdc>
 801ac0a:	4b7c      	ldr	r3, [pc, #496]	; (801adfc <__ieee754_rem_pio2+0x308>)
 801ac0c:	9a02      	ldr	r2, [sp, #8]
 801ac0e:	429a      	cmp	r2, r3
 801ac10:	dd00      	ble.n	801ac14 <__ieee754_rem_pio2+0x120>
 801ac12:	e0d3      	b.n	801adbc <__ieee754_rem_pio2+0x2c8>
 801ac14:	0020      	movs	r0, r4
 801ac16:	0029      	movs	r1, r5
 801ac18:	f7ff fefc 	bl	801aa14 <fabs>
 801ac1c:	4a78      	ldr	r2, [pc, #480]	; (801ae00 <__ieee754_rem_pio2+0x30c>)
 801ac1e:	4b79      	ldr	r3, [pc, #484]	; (801ae04 <__ieee754_rem_pio2+0x310>)
 801ac20:	0004      	movs	r4, r0
 801ac22:	000d      	movs	r5, r1
 801ac24:	f7ee fe44 	bl	80098b0 <__aeabi_dmul>
 801ac28:	2200      	movs	r2, #0
 801ac2a:	4b77      	ldr	r3, [pc, #476]	; (801ae08 <__ieee754_rem_pio2+0x314>)
 801ac2c:	f7ed ff02 	bl	8008a34 <__aeabi_dadd>
 801ac30:	f7ef fc5a 	bl	800a4e8 <__aeabi_d2iz>
 801ac34:	0006      	movs	r6, r0
 801ac36:	f7ef fc8d 	bl	800a554 <__aeabi_i2d>
 801ac3a:	4a6b      	ldr	r2, [pc, #428]	; (801ade8 <__ieee754_rem_pio2+0x2f4>)
 801ac3c:	4b69      	ldr	r3, [pc, #420]	; (801ade4 <__ieee754_rem_pio2+0x2f0>)
 801ac3e:	9006      	str	r0, [sp, #24]
 801ac40:	9107      	str	r1, [sp, #28]
 801ac42:	f7ee fe35 	bl	80098b0 <__aeabi_dmul>
 801ac46:	0002      	movs	r2, r0
 801ac48:	000b      	movs	r3, r1
 801ac4a:	0020      	movs	r0, r4
 801ac4c:	0029      	movs	r1, r5
 801ac4e:	f7ef f89b 	bl	8009d88 <__aeabi_dsub>
 801ac52:	4a66      	ldr	r2, [pc, #408]	; (801adec <__ieee754_rem_pio2+0x2f8>)
 801ac54:	9004      	str	r0, [sp, #16]
 801ac56:	9105      	str	r1, [sp, #20]
 801ac58:	9806      	ldr	r0, [sp, #24]
 801ac5a:	9907      	ldr	r1, [sp, #28]
 801ac5c:	4b64      	ldr	r3, [pc, #400]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801ac5e:	f7ee fe27 	bl	80098b0 <__aeabi_dmul>
 801ac62:	0004      	movs	r4, r0
 801ac64:	000d      	movs	r5, r1
 801ac66:	2e1f      	cmp	r6, #31
 801ac68:	dc0f      	bgt.n	801ac8a <__ieee754_rem_pio2+0x196>
 801ac6a:	4a68      	ldr	r2, [pc, #416]	; (801ae0c <__ieee754_rem_pio2+0x318>)
 801ac6c:	1e73      	subs	r3, r6, #1
 801ac6e:	009b      	lsls	r3, r3, #2
 801ac70:	589b      	ldr	r3, [r3, r2]
 801ac72:	9a02      	ldr	r2, [sp, #8]
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d008      	beq.n	801ac8a <__ieee754_rem_pio2+0x196>
 801ac78:	9804      	ldr	r0, [sp, #16]
 801ac7a:	9905      	ldr	r1, [sp, #20]
 801ac7c:	0022      	movs	r2, r4
 801ac7e:	002b      	movs	r3, r5
 801ac80:	f7ef f882 	bl	8009d88 <__aeabi_dsub>
 801ac84:	6038      	str	r0, [r7, #0]
 801ac86:	6079      	str	r1, [r7, #4]
 801ac88:	e012      	b.n	801acb0 <__ieee754_rem_pio2+0x1bc>
 801ac8a:	0022      	movs	r2, r4
 801ac8c:	9804      	ldr	r0, [sp, #16]
 801ac8e:	9905      	ldr	r1, [sp, #20]
 801ac90:	002b      	movs	r3, r5
 801ac92:	f7ef f879 	bl	8009d88 <__aeabi_dsub>
 801ac96:	9b02      	ldr	r3, [sp, #8]
 801ac98:	151b      	asrs	r3, r3, #20
 801ac9a:	9308      	str	r3, [sp, #32]
 801ac9c:	9a08      	ldr	r2, [sp, #32]
 801ac9e:	004b      	lsls	r3, r1, #1
 801aca0:	0d5b      	lsrs	r3, r3, #21
 801aca2:	1ad3      	subs	r3, r2, r3
 801aca4:	2b10      	cmp	r3, #16
 801aca6:	dc21      	bgt.n	801acec <__ieee754_rem_pio2+0x1f8>
 801aca8:	0002      	movs	r2, r0
 801acaa:	000b      	movs	r3, r1
 801acac:	603a      	str	r2, [r7, #0]
 801acae:	607b      	str	r3, [r7, #4]
 801acb0:	9804      	ldr	r0, [sp, #16]
 801acb2:	9905      	ldr	r1, [sp, #20]
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	683a      	ldr	r2, [r7, #0]
 801acb8:	9302      	str	r3, [sp, #8]
 801acba:	9b02      	ldr	r3, [sp, #8]
 801acbc:	f7ef f864 	bl	8009d88 <__aeabi_dsub>
 801acc0:	0022      	movs	r2, r4
 801acc2:	002b      	movs	r3, r5
 801acc4:	f7ef f860 	bl	8009d88 <__aeabi_dsub>
 801acc8:	000b      	movs	r3, r1
 801acca:	0002      	movs	r2, r0
 801accc:	60ba      	str	r2, [r7, #8]
 801acce:	60fb      	str	r3, [r7, #12]
 801acd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	db00      	blt.n	801acd8 <__ieee754_rem_pio2+0x1e4>
 801acd6:	e74a      	b.n	801ab6e <__ieee754_rem_pio2+0x7a>
 801acd8:	2380      	movs	r3, #128	; 0x80
 801acda:	061b      	lsls	r3, r3, #24
 801acdc:	469c      	mov	ip, r3
 801acde:	9c02      	ldr	r4, [sp, #8]
 801ace0:	18c9      	adds	r1, r1, r3
 801ace2:	4464      	add	r4, ip
 801ace4:	607c      	str	r4, [r7, #4]
 801ace6:	60b8      	str	r0, [r7, #8]
 801ace8:	60f9      	str	r1, [r7, #12]
 801acea:	e776      	b.n	801abda <__ieee754_rem_pio2+0xe6>
 801acec:	22d3      	movs	r2, #211	; 0xd3
 801acee:	9806      	ldr	r0, [sp, #24]
 801acf0:	9907      	ldr	r1, [sp, #28]
 801acf2:	4b3f      	ldr	r3, [pc, #252]	; (801adf0 <__ieee754_rem_pio2+0x2fc>)
 801acf4:	0552      	lsls	r2, r2, #21
 801acf6:	f7ee fddb 	bl	80098b0 <__aeabi_dmul>
 801acfa:	0004      	movs	r4, r0
 801acfc:	000d      	movs	r5, r1
 801acfe:	0002      	movs	r2, r0
 801ad00:	000b      	movs	r3, r1
 801ad02:	9804      	ldr	r0, [sp, #16]
 801ad04:	9905      	ldr	r1, [sp, #20]
 801ad06:	f7ef f83f 	bl	8009d88 <__aeabi_dsub>
 801ad0a:	0002      	movs	r2, r0
 801ad0c:	000b      	movs	r3, r1
 801ad0e:	9002      	str	r0, [sp, #8]
 801ad10:	9103      	str	r1, [sp, #12]
 801ad12:	9804      	ldr	r0, [sp, #16]
 801ad14:	9905      	ldr	r1, [sp, #20]
 801ad16:	f7ef f837 	bl	8009d88 <__aeabi_dsub>
 801ad1a:	0022      	movs	r2, r4
 801ad1c:	002b      	movs	r3, r5
 801ad1e:	f7ef f833 	bl	8009d88 <__aeabi_dsub>
 801ad22:	0004      	movs	r4, r0
 801ad24:	000d      	movs	r5, r1
 801ad26:	9806      	ldr	r0, [sp, #24]
 801ad28:	9907      	ldr	r1, [sp, #28]
 801ad2a:	4a32      	ldr	r2, [pc, #200]	; (801adf4 <__ieee754_rem_pio2+0x300>)
 801ad2c:	4b32      	ldr	r3, [pc, #200]	; (801adf8 <__ieee754_rem_pio2+0x304>)
 801ad2e:	f7ee fdbf 	bl	80098b0 <__aeabi_dmul>
 801ad32:	0022      	movs	r2, r4
 801ad34:	002b      	movs	r3, r5
 801ad36:	f7ef f827 	bl	8009d88 <__aeabi_dsub>
 801ad3a:	0002      	movs	r2, r0
 801ad3c:	000b      	movs	r3, r1
 801ad3e:	0004      	movs	r4, r0
 801ad40:	000d      	movs	r5, r1
 801ad42:	9802      	ldr	r0, [sp, #8]
 801ad44:	9903      	ldr	r1, [sp, #12]
 801ad46:	f7ef f81f 	bl	8009d88 <__aeabi_dsub>
 801ad4a:	9a08      	ldr	r2, [sp, #32]
 801ad4c:	004b      	lsls	r3, r1, #1
 801ad4e:	0d5b      	lsrs	r3, r3, #21
 801ad50:	1ad3      	subs	r3, r2, r3
 801ad52:	2b31      	cmp	r3, #49	; 0x31
 801ad54:	dc08      	bgt.n	801ad68 <__ieee754_rem_pio2+0x274>
 801ad56:	0002      	movs	r2, r0
 801ad58:	000b      	movs	r3, r1
 801ad5a:	603a      	str	r2, [r7, #0]
 801ad5c:	607b      	str	r3, [r7, #4]
 801ad5e:	9a02      	ldr	r2, [sp, #8]
 801ad60:	9b03      	ldr	r3, [sp, #12]
 801ad62:	9204      	str	r2, [sp, #16]
 801ad64:	9305      	str	r3, [sp, #20]
 801ad66:	e7a3      	b.n	801acb0 <__ieee754_rem_pio2+0x1bc>
 801ad68:	22b8      	movs	r2, #184	; 0xb8
 801ad6a:	9806      	ldr	r0, [sp, #24]
 801ad6c:	9907      	ldr	r1, [sp, #28]
 801ad6e:	4b22      	ldr	r3, [pc, #136]	; (801adf8 <__ieee754_rem_pio2+0x304>)
 801ad70:	0592      	lsls	r2, r2, #22
 801ad72:	f7ee fd9d 	bl	80098b0 <__aeabi_dmul>
 801ad76:	0004      	movs	r4, r0
 801ad78:	000d      	movs	r5, r1
 801ad7a:	0002      	movs	r2, r0
 801ad7c:	000b      	movs	r3, r1
 801ad7e:	9802      	ldr	r0, [sp, #8]
 801ad80:	9903      	ldr	r1, [sp, #12]
 801ad82:	f7ef f801 	bl	8009d88 <__aeabi_dsub>
 801ad86:	0002      	movs	r2, r0
 801ad88:	000b      	movs	r3, r1
 801ad8a:	9004      	str	r0, [sp, #16]
 801ad8c:	9105      	str	r1, [sp, #20]
 801ad8e:	9802      	ldr	r0, [sp, #8]
 801ad90:	9903      	ldr	r1, [sp, #12]
 801ad92:	f7ee fff9 	bl	8009d88 <__aeabi_dsub>
 801ad96:	0022      	movs	r2, r4
 801ad98:	002b      	movs	r3, r5
 801ad9a:	f7ee fff5 	bl	8009d88 <__aeabi_dsub>
 801ad9e:	0004      	movs	r4, r0
 801ada0:	000d      	movs	r5, r1
 801ada2:	9806      	ldr	r0, [sp, #24]
 801ada4:	9907      	ldr	r1, [sp, #28]
 801ada6:	4a1a      	ldr	r2, [pc, #104]	; (801ae10 <__ieee754_rem_pio2+0x31c>)
 801ada8:	4b1a      	ldr	r3, [pc, #104]	; (801ae14 <__ieee754_rem_pio2+0x320>)
 801adaa:	f7ee fd81 	bl	80098b0 <__aeabi_dmul>
 801adae:	0022      	movs	r2, r4
 801adb0:	002b      	movs	r3, r5
 801adb2:	f7ee ffe9 	bl	8009d88 <__aeabi_dsub>
 801adb6:	0004      	movs	r4, r0
 801adb8:	000d      	movs	r5, r1
 801adba:	e75d      	b.n	801ac78 <__ieee754_rem_pio2+0x184>
 801adbc:	4b16      	ldr	r3, [pc, #88]	; (801ae18 <__ieee754_rem_pio2+0x324>)
 801adbe:	9a02      	ldr	r2, [sp, #8]
 801adc0:	429a      	cmp	r2, r3
 801adc2:	dd2b      	ble.n	801ae1c <__ieee754_rem_pio2+0x328>
 801adc4:	0022      	movs	r2, r4
 801adc6:	002b      	movs	r3, r5
 801adc8:	0020      	movs	r0, r4
 801adca:	0029      	movs	r1, r5
 801adcc:	f7ee ffdc 	bl	8009d88 <__aeabi_dsub>
 801add0:	60b8      	str	r0, [r7, #8]
 801add2:	60f9      	str	r1, [r7, #12]
 801add4:	6038      	str	r0, [r7, #0]
 801add6:	6079      	str	r1, [r7, #4]
 801add8:	e6a1      	b.n	801ab1e <__ieee754_rem_pio2+0x2a>
 801adda:	46c0      	nop			; (mov r8, r8)
 801addc:	3fe921fb 	.word	0x3fe921fb
 801ade0:	4002d97b 	.word	0x4002d97b
 801ade4:	3ff921fb 	.word	0x3ff921fb
 801ade8:	54400000 	.word	0x54400000
 801adec:	1a626331 	.word	0x1a626331
 801adf0:	3dd0b461 	.word	0x3dd0b461
 801adf4:	2e037073 	.word	0x2e037073
 801adf8:	3ba3198a 	.word	0x3ba3198a
 801adfc:	413921fb 	.word	0x413921fb
 801ae00:	6dc9c883 	.word	0x6dc9c883
 801ae04:	3fe45f30 	.word	0x3fe45f30
 801ae08:	3fe00000 	.word	0x3fe00000
 801ae0c:	0801ca68 	.word	0x0801ca68
 801ae10:	252049c1 	.word	0x252049c1
 801ae14:	397b839a 	.word	0x397b839a
 801ae18:	7fefffff 	.word	0x7fefffff
 801ae1c:	9a02      	ldr	r2, [sp, #8]
 801ae1e:	0020      	movs	r0, r4
 801ae20:	1516      	asrs	r6, r2, #20
 801ae22:	4a29      	ldr	r2, [pc, #164]	; (801aec8 <__ieee754_rem_pio2+0x3d4>)
 801ae24:	18b6      	adds	r6, r6, r2
 801ae26:	9a02      	ldr	r2, [sp, #8]
 801ae28:	0533      	lsls	r3, r6, #20
 801ae2a:	1ad5      	subs	r5, r2, r3
 801ae2c:	0029      	movs	r1, r5
 801ae2e:	f7ef fb5b 	bl	800a4e8 <__aeabi_d2iz>
 801ae32:	f7ef fb8f 	bl	800a554 <__aeabi_i2d>
 801ae36:	0002      	movs	r2, r0
 801ae38:	000b      	movs	r3, r1
 801ae3a:	0020      	movs	r0, r4
 801ae3c:	0029      	movs	r1, r5
 801ae3e:	920a      	str	r2, [sp, #40]	; 0x28
 801ae40:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae42:	f7ee ffa1 	bl	8009d88 <__aeabi_dsub>
 801ae46:	2200      	movs	r2, #0
 801ae48:	4b20      	ldr	r3, [pc, #128]	; (801aecc <__ieee754_rem_pio2+0x3d8>)
 801ae4a:	f7ee fd31 	bl	80098b0 <__aeabi_dmul>
 801ae4e:	000d      	movs	r5, r1
 801ae50:	0004      	movs	r4, r0
 801ae52:	f7ef fb49 	bl	800a4e8 <__aeabi_d2iz>
 801ae56:	f7ef fb7d 	bl	800a554 <__aeabi_i2d>
 801ae5a:	0002      	movs	r2, r0
 801ae5c:	000b      	movs	r3, r1
 801ae5e:	0020      	movs	r0, r4
 801ae60:	0029      	movs	r1, r5
 801ae62:	920c      	str	r2, [sp, #48]	; 0x30
 801ae64:	930d      	str	r3, [sp, #52]	; 0x34
 801ae66:	f7ee ff8f 	bl	8009d88 <__aeabi_dsub>
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	4b17      	ldr	r3, [pc, #92]	; (801aecc <__ieee754_rem_pio2+0x3d8>)
 801ae6e:	f7ee fd1f 	bl	80098b0 <__aeabi_dmul>
 801ae72:	2503      	movs	r5, #3
 801ae74:	900e      	str	r0, [sp, #56]	; 0x38
 801ae76:	910f      	str	r1, [sp, #60]	; 0x3c
 801ae78:	ac0a      	add	r4, sp, #40	; 0x28
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	6920      	ldr	r0, [r4, #16]
 801ae7e:	6961      	ldr	r1, [r4, #20]
 801ae80:	2300      	movs	r3, #0
 801ae82:	9502      	str	r5, [sp, #8]
 801ae84:	3c08      	subs	r4, #8
 801ae86:	3d01      	subs	r5, #1
 801ae88:	f7ec ff80 	bl	8007d8c <__aeabi_dcmpeq>
 801ae8c:	2800      	cmp	r0, #0
 801ae8e:	d1f4      	bne.n	801ae7a <__ieee754_rem_pio2+0x386>
 801ae90:	4b0f      	ldr	r3, [pc, #60]	; (801aed0 <__ieee754_rem_pio2+0x3dc>)
 801ae92:	0032      	movs	r2, r6
 801ae94:	9301      	str	r3, [sp, #4]
 801ae96:	2302      	movs	r3, #2
 801ae98:	0039      	movs	r1, r7
 801ae9a:	9300      	str	r3, [sp, #0]
 801ae9c:	a80a      	add	r0, sp, #40	; 0x28
 801ae9e:	9b02      	ldr	r3, [sp, #8]
 801aea0:	f000 f98e 	bl	801b1c0 <__kernel_rem_pio2>
 801aea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aea6:	0006      	movs	r6, r0
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	db00      	blt.n	801aeae <__ieee754_rem_pio2+0x3ba>
 801aeac:	e65f      	b.n	801ab6e <__ieee754_rem_pio2+0x7a>
 801aeae:	2180      	movs	r1, #128	; 0x80
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	683a      	ldr	r2, [r7, #0]
 801aeb4:	0609      	lsls	r1, r1, #24
 801aeb6:	1843      	adds	r3, r0, r1
 801aeb8:	68f8      	ldr	r0, [r7, #12]
 801aeba:	603a      	str	r2, [r7, #0]
 801aebc:	607b      	str	r3, [r7, #4]
 801aebe:	68ba      	ldr	r2, [r7, #8]
 801aec0:	1843      	adds	r3, r0, r1
 801aec2:	60ba      	str	r2, [r7, #8]
 801aec4:	60fb      	str	r3, [r7, #12]
 801aec6:	e688      	b.n	801abda <__ieee754_rem_pio2+0xe6>
 801aec8:	fffffbea 	.word	0xfffffbea
 801aecc:	41700000 	.word	0x41700000
 801aed0:	0801cae8 	.word	0x0801cae8

0801aed4 <__ieee754_sqrt>:
 801aed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aed6:	000b      	movs	r3, r1
 801aed8:	000c      	movs	r4, r1
 801aeda:	4956      	ldr	r1, [pc, #344]	; (801b034 <__ieee754_sqrt+0x160>)
 801aedc:	0005      	movs	r5, r0
 801aede:	0002      	movs	r2, r0
 801aee0:	0008      	movs	r0, r1
 801aee2:	b085      	sub	sp, #20
 801aee4:	4020      	ands	r0, r4
 801aee6:	4288      	cmp	r0, r1
 801aee8:	d10f      	bne.n	801af0a <__ieee754_sqrt+0x36>
 801aeea:	0028      	movs	r0, r5
 801aeec:	0021      	movs	r1, r4
 801aeee:	f7ee fcdf 	bl	80098b0 <__aeabi_dmul>
 801aef2:	0002      	movs	r2, r0
 801aef4:	000b      	movs	r3, r1
 801aef6:	0028      	movs	r0, r5
 801aef8:	0021      	movs	r1, r4
 801aefa:	f7ed fd9b 	bl	8008a34 <__aeabi_dadd>
 801aefe:	0005      	movs	r5, r0
 801af00:	000c      	movs	r4, r1
 801af02:	0028      	movs	r0, r5
 801af04:	0021      	movs	r1, r4
 801af06:	b005      	add	sp, #20
 801af08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af0a:	2c00      	cmp	r4, #0
 801af0c:	dc10      	bgt.n	801af30 <__ieee754_sqrt+0x5c>
 801af0e:	0061      	lsls	r1, r4, #1
 801af10:	0849      	lsrs	r1, r1, #1
 801af12:	4329      	orrs	r1, r5
 801af14:	d0f5      	beq.n	801af02 <__ieee754_sqrt+0x2e>
 801af16:	2100      	movs	r1, #0
 801af18:	428c      	cmp	r4, r1
 801af1a:	d100      	bne.n	801af1e <__ieee754_sqrt+0x4a>
 801af1c:	e080      	b.n	801b020 <__ieee754_sqrt+0x14c>
 801af1e:	0028      	movs	r0, r5
 801af20:	0021      	movs	r1, r4
 801af22:	f7ee ff31 	bl	8009d88 <__aeabi_dsub>
 801af26:	0002      	movs	r2, r0
 801af28:	000b      	movs	r3, r1
 801af2a:	f7ee f8bf 	bl	80090ac <__aeabi_ddiv>
 801af2e:	e7e6      	b.n	801aefe <__ieee754_sqrt+0x2a>
 801af30:	1521      	asrs	r1, r4, #20
 801af32:	d075      	beq.n	801b020 <__ieee754_sqrt+0x14c>
 801af34:	4840      	ldr	r0, [pc, #256]	; (801b038 <__ieee754_sqrt+0x164>)
 801af36:	031b      	lsls	r3, r3, #12
 801af38:	180c      	adds	r4, r1, r0
 801af3a:	2080      	movs	r0, #128	; 0x80
 801af3c:	0b1b      	lsrs	r3, r3, #12
 801af3e:	0340      	lsls	r0, r0, #13
 801af40:	4303      	orrs	r3, r0
 801af42:	07c9      	lsls	r1, r1, #31
 801af44:	d403      	bmi.n	801af4e <__ieee754_sqrt+0x7a>
 801af46:	0fd1      	lsrs	r1, r2, #31
 801af48:	005b      	lsls	r3, r3, #1
 801af4a:	185b      	adds	r3, r3, r1
 801af4c:	0052      	lsls	r2, r2, #1
 801af4e:	1061      	asrs	r1, r4, #1
 801af50:	2400      	movs	r4, #0
 801af52:	9103      	str	r1, [sp, #12]
 801af54:	005b      	lsls	r3, r3, #1
 801af56:	0fd1      	lsrs	r1, r2, #31
 801af58:	185b      	adds	r3, r3, r1
 801af5a:	2180      	movs	r1, #128	; 0x80
 801af5c:	2516      	movs	r5, #22
 801af5e:	0020      	movs	r0, r4
 801af60:	0052      	lsls	r2, r2, #1
 801af62:	0389      	lsls	r1, r1, #14
 801af64:	1846      	adds	r6, r0, r1
 801af66:	429e      	cmp	r6, r3
 801af68:	dc02      	bgt.n	801af70 <__ieee754_sqrt+0x9c>
 801af6a:	1870      	adds	r0, r6, r1
 801af6c:	1b9b      	subs	r3, r3, r6
 801af6e:	1864      	adds	r4, r4, r1
 801af70:	0fd6      	lsrs	r6, r2, #31
 801af72:	005b      	lsls	r3, r3, #1
 801af74:	3d01      	subs	r5, #1
 801af76:	18f3      	adds	r3, r6, r3
 801af78:	0052      	lsls	r2, r2, #1
 801af7a:	0849      	lsrs	r1, r1, #1
 801af7c:	2d00      	cmp	r5, #0
 801af7e:	d1f1      	bne.n	801af64 <__ieee754_sqrt+0x90>
 801af80:	2620      	movs	r6, #32
 801af82:	2780      	movs	r7, #128	; 0x80
 801af84:	0029      	movs	r1, r5
 801af86:	9601      	str	r6, [sp, #4]
 801af88:	063f      	lsls	r7, r7, #24
 801af8a:	197e      	adds	r6, r7, r5
 801af8c:	46b4      	mov	ip, r6
 801af8e:	4283      	cmp	r3, r0
 801af90:	dc02      	bgt.n	801af98 <__ieee754_sqrt+0xc4>
 801af92:	d114      	bne.n	801afbe <__ieee754_sqrt+0xea>
 801af94:	4296      	cmp	r6, r2
 801af96:	d812      	bhi.n	801afbe <__ieee754_sqrt+0xea>
 801af98:	4665      	mov	r5, ip
 801af9a:	4666      	mov	r6, ip
 801af9c:	19ed      	adds	r5, r5, r7
 801af9e:	9002      	str	r0, [sp, #8]
 801afa0:	2e00      	cmp	r6, #0
 801afa2:	da03      	bge.n	801afac <__ieee754_sqrt+0xd8>
 801afa4:	43ee      	mvns	r6, r5
 801afa6:	0ff6      	lsrs	r6, r6, #31
 801afa8:	1986      	adds	r6, r0, r6
 801afaa:	9602      	str	r6, [sp, #8]
 801afac:	1a1b      	subs	r3, r3, r0
 801afae:	4562      	cmp	r2, ip
 801afb0:	4180      	sbcs	r0, r0
 801afb2:	4240      	negs	r0, r0
 801afb4:	1a1b      	subs	r3, r3, r0
 801afb6:	4660      	mov	r0, ip
 801afb8:	1a12      	subs	r2, r2, r0
 801afba:	9802      	ldr	r0, [sp, #8]
 801afbc:	19c9      	adds	r1, r1, r7
 801afbe:	0fd6      	lsrs	r6, r2, #31
 801afc0:	005b      	lsls	r3, r3, #1
 801afc2:	199b      	adds	r3, r3, r6
 801afc4:	9e01      	ldr	r6, [sp, #4]
 801afc6:	0052      	lsls	r2, r2, #1
 801afc8:	3e01      	subs	r6, #1
 801afca:	087f      	lsrs	r7, r7, #1
 801afcc:	9601      	str	r6, [sp, #4]
 801afce:	2e00      	cmp	r6, #0
 801afd0:	d1db      	bne.n	801af8a <__ieee754_sqrt+0xb6>
 801afd2:	4313      	orrs	r3, r2
 801afd4:	d003      	beq.n	801afde <__ieee754_sqrt+0x10a>
 801afd6:	1c4b      	adds	r3, r1, #1
 801afd8:	d127      	bne.n	801b02a <__ieee754_sqrt+0x156>
 801afda:	0031      	movs	r1, r6
 801afdc:	3401      	adds	r4, #1
 801afde:	4b17      	ldr	r3, [pc, #92]	; (801b03c <__ieee754_sqrt+0x168>)
 801afe0:	1060      	asrs	r0, r4, #1
 801afe2:	18c0      	adds	r0, r0, r3
 801afe4:	0849      	lsrs	r1, r1, #1
 801afe6:	07e3      	lsls	r3, r4, #31
 801afe8:	d502      	bpl.n	801aff0 <__ieee754_sqrt+0x11c>
 801afea:	2380      	movs	r3, #128	; 0x80
 801afec:	061b      	lsls	r3, r3, #24
 801afee:	4319      	orrs	r1, r3
 801aff0:	9b03      	ldr	r3, [sp, #12]
 801aff2:	000d      	movs	r5, r1
 801aff4:	051c      	lsls	r4, r3, #20
 801aff6:	1823      	adds	r3, r4, r0
 801aff8:	001c      	movs	r4, r3
 801affa:	e782      	b.n	801af02 <__ieee754_sqrt+0x2e>
 801affc:	0ad3      	lsrs	r3, r2, #11
 801affe:	3815      	subs	r0, #21
 801b000:	0552      	lsls	r2, r2, #21
 801b002:	2b00      	cmp	r3, #0
 801b004:	d0fa      	beq.n	801affc <__ieee754_sqrt+0x128>
 801b006:	2480      	movs	r4, #128	; 0x80
 801b008:	0364      	lsls	r4, r4, #13
 801b00a:	4223      	tst	r3, r4
 801b00c:	d00a      	beq.n	801b024 <__ieee754_sqrt+0x150>
 801b00e:	2420      	movs	r4, #32
 801b010:	0016      	movs	r6, r2
 801b012:	1a64      	subs	r4, r4, r1
 801b014:	40e6      	lsrs	r6, r4
 801b016:	1e4d      	subs	r5, r1, #1
 801b018:	408a      	lsls	r2, r1
 801b01a:	4333      	orrs	r3, r6
 801b01c:	1b41      	subs	r1, r0, r5
 801b01e:	e789      	b.n	801af34 <__ieee754_sqrt+0x60>
 801b020:	2000      	movs	r0, #0
 801b022:	e7ee      	b.n	801b002 <__ieee754_sqrt+0x12e>
 801b024:	005b      	lsls	r3, r3, #1
 801b026:	3101      	adds	r1, #1
 801b028:	e7ef      	b.n	801b00a <__ieee754_sqrt+0x136>
 801b02a:	2301      	movs	r3, #1
 801b02c:	3101      	adds	r1, #1
 801b02e:	4399      	bics	r1, r3
 801b030:	e7d5      	b.n	801afde <__ieee754_sqrt+0x10a>
 801b032:	46c0      	nop			; (mov r8, r8)
 801b034:	7ff00000 	.word	0x7ff00000
 801b038:	fffffc01 	.word	0xfffffc01
 801b03c:	3fe00000 	.word	0x3fe00000

0801b040 <__kernel_cos>:
 801b040:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b042:	b087      	sub	sp, #28
 801b044:	9204      	str	r2, [sp, #16]
 801b046:	9305      	str	r3, [sp, #20]
 801b048:	004b      	lsls	r3, r1, #1
 801b04a:	085b      	lsrs	r3, r3, #1
 801b04c:	9300      	str	r3, [sp, #0]
 801b04e:	23f9      	movs	r3, #249	; 0xf9
 801b050:	9a00      	ldr	r2, [sp, #0]
 801b052:	0007      	movs	r7, r0
 801b054:	000e      	movs	r6, r1
 801b056:	059b      	lsls	r3, r3, #22
 801b058:	429a      	cmp	r2, r3
 801b05a:	da04      	bge.n	801b066 <__kernel_cos+0x26>
 801b05c:	f7ef fa44 	bl	800a4e8 <__aeabi_d2iz>
 801b060:	2800      	cmp	r0, #0
 801b062:	d100      	bne.n	801b066 <__kernel_cos+0x26>
 801b064:	e084      	b.n	801b170 <__kernel_cos+0x130>
 801b066:	003a      	movs	r2, r7
 801b068:	0033      	movs	r3, r6
 801b06a:	0038      	movs	r0, r7
 801b06c:	0031      	movs	r1, r6
 801b06e:	f7ee fc1f 	bl	80098b0 <__aeabi_dmul>
 801b072:	2200      	movs	r2, #0
 801b074:	4b40      	ldr	r3, [pc, #256]	; (801b178 <__kernel_cos+0x138>)
 801b076:	0004      	movs	r4, r0
 801b078:	000d      	movs	r5, r1
 801b07a:	f7ee fc19 	bl	80098b0 <__aeabi_dmul>
 801b07e:	4a3f      	ldr	r2, [pc, #252]	; (801b17c <__kernel_cos+0x13c>)
 801b080:	9002      	str	r0, [sp, #8]
 801b082:	9103      	str	r1, [sp, #12]
 801b084:	4b3e      	ldr	r3, [pc, #248]	; (801b180 <__kernel_cos+0x140>)
 801b086:	0020      	movs	r0, r4
 801b088:	0029      	movs	r1, r5
 801b08a:	f7ee fc11 	bl	80098b0 <__aeabi_dmul>
 801b08e:	4a3d      	ldr	r2, [pc, #244]	; (801b184 <__kernel_cos+0x144>)
 801b090:	4b3d      	ldr	r3, [pc, #244]	; (801b188 <__kernel_cos+0x148>)
 801b092:	f7ed fccf 	bl	8008a34 <__aeabi_dadd>
 801b096:	0022      	movs	r2, r4
 801b098:	002b      	movs	r3, r5
 801b09a:	f7ee fc09 	bl	80098b0 <__aeabi_dmul>
 801b09e:	4a3b      	ldr	r2, [pc, #236]	; (801b18c <__kernel_cos+0x14c>)
 801b0a0:	4b3b      	ldr	r3, [pc, #236]	; (801b190 <__kernel_cos+0x150>)
 801b0a2:	f7ee fe71 	bl	8009d88 <__aeabi_dsub>
 801b0a6:	0022      	movs	r2, r4
 801b0a8:	002b      	movs	r3, r5
 801b0aa:	f7ee fc01 	bl	80098b0 <__aeabi_dmul>
 801b0ae:	4a39      	ldr	r2, [pc, #228]	; (801b194 <__kernel_cos+0x154>)
 801b0b0:	4b39      	ldr	r3, [pc, #228]	; (801b198 <__kernel_cos+0x158>)
 801b0b2:	f7ed fcbf 	bl	8008a34 <__aeabi_dadd>
 801b0b6:	0022      	movs	r2, r4
 801b0b8:	002b      	movs	r3, r5
 801b0ba:	f7ee fbf9 	bl	80098b0 <__aeabi_dmul>
 801b0be:	4a37      	ldr	r2, [pc, #220]	; (801b19c <__kernel_cos+0x15c>)
 801b0c0:	4b37      	ldr	r3, [pc, #220]	; (801b1a0 <__kernel_cos+0x160>)
 801b0c2:	f7ee fe61 	bl	8009d88 <__aeabi_dsub>
 801b0c6:	0022      	movs	r2, r4
 801b0c8:	002b      	movs	r3, r5
 801b0ca:	f7ee fbf1 	bl	80098b0 <__aeabi_dmul>
 801b0ce:	4a35      	ldr	r2, [pc, #212]	; (801b1a4 <__kernel_cos+0x164>)
 801b0d0:	4b35      	ldr	r3, [pc, #212]	; (801b1a8 <__kernel_cos+0x168>)
 801b0d2:	f7ed fcaf 	bl	8008a34 <__aeabi_dadd>
 801b0d6:	0022      	movs	r2, r4
 801b0d8:	002b      	movs	r3, r5
 801b0da:	f7ee fbe9 	bl	80098b0 <__aeabi_dmul>
 801b0de:	0022      	movs	r2, r4
 801b0e0:	002b      	movs	r3, r5
 801b0e2:	f7ee fbe5 	bl	80098b0 <__aeabi_dmul>
 801b0e6:	9a04      	ldr	r2, [sp, #16]
 801b0e8:	9b05      	ldr	r3, [sp, #20]
 801b0ea:	0004      	movs	r4, r0
 801b0ec:	000d      	movs	r5, r1
 801b0ee:	0038      	movs	r0, r7
 801b0f0:	0031      	movs	r1, r6
 801b0f2:	f7ee fbdd 	bl	80098b0 <__aeabi_dmul>
 801b0f6:	0002      	movs	r2, r0
 801b0f8:	000b      	movs	r3, r1
 801b0fa:	0020      	movs	r0, r4
 801b0fc:	0029      	movs	r1, r5
 801b0fe:	f7ee fe43 	bl	8009d88 <__aeabi_dsub>
 801b102:	4b2a      	ldr	r3, [pc, #168]	; (801b1ac <__kernel_cos+0x16c>)
 801b104:	9a00      	ldr	r2, [sp, #0]
 801b106:	0004      	movs	r4, r0
 801b108:	000d      	movs	r5, r1
 801b10a:	429a      	cmp	r2, r3
 801b10c:	dc0d      	bgt.n	801b12a <__kernel_cos+0xea>
 801b10e:	0002      	movs	r2, r0
 801b110:	000b      	movs	r3, r1
 801b112:	9802      	ldr	r0, [sp, #8]
 801b114:	9903      	ldr	r1, [sp, #12]
 801b116:	f7ee fe37 	bl	8009d88 <__aeabi_dsub>
 801b11a:	0002      	movs	r2, r0
 801b11c:	2000      	movs	r0, #0
 801b11e:	000b      	movs	r3, r1
 801b120:	4923      	ldr	r1, [pc, #140]	; (801b1b0 <__kernel_cos+0x170>)
 801b122:	f7ee fe31 	bl	8009d88 <__aeabi_dsub>
 801b126:	b007      	add	sp, #28
 801b128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b12a:	4b22      	ldr	r3, [pc, #136]	; (801b1b4 <__kernel_cos+0x174>)
 801b12c:	9a00      	ldr	r2, [sp, #0]
 801b12e:	2600      	movs	r6, #0
 801b130:	429a      	cmp	r2, r3
 801b132:	dc1b      	bgt.n	801b16c <__kernel_cos+0x12c>
 801b134:	0013      	movs	r3, r2
 801b136:	4a20      	ldr	r2, [pc, #128]	; (801b1b8 <__kernel_cos+0x178>)
 801b138:	4694      	mov	ip, r2
 801b13a:	4463      	add	r3, ip
 801b13c:	001f      	movs	r7, r3
 801b13e:	0032      	movs	r2, r6
 801b140:	003b      	movs	r3, r7
 801b142:	2000      	movs	r0, #0
 801b144:	491a      	ldr	r1, [pc, #104]	; (801b1b0 <__kernel_cos+0x170>)
 801b146:	f7ee fe1f 	bl	8009d88 <__aeabi_dsub>
 801b14a:	0032      	movs	r2, r6
 801b14c:	003b      	movs	r3, r7
 801b14e:	9000      	str	r0, [sp, #0]
 801b150:	9101      	str	r1, [sp, #4]
 801b152:	9802      	ldr	r0, [sp, #8]
 801b154:	9903      	ldr	r1, [sp, #12]
 801b156:	f7ee fe17 	bl	8009d88 <__aeabi_dsub>
 801b15a:	0022      	movs	r2, r4
 801b15c:	002b      	movs	r3, r5
 801b15e:	f7ee fe13 	bl	8009d88 <__aeabi_dsub>
 801b162:	0002      	movs	r2, r0
 801b164:	000b      	movs	r3, r1
 801b166:	9800      	ldr	r0, [sp, #0]
 801b168:	9901      	ldr	r1, [sp, #4]
 801b16a:	e7da      	b.n	801b122 <__kernel_cos+0xe2>
 801b16c:	4f13      	ldr	r7, [pc, #76]	; (801b1bc <__kernel_cos+0x17c>)
 801b16e:	e7e6      	b.n	801b13e <__kernel_cos+0xfe>
 801b170:	2000      	movs	r0, #0
 801b172:	490f      	ldr	r1, [pc, #60]	; (801b1b0 <__kernel_cos+0x170>)
 801b174:	e7d7      	b.n	801b126 <__kernel_cos+0xe6>
 801b176:	46c0      	nop			; (mov r8, r8)
 801b178:	3fe00000 	.word	0x3fe00000
 801b17c:	be8838d4 	.word	0xbe8838d4
 801b180:	bda8fae9 	.word	0xbda8fae9
 801b184:	bdb4b1c4 	.word	0xbdb4b1c4
 801b188:	3e21ee9e 	.word	0x3e21ee9e
 801b18c:	809c52ad 	.word	0x809c52ad
 801b190:	3e927e4f 	.word	0x3e927e4f
 801b194:	19cb1590 	.word	0x19cb1590
 801b198:	3efa01a0 	.word	0x3efa01a0
 801b19c:	16c15177 	.word	0x16c15177
 801b1a0:	3f56c16c 	.word	0x3f56c16c
 801b1a4:	5555554c 	.word	0x5555554c
 801b1a8:	3fa55555 	.word	0x3fa55555
 801b1ac:	3fd33332 	.word	0x3fd33332
 801b1b0:	3ff00000 	.word	0x3ff00000
 801b1b4:	3fe90000 	.word	0x3fe90000
 801b1b8:	ffe00000 	.word	0xffe00000
 801b1bc:	3fd20000 	.word	0x3fd20000

0801b1c0 <__kernel_rem_pio2>:
 801b1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1c2:	4ccb      	ldr	r4, [pc, #812]	; (801b4f0 <__kernel_rem_pio2+0x330>)
 801b1c4:	44a5      	add	sp, r4
 801b1c6:	930d      	str	r3, [sp, #52]	; 0x34
 801b1c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b1ca:	0014      	movs	r4, r2
 801b1cc:	009a      	lsls	r2, r3, #2
 801b1ce:	4bc9      	ldr	r3, [pc, #804]	; (801b4f4 <__kernel_rem_pio2+0x334>)
 801b1d0:	900e      	str	r0, [sp, #56]	; 0x38
 801b1d2:	58d3      	ldr	r3, [r2, r3]
 801b1d4:	9107      	str	r1, [sp, #28]
 801b1d6:	930a      	str	r3, [sp, #40]	; 0x28
 801b1d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1da:	3b01      	subs	r3, #1
 801b1dc:	930c      	str	r3, [sp, #48]	; 0x30
 801b1de:	2300      	movs	r3, #0
 801b1e0:	9300      	str	r3, [sp, #0]
 801b1e2:	0023      	movs	r3, r4
 801b1e4:	3314      	adds	r3, #20
 801b1e6:	db04      	blt.n	801b1f2 <__kernel_rem_pio2+0x32>
 801b1e8:	2118      	movs	r1, #24
 801b1ea:	1ee0      	subs	r0, r4, #3
 801b1ec:	f7ec fcc6 	bl	8007b7c <__divsi3>
 801b1f0:	9000      	str	r0, [sp, #0]
 801b1f2:	2218      	movs	r2, #24
 801b1f4:	9b00      	ldr	r3, [sp, #0]
 801b1f6:	4252      	negs	r2, r2
 801b1f8:	3301      	adds	r3, #1
 801b1fa:	435a      	muls	r2, r3
 801b1fc:	1913      	adds	r3, r2, r4
 801b1fe:	9302      	str	r3, [sp, #8]
 801b200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b202:	9b00      	ldr	r3, [sp, #0]
 801b204:	ae26      	add	r6, sp, #152	; 0x98
 801b206:	1a9d      	subs	r5, r3, r2
 801b208:	002c      	movs	r4, r5
 801b20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b20c:	189f      	adds	r7, r3, r2
 801b20e:	1b63      	subs	r3, r4, r5
 801b210:	429f      	cmp	r7, r3
 801b212:	da0f      	bge.n	801b234 <__kernel_rem_pio2+0x74>
 801b214:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801b216:	af76      	add	r7, sp, #472	; 0x1d8
 801b218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b21a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b21c:	1af3      	subs	r3, r6, r3
 801b21e:	429a      	cmp	r2, r3
 801b220:	db30      	blt.n	801b284 <__kernel_rem_pio2+0xc4>
 801b222:	ab26      	add	r3, sp, #152	; 0x98
 801b224:	00f4      	lsls	r4, r6, #3
 801b226:	2200      	movs	r2, #0
 801b228:	18e4      	adds	r4, r4, r3
 801b22a:	2300      	movs	r3, #0
 801b22c:	2500      	movs	r5, #0
 801b22e:	9204      	str	r2, [sp, #16]
 801b230:	9305      	str	r3, [sp, #20]
 801b232:	e01e      	b.n	801b272 <__kernel_rem_pio2+0xb2>
 801b234:	2c00      	cmp	r4, #0
 801b236:	db07      	blt.n	801b248 <__kernel_rem_pio2+0x88>
 801b238:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 801b23a:	00a3      	lsls	r3, r4, #2
 801b23c:	58d0      	ldr	r0, [r2, r3]
 801b23e:	f7ef f989 	bl	800a554 <__aeabi_i2d>
 801b242:	c603      	stmia	r6!, {r0, r1}
 801b244:	3401      	adds	r4, #1
 801b246:	e7e2      	b.n	801b20e <__kernel_rem_pio2+0x4e>
 801b248:	2000      	movs	r0, #0
 801b24a:	2100      	movs	r1, #0
 801b24c:	e7f9      	b.n	801b242 <__kernel_rem_pio2+0x82>
 801b24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b250:	00e9      	lsls	r1, r5, #3
 801b252:	1859      	adds	r1, r3, r1
 801b254:	6808      	ldr	r0, [r1, #0]
 801b256:	6849      	ldr	r1, [r1, #4]
 801b258:	6822      	ldr	r2, [r4, #0]
 801b25a:	6863      	ldr	r3, [r4, #4]
 801b25c:	f7ee fb28 	bl	80098b0 <__aeabi_dmul>
 801b260:	0002      	movs	r2, r0
 801b262:	000b      	movs	r3, r1
 801b264:	9804      	ldr	r0, [sp, #16]
 801b266:	9905      	ldr	r1, [sp, #20]
 801b268:	f7ed fbe4 	bl	8008a34 <__aeabi_dadd>
 801b26c:	9004      	str	r0, [sp, #16]
 801b26e:	9105      	str	r1, [sp, #20]
 801b270:	3501      	adds	r5, #1
 801b272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b274:	3c08      	subs	r4, #8
 801b276:	429d      	cmp	r5, r3
 801b278:	dde9      	ble.n	801b24e <__kernel_rem_pio2+0x8e>
 801b27a:	9b04      	ldr	r3, [sp, #16]
 801b27c:	9c05      	ldr	r4, [sp, #20]
 801b27e:	3601      	adds	r6, #1
 801b280:	c718      	stmia	r7!, {r3, r4}
 801b282:	e7c9      	b.n	801b218 <__kernel_rem_pio2+0x58>
 801b284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b286:	aa12      	add	r2, sp, #72	; 0x48
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	189b      	adds	r3, r3, r2
 801b28c:	9310      	str	r3, [sp, #64]	; 0x40
 801b28e:	9b00      	ldr	r3, [sp, #0]
 801b290:	0098      	lsls	r0, r3, #2
 801b292:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b294:	181b      	adds	r3, r3, r0
 801b296:	930f      	str	r3, [sp, #60]	; 0x3c
 801b298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b29a:	9304      	str	r3, [sp, #16]
 801b29c:	9b04      	ldr	r3, [sp, #16]
 801b29e:	aa76      	add	r2, sp, #472	; 0x1d8
 801b2a0:	00db      	lsls	r3, r3, #3
 801b2a2:	18d3      	adds	r3, r2, r3
 801b2a4:	681c      	ldr	r4, [r3, #0]
 801b2a6:	685d      	ldr	r5, [r3, #4]
 801b2a8:	ab12      	add	r3, sp, #72	; 0x48
 801b2aa:	9300      	str	r3, [sp, #0]
 801b2ac:	9309      	str	r3, [sp, #36]	; 0x24
 801b2ae:	9b04      	ldr	r3, [sp, #16]
 801b2b0:	9211      	str	r2, [sp, #68]	; 0x44
 801b2b2:	9308      	str	r3, [sp, #32]
 801b2b4:	9b08      	ldr	r3, [sp, #32]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	dc74      	bgt.n	801b3a4 <__kernel_rem_pio2+0x1e4>
 801b2ba:	0020      	movs	r0, r4
 801b2bc:	0029      	movs	r1, r5
 801b2be:	9a02      	ldr	r2, [sp, #8]
 801b2c0:	f000 fc1e 	bl	801bb00 <scalbn>
 801b2c4:	23ff      	movs	r3, #255	; 0xff
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	059b      	lsls	r3, r3, #22
 801b2ca:	0004      	movs	r4, r0
 801b2cc:	000d      	movs	r5, r1
 801b2ce:	f7ee faef 	bl	80098b0 <__aeabi_dmul>
 801b2d2:	f000 fb8b 	bl	801b9ec <floor>
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	4b87      	ldr	r3, [pc, #540]	; (801b4f8 <__kernel_rem_pio2+0x338>)
 801b2da:	f7ee fae9 	bl	80098b0 <__aeabi_dmul>
 801b2de:	0002      	movs	r2, r0
 801b2e0:	000b      	movs	r3, r1
 801b2e2:	0020      	movs	r0, r4
 801b2e4:	0029      	movs	r1, r5
 801b2e6:	f7ee fd4f 	bl	8009d88 <__aeabi_dsub>
 801b2ea:	000d      	movs	r5, r1
 801b2ec:	0004      	movs	r4, r0
 801b2ee:	f7ef f8fb 	bl	800a4e8 <__aeabi_d2iz>
 801b2f2:	9009      	str	r0, [sp, #36]	; 0x24
 801b2f4:	f7ef f92e 	bl	800a554 <__aeabi_i2d>
 801b2f8:	000b      	movs	r3, r1
 801b2fa:	0002      	movs	r2, r0
 801b2fc:	0029      	movs	r1, r5
 801b2fe:	0020      	movs	r0, r4
 801b300:	f7ee fd42 	bl	8009d88 <__aeabi_dsub>
 801b304:	9b02      	ldr	r3, [sp, #8]
 801b306:	0006      	movs	r6, r0
 801b308:	000f      	movs	r7, r1
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	dd74      	ble.n	801b3f8 <__kernel_rem_pio2+0x238>
 801b30e:	2118      	movs	r1, #24
 801b310:	9b04      	ldr	r3, [sp, #16]
 801b312:	aa12      	add	r2, sp, #72	; 0x48
 801b314:	3b01      	subs	r3, #1
 801b316:	009b      	lsls	r3, r3, #2
 801b318:	589a      	ldr	r2, [r3, r2]
 801b31a:	9802      	ldr	r0, [sp, #8]
 801b31c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b31e:	1a09      	subs	r1, r1, r0
 801b320:	0010      	movs	r0, r2
 801b322:	4108      	asrs	r0, r1
 801b324:	1824      	adds	r4, r4, r0
 801b326:	4088      	lsls	r0, r1
 801b328:	a912      	add	r1, sp, #72	; 0x48
 801b32a:	1a12      	subs	r2, r2, r0
 801b32c:	505a      	str	r2, [r3, r1]
 801b32e:	2317      	movs	r3, #23
 801b330:	9902      	ldr	r1, [sp, #8]
 801b332:	9409      	str	r4, [sp, #36]	; 0x24
 801b334:	1a5b      	subs	r3, r3, r1
 801b336:	411a      	asrs	r2, r3
 801b338:	9208      	str	r2, [sp, #32]
 801b33a:	9b08      	ldr	r3, [sp, #32]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	dd6d      	ble.n	801b41c <__kernel_rem_pio2+0x25c>
 801b340:	2200      	movs	r2, #0
 801b342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b344:	2080      	movs	r0, #128	; 0x80
 801b346:	3301      	adds	r3, #1
 801b348:	9309      	str	r3, [sp, #36]	; 0x24
 801b34a:	4b6c      	ldr	r3, [pc, #432]	; (801b4fc <__kernel_rem_pio2+0x33c>)
 801b34c:	0014      	movs	r4, r2
 801b34e:	469c      	mov	ip, r3
 801b350:	2501      	movs	r5, #1
 801b352:	0440      	lsls	r0, r0, #17
 801b354:	9b04      	ldr	r3, [sp, #16]
 801b356:	4293      	cmp	r3, r2
 801b358:	dd00      	ble.n	801b35c <__kernel_rem_pio2+0x19c>
 801b35a:	e099      	b.n	801b490 <__kernel_rem_pio2+0x2d0>
 801b35c:	9b02      	ldr	r3, [sp, #8]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	dd05      	ble.n	801b36e <__kernel_rem_pio2+0x1ae>
 801b362:	2b01      	cmp	r3, #1
 801b364:	d100      	bne.n	801b368 <__kernel_rem_pio2+0x1a8>
 801b366:	e0a9      	b.n	801b4bc <__kernel_rem_pio2+0x2fc>
 801b368:	2b02      	cmp	r3, #2
 801b36a:	d100      	bne.n	801b36e <__kernel_rem_pio2+0x1ae>
 801b36c:	e0b1      	b.n	801b4d2 <__kernel_rem_pio2+0x312>
 801b36e:	9b08      	ldr	r3, [sp, #32]
 801b370:	2b02      	cmp	r3, #2
 801b372:	d153      	bne.n	801b41c <__kernel_rem_pio2+0x25c>
 801b374:	0032      	movs	r2, r6
 801b376:	003b      	movs	r3, r7
 801b378:	2000      	movs	r0, #0
 801b37a:	4961      	ldr	r1, [pc, #388]	; (801b500 <__kernel_rem_pio2+0x340>)
 801b37c:	f7ee fd04 	bl	8009d88 <__aeabi_dsub>
 801b380:	0006      	movs	r6, r0
 801b382:	000f      	movs	r7, r1
 801b384:	2c00      	cmp	r4, #0
 801b386:	d049      	beq.n	801b41c <__kernel_rem_pio2+0x25c>
 801b388:	9a02      	ldr	r2, [sp, #8]
 801b38a:	2000      	movs	r0, #0
 801b38c:	495c      	ldr	r1, [pc, #368]	; (801b500 <__kernel_rem_pio2+0x340>)
 801b38e:	f000 fbb7 	bl	801bb00 <scalbn>
 801b392:	0002      	movs	r2, r0
 801b394:	000b      	movs	r3, r1
 801b396:	0030      	movs	r0, r6
 801b398:	0039      	movs	r1, r7
 801b39a:	f7ee fcf5 	bl	8009d88 <__aeabi_dsub>
 801b39e:	0006      	movs	r6, r0
 801b3a0:	000f      	movs	r7, r1
 801b3a2:	e03b      	b.n	801b41c <__kernel_rem_pio2+0x25c>
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	4b57      	ldr	r3, [pc, #348]	; (801b504 <__kernel_rem_pio2+0x344>)
 801b3a8:	0020      	movs	r0, r4
 801b3aa:	0029      	movs	r1, r5
 801b3ac:	f7ee fa80 	bl	80098b0 <__aeabi_dmul>
 801b3b0:	f7ef f89a 	bl	800a4e8 <__aeabi_d2iz>
 801b3b4:	f7ef f8ce 	bl	800a554 <__aeabi_i2d>
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	4b53      	ldr	r3, [pc, #332]	; (801b508 <__kernel_rem_pio2+0x348>)
 801b3bc:	0006      	movs	r6, r0
 801b3be:	000f      	movs	r7, r1
 801b3c0:	f7ee fa76 	bl	80098b0 <__aeabi_dmul>
 801b3c4:	0002      	movs	r2, r0
 801b3c6:	000b      	movs	r3, r1
 801b3c8:	0020      	movs	r0, r4
 801b3ca:	0029      	movs	r1, r5
 801b3cc:	f7ee fcdc 	bl	8009d88 <__aeabi_dsub>
 801b3d0:	f7ef f88a 	bl	800a4e8 <__aeabi_d2iz>
 801b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b3d8:	c301      	stmia	r3!, {r0}
 801b3da:	9309      	str	r3, [sp, #36]	; 0x24
 801b3dc:	9b08      	ldr	r3, [sp, #32]
 801b3de:	0030      	movs	r0, r6
 801b3e0:	3b01      	subs	r3, #1
 801b3e2:	9308      	str	r3, [sp, #32]
 801b3e4:	00db      	lsls	r3, r3, #3
 801b3e6:	18d3      	adds	r3, r2, r3
 801b3e8:	0039      	movs	r1, r7
 801b3ea:	681a      	ldr	r2, [r3, #0]
 801b3ec:	685b      	ldr	r3, [r3, #4]
 801b3ee:	f7ed fb21 	bl	8008a34 <__aeabi_dadd>
 801b3f2:	0004      	movs	r4, r0
 801b3f4:	000d      	movs	r5, r1
 801b3f6:	e75d      	b.n	801b2b4 <__kernel_rem_pio2+0xf4>
 801b3f8:	9b02      	ldr	r3, [sp, #8]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d107      	bne.n	801b40e <__kernel_rem_pio2+0x24e>
 801b3fe:	9b04      	ldr	r3, [sp, #16]
 801b400:	aa12      	add	r2, sp, #72	; 0x48
 801b402:	3b01      	subs	r3, #1
 801b404:	009b      	lsls	r3, r3, #2
 801b406:	5898      	ldr	r0, [r3, r2]
 801b408:	15c3      	asrs	r3, r0, #23
 801b40a:	9308      	str	r3, [sp, #32]
 801b40c:	e795      	b.n	801b33a <__kernel_rem_pio2+0x17a>
 801b40e:	2200      	movs	r2, #0
 801b410:	4b3e      	ldr	r3, [pc, #248]	; (801b50c <__kernel_rem_pio2+0x34c>)
 801b412:	f7ec fcdf 	bl	8007dd4 <__aeabi_dcmpge>
 801b416:	2800      	cmp	r0, #0
 801b418:	d137      	bne.n	801b48a <__kernel_rem_pio2+0x2ca>
 801b41a:	9008      	str	r0, [sp, #32]
 801b41c:	2200      	movs	r2, #0
 801b41e:	2300      	movs	r3, #0
 801b420:	0030      	movs	r0, r6
 801b422:	0039      	movs	r1, r7
 801b424:	f7ec fcb2 	bl	8007d8c <__aeabi_dcmpeq>
 801b428:	2800      	cmp	r0, #0
 801b42a:	d100      	bne.n	801b42e <__kernel_rem_pio2+0x26e>
 801b42c:	e0b9      	b.n	801b5a2 <__kernel_rem_pio2+0x3e2>
 801b42e:	2200      	movs	r2, #0
 801b430:	9b04      	ldr	r3, [sp, #16]
 801b432:	3b01      	subs	r3, #1
 801b434:	9300      	str	r3, [sp, #0]
 801b436:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b438:	428b      	cmp	r3, r1
 801b43a:	da53      	bge.n	801b4e4 <__kernel_rem_pio2+0x324>
 801b43c:	2a00      	cmp	r2, #0
 801b43e:	d100      	bne.n	801b442 <__kernel_rem_pio2+0x282>
 801b440:	e095      	b.n	801b56e <__kernel_rem_pio2+0x3ae>
 801b442:	9b02      	ldr	r3, [sp, #8]
 801b444:	aa12      	add	r2, sp, #72	; 0x48
 801b446:	3b18      	subs	r3, #24
 801b448:	9302      	str	r3, [sp, #8]
 801b44a:	9b00      	ldr	r3, [sp, #0]
 801b44c:	009b      	lsls	r3, r3, #2
 801b44e:	589b      	ldr	r3, [r3, r2]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d100      	bne.n	801b456 <__kernel_rem_pio2+0x296>
 801b454:	e0a1      	b.n	801b59a <__kernel_rem_pio2+0x3da>
 801b456:	2000      	movs	r0, #0
 801b458:	9a02      	ldr	r2, [sp, #8]
 801b45a:	4929      	ldr	r1, [pc, #164]	; (801b500 <__kernel_rem_pio2+0x340>)
 801b45c:	f000 fb50 	bl	801bb00 <scalbn>
 801b460:	0006      	movs	r6, r0
 801b462:	000f      	movs	r7, r1
 801b464:	9c00      	ldr	r4, [sp, #0]
 801b466:	2c00      	cmp	r4, #0
 801b468:	db00      	blt.n	801b46c <__kernel_rem_pio2+0x2ac>
 801b46a:	e0d9      	b.n	801b620 <__kernel_rem_pio2+0x460>
 801b46c:	9c00      	ldr	r4, [sp, #0]
 801b46e:	2c00      	cmp	r4, #0
 801b470:	da00      	bge.n	801b474 <__kernel_rem_pio2+0x2b4>
 801b472:	e10c      	b.n	801b68e <__kernel_rem_pio2+0x4ce>
 801b474:	ab76      	add	r3, sp, #472	; 0x1d8
 801b476:	00e6      	lsls	r6, r4, #3
 801b478:	2200      	movs	r2, #0
 801b47a:	18f6      	adds	r6, r6, r3
 801b47c:	2300      	movs	r3, #0
 801b47e:	9202      	str	r2, [sp, #8]
 801b480:	9303      	str	r3, [sp, #12]
 801b482:	9b00      	ldr	r3, [sp, #0]
 801b484:	2500      	movs	r5, #0
 801b486:	1b1f      	subs	r7, r3, r4
 801b488:	e0f3      	b.n	801b672 <__kernel_rem_pio2+0x4b2>
 801b48a:	2302      	movs	r3, #2
 801b48c:	9308      	str	r3, [sp, #32]
 801b48e:	e757      	b.n	801b340 <__kernel_rem_pio2+0x180>
 801b490:	9b00      	ldr	r3, [sp, #0]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	2c00      	cmp	r4, #0
 801b496:	d10b      	bne.n	801b4b0 <__kernel_rem_pio2+0x2f0>
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d003      	beq.n	801b4a4 <__kernel_rem_pio2+0x2e4>
 801b49c:	9c00      	ldr	r4, [sp, #0]
 801b49e:	1ac3      	subs	r3, r0, r3
 801b4a0:	6023      	str	r3, [r4, #0]
 801b4a2:	002b      	movs	r3, r5
 801b4a4:	9c00      	ldr	r4, [sp, #0]
 801b4a6:	3201      	adds	r2, #1
 801b4a8:	3404      	adds	r4, #4
 801b4aa:	9400      	str	r4, [sp, #0]
 801b4ac:	001c      	movs	r4, r3
 801b4ae:	e751      	b.n	801b354 <__kernel_rem_pio2+0x194>
 801b4b0:	4661      	mov	r1, ip
 801b4b2:	1acb      	subs	r3, r1, r3
 801b4b4:	9900      	ldr	r1, [sp, #0]
 801b4b6:	600b      	str	r3, [r1, #0]
 801b4b8:	0023      	movs	r3, r4
 801b4ba:	e7f3      	b.n	801b4a4 <__kernel_rem_pio2+0x2e4>
 801b4bc:	9b04      	ldr	r3, [sp, #16]
 801b4be:	aa12      	add	r2, sp, #72	; 0x48
 801b4c0:	3b01      	subs	r3, #1
 801b4c2:	009b      	lsls	r3, r3, #2
 801b4c4:	589a      	ldr	r2, [r3, r2]
 801b4c6:	9200      	str	r2, [sp, #0]
 801b4c8:	0252      	lsls	r2, r2, #9
 801b4ca:	0a52      	lsrs	r2, r2, #9
 801b4cc:	a912      	add	r1, sp, #72	; 0x48
 801b4ce:	505a      	str	r2, [r3, r1]
 801b4d0:	e74d      	b.n	801b36e <__kernel_rem_pio2+0x1ae>
 801b4d2:	9b04      	ldr	r3, [sp, #16]
 801b4d4:	aa12      	add	r2, sp, #72	; 0x48
 801b4d6:	3b01      	subs	r3, #1
 801b4d8:	009b      	lsls	r3, r3, #2
 801b4da:	589a      	ldr	r2, [r3, r2]
 801b4dc:	9200      	str	r2, [sp, #0]
 801b4de:	0292      	lsls	r2, r2, #10
 801b4e0:	0a92      	lsrs	r2, r2, #10
 801b4e2:	e7f3      	b.n	801b4cc <__kernel_rem_pio2+0x30c>
 801b4e4:	0099      	lsls	r1, r3, #2
 801b4e6:	a812      	add	r0, sp, #72	; 0x48
 801b4e8:	5809      	ldr	r1, [r1, r0]
 801b4ea:	3b01      	subs	r3, #1
 801b4ec:	430a      	orrs	r2, r1
 801b4ee:	e7a2      	b.n	801b436 <__kernel_rem_pio2+0x276>
 801b4f0:	fffffd84 	.word	0xfffffd84
 801b4f4:	0801cc30 	.word	0x0801cc30
 801b4f8:	40200000 	.word	0x40200000
 801b4fc:	00ffffff 	.word	0x00ffffff
 801b500:	3ff00000 	.word	0x3ff00000
 801b504:	3e700000 	.word	0x3e700000
 801b508:	41700000 	.word	0x41700000
 801b50c:	3fe00000 	.word	0x3fe00000
 801b510:	3301      	adds	r3, #1
 801b512:	9910      	ldr	r1, [sp, #64]	; 0x40
 801b514:	009a      	lsls	r2, r3, #2
 801b516:	4252      	negs	r2, r2
 801b518:	588a      	ldr	r2, [r1, r2]
 801b51a:	2a00      	cmp	r2, #0
 801b51c:	d0f8      	beq.n	801b510 <__kernel_rem_pio2+0x350>
 801b51e:	9a04      	ldr	r2, [sp, #16]
 801b520:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b522:	1c57      	adds	r7, r2, #1
 801b524:	1854      	adds	r4, r2, r1
 801b526:	00e4      	lsls	r4, r4, #3
 801b528:	aa26      	add	r2, sp, #152	; 0x98
 801b52a:	1914      	adds	r4, r2, r4
 801b52c:	9a04      	ldr	r2, [sp, #16]
 801b52e:	18d3      	adds	r3, r2, r3
 801b530:	9304      	str	r3, [sp, #16]
 801b532:	9b04      	ldr	r3, [sp, #16]
 801b534:	42bb      	cmp	r3, r7
 801b536:	da00      	bge.n	801b53a <__kernel_rem_pio2+0x37a>
 801b538:	e6b0      	b.n	801b29c <__kernel_rem_pio2+0xdc>
 801b53a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b53c:	00bb      	lsls	r3, r7, #2
 801b53e:	58d0      	ldr	r0, [r2, r3]
 801b540:	f7ef f808 	bl	800a554 <__aeabi_i2d>
 801b544:	2200      	movs	r2, #0
 801b546:	2300      	movs	r3, #0
 801b548:	0026      	movs	r6, r4
 801b54a:	2500      	movs	r5, #0
 801b54c:	6020      	str	r0, [r4, #0]
 801b54e:	6061      	str	r1, [r4, #4]
 801b550:	9200      	str	r2, [sp, #0]
 801b552:	9301      	str	r3, [sp, #4]
 801b554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b556:	429d      	cmp	r5, r3
 801b558:	dd0b      	ble.n	801b572 <__kernel_rem_pio2+0x3b2>
 801b55a:	00fb      	lsls	r3, r7, #3
 801b55c:	aa76      	add	r2, sp, #472	; 0x1d8
 801b55e:	18d3      	adds	r3, r2, r3
 801b560:	3701      	adds	r7, #1
 801b562:	9900      	ldr	r1, [sp, #0]
 801b564:	9a01      	ldr	r2, [sp, #4]
 801b566:	3408      	adds	r4, #8
 801b568:	6019      	str	r1, [r3, #0]
 801b56a:	605a      	str	r2, [r3, #4]
 801b56c:	e7e1      	b.n	801b532 <__kernel_rem_pio2+0x372>
 801b56e:	2301      	movs	r3, #1
 801b570:	e7cf      	b.n	801b512 <__kernel_rem_pio2+0x352>
 801b572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b574:	00e9      	lsls	r1, r5, #3
 801b576:	1859      	adds	r1, r3, r1
 801b578:	6808      	ldr	r0, [r1, #0]
 801b57a:	6849      	ldr	r1, [r1, #4]
 801b57c:	6832      	ldr	r2, [r6, #0]
 801b57e:	6873      	ldr	r3, [r6, #4]
 801b580:	f7ee f996 	bl	80098b0 <__aeabi_dmul>
 801b584:	0002      	movs	r2, r0
 801b586:	000b      	movs	r3, r1
 801b588:	9800      	ldr	r0, [sp, #0]
 801b58a:	9901      	ldr	r1, [sp, #4]
 801b58c:	f7ed fa52 	bl	8008a34 <__aeabi_dadd>
 801b590:	3501      	adds	r5, #1
 801b592:	9000      	str	r0, [sp, #0]
 801b594:	9101      	str	r1, [sp, #4]
 801b596:	3e08      	subs	r6, #8
 801b598:	e7dc      	b.n	801b554 <__kernel_rem_pio2+0x394>
 801b59a:	9b00      	ldr	r3, [sp, #0]
 801b59c:	3b01      	subs	r3, #1
 801b59e:	9300      	str	r3, [sp, #0]
 801b5a0:	e74f      	b.n	801b442 <__kernel_rem_pio2+0x282>
 801b5a2:	9b02      	ldr	r3, [sp, #8]
 801b5a4:	0030      	movs	r0, r6
 801b5a6:	425a      	negs	r2, r3
 801b5a8:	0039      	movs	r1, r7
 801b5aa:	f000 faa9 	bl	801bb00 <scalbn>
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	4bb5      	ldr	r3, [pc, #724]	; (801b888 <__kernel_rem_pio2+0x6c8>)
 801b5b2:	0004      	movs	r4, r0
 801b5b4:	000d      	movs	r5, r1
 801b5b6:	f7ec fc0d 	bl	8007dd4 <__aeabi_dcmpge>
 801b5ba:	2800      	cmp	r0, #0
 801b5bc:	d025      	beq.n	801b60a <__kernel_rem_pio2+0x44a>
 801b5be:	2200      	movs	r2, #0
 801b5c0:	4bb2      	ldr	r3, [pc, #712]	; (801b88c <__kernel_rem_pio2+0x6cc>)
 801b5c2:	0020      	movs	r0, r4
 801b5c4:	0029      	movs	r1, r5
 801b5c6:	f7ee f973 	bl	80098b0 <__aeabi_dmul>
 801b5ca:	f7ee ff8d 	bl	800a4e8 <__aeabi_d2iz>
 801b5ce:	9b04      	ldr	r3, [sp, #16]
 801b5d0:	0006      	movs	r6, r0
 801b5d2:	009f      	lsls	r7, r3, #2
 801b5d4:	f7ee ffbe 	bl	800a554 <__aeabi_i2d>
 801b5d8:	2200      	movs	r2, #0
 801b5da:	4bab      	ldr	r3, [pc, #684]	; (801b888 <__kernel_rem_pio2+0x6c8>)
 801b5dc:	f7ee f968 	bl	80098b0 <__aeabi_dmul>
 801b5e0:	0002      	movs	r2, r0
 801b5e2:	000b      	movs	r3, r1
 801b5e4:	0020      	movs	r0, r4
 801b5e6:	0029      	movs	r1, r5
 801b5e8:	f7ee fbce 	bl	8009d88 <__aeabi_dsub>
 801b5ec:	f7ee ff7c 	bl	800a4e8 <__aeabi_d2iz>
 801b5f0:	ab12      	add	r3, sp, #72	; 0x48
 801b5f2:	51d8      	str	r0, [r3, r7]
 801b5f4:	9b04      	ldr	r3, [sp, #16]
 801b5f6:	aa12      	add	r2, sp, #72	; 0x48
 801b5f8:	3301      	adds	r3, #1
 801b5fa:	9300      	str	r3, [sp, #0]
 801b5fc:	9b02      	ldr	r3, [sp, #8]
 801b5fe:	3318      	adds	r3, #24
 801b600:	9302      	str	r3, [sp, #8]
 801b602:	9b00      	ldr	r3, [sp, #0]
 801b604:	009b      	lsls	r3, r3, #2
 801b606:	509e      	str	r6, [r3, r2]
 801b608:	e725      	b.n	801b456 <__kernel_rem_pio2+0x296>
 801b60a:	9b04      	ldr	r3, [sp, #16]
 801b60c:	0020      	movs	r0, r4
 801b60e:	0029      	movs	r1, r5
 801b610:	009e      	lsls	r6, r3, #2
 801b612:	f7ee ff69 	bl	800a4e8 <__aeabi_d2iz>
 801b616:	ab12      	add	r3, sp, #72	; 0x48
 801b618:	5198      	str	r0, [r3, r6]
 801b61a:	9b04      	ldr	r3, [sp, #16]
 801b61c:	9300      	str	r3, [sp, #0]
 801b61e:	e71a      	b.n	801b456 <__kernel_rem_pio2+0x296>
 801b620:	00e5      	lsls	r5, r4, #3
 801b622:	ab76      	add	r3, sp, #472	; 0x1d8
 801b624:	aa12      	add	r2, sp, #72	; 0x48
 801b626:	195d      	adds	r5, r3, r5
 801b628:	00a3      	lsls	r3, r4, #2
 801b62a:	5898      	ldr	r0, [r3, r2]
 801b62c:	f7ee ff92 	bl	800a554 <__aeabi_i2d>
 801b630:	0032      	movs	r2, r6
 801b632:	003b      	movs	r3, r7
 801b634:	f7ee f93c 	bl	80098b0 <__aeabi_dmul>
 801b638:	2200      	movs	r2, #0
 801b63a:	6028      	str	r0, [r5, #0]
 801b63c:	6069      	str	r1, [r5, #4]
 801b63e:	4b93      	ldr	r3, [pc, #588]	; (801b88c <__kernel_rem_pio2+0x6cc>)
 801b640:	0030      	movs	r0, r6
 801b642:	0039      	movs	r1, r7
 801b644:	f7ee f934 	bl	80098b0 <__aeabi_dmul>
 801b648:	3c01      	subs	r4, #1
 801b64a:	0006      	movs	r6, r0
 801b64c:	000f      	movs	r7, r1
 801b64e:	e70a      	b.n	801b466 <__kernel_rem_pio2+0x2a6>
 801b650:	4b8f      	ldr	r3, [pc, #572]	; (801b890 <__kernel_rem_pio2+0x6d0>)
 801b652:	00e9      	lsls	r1, r5, #3
 801b654:	1859      	adds	r1, r3, r1
 801b656:	6808      	ldr	r0, [r1, #0]
 801b658:	6849      	ldr	r1, [r1, #4]
 801b65a:	ce0c      	ldmia	r6!, {r2, r3}
 801b65c:	f7ee f928 	bl	80098b0 <__aeabi_dmul>
 801b660:	0002      	movs	r2, r0
 801b662:	000b      	movs	r3, r1
 801b664:	9802      	ldr	r0, [sp, #8]
 801b666:	9903      	ldr	r1, [sp, #12]
 801b668:	f7ed f9e4 	bl	8008a34 <__aeabi_dadd>
 801b66c:	9002      	str	r0, [sp, #8]
 801b66e:	9103      	str	r1, [sp, #12]
 801b670:	3501      	adds	r5, #1
 801b672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b674:	429d      	cmp	r5, r3
 801b676:	dc01      	bgt.n	801b67c <__kernel_rem_pio2+0x4bc>
 801b678:	42bd      	cmp	r5, r7
 801b67a:	dde9      	ble.n	801b650 <__kernel_rem_pio2+0x490>
 801b67c:	ab4e      	add	r3, sp, #312	; 0x138
 801b67e:	00ff      	lsls	r7, r7, #3
 801b680:	19df      	adds	r7, r3, r7
 801b682:	3c01      	subs	r4, #1
 801b684:	9a02      	ldr	r2, [sp, #8]
 801b686:	9b03      	ldr	r3, [sp, #12]
 801b688:	603a      	str	r2, [r7, #0]
 801b68a:	607b      	str	r3, [r7, #4]
 801b68c:	e6ef      	b.n	801b46e <__kernel_rem_pio2+0x2ae>
 801b68e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b690:	2b02      	cmp	r3, #2
 801b692:	dc0e      	bgt.n	801b6b2 <__kernel_rem_pio2+0x4f2>
 801b694:	2b00      	cmp	r3, #0
 801b696:	dd00      	ble.n	801b69a <__kernel_rem_pio2+0x4da>
 801b698:	e08c      	b.n	801b7b4 <__kernel_rem_pio2+0x5f4>
 801b69a:	2500      	movs	r5, #0
 801b69c:	002c      	movs	r4, r5
 801b69e:	42ab      	cmp	r3, r5
 801b6a0:	d046      	beq.n	801b730 <__kernel_rem_pio2+0x570>
 801b6a2:	2007      	movs	r0, #7
 801b6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6a6:	4003      	ands	r3, r0
 801b6a8:	0018      	movs	r0, r3
 801b6aa:	239f      	movs	r3, #159	; 0x9f
 801b6ac:	009b      	lsls	r3, r3, #2
 801b6ae:	449d      	add	sp, r3
 801b6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6b2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b6b4:	2b03      	cmp	r3, #3
 801b6b6:	d1f4      	bne.n	801b6a2 <__kernel_rem_pio2+0x4e2>
 801b6b8:	9b00      	ldr	r3, [sp, #0]
 801b6ba:	00dc      	lsls	r4, r3, #3
 801b6bc:	ab4e      	add	r3, sp, #312	; 0x138
 801b6be:	191c      	adds	r4, r3, r4
 801b6c0:	0025      	movs	r5, r4
 801b6c2:	9b00      	ldr	r3, [sp, #0]
 801b6c4:	9302      	str	r3, [sp, #8]
 801b6c6:	9b02      	ldr	r3, [sp, #8]
 801b6c8:	3d08      	subs	r5, #8
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	dd00      	ble.n	801b6d0 <__kernel_rem_pio2+0x510>
 801b6ce:	e07f      	b.n	801b7d0 <__kernel_rem_pio2+0x610>
 801b6d0:	9d00      	ldr	r5, [sp, #0]
 801b6d2:	3c08      	subs	r4, #8
 801b6d4:	2d01      	cmp	r5, #1
 801b6d6:	dd00      	ble.n	801b6da <__kernel_rem_pio2+0x51a>
 801b6d8:	e09c      	b.n	801b814 <__kernel_rem_pio2+0x654>
 801b6da:	2400      	movs	r4, #0
 801b6dc:	0021      	movs	r1, r4
 801b6de:	9b00      	ldr	r3, [sp, #0]
 801b6e0:	2b01      	cmp	r3, #1
 801b6e2:	dd00      	ble.n	801b6e6 <__kernel_rem_pio2+0x526>
 801b6e4:	e0b4      	b.n	801b850 <__kernel_rem_pio2+0x690>
 801b6e6:	9b08      	ldr	r3, [sp, #32]
 801b6e8:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 801b6ea:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 801b6ec:	9d50      	ldr	r5, [sp, #320]	; 0x140
 801b6ee:	9851      	ldr	r0, [sp, #324]	; 0x144
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d000      	beq.n	801b6f6 <__kernel_rem_pio2+0x536>
 801b6f4:	e0ba      	b.n	801b86c <__kernel_rem_pio2+0x6ac>
 801b6f6:	0033      	movs	r3, r6
 801b6f8:	003a      	movs	r2, r7
 801b6fa:	9e07      	ldr	r6, [sp, #28]
 801b6fc:	6032      	str	r2, [r6, #0]
 801b6fe:	6073      	str	r3, [r6, #4]
 801b700:	002a      	movs	r2, r5
 801b702:	0003      	movs	r3, r0
 801b704:	60b2      	str	r2, [r6, #8]
 801b706:	60f3      	str	r3, [r6, #12]
 801b708:	0022      	movs	r2, r4
 801b70a:	000b      	movs	r3, r1
 801b70c:	6132      	str	r2, [r6, #16]
 801b70e:	6173      	str	r3, [r6, #20]
 801b710:	e7c7      	b.n	801b6a2 <__kernel_rem_pio2+0x4e2>
 801b712:	9b00      	ldr	r3, [sp, #0]
 801b714:	aa4e      	add	r2, sp, #312	; 0x138
 801b716:	00db      	lsls	r3, r3, #3
 801b718:	18d3      	adds	r3, r2, r3
 801b71a:	0028      	movs	r0, r5
 801b71c:	681a      	ldr	r2, [r3, #0]
 801b71e:	685b      	ldr	r3, [r3, #4]
 801b720:	0021      	movs	r1, r4
 801b722:	f7ed f987 	bl	8008a34 <__aeabi_dadd>
 801b726:	0005      	movs	r5, r0
 801b728:	000c      	movs	r4, r1
 801b72a:	9b00      	ldr	r3, [sp, #0]
 801b72c:	3b01      	subs	r3, #1
 801b72e:	9300      	str	r3, [sp, #0]
 801b730:	9b00      	ldr	r3, [sp, #0]
 801b732:	2b00      	cmp	r3, #0
 801b734:	daed      	bge.n	801b712 <__kernel_rem_pio2+0x552>
 801b736:	9b08      	ldr	r3, [sp, #32]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d002      	beq.n	801b742 <__kernel_rem_pio2+0x582>
 801b73c:	2380      	movs	r3, #128	; 0x80
 801b73e:	061b      	lsls	r3, r3, #24
 801b740:	18e4      	adds	r4, r4, r3
 801b742:	002a      	movs	r2, r5
 801b744:	0023      	movs	r3, r4
 801b746:	9907      	ldr	r1, [sp, #28]
 801b748:	600a      	str	r2, [r1, #0]
 801b74a:	604b      	str	r3, [r1, #4]
 801b74c:	e7a9      	b.n	801b6a2 <__kernel_rem_pio2+0x4e2>
 801b74e:	00e3      	lsls	r3, r4, #3
 801b750:	aa4e      	add	r2, sp, #312	; 0x138
 801b752:	18d3      	adds	r3, r2, r3
 801b754:	0030      	movs	r0, r6
 801b756:	681a      	ldr	r2, [r3, #0]
 801b758:	685b      	ldr	r3, [r3, #4]
 801b75a:	0029      	movs	r1, r5
 801b75c:	f7ed f96a 	bl	8008a34 <__aeabi_dadd>
 801b760:	0006      	movs	r6, r0
 801b762:	000d      	movs	r5, r1
 801b764:	3c01      	subs	r4, #1
 801b766:	2c00      	cmp	r4, #0
 801b768:	daf1      	bge.n	801b74e <__kernel_rem_pio2+0x58e>
 801b76a:	9b08      	ldr	r3, [sp, #32]
 801b76c:	0029      	movs	r1, r5
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d002      	beq.n	801b778 <__kernel_rem_pio2+0x5b8>
 801b772:	2380      	movs	r3, #128	; 0x80
 801b774:	061b      	lsls	r3, r3, #24
 801b776:	18e9      	adds	r1, r5, r3
 801b778:	0032      	movs	r2, r6
 801b77a:	000b      	movs	r3, r1
 801b77c:	9907      	ldr	r1, [sp, #28]
 801b77e:	2401      	movs	r4, #1
 801b780:	600a      	str	r2, [r1, #0]
 801b782:	604b      	str	r3, [r1, #4]
 801b784:	984e      	ldr	r0, [sp, #312]	; 0x138
 801b786:	994f      	ldr	r1, [sp, #316]	; 0x13c
 801b788:	002b      	movs	r3, r5
 801b78a:	f7ee fafd 	bl	8009d88 <__aeabi_dsub>
 801b78e:	0007      	movs	r7, r0
 801b790:	000e      	movs	r6, r1
 801b792:	ad4e      	add	r5, sp, #312	; 0x138
 801b794:	9b00      	ldr	r3, [sp, #0]
 801b796:	3508      	adds	r5, #8
 801b798:	42a3      	cmp	r3, r4
 801b79a:	da0f      	bge.n	801b7bc <__kernel_rem_pio2+0x5fc>
 801b79c:	9b08      	ldr	r3, [sp, #32]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d002      	beq.n	801b7a8 <__kernel_rem_pio2+0x5e8>
 801b7a2:	2380      	movs	r3, #128	; 0x80
 801b7a4:	061b      	lsls	r3, r3, #24
 801b7a6:	18f6      	adds	r6, r6, r3
 801b7a8:	003a      	movs	r2, r7
 801b7aa:	0033      	movs	r3, r6
 801b7ac:	9907      	ldr	r1, [sp, #28]
 801b7ae:	608a      	str	r2, [r1, #8]
 801b7b0:	60cb      	str	r3, [r1, #12]
 801b7b2:	e776      	b.n	801b6a2 <__kernel_rem_pio2+0x4e2>
 801b7b4:	2600      	movs	r6, #0
 801b7b6:	9c00      	ldr	r4, [sp, #0]
 801b7b8:	0035      	movs	r5, r6
 801b7ba:	e7d4      	b.n	801b766 <__kernel_rem_pio2+0x5a6>
 801b7bc:	0038      	movs	r0, r7
 801b7be:	682a      	ldr	r2, [r5, #0]
 801b7c0:	686b      	ldr	r3, [r5, #4]
 801b7c2:	0031      	movs	r1, r6
 801b7c4:	f7ed f936 	bl	8008a34 <__aeabi_dadd>
 801b7c8:	3401      	adds	r4, #1
 801b7ca:	0007      	movs	r7, r0
 801b7cc:	000e      	movs	r6, r1
 801b7ce:	e7e1      	b.n	801b794 <__kernel_rem_pio2+0x5d4>
 801b7d0:	9b02      	ldr	r3, [sp, #8]
 801b7d2:	68ae      	ldr	r6, [r5, #8]
 801b7d4:	68ef      	ldr	r7, [r5, #12]
 801b7d6:	3b01      	subs	r3, #1
 801b7d8:	9302      	str	r3, [sp, #8]
 801b7da:	682a      	ldr	r2, [r5, #0]
 801b7dc:	686b      	ldr	r3, [r5, #4]
 801b7de:	9204      	str	r2, [sp, #16]
 801b7e0:	9305      	str	r3, [sp, #20]
 801b7e2:	9804      	ldr	r0, [sp, #16]
 801b7e4:	9905      	ldr	r1, [sp, #20]
 801b7e6:	0032      	movs	r2, r6
 801b7e8:	003b      	movs	r3, r7
 801b7ea:	f7ed f923 	bl	8008a34 <__aeabi_dadd>
 801b7ee:	0002      	movs	r2, r0
 801b7f0:	000b      	movs	r3, r1
 801b7f2:	900a      	str	r0, [sp, #40]	; 0x28
 801b7f4:	910b      	str	r1, [sp, #44]	; 0x2c
 801b7f6:	9804      	ldr	r0, [sp, #16]
 801b7f8:	9905      	ldr	r1, [sp, #20]
 801b7fa:	f7ee fac5 	bl	8009d88 <__aeabi_dsub>
 801b7fe:	0032      	movs	r2, r6
 801b800:	003b      	movs	r3, r7
 801b802:	f7ed f917 	bl	8008a34 <__aeabi_dadd>
 801b806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b80a:	60a8      	str	r0, [r5, #8]
 801b80c:	60e9      	str	r1, [r5, #12]
 801b80e:	602a      	str	r2, [r5, #0]
 801b810:	606b      	str	r3, [r5, #4]
 801b812:	e758      	b.n	801b6c6 <__kernel_rem_pio2+0x506>
 801b814:	6826      	ldr	r6, [r4, #0]
 801b816:	6867      	ldr	r7, [r4, #4]
 801b818:	68a2      	ldr	r2, [r4, #8]
 801b81a:	68e3      	ldr	r3, [r4, #12]
 801b81c:	0030      	movs	r0, r6
 801b81e:	0039      	movs	r1, r7
 801b820:	9202      	str	r2, [sp, #8]
 801b822:	9303      	str	r3, [sp, #12]
 801b824:	f7ed f906 	bl	8008a34 <__aeabi_dadd>
 801b828:	0002      	movs	r2, r0
 801b82a:	000b      	movs	r3, r1
 801b82c:	9004      	str	r0, [sp, #16]
 801b82e:	9105      	str	r1, [sp, #20]
 801b830:	0030      	movs	r0, r6
 801b832:	0039      	movs	r1, r7
 801b834:	f7ee faa8 	bl	8009d88 <__aeabi_dsub>
 801b838:	9a02      	ldr	r2, [sp, #8]
 801b83a:	9b03      	ldr	r3, [sp, #12]
 801b83c:	f7ed f8fa 	bl	8008a34 <__aeabi_dadd>
 801b840:	9a04      	ldr	r2, [sp, #16]
 801b842:	9b05      	ldr	r3, [sp, #20]
 801b844:	60a0      	str	r0, [r4, #8]
 801b846:	60e1      	str	r1, [r4, #12]
 801b848:	6022      	str	r2, [r4, #0]
 801b84a:	6063      	str	r3, [r4, #4]
 801b84c:	3d01      	subs	r5, #1
 801b84e:	e740      	b.n	801b6d2 <__kernel_rem_pio2+0x512>
 801b850:	9b00      	ldr	r3, [sp, #0]
 801b852:	aa4e      	add	r2, sp, #312	; 0x138
 801b854:	00db      	lsls	r3, r3, #3
 801b856:	18d3      	adds	r3, r2, r3
 801b858:	0020      	movs	r0, r4
 801b85a:	681a      	ldr	r2, [r3, #0]
 801b85c:	685b      	ldr	r3, [r3, #4]
 801b85e:	f7ed f8e9 	bl	8008a34 <__aeabi_dadd>
 801b862:	9b00      	ldr	r3, [sp, #0]
 801b864:	0004      	movs	r4, r0
 801b866:	3b01      	subs	r3, #1
 801b868:	9300      	str	r3, [sp, #0]
 801b86a:	e738      	b.n	801b6de <__kernel_rem_pio2+0x51e>
 801b86c:	9b07      	ldr	r3, [sp, #28]
 801b86e:	9a07      	ldr	r2, [sp, #28]
 801b870:	601f      	str	r7, [r3, #0]
 801b872:	2380      	movs	r3, #128	; 0x80
 801b874:	061b      	lsls	r3, r3, #24
 801b876:	18f6      	adds	r6, r6, r3
 801b878:	18c0      	adds	r0, r0, r3
 801b87a:	18c9      	adds	r1, r1, r3
 801b87c:	6056      	str	r6, [r2, #4]
 801b87e:	6095      	str	r5, [r2, #8]
 801b880:	60d0      	str	r0, [r2, #12]
 801b882:	6114      	str	r4, [r2, #16]
 801b884:	6151      	str	r1, [r2, #20]
 801b886:	e70c      	b.n	801b6a2 <__kernel_rem_pio2+0x4e2>
 801b888:	41700000 	.word	0x41700000
 801b88c:	3e700000 	.word	0x3e700000
 801b890:	0801cbf0 	.word	0x0801cbf0

0801b894 <__kernel_sin>:
 801b894:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b896:	b089      	sub	sp, #36	; 0x24
 801b898:	9202      	str	r2, [sp, #8]
 801b89a:	9303      	str	r3, [sp, #12]
 801b89c:	22f9      	movs	r2, #249	; 0xf9
 801b89e:	004b      	lsls	r3, r1, #1
 801b8a0:	0007      	movs	r7, r0
 801b8a2:	000e      	movs	r6, r1
 801b8a4:	085b      	lsrs	r3, r3, #1
 801b8a6:	0592      	lsls	r2, r2, #22
 801b8a8:	4293      	cmp	r3, r2
 801b8aa:	da03      	bge.n	801b8b4 <__kernel_sin+0x20>
 801b8ac:	f7ee fe1c 	bl	800a4e8 <__aeabi_d2iz>
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	d04c      	beq.n	801b94e <__kernel_sin+0xba>
 801b8b4:	003a      	movs	r2, r7
 801b8b6:	0033      	movs	r3, r6
 801b8b8:	0038      	movs	r0, r7
 801b8ba:	0031      	movs	r1, r6
 801b8bc:	f7ed fff8 	bl	80098b0 <__aeabi_dmul>
 801b8c0:	0004      	movs	r4, r0
 801b8c2:	000d      	movs	r5, r1
 801b8c4:	0002      	movs	r2, r0
 801b8c6:	000b      	movs	r3, r1
 801b8c8:	0038      	movs	r0, r7
 801b8ca:	0031      	movs	r1, r6
 801b8cc:	f7ed fff0 	bl	80098b0 <__aeabi_dmul>
 801b8d0:	4a39      	ldr	r2, [pc, #228]	; (801b9b8 <__kernel_sin+0x124>)
 801b8d2:	9000      	str	r0, [sp, #0]
 801b8d4:	9101      	str	r1, [sp, #4]
 801b8d6:	4b39      	ldr	r3, [pc, #228]	; (801b9bc <__kernel_sin+0x128>)
 801b8d8:	0020      	movs	r0, r4
 801b8da:	0029      	movs	r1, r5
 801b8dc:	f7ed ffe8 	bl	80098b0 <__aeabi_dmul>
 801b8e0:	4a37      	ldr	r2, [pc, #220]	; (801b9c0 <__kernel_sin+0x12c>)
 801b8e2:	4b38      	ldr	r3, [pc, #224]	; (801b9c4 <__kernel_sin+0x130>)
 801b8e4:	f7ee fa50 	bl	8009d88 <__aeabi_dsub>
 801b8e8:	0022      	movs	r2, r4
 801b8ea:	002b      	movs	r3, r5
 801b8ec:	f7ed ffe0 	bl	80098b0 <__aeabi_dmul>
 801b8f0:	4a35      	ldr	r2, [pc, #212]	; (801b9c8 <__kernel_sin+0x134>)
 801b8f2:	4b36      	ldr	r3, [pc, #216]	; (801b9cc <__kernel_sin+0x138>)
 801b8f4:	f7ed f89e 	bl	8008a34 <__aeabi_dadd>
 801b8f8:	0022      	movs	r2, r4
 801b8fa:	002b      	movs	r3, r5
 801b8fc:	f7ed ffd8 	bl	80098b0 <__aeabi_dmul>
 801b900:	4a33      	ldr	r2, [pc, #204]	; (801b9d0 <__kernel_sin+0x13c>)
 801b902:	4b34      	ldr	r3, [pc, #208]	; (801b9d4 <__kernel_sin+0x140>)
 801b904:	f7ee fa40 	bl	8009d88 <__aeabi_dsub>
 801b908:	0022      	movs	r2, r4
 801b90a:	002b      	movs	r3, r5
 801b90c:	f7ed ffd0 	bl	80098b0 <__aeabi_dmul>
 801b910:	4b31      	ldr	r3, [pc, #196]	; (801b9d8 <__kernel_sin+0x144>)
 801b912:	4a32      	ldr	r2, [pc, #200]	; (801b9dc <__kernel_sin+0x148>)
 801b914:	f7ed f88e 	bl	8008a34 <__aeabi_dadd>
 801b918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b91a:	9004      	str	r0, [sp, #16]
 801b91c:	9105      	str	r1, [sp, #20]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d119      	bne.n	801b956 <__kernel_sin+0xc2>
 801b922:	0002      	movs	r2, r0
 801b924:	000b      	movs	r3, r1
 801b926:	0020      	movs	r0, r4
 801b928:	0029      	movs	r1, r5
 801b92a:	f7ed ffc1 	bl	80098b0 <__aeabi_dmul>
 801b92e:	4a2c      	ldr	r2, [pc, #176]	; (801b9e0 <__kernel_sin+0x14c>)
 801b930:	4b2c      	ldr	r3, [pc, #176]	; (801b9e4 <__kernel_sin+0x150>)
 801b932:	f7ee fa29 	bl	8009d88 <__aeabi_dsub>
 801b936:	9a00      	ldr	r2, [sp, #0]
 801b938:	9b01      	ldr	r3, [sp, #4]
 801b93a:	f7ed ffb9 	bl	80098b0 <__aeabi_dmul>
 801b93e:	0002      	movs	r2, r0
 801b940:	000b      	movs	r3, r1
 801b942:	0038      	movs	r0, r7
 801b944:	0031      	movs	r1, r6
 801b946:	f7ed f875 	bl	8008a34 <__aeabi_dadd>
 801b94a:	0007      	movs	r7, r0
 801b94c:	000e      	movs	r6, r1
 801b94e:	0038      	movs	r0, r7
 801b950:	0031      	movs	r1, r6
 801b952:	b009      	add	sp, #36	; 0x24
 801b954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b956:	2200      	movs	r2, #0
 801b958:	9802      	ldr	r0, [sp, #8]
 801b95a:	9903      	ldr	r1, [sp, #12]
 801b95c:	4b22      	ldr	r3, [pc, #136]	; (801b9e8 <__kernel_sin+0x154>)
 801b95e:	f7ed ffa7 	bl	80098b0 <__aeabi_dmul>
 801b962:	9a04      	ldr	r2, [sp, #16]
 801b964:	9b05      	ldr	r3, [sp, #20]
 801b966:	9006      	str	r0, [sp, #24]
 801b968:	9107      	str	r1, [sp, #28]
 801b96a:	9800      	ldr	r0, [sp, #0]
 801b96c:	9901      	ldr	r1, [sp, #4]
 801b96e:	f7ed ff9f 	bl	80098b0 <__aeabi_dmul>
 801b972:	0002      	movs	r2, r0
 801b974:	000b      	movs	r3, r1
 801b976:	9806      	ldr	r0, [sp, #24]
 801b978:	9907      	ldr	r1, [sp, #28]
 801b97a:	f7ee fa05 	bl	8009d88 <__aeabi_dsub>
 801b97e:	0022      	movs	r2, r4
 801b980:	002b      	movs	r3, r5
 801b982:	f7ed ff95 	bl	80098b0 <__aeabi_dmul>
 801b986:	9a02      	ldr	r2, [sp, #8]
 801b988:	9b03      	ldr	r3, [sp, #12]
 801b98a:	f7ee f9fd 	bl	8009d88 <__aeabi_dsub>
 801b98e:	4a14      	ldr	r2, [pc, #80]	; (801b9e0 <__kernel_sin+0x14c>)
 801b990:	0004      	movs	r4, r0
 801b992:	000d      	movs	r5, r1
 801b994:	9800      	ldr	r0, [sp, #0]
 801b996:	9901      	ldr	r1, [sp, #4]
 801b998:	4b12      	ldr	r3, [pc, #72]	; (801b9e4 <__kernel_sin+0x150>)
 801b99a:	f7ed ff89 	bl	80098b0 <__aeabi_dmul>
 801b99e:	0002      	movs	r2, r0
 801b9a0:	000b      	movs	r3, r1
 801b9a2:	0020      	movs	r0, r4
 801b9a4:	0029      	movs	r1, r5
 801b9a6:	f7ed f845 	bl	8008a34 <__aeabi_dadd>
 801b9aa:	0002      	movs	r2, r0
 801b9ac:	000b      	movs	r3, r1
 801b9ae:	0038      	movs	r0, r7
 801b9b0:	0031      	movs	r1, r6
 801b9b2:	f7ee f9e9 	bl	8009d88 <__aeabi_dsub>
 801b9b6:	e7c8      	b.n	801b94a <__kernel_sin+0xb6>
 801b9b8:	5acfd57c 	.word	0x5acfd57c
 801b9bc:	3de5d93a 	.word	0x3de5d93a
 801b9c0:	8a2b9ceb 	.word	0x8a2b9ceb
 801b9c4:	3e5ae5e6 	.word	0x3e5ae5e6
 801b9c8:	57b1fe7d 	.word	0x57b1fe7d
 801b9cc:	3ec71de3 	.word	0x3ec71de3
 801b9d0:	19c161d5 	.word	0x19c161d5
 801b9d4:	3f2a01a0 	.word	0x3f2a01a0
 801b9d8:	3f811111 	.word	0x3f811111
 801b9dc:	1110f8a6 	.word	0x1110f8a6
 801b9e0:	55555549 	.word	0x55555549
 801b9e4:	3fc55555 	.word	0x3fc55555
 801b9e8:	3fe00000 	.word	0x3fe00000

0801b9ec <floor>:
 801b9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b9ee:	004b      	lsls	r3, r1, #1
 801b9f0:	4a3d      	ldr	r2, [pc, #244]	; (801bae8 <floor+0xfc>)
 801b9f2:	0d5b      	lsrs	r3, r3, #21
 801b9f4:	189f      	adds	r7, r3, r2
 801b9f6:	4684      	mov	ip, r0
 801b9f8:	000e      	movs	r6, r1
 801b9fa:	000d      	movs	r5, r1
 801b9fc:	0004      	movs	r4, r0
 801b9fe:	9001      	str	r0, [sp, #4]
 801ba00:	2f13      	cmp	r7, #19
 801ba02:	dc34      	bgt.n	801ba6e <floor+0x82>
 801ba04:	2f00      	cmp	r7, #0
 801ba06:	da16      	bge.n	801ba36 <floor+0x4a>
 801ba08:	4a38      	ldr	r2, [pc, #224]	; (801baec <floor+0x100>)
 801ba0a:	4b39      	ldr	r3, [pc, #228]	; (801baf0 <floor+0x104>)
 801ba0c:	4660      	mov	r0, ip
 801ba0e:	0031      	movs	r1, r6
 801ba10:	f7ed f810 	bl	8008a34 <__aeabi_dadd>
 801ba14:	2200      	movs	r2, #0
 801ba16:	2300      	movs	r3, #0
 801ba18:	f7ec f9d2 	bl	8007dc0 <__aeabi_dcmpgt>
 801ba1c:	2800      	cmp	r0, #0
 801ba1e:	d007      	beq.n	801ba30 <floor+0x44>
 801ba20:	2e00      	cmp	r6, #0
 801ba22:	da5d      	bge.n	801bae0 <floor+0xf4>
 801ba24:	0073      	lsls	r3, r6, #1
 801ba26:	085b      	lsrs	r3, r3, #1
 801ba28:	431c      	orrs	r4, r3
 801ba2a:	d001      	beq.n	801ba30 <floor+0x44>
 801ba2c:	2400      	movs	r4, #0
 801ba2e:	4d31      	ldr	r5, [pc, #196]	; (801baf4 <floor+0x108>)
 801ba30:	46a4      	mov	ip, r4
 801ba32:	002e      	movs	r6, r5
 801ba34:	e029      	b.n	801ba8a <floor+0x9e>
 801ba36:	4b30      	ldr	r3, [pc, #192]	; (801baf8 <floor+0x10c>)
 801ba38:	413b      	asrs	r3, r7
 801ba3a:	9300      	str	r3, [sp, #0]
 801ba3c:	400b      	ands	r3, r1
 801ba3e:	4303      	orrs	r3, r0
 801ba40:	d023      	beq.n	801ba8a <floor+0x9e>
 801ba42:	4a2a      	ldr	r2, [pc, #168]	; (801baec <floor+0x100>)
 801ba44:	4b2a      	ldr	r3, [pc, #168]	; (801baf0 <floor+0x104>)
 801ba46:	4660      	mov	r0, ip
 801ba48:	0031      	movs	r1, r6
 801ba4a:	f7ec fff3 	bl	8008a34 <__aeabi_dadd>
 801ba4e:	2200      	movs	r2, #0
 801ba50:	2300      	movs	r3, #0
 801ba52:	f7ec f9b5 	bl	8007dc0 <__aeabi_dcmpgt>
 801ba56:	2800      	cmp	r0, #0
 801ba58:	d0ea      	beq.n	801ba30 <floor+0x44>
 801ba5a:	2e00      	cmp	r6, #0
 801ba5c:	da03      	bge.n	801ba66 <floor+0x7a>
 801ba5e:	2380      	movs	r3, #128	; 0x80
 801ba60:	035b      	lsls	r3, r3, #13
 801ba62:	413b      	asrs	r3, r7
 801ba64:	18f5      	adds	r5, r6, r3
 801ba66:	9b00      	ldr	r3, [sp, #0]
 801ba68:	2400      	movs	r4, #0
 801ba6a:	439d      	bics	r5, r3
 801ba6c:	e7e0      	b.n	801ba30 <floor+0x44>
 801ba6e:	2f33      	cmp	r7, #51	; 0x33
 801ba70:	dd0f      	ble.n	801ba92 <floor+0xa6>
 801ba72:	2380      	movs	r3, #128	; 0x80
 801ba74:	00db      	lsls	r3, r3, #3
 801ba76:	429f      	cmp	r7, r3
 801ba78:	d107      	bne.n	801ba8a <floor+0x9e>
 801ba7a:	0002      	movs	r2, r0
 801ba7c:	000b      	movs	r3, r1
 801ba7e:	4660      	mov	r0, ip
 801ba80:	0031      	movs	r1, r6
 801ba82:	f7ec ffd7 	bl	8008a34 <__aeabi_dadd>
 801ba86:	4684      	mov	ip, r0
 801ba88:	000e      	movs	r6, r1
 801ba8a:	4660      	mov	r0, ip
 801ba8c:	0031      	movs	r1, r6
 801ba8e:	b003      	add	sp, #12
 801ba90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba92:	4a1a      	ldr	r2, [pc, #104]	; (801bafc <floor+0x110>)
 801ba94:	189b      	adds	r3, r3, r2
 801ba96:	2201      	movs	r2, #1
 801ba98:	4252      	negs	r2, r2
 801ba9a:	40da      	lsrs	r2, r3
 801ba9c:	9200      	str	r2, [sp, #0]
 801ba9e:	4210      	tst	r0, r2
 801baa0:	d0f3      	beq.n	801ba8a <floor+0x9e>
 801baa2:	4a12      	ldr	r2, [pc, #72]	; (801baec <floor+0x100>)
 801baa4:	4b12      	ldr	r3, [pc, #72]	; (801baf0 <floor+0x104>)
 801baa6:	4660      	mov	r0, ip
 801baa8:	0031      	movs	r1, r6
 801baaa:	f7ec ffc3 	bl	8008a34 <__aeabi_dadd>
 801baae:	2200      	movs	r2, #0
 801bab0:	2300      	movs	r3, #0
 801bab2:	f7ec f985 	bl	8007dc0 <__aeabi_dcmpgt>
 801bab6:	2800      	cmp	r0, #0
 801bab8:	d0ba      	beq.n	801ba30 <floor+0x44>
 801baba:	2e00      	cmp	r6, #0
 801babc:	da02      	bge.n	801bac4 <floor+0xd8>
 801babe:	2f14      	cmp	r7, #20
 801bac0:	d103      	bne.n	801baca <floor+0xde>
 801bac2:	3501      	adds	r5, #1
 801bac4:	9b00      	ldr	r3, [sp, #0]
 801bac6:	439c      	bics	r4, r3
 801bac8:	e7b2      	b.n	801ba30 <floor+0x44>
 801baca:	2334      	movs	r3, #52	; 0x34
 801bacc:	1bdf      	subs	r7, r3, r7
 801bace:	3b33      	subs	r3, #51	; 0x33
 801bad0:	40bb      	lsls	r3, r7
 801bad2:	18e4      	adds	r4, r4, r3
 801bad4:	9b01      	ldr	r3, [sp, #4]
 801bad6:	429c      	cmp	r4, r3
 801bad8:	419b      	sbcs	r3, r3
 801bada:	425b      	negs	r3, r3
 801badc:	18f5      	adds	r5, r6, r3
 801bade:	e7f1      	b.n	801bac4 <floor+0xd8>
 801bae0:	2400      	movs	r4, #0
 801bae2:	0025      	movs	r5, r4
 801bae4:	e7a4      	b.n	801ba30 <floor+0x44>
 801bae6:	46c0      	nop			; (mov r8, r8)
 801bae8:	fffffc01 	.word	0xfffffc01
 801baec:	8800759c 	.word	0x8800759c
 801baf0:	7e37e43c 	.word	0x7e37e43c
 801baf4:	bff00000 	.word	0xbff00000
 801baf8:	000fffff 	.word	0x000fffff
 801bafc:	fffffbed 	.word	0xfffffbed

0801bb00 <scalbn>:
 801bb00:	004b      	lsls	r3, r1, #1
 801bb02:	b570      	push	{r4, r5, r6, lr}
 801bb04:	0d5b      	lsrs	r3, r3, #21
 801bb06:	0014      	movs	r4, r2
 801bb08:	000a      	movs	r2, r1
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d10d      	bne.n	801bb2a <scalbn+0x2a>
 801bb0e:	004b      	lsls	r3, r1, #1
 801bb10:	085b      	lsrs	r3, r3, #1
 801bb12:	4303      	orrs	r3, r0
 801bb14:	d010      	beq.n	801bb38 <scalbn+0x38>
 801bb16:	4b27      	ldr	r3, [pc, #156]	; (801bbb4 <scalbn+0xb4>)
 801bb18:	2200      	movs	r2, #0
 801bb1a:	f7ed fec9 	bl	80098b0 <__aeabi_dmul>
 801bb1e:	4b26      	ldr	r3, [pc, #152]	; (801bbb8 <scalbn+0xb8>)
 801bb20:	429c      	cmp	r4, r3
 801bb22:	da0a      	bge.n	801bb3a <scalbn+0x3a>
 801bb24:	4a25      	ldr	r2, [pc, #148]	; (801bbbc <scalbn+0xbc>)
 801bb26:	4b26      	ldr	r3, [pc, #152]	; (801bbc0 <scalbn+0xc0>)
 801bb28:	e019      	b.n	801bb5e <scalbn+0x5e>
 801bb2a:	4d26      	ldr	r5, [pc, #152]	; (801bbc4 <scalbn+0xc4>)
 801bb2c:	42ab      	cmp	r3, r5
 801bb2e:	d108      	bne.n	801bb42 <scalbn+0x42>
 801bb30:	0002      	movs	r2, r0
 801bb32:	000b      	movs	r3, r1
 801bb34:	f7ec ff7e 	bl	8008a34 <__aeabi_dadd>
 801bb38:	bd70      	pop	{r4, r5, r6, pc}
 801bb3a:	000a      	movs	r2, r1
 801bb3c:	004b      	lsls	r3, r1, #1
 801bb3e:	0d5b      	lsrs	r3, r3, #21
 801bb40:	3b36      	subs	r3, #54	; 0x36
 801bb42:	4d21      	ldr	r5, [pc, #132]	; (801bbc8 <scalbn+0xc8>)
 801bb44:	18e3      	adds	r3, r4, r3
 801bb46:	42ab      	cmp	r3, r5
 801bb48:	dd0c      	ble.n	801bb64 <scalbn+0x64>
 801bb4a:	4c20      	ldr	r4, [pc, #128]	; (801bbcc <scalbn+0xcc>)
 801bb4c:	4d20      	ldr	r5, [pc, #128]	; (801bbd0 <scalbn+0xd0>)
 801bb4e:	2900      	cmp	r1, #0
 801bb50:	da01      	bge.n	801bb56 <scalbn+0x56>
 801bb52:	4c1e      	ldr	r4, [pc, #120]	; (801bbcc <scalbn+0xcc>)
 801bb54:	4d1f      	ldr	r5, [pc, #124]	; (801bbd4 <scalbn+0xd4>)
 801bb56:	0020      	movs	r0, r4
 801bb58:	0029      	movs	r1, r5
 801bb5a:	4a1c      	ldr	r2, [pc, #112]	; (801bbcc <scalbn+0xcc>)
 801bb5c:	4b1c      	ldr	r3, [pc, #112]	; (801bbd0 <scalbn+0xd0>)
 801bb5e:	f7ed fea7 	bl	80098b0 <__aeabi_dmul>
 801bb62:	e7e9      	b.n	801bb38 <scalbn+0x38>
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	dd05      	ble.n	801bb74 <scalbn+0x74>
 801bb68:	4c1b      	ldr	r4, [pc, #108]	; (801bbd8 <scalbn+0xd8>)
 801bb6a:	051b      	lsls	r3, r3, #20
 801bb6c:	4022      	ands	r2, r4
 801bb6e:	431a      	orrs	r2, r3
 801bb70:	0011      	movs	r1, r2
 801bb72:	e7e1      	b.n	801bb38 <scalbn+0x38>
 801bb74:	001d      	movs	r5, r3
 801bb76:	3535      	adds	r5, #53	; 0x35
 801bb78:	da13      	bge.n	801bba2 <scalbn+0xa2>
 801bb7a:	4a18      	ldr	r2, [pc, #96]	; (801bbdc <scalbn+0xdc>)
 801bb7c:	0fcb      	lsrs	r3, r1, #31
 801bb7e:	4294      	cmp	r4, r2
 801bb80:	dd08      	ble.n	801bb94 <scalbn+0x94>
 801bb82:	4812      	ldr	r0, [pc, #72]	; (801bbcc <scalbn+0xcc>)
 801bb84:	4912      	ldr	r1, [pc, #72]	; (801bbd0 <scalbn+0xd0>)
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d001      	beq.n	801bb8e <scalbn+0x8e>
 801bb8a:	4810      	ldr	r0, [pc, #64]	; (801bbcc <scalbn+0xcc>)
 801bb8c:	4911      	ldr	r1, [pc, #68]	; (801bbd4 <scalbn+0xd4>)
 801bb8e:	4a0f      	ldr	r2, [pc, #60]	; (801bbcc <scalbn+0xcc>)
 801bb90:	4b0f      	ldr	r3, [pc, #60]	; (801bbd0 <scalbn+0xd0>)
 801bb92:	e7e4      	b.n	801bb5e <scalbn+0x5e>
 801bb94:	4809      	ldr	r0, [pc, #36]	; (801bbbc <scalbn+0xbc>)
 801bb96:	490a      	ldr	r1, [pc, #40]	; (801bbc0 <scalbn+0xc0>)
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d0c3      	beq.n	801bb24 <scalbn+0x24>
 801bb9c:	4807      	ldr	r0, [pc, #28]	; (801bbbc <scalbn+0xbc>)
 801bb9e:	4910      	ldr	r1, [pc, #64]	; (801bbe0 <scalbn+0xe0>)
 801bba0:	e7c0      	b.n	801bb24 <scalbn+0x24>
 801bba2:	4c0d      	ldr	r4, [pc, #52]	; (801bbd8 <scalbn+0xd8>)
 801bba4:	3336      	adds	r3, #54	; 0x36
 801bba6:	4022      	ands	r2, r4
 801bba8:	051b      	lsls	r3, r3, #20
 801bbaa:	4313      	orrs	r3, r2
 801bbac:	0019      	movs	r1, r3
 801bbae:	2200      	movs	r2, #0
 801bbb0:	4b0c      	ldr	r3, [pc, #48]	; (801bbe4 <scalbn+0xe4>)
 801bbb2:	e7d4      	b.n	801bb5e <scalbn+0x5e>
 801bbb4:	43500000 	.word	0x43500000
 801bbb8:	ffff3cb0 	.word	0xffff3cb0
 801bbbc:	c2f8f359 	.word	0xc2f8f359
 801bbc0:	01a56e1f 	.word	0x01a56e1f
 801bbc4:	000007ff 	.word	0x000007ff
 801bbc8:	000007fe 	.word	0x000007fe
 801bbcc:	8800759c 	.word	0x8800759c
 801bbd0:	7e37e43c 	.word	0x7e37e43c
 801bbd4:	fe37e43c 	.word	0xfe37e43c
 801bbd8:	800fffff 	.word	0x800fffff
 801bbdc:	0000c350 	.word	0x0000c350
 801bbe0:	81a56e1f 	.word	0x81a56e1f
 801bbe4:	3c900000 	.word	0x3c900000

0801bbe8 <_init>:
 801bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbea:	46c0      	nop			; (mov r8, r8)
 801bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbee:	bc08      	pop	{r3}
 801bbf0:	469e      	mov	lr, r3
 801bbf2:	4770      	bx	lr

0801bbf4 <_fini>:
 801bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbf6:	46c0      	nop			; (mov r8, r8)
 801bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbfa:	bc08      	pop	{r3}
 801bbfc:	469e      	mov	lr, r3
 801bbfe:	4770      	bx	lr
